
SmartInverGenHub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013d18  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000149c  08013ea8  08013ea8  00014ea8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .font.u8g2_font_5x8_mf 000007db  08015344  08015344  00016344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000001  08015b1f  08015b1f  00016b1f  2**0
                  ALLOC
  5 .ARM          00000008  08015b20  08015b20  00016b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08015b28  08015b28  00017470  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000014  08015b28  08015b28  00016b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  08015b3c  08015b3c  00016b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000470  20000000  08015b40  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .ccmram       00000000  10000000  10000000  00017470  2**0
                  CONTENTS
 11 .bss          0000c860  20000470  20000470  00017470  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  2000ccd0  2000ccd0  00017470  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00017470  2**0
                  CONTENTS, READONLY
 14 .debug_info   000627e9  00000000  00000000  000174a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000b283  00000000  00000000  00079c89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000035b8  00000000  00000000  00084f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000028ef  00000000  00000000  000884c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00034b2f  00000000  00000000  0008adb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004805f  00000000  00000000  000bf8e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00109094  00000000  00000000  00107945  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  002109d9  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000f0ac  00000000  00000000  00210a1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000060  00000000  00000000  0021fac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000470 	.word	0x20000470
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013e90 	.word	0x08013e90

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000474 	.word	0x20000474
 80001cc:	08013e90 	.word	0x08013e90

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <_Z11ControlTaskPv>:

char batTime[20];



void ControlTask(void *pvParameters) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b0d8      	sub	sp, #352	@ 0x160
 8000edc:	af02      	add	r7, sp, #8
 8000ede:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000ee2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8000ee6:	6018      	str	r0, [r3, #0]

	struct ModemData_Queue ModemData = { 0 };
 8000ee8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000eec:	22d9      	movs	r2, #217	@ 0xd9
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f010 fe6e 	bl	8011bd2 <memset>

	struct ControlData_Queue ControlData = { 0 };
 8000ef6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000efa:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8000efe:	4618      	mov	r0, r3
 8000f00:	2374      	movs	r3, #116	@ 0x74
 8000f02:	461a      	mov	r2, r3
 8000f04:	2100      	movs	r1, #0
 8000f06:	f010 fe64 	bl	8011bd2 <memset>



	System_Rtos::delay(1000);
 8000f0a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f0e:	f003 f96d 	bl	80041ec <_ZN11System_Rtos5delayEm>


	//parsing.convertEpochToSTMTime(&hrtc, 1732186868, 5);

	std::strcpy(ControlData.uniqueID, UniqueID::GetUid());
 8000f12:	f000 fd5b 	bl	80019cc <_ZN8UniqueID6GetUidEv>
 8000f16:	4602      	mov	r2, r0
 8000f18:	f107 0308 	add.w	r3, r7, #8
 8000f1c:	4611      	mov	r1, r2
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f010 ff63 	bl	8011dea <strcpy>

	while (1) {



		stmRTC.getTime(nullptr, nullptr, &ControlData.timestamp);
 8000f24:	f107 0308 	add.w	r3, r7, #8
 8000f28:	3310      	adds	r3, #16
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4847      	ldr	r0, [pc, #284]	@ (800104c <_Z11ControlTaskPv+0x174>)
 8000f30:	f003 fb13 	bl	800455a <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPm>
//		std::sprintf(time, "%02d:%02d:%02d", sTime.Hours, sTime.Minutes,
//				sTime.Seconds);
//		std::sprintf(date, "%02d-%s-%02d", sDate.Date, months[sDate.Month],
//				sDate.Year);

		if (ModemDataQueue.queueReceive((void*) &ModemData)
 8000f34:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4845      	ldr	r0, [pc, #276]	@ (8001050 <_Z11ControlTaskPv+0x178>)
 8000f3c:	f003 f9fb 	bl	8004336 <_ZN11System_Rtos15freertos_queues12queueReceiveEPv>
 8000f40:	4603      	mov	r3, r0
				== ModemDataQueue.queues_recived) {
 8000f42:	2b00      	cmp	r3, #0
////
////			LCD.SendFloatData(LCD.energy, ControlData.Energy);
//
//		}

		if ((batt_charging_status & 0x07) == SCC_AC_charge_on
 8000f44:	4b43      	ldr	r3, [pc, #268]	@ (8001054 <_Z11ControlTaskPv+0x17c>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	f003 0307 	and.w	r3, r3, #7
 8000f4c:	2b07      	cmp	r3, #7
 8000f4e:	d00b      	beq.n	8000f68 <_Z11ControlTaskPv+0x90>
				|| (batt_charging_status & 0x07) == SCC_charge_on
 8000f50:	4b40      	ldr	r3, [pc, #256]	@ (8001054 <_Z11ControlTaskPv+0x17c>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	f003 0307 	and.w	r3, r3, #7
 8000f58:	2b06      	cmp	r3, #6
 8000f5a:	d005      	beq.n	8000f68 <_Z11ControlTaskPv+0x90>
				|| (batt_charging_status & 0x07) == AC_charge_on) {
 8000f5c:	4b3d      	ldr	r3, [pc, #244]	@ (8001054 <_Z11ControlTaskPv+0x17c>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	f003 0307 	and.w	r3, r3, #7
 8000f64:	2b05      	cmp	r3, #5
 8000f66:	d11f      	bne.n	8000fa8 <_Z11ControlTaskPv+0xd0>
			if (!batt_chargetimekeeping_Flag) {
 8000f68:	4b3b      	ldr	r3, [pc, #236]	@ (8001058 <_Z11ControlTaskPv+0x180>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d13a      	bne.n	8000fe6 <_Z11ControlTaskPv+0x10e>
				batt_chargetimekeeping_Flag = 1;
 8000f70:	4b39      	ldr	r3, [pc, #228]	@ (8001058 <_Z11ControlTaskPv+0x180>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	701a      	strb	r2, [r3, #0]
				ControlData.batteryChargeStartTime = ControlData.timestamp;
 8000f76:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000f7a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8000f7e:	691a      	ldr	r2, [r3, #16]
 8000f80:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000f84:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8000f88:	665a      	str	r2, [r3, #100]	@ 0x64
				std::sprintf(batTime, "%02d:%02d:%02d", sTime.Hours,
 8000f8a:	4b34      	ldr	r3, [pc, #208]	@ (800105c <_Z11ControlTaskPv+0x184>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	461a      	mov	r2, r3
						sTime.Minutes, sTime.Seconds);
 8000f90:	4b32      	ldr	r3, [pc, #200]	@ (800105c <_Z11ControlTaskPv+0x184>)
 8000f92:	785b      	ldrb	r3, [r3, #1]
				std::sprintf(batTime, "%02d:%02d:%02d", sTime.Hours,
 8000f94:	4619      	mov	r1, r3
						sTime.Minutes, sTime.Seconds);
 8000f96:	4b31      	ldr	r3, [pc, #196]	@ (800105c <_Z11ControlTaskPv+0x184>)
 8000f98:	789b      	ldrb	r3, [r3, #2]
				std::sprintf(batTime, "%02d:%02d:%02d", sTime.Hours,
 8000f9a:	9300      	str	r3, [sp, #0]
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	4930      	ldr	r1, [pc, #192]	@ (8001060 <_Z11ControlTaskPv+0x188>)
 8000fa0:	4830      	ldr	r0, [pc, #192]	@ (8001064 <_Z11ControlTaskPv+0x18c>)
 8000fa2:	f010 fdb3 	bl	8011b0c <siprintf>
			if (!batt_chargetimekeeping_Flag) {
 8000fa6:	e01e      	b.n	8000fe6 <_Z11ControlTaskPv+0x10e>
//				LCD.SendTextData(LCD.chrgT, batTime);
			}
		} else {
			if (batt_chargetimekeeping_Flag) {
 8000fa8:	4b2b      	ldr	r3, [pc, #172]	@ (8001058 <_Z11ControlTaskPv+0x180>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d01a      	beq.n	8000fe6 <_Z11ControlTaskPv+0x10e>
				batt_chargetimekeeping_Flag = 0;
 8000fb0:	4b29      	ldr	r3, [pc, #164]	@ (8001058 <_Z11ControlTaskPv+0x180>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	701a      	strb	r2, [r3, #0]
				ControlData.batteryChargeEndTime = ControlData.timestamp;
 8000fb6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000fba:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8000fbe:	691a      	ldr	r2, [r3, #16]
 8000fc0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000fc4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8000fc8:	669a      	str	r2, [r3, #104]	@ 0x68
				std::sprintf(batTime, "%02d:%02d:%02d", sTime.Hours,
 8000fca:	4b24      	ldr	r3, [pc, #144]	@ (800105c <_Z11ControlTaskPv+0x184>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	461a      	mov	r2, r3
						sTime.Minutes, sTime.Seconds);
 8000fd0:	4b22      	ldr	r3, [pc, #136]	@ (800105c <_Z11ControlTaskPv+0x184>)
 8000fd2:	785b      	ldrb	r3, [r3, #1]
				std::sprintf(batTime, "%02d:%02d:%02d", sTime.Hours,
 8000fd4:	4619      	mov	r1, r3
						sTime.Minutes, sTime.Seconds);
 8000fd6:	4b21      	ldr	r3, [pc, #132]	@ (800105c <_Z11ControlTaskPv+0x184>)
 8000fd8:	789b      	ldrb	r3, [r3, #2]
				std::sprintf(batTime, "%02d:%02d:%02d", sTime.Hours,
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	460b      	mov	r3, r1
 8000fde:	4920      	ldr	r1, [pc, #128]	@ (8001060 <_Z11ControlTaskPv+0x188>)
 8000fe0:	4820      	ldr	r0, [pc, #128]	@ (8001064 <_Z11ControlTaskPv+0x18c>)
 8000fe2:	f010 fd93 	bl	8011b0c <siprintf>
//				LCD.SendTextData(LCD.dchgT, batTime);
			}
		}

		liquidSensor.Measurement_loop( &ControlData.fuelPer, &ControlData.fuelConsp,
 8000fe6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000fea:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8000fee:	6918      	ldr	r0, [r3, #16]
 8000ff0:	f107 0308 	add.w	r3, r7, #8
 8000ff4:	f103 0254 	add.w	r2, r3, #84	@ 0x54
 8000ff8:	f107 0308 	add.w	r3, r7, #8
 8000ffc:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 8001000:	f107 0308 	add.w	r3, r7, #8
 8001004:	335c      	adds	r3, #92	@ 0x5c
 8001006:	9301      	str	r3, [sp, #4]
 8001008:	f107 0308 	add.w	r3, r7, #8
 800100c:	3358      	adds	r3, #88	@ 0x58
 800100e:	9300      	str	r3, [sp, #0]
 8001010:	4603      	mov	r3, r0
 8001012:	4815      	ldr	r0, [pc, #84]	@ (8001068 <_Z11ControlTaskPv+0x190>)
 8001014:	f002 febc 	bl	8003d90 <_ZN17sensor_liquidMeas12liquidSensor16Measurement_loopEPhPfmPmS3_>
				ControlData.timestamp, &ControlData.refuelingStartTime,
				&ControlData.refuelingEndTime);
		AHT20.measure(&ControlData.temp, &ControlData.humid);
 8001018:	f107 0308 	add.w	r3, r7, #8
 800101c:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8001020:	f107 0308 	add.w	r3, r7, #8
 8001024:	336c      	adds	r3, #108	@ 0x6c
 8001026:	4619      	mov	r1, r3
 8001028:	4810      	ldr	r0, [pc, #64]	@ (800106c <_Z11ControlTaskPv+0x194>)
 800102a:	f002 fd43 	bl	8003ab4 <_ZN15sensor_TempHumd5AHT207measureEPmS1_>
//		LCD.SendNumericData(LCD.Temperature,
//				static_cast<uint16_t>(ControlData.temp));
//		LCD.SendNumericData(LCD.Humidity,
//				static_cast<uint16_t>(ControlData.humid));

		ControlDataQueue.queueSend(reinterpret_cast<void*>(&ControlData));
 800102e:	f107 0308 	add.w	r3, r7, #8
 8001032:	4619      	mov	r1, r3
 8001034:	480e      	ldr	r0, [pc, #56]	@ (8001070 <_Z11ControlTaskPv+0x198>)
 8001036:	f003 f961 	bl	80042fc <_ZN11System_Rtos15freertos_queues9queueSendEPv>

		HAL_GPIO_TogglePin(alive_led_GPIO_Port, alive_led_Pin);
 800103a:	2102      	movs	r1, #2
 800103c:	480d      	ldr	r0, [pc, #52]	@ (8001074 <_Z11ControlTaskPv+0x19c>)
 800103e:	f008 ffb0 	bl	8009fa2 <HAL_GPIO_TogglePin>
		System_Rtos::delay(150);
 8001042:	2096      	movs	r0, #150	@ 0x96
 8001044:	f003 f8d2 	bl	80041ec <_ZN11System_Rtos5delayEm>
		stmRTC.getTime(nullptr, nullptr, &ControlData.timestamp);
 8001048:	e76c      	b.n	8000f24 <_Z11ControlTaskPv+0x4c>
 800104a:	bf00      	nop
 800104c:	200018dc 	.word	0x200018dc
 8001050:	200017b0 	.word	0x200017b0
 8001054:	200004a1 	.word	0x200004a1
 8001058:	200004a2 	.word	0x200004a2
 800105c:	2000048c 	.word	0x2000048c
 8001060:	08013ea8 	.word	0x08013ea8
 8001064:	200004a4 	.word	0x200004a4
 8001068:	200018ec 	.word	0x200018ec
 800106c:	20001928 	.word	0x20001928
 8001070:	20001880 	.word	0x20001880
 8001074:	40020000 	.word	0x40020000

08001078 <_Z41__static_initialization_and_destruction_0ii>:
	}

}
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2b01      	cmp	r3, #1
 8001086:	d107      	bne.n	8001098 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800108e:	4293      	cmp	r3, r2
 8001090:	d102      	bne.n	8001098 <_Z41__static_initialization_and_destruction_0ii+0x20>
System_sys::Parsing_Checking parsing;
 8001092:	4803      	ldr	r0, [pc, #12]	@ (80010a0 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8001094:	f003 fd1c 	bl	8004ad0 <_ZN10System_sys16Parsing_CheckingC1Ev>
}
 8001098:	bf00      	nop
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	200004a0 	.word	0x200004a0

080010a4 <_GLOBAL__sub_I_sDate>:
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80010ac:	2001      	movs	r0, #1
 80010ae:	f7ff ffe3 	bl	8001078 <_Z41__static_initialization_and_destruction_0ii>
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <_Z25u8x8_stm32_gpio_and_delayP11u8x8_structhhPv>:

u8g2_t u8g2_M;


uint8_t u8x8_stm32_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
  {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	607b      	str	r3, [r7, #4]
 80010be:	460b      	mov	r3, r1
 80010c0:	72fb      	strb	r3, [r7, #11]
 80010c2:	4613      	mov	r3, r2
 80010c4:	72bb      	strb	r3, [r7, #10]
      /* STM32 supports HW SPI, Remove unused cases like U8X8_MSG_DELAY_XXX & U8X8_MSG_GPIO_XXX */
      switch(msg)
 80010c6:	7afb      	ldrb	r3, [r7, #11]
 80010c8:	3b28      	subs	r3, #40	@ 0x28
 80010ca:	2b23      	cmp	r3, #35	@ 0x23
 80010cc:	d867      	bhi.n	800119e <_Z25u8x8_stm32_gpio_and_delayP11u8x8_structhhPv+0xea>
 80010ce:	a201      	add	r2, pc, #4	@ (adr r2, 80010d4 <_Z25u8x8_stm32_gpio_and_delayP11u8x8_structhhPv+0x20>)
 80010d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010d4:	0800119f 	.word	0x0800119f
 80010d8:	08001165 	.word	0x08001165
 80010dc:	0800119f 	.word	0x0800119f
 80010e0:	0800119f 	.word	0x0800119f
 80010e4:	0800119f 	.word	0x0800119f
 80010e8:	0800119f 	.word	0x0800119f
 80010ec:	0800119f 	.word	0x0800119f
 80010f0:	0800119f 	.word	0x0800119f
 80010f4:	0800119f 	.word	0x0800119f
 80010f8:	0800119f 	.word	0x0800119f
 80010fc:	0800119f 	.word	0x0800119f
 8001100:	0800119f 	.word	0x0800119f
 8001104:	0800119f 	.word	0x0800119f
 8001108:	0800119f 	.word	0x0800119f
 800110c:	0800119f 	.word	0x0800119f
 8001110:	0800119f 	.word	0x0800119f
 8001114:	0800119f 	.word	0x0800119f
 8001118:	0800119f 	.word	0x0800119f
 800111c:	0800119f 	.word	0x0800119f
 8001120:	0800119f 	.word	0x0800119f
 8001124:	0800119f 	.word	0x0800119f
 8001128:	0800119f 	.word	0x0800119f
 800112c:	0800119f 	.word	0x0800119f
 8001130:	0800119f 	.word	0x0800119f
 8001134:	0800119f 	.word	0x0800119f
 8001138:	0800119f 	.word	0x0800119f
 800113c:	0800119f 	.word	0x0800119f
 8001140:	0800119f 	.word	0x0800119f
 8001144:	0800119f 	.word	0x0800119f
 8001148:	0800119f 	.word	0x0800119f
 800114c:	0800119f 	.word	0x0800119f
 8001150:	0800119f 	.word	0x0800119f
 8001154:	0800119f 	.word	0x0800119f
 8001158:	0800116f 	.word	0x0800116f
 800115c:	0800117f 	.word	0x0800117f
 8001160:	0800118f 	.word	0x0800118f
      case U8X8_MSG_GPIO_AND_DELAY_INIT:
          /* Insert codes for initialization */
          break;
      case U8X8_MSG_DELAY_MILLI:
          /* ms Delay */
       	System_Rtos::delay(arg_int);
 8001164:	7abb      	ldrb	r3, [r7, #10]
 8001166:	4618      	mov	r0, r3
 8001168:	f003 f840 	bl	80041ec <_ZN11System_Rtos5delayEm>
          break;
 800116c:	e017      	b.n	800119e <_Z25u8x8_stm32_gpio_and_delayP11u8x8_structhhPv+0xea>
      case U8X8_MSG_GPIO_CS:
          /* Insert codes for SS pin control */
            HAL_GPIO_WritePin(DISPLAY_CS_GPIO_Port, DISPLAY_CS_Pin, (GPIO_PinState)arg_int);
 800116e:	7abb      	ldrb	r3, [r7, #10]
 8001170:	461a      	mov	r2, r3
 8001172:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001176:	480c      	ldr	r0, [pc, #48]	@ (80011a8 <_Z25u8x8_stm32_gpio_and_delayP11u8x8_structhhPv+0xf4>)
 8001178:	f008 fefa 	bl	8009f70 <HAL_GPIO_WritePin>

          break;
 800117c:	e00f      	b.n	800119e <_Z25u8x8_stm32_gpio_and_delayP11u8x8_structhhPv+0xea>
      case U8X8_MSG_GPIO_DC:
          /* Insert codes for DC pin control */
            HAL_GPIO_WritePin(DISPLAY_DC_GPIO_Port, DISPLAY_DC_Pin, (GPIO_PinState)arg_int);
 800117e:	7abb      	ldrb	r3, [r7, #10]
 8001180:	461a      	mov	r2, r3
 8001182:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001186:	4809      	ldr	r0, [pc, #36]	@ (80011ac <_Z25u8x8_stm32_gpio_and_delayP11u8x8_structhhPv+0xf8>)
 8001188:	f008 fef2 	bl	8009f70 <HAL_GPIO_WritePin>

          break;
 800118c:	e007      	b.n	800119e <_Z25u8x8_stm32_gpio_and_delayP11u8x8_structhhPv+0xea>
      case U8X8_MSG_GPIO_RESET:
          /* Insert codes for RST pin control */
           HAL_GPIO_WritePin(DISPLAY_RES_GPIO_Port, DISPLAY_RES_Pin,  (GPIO_PinState)arg_int);
 800118e:	7abb      	ldrb	r3, [r7, #10]
 8001190:	461a      	mov	r2, r3
 8001192:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001196:	4805      	ldr	r0, [pc, #20]	@ (80011ac <_Z25u8x8_stm32_gpio_and_delayP11u8x8_structhhPv+0xf8>)
 8001198:	f008 feea 	bl	8009f70 <HAL_GPIO_WritePin>

          break;
 800119c:	bf00      	nop
      }
      return 1;
 800119e:	2301      	movs	r3, #1
  }
 80011a0:	4618      	mov	r0, r3
 80011a2:	3710      	adds	r7, #16
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40020c00 	.word	0x40020c00
 80011ac:	40020400 	.word	0x40020400

080011b0 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv>:

uint8_t u8x8_byte_stm32_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
  {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	607b      	str	r3, [r7, #4]
 80011ba:	460b      	mov	r3, r1
 80011bc:	72fb      	strb	r3, [r7, #11]
 80011be:	4613      	mov	r3, r2
 80011c0:	72bb      	strb	r3, [r7, #10]
      switch(msg) {
 80011c2:	7afb      	ldrb	r3, [r7, #11]
 80011c4:	3b14      	subs	r3, #20
 80011c6:	2b0c      	cmp	r3, #12
 80011c8:	d844      	bhi.n	8001254 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xa4>
 80011ca:	a201      	add	r2, pc, #4	@ (adr r2, 80011d0 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0x20>)
 80011cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011d0:	08001259 	.word	0x08001259
 80011d4:	08001255 	.word	0x08001255
 80011d8:	08001255 	.word	0x08001255
 80011dc:	08001205 	.word	0x08001205
 80011e0:	08001225 	.word	0x08001225
 80011e4:	0800123d 	.word	0x0800123d
 80011e8:	08001255 	.word	0x08001255
 80011ec:	08001255 	.word	0x08001255
 80011f0:	08001255 	.word	0x08001255
 80011f4:	08001255 	.word	0x08001255
 80011f8:	08001255 	.word	0x08001255
 80011fc:	08001255 	.word	0x08001255
 8001200:	08001217 	.word	0x08001217
      case U8X8_MSG_BYTE_SEND:
          /* Insert codes to transmit data */
          HAL_SPI_Transmit(&OLEDSpi,(uint8_t *)arg_ptr, arg_int, 5000);
 8001204:	7abb      	ldrb	r3, [r7, #10]
 8001206:	b29a      	uxth	r2, r3
 8001208:	f241 3388 	movw	r3, #5000	@ 0x1388
 800120c:	6879      	ldr	r1, [r7, #4]
 800120e:	4815      	ldr	r0, [pc, #84]	@ (8001264 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb4>)
 8001210:	f00b f90b 	bl	800c42a <HAL_SPI_Transmit>
           break;
 8001214:	e021      	b.n	800125a <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xaa>
          /* Insert codes to begin SPI transmission */

          break;
      case U8X8_MSG_BYTE_SET_DC:
          /* Control DC pin, U8X8_MSG_GPIO_DC will be called */
          u8x8_gpio_SetDC(u8x8, arg_int);
 8001216:	7abb      	ldrb	r3, [r7, #10]
 8001218:	461a      	mov	r2, r3
 800121a:	214a      	movs	r1, #74	@ 0x4a
 800121c:	68f8      	ldr	r0, [r7, #12]
 800121e:	f006 febf 	bl	8007fa0 <u8x8_gpio_call>
          break;
 8001222:	e01a      	b.n	800125a <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xaa>
      case U8X8_MSG_BYTE_START_TRANSFER:
          /* Select slave, U8X8_MSG_GPIO_CS will be called */
          u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	461a      	mov	r2, r3
 800122c:	2149      	movs	r1, #73	@ 0x49
 800122e:	68f8      	ldr	r0, [r7, #12]
 8001230:	f006 feb6 	bl	8007fa0 <u8x8_gpio_call>
        	System_Rtos::delay(1);
 8001234:	2001      	movs	r0, #1
 8001236:	f002 ffd9 	bl	80041ec <_ZN11System_Rtos5delayEm>

          break;
 800123a:	e00e      	b.n	800125a <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xaa>
      case U8X8_MSG_BYTE_END_TRANSFER:
    	  	System_Rtos::delay(1);
 800123c:	2001      	movs	r0, #1
 800123e:	f002 ffd5 	bl	80041ec <_ZN11System_Rtos5delayEm>
          /* Insert codes to end SPI transmission */
          u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	785b      	ldrb	r3, [r3, #1]
 8001248:	461a      	mov	r2, r3
 800124a:	2149      	movs	r1, #73	@ 0x49
 800124c:	68f8      	ldr	r0, [r7, #12]
 800124e:	f006 fea7 	bl	8007fa0 <u8x8_gpio_call>
          break;
 8001252:	e002      	b.n	800125a <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xaa>
      default:
          return 0;
 8001254:	2300      	movs	r3, #0
 8001256:	e001      	b.n	800125c <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xac>
          break;
 8001258:	bf00      	nop
      }
      return 1;
 800125a:	2301      	movs	r3, #1
  }
 800125c:	4618      	mov	r0, r3
 800125e:	3710      	adds	r7, #16
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20001f50 	.word	0x20001f50

08001268 <_Z11DisplayTaskPv>:


void DisplayTask(void *pvParameters)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af02      	add	r7, sp, #8
 800126e:	6078      	str	r0, [r7, #4]

  u8g2_Setup_ssd1309_128x64_noname0_f(&u8g2_M, U8G2_R0, u8x8_byte_stm32_hw_spi,u8x8_stm32_gpio_and_delay);
 8001270:	4b16      	ldr	r3, [pc, #88]	@ (80012cc <_Z11DisplayTaskPv+0x64>)
 8001272:	4a17      	ldr	r2, [pc, #92]	@ (80012d0 <_Z11DisplayTaskPv+0x68>)
 8001274:	4917      	ldr	r1, [pc, #92]	@ (80012d4 <_Z11DisplayTaskPv+0x6c>)
 8001276:	4818      	ldr	r0, [pc, #96]	@ (80012d8 <_Z11DisplayTaskPv+0x70>)
 8001278:	f005 fb0c 	bl	8006894 <u8g2_Setup_ssd1309_128x64_noname0_f>
  u8g2_InitDisplay(&u8g2_M);
 800127c:	4816      	ldr	r0, [pc, #88]	@ (80012d8 <_Z11DisplayTaskPv+0x70>)
 800127e:	f006 fe60 	bl	8007f42 <u8x8_InitDisplay>
  u8g2_ClearBuffer(&u8g2_M);
 8001282:	4815      	ldr	r0, [pc, #84]	@ (80012d8 <_Z11DisplayTaskPv+0x70>)
 8001284:	f005 fa75 	bl	8006772 <u8g2_ClearBuffer>
  u8g2_SetPowerSave(&u8g2_M, 0);
 8001288:	2100      	movs	r1, #0
 800128a:	4813      	ldr	r0, [pc, #76]	@ (80012d8 <_Z11DisplayTaskPv+0x70>)
 800128c:	f006 fe68 	bl	8007f60 <u8x8_SetPowerSave>
  u8g2_DrawXBM(&u8g2_M,32,0,imgcont::smartgrid.w,imgcont::smartgrid.h,imgcont::smartgrid.img);
 8001290:	4b12      	ldr	r3, [pc, #72]	@ (80012dc <_Z11DisplayTaskPv+0x74>)
 8001292:	7919      	ldrb	r1, [r3, #4]
 8001294:	4b11      	ldr	r3, [pc, #68]	@ (80012dc <_Z11DisplayTaskPv+0x74>)
 8001296:	795b      	ldrb	r3, [r3, #5]
 8001298:	4a10      	ldr	r2, [pc, #64]	@ (80012dc <_Z11DisplayTaskPv+0x74>)
 800129a:	6812      	ldr	r2, [r2, #0]
 800129c:	9201      	str	r2, [sp, #4]
 800129e:	9300      	str	r3, [sp, #0]
 80012a0:	460b      	mov	r3, r1
 80012a2:	2200      	movs	r2, #0
 80012a4:	2120      	movs	r1, #32
 80012a6:	480c      	ldr	r0, [pc, #48]	@ (80012d8 <_Z11DisplayTaskPv+0x70>)
 80012a8:	f005 f9ea 	bl	8006680 <u8g2_DrawXBM>
  u8g2_SendBuffer(&u8g2_M);
 80012ac:	480a      	ldr	r0, [pc, #40]	@ (80012d8 <_Z11DisplayTaskPv+0x70>)
 80012ae:	f005 fad3 	bl	8006858 <u8g2_SendBuffer>
  System_Rtos::delay(2000);
 80012b2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80012b6:	f002 ff99 	bl	80041ec <_ZN11System_Rtos5delayEm>


	while(1)
	{

		UI::loop(&u8g2_M);
 80012ba:	4807      	ldr	r0, [pc, #28]	@ (80012d8 <_Z11DisplayTaskPv+0x70>)
 80012bc:	f004 fa0a 	bl	80056d4 <_ZN2UI4loopEP11u8g2_struct>
		System_Rtos::delay(500);
 80012c0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80012c4:	f002 ff92 	bl	80041ec <_ZN11System_Rtos5delayEm>
		UI::loop(&u8g2_M);
 80012c8:	bf00      	nop
 80012ca:	e7f6      	b.n	80012ba <_Z11DisplayTaskPv+0x52>
 80012cc:	080010b5 	.word	0x080010b5
 80012d0:	080011b1 	.word	0x080011b1
 80012d4:	08014f50 	.word	0x08014f50
 80012d8:	200004b8 	.word	0x200004b8
 80012dc:	08014ef8 	.word	0x08014ef8

080012e0 <_ZSt6strstrPcPKc>:
  strrchr(char* __s, int __n)
  { return __builtin_strrchr(__s, __n); }

  inline char*
  strstr(char* __s1, const char* __s2)
  { return __builtin_strstr(__s1, __s2); }
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
 80012ea:	6839      	ldr	r1, [r7, #0]
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f010 fc98 	bl	8011c22 <strstr>
 80012f2:	4603      	mov	r3, r0
 80012f4:	4618      	mov	r0, r3
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <_Z9ModemTaskPv>:


char command_buffer[255] = {0};


void ModemTask(void *pvParameters) {
 80012fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001300:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 8001304:	af22      	add	r7, sp, #136	@ 0x88
 8001306:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800130a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800130e:	6018      	str	r0, [r3, #0]

	simA7672.init();
 8001310:	48c9      	ldr	r0, [pc, #804]	@ (8001638 <_Z9ModemTaskPv+0x33c>)
 8001312:	f000 fcb9 	bl	8001c88 <_ZN5Modem8simA76724initEv>

	struct ModemData_Queue ModemData = { 0 };
 8001316:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800131a:	22d9      	movs	r2, #217	@ 0xd9
 800131c:	2100      	movs	r1, #0
 800131e:	4618      	mov	r0, r3
 8001320:	f010 fc57 	bl	8011bd2 <memset>

	struct ControlData_Queue ControlData = {0};
 8001324:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001328:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800132c:	4618      	mov	r0, r3
 800132e:	2374      	movs	r3, #116	@ 0x74
 8001330:	461a      	mov	r2, r3
 8001332:	2100      	movs	r1, #0
 8001334:	f010 fc4d 	bl	8011bd2 <memset>

	Modem::simA7672::UE_systemInfo cpsiInfo;
	Modem::simA7672::pdp_stat pdpinfo;
	Modem::simA7672::status modeminfo;
	Modem::simA7672::mqtt_flags mqttstartinfo = Modem::simA7672::mqtt_ERR;
 8001338:	2301      	movs	r3, #1
 800133a:	f887 31bf 	strb.w	r3, [r7, #447]	@ 0x1bf
	Modem::simA7672::mqtt_flags mqttserverinfo = Modem::simA7672::mqtt_ERR;
 800133e:	2301      	movs	r3, #1
 8001340:	f887 31be 	strb.w	r3, [r7, #446]	@ 0x1be

	enum routine mqtt_routine = net_enable;
 8001344:	2300      	movs	r3, #0
 8001346:	f887 31bd 	strb.w	r3, [r7, #445]	@ 0x1bd


	std::strcpy(ModemData.serverAddr, "tcp://apfp7i6y92d6b-ats.iot.us-east-1.amazonaws.com:8883");
 800134a:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800134e:	334b      	adds	r3, #75	@ 0x4b
 8001350:	4aba      	ldr	r2, [pc, #744]	@ (800163c <_Z9ModemTaskPv+0x340>)
 8001352:	4614      	mov	r4, r2
 8001354:	469c      	mov	ip, r3
 8001356:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 800135a:	4665      	mov	r5, ip
 800135c:	4626      	mov	r6, r4
 800135e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001360:	6028      	str	r0, [r5, #0]
 8001362:	6069      	str	r1, [r5, #4]
 8001364:	60aa      	str	r2, [r5, #8]
 8001366:	60eb      	str	r3, [r5, #12]
 8001368:	3410      	adds	r4, #16
 800136a:	f10c 0c10 	add.w	ip, ip, #16
 800136e:	4574      	cmp	r4, lr
 8001370:	d1f3      	bne.n	800135a <_Z9ModemTaskPv+0x5e>
 8001372:	4662      	mov	r2, ip
 8001374:	4623      	mov	r3, r4
 8001376:	cb03      	ldmia	r3!, {r0, r1}
 8001378:	6010      	str	r0, [r2, #0]
 800137a:	6051      	str	r1, [r2, #4]
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	7213      	strb	r3, [r2, #8]
	std::strcpy(ModemData.apn, "zonginternet");
 8001380:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001384:	3337      	adds	r3, #55	@ 0x37
 8001386:	4aae      	ldr	r2, [pc, #696]	@ (8001640 <_Z9ModemTaskPv+0x344>)
 8001388:	461c      	mov	r4, r3
 800138a:	4613      	mov	r3, r2
 800138c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800138e:	6020      	str	r0, [r4, #0]
 8001390:	6061      	str	r1, [r4, #4]
 8001392:	60a2      	str	r2, [r4, #8]
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	7323      	strb	r3, [r4, #12]
	std::strcpy(ModemData.mqttSubTopic, "TEST1");
 8001398:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800139c:	33c3      	adds	r3, #195	@ 0xc3
 800139e:	4aa9      	ldr	r2, [pc, #676]	@ (8001644 <_Z9ModemTaskPv+0x348>)
 80013a0:	6810      	ldr	r0, [r2, #0]
 80013a2:	6018      	str	r0, [r3, #0]
 80013a4:	8892      	ldrh	r2, [r2, #4]
 80013a6:	809a      	strh	r2, [r3, #4]
	std::strcpy(ModemData.mqttPubTopic, "devicedata");
 80013a8:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80013ac:	33af      	adds	r3, #175	@ 0xaf
 80013ae:	49a6      	ldr	r1, [pc, #664]	@ (8001648 <_Z9ModemTaskPv+0x34c>)
 80013b0:	461a      	mov	r2, r3
 80013b2:	460b      	mov	r3, r1
 80013b4:	cb03      	ldmia	r3!, {r0, r1}
 80013b6:	6010      	str	r0, [r2, #0]
 80013b8:	6051      	str	r1, [r2, #4]
 80013ba:	8819      	ldrh	r1, [r3, #0]
 80013bc:	789b      	ldrb	r3, [r3, #2]
 80013be:	8111      	strh	r1, [r2, #8]
 80013c0:	7293      	strb	r3, [r2, #10]


	uint8_t mqtt_counter = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	f887 31bc 	strb.w	r3, [r7, #444]	@ 0x1bc

		//simA7672.getTimeDate(ModemData.time, ModemData.date,
		//		ModemData.timezone);

		//ModemData.timestamp = parsing.convertToEpoch(ModemData.date, ModemData.time, ModemData.timezone);
		simA7672.getSim(ModemData.pin);
 80013c8:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80013cc:	4619      	mov	r1, r3
 80013ce:	489a      	ldr	r0, [pc, #616]	@ (8001638 <_Z9ModemTaskPv+0x33c>)
 80013d0:	f000 fe46 	bl	8002060 <_ZN5Modem8simA76726getSimEPc>
		simA7672.getNetwork(ModemData.networkStat);
 80013d4:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80013d8:	330f      	adds	r3, #15
 80013da:	4619      	mov	r1, r3
 80013dc:	4896      	ldr	r0, [pc, #600]	@ (8001638 <_Z9ModemTaskPv+0x33c>)
 80013de:	f000 fea9 	bl	8002134 <_ZN5Modem8simA767210getNetworkEPc>
		simA7672.getNetworkPDP(ModemData.networkStatpdp);
 80013e2:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80013e6:	331e      	adds	r3, #30
 80013e8:	4619      	mov	r1, r3
 80013ea:	4893      	ldr	r0, [pc, #588]	@ (8001638 <_Z9ModemTaskPv+0x33c>)
 80013ec:	f000 ff88 	bl	8002300 <_ZN5Modem8simA767213getNetworkPDPEPc>
		simA7672.getSignalQ(ModemData.quality);
 80013f0:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80013f4:	332d      	adds	r3, #45	@ 0x2d
 80013f6:	4619      	mov	r1, r3
 80013f8:	488f      	ldr	r0, [pc, #572]	@ (8001638 <_Z9ModemTaskPv+0x33c>)
 80013fa:	f001 f975 	bl	80026e8 <_ZN5Modem8simA767210getSignalQEPc>
		simA7672.getUEsystemInfo(&cpsiInfo);
 80013fe:	f107 036b 	add.w	r3, r7, #107	@ 0x6b
 8001402:	4619      	mov	r1, r3
 8001404:	488c      	ldr	r0, [pc, #560]	@ (8001638 <_Z9ModemTaskPv+0x33c>)
 8001406:	f001 f8bf 	bl	8002588 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE>
		simA7672.getPDPstatus(&pdpinfo);
 800140a:	f107 036a 	add.w	r3, r7, #106	@ 0x6a
 800140e:	4619      	mov	r1, r3
 8001410:	4889      	ldr	r0, [pc, #548]	@ (8001638 <_Z9ModemTaskPv+0x33c>)
 8001412:	f001 f84d 	bl	80024b0 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE>





		ModemDataQueue.queueSend(reinterpret_cast<void*>(&ModemData));
 8001416:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800141a:	4619      	mov	r1, r3
 800141c:	488b      	ldr	r0, [pc, #556]	@ (800164c <_Z9ModemTaskPv+0x350>)
 800141e:	f002 ff6d 	bl	80042fc <_ZN11System_Rtos15freertos_queues9queueSendEPv>
		System_Rtos::delay(50);
 8001422:	2032      	movs	r0, #50	@ 0x32
 8001424:	f002 fee2 	bl	80041ec <_ZN11System_Rtos5delayEm>


		if(ControlDataQueue.queueReceive((void *)&ControlData) == ControlDataQueue.queues_recived)
 8001428:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800142c:	4619      	mov	r1, r3
 800142e:	4888      	ldr	r0, [pc, #544]	@ (8001650 <_Z9ModemTaskPv+0x354>)
 8001430:	f002 ff81 	bl	8004336 <_ZN11System_Rtos15freertos_queues12queueReceiveEPv>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0





		switch (mqtt_routine) {
 8001438:	f897 31bd 	ldrb.w	r3, [r7, #445]	@ 0x1bd
 800143c:	2b03      	cmp	r3, #3
 800143e:	f200 8270 	bhi.w	8001922 <_Z9ModemTaskPv+0x626>
 8001442:	a201      	add	r2, pc, #4	@ (adr r2, 8001448 <_Z9ModemTaskPv+0x14c>)
 8001444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001448:	08001459 	.word	0x08001459
 800144c:	08001541 	.word	0x08001541
 8001450:	08001661 	.word	0x08001661
 8001454:	080016b1 	.word	0x080016b1

		case net_enable: {

			/*Enable Net support*/

			if ((std::strstr(ModemData.networkStat, networkInfo[0])
 8001458:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800145c:	330f      	adds	r3, #15
 800145e:	497d      	ldr	r1, [pc, #500]	@ (8001654 <_Z9ModemTaskPv+0x358>)
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff ff3d 	bl	80012e0 <_ZSt6strstrPcPKc>
 8001466:	4603      	mov	r3, r0
					|| std::strstr(ModemData.networkStat, networkInfo[1]))
					&& (std::strstr(ModemData.networkStatpdp, networkInfo[0])
							|| std::strstr(ModemData.networkStatpdp, networkInfo[1]))
					&& cpsiInfo != Modem::simA7672::no_service) {
 8001468:	2b00      	cmp	r3, #0
 800146a:	d109      	bne.n	8001480 <_Z9ModemTaskPv+0x184>
					|| std::strstr(ModemData.networkStat, networkInfo[1]))
 800146c:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001470:	330f      	adds	r3, #15
 8001472:	4979      	ldr	r1, [pc, #484]	@ (8001658 <_Z9ModemTaskPv+0x35c>)
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff ff33 	bl	80012e0 <_ZSt6strstrPcPKc>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d01c      	beq.n	80014ba <_Z9ModemTaskPv+0x1be>
					&& (std::strstr(ModemData.networkStatpdp, networkInfo[0])
 8001480:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001484:	331e      	adds	r3, #30
 8001486:	4973      	ldr	r1, [pc, #460]	@ (8001654 <_Z9ModemTaskPv+0x358>)
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff ff29 	bl	80012e0 <_ZSt6strstrPcPKc>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d109      	bne.n	80014a8 <_Z9ModemTaskPv+0x1ac>
							|| std::strstr(ModemData.networkStatpdp, networkInfo[1]))
 8001494:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001498:	331e      	adds	r3, #30
 800149a:	496f      	ldr	r1, [pc, #444]	@ (8001658 <_Z9ModemTaskPv+0x35c>)
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff ff1f 	bl	80012e0 <_ZSt6strstrPcPKc>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d008      	beq.n	80014ba <_Z9ModemTaskPv+0x1be>
					&& cpsiInfo != Modem::simA7672::no_service) {
 80014a8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80014ac:	f2a3 1355 	subw	r3, r3, #341	@ 0x155
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <_Z9ModemTaskPv+0x1be>
 80014b6:	2301      	movs	r3, #1
 80014b8:	e000      	b.n	80014bc <_Z9ModemTaskPv+0x1c0>
 80014ba:	2300      	movs	r3, #0
			if ((std::strstr(ModemData.networkStat, networkInfo[0])
 80014bc:	2b00      	cmp	r3, #0
 80014be:	f000 8232 	beq.w	8001926 <_Z9ModemTaskPv+0x62a>


				modeminfo = simA7672.setAPN(ModemData.apn);
 80014c2:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80014c6:	3337      	adds	r3, #55	@ 0x37
 80014c8:	4619      	mov	r1, r3
 80014ca:	485b      	ldr	r0, [pc, #364]	@ (8001638 <_Z9ModemTaskPv+0x33c>)
 80014cc:	f000 fd1c 	bl	8001f08 <_ZN5Modem8simA76726setAPNEPc>
 80014d0:	4603      	mov	r3, r0
 80014d2:	f887 31bb 	strb.w	r3, [r7, #443]	@ 0x1bb

				simA7672.sslversionset();
 80014d6:	4858      	ldr	r0, [pc, #352]	@ (8001638 <_Z9ModemTaskPv+0x33c>)
 80014d8:	f001 fe6e 	bl	80031b8 <_ZN5Modem8simA767213sslversionsetEv>
				simA7672.sslauthset();
 80014dc:	4856      	ldr	r0, [pc, #344]	@ (8001638 <_Z9ModemTaskPv+0x33c>)
 80014de:	f001 fea7 	bl	8003230 <_ZN5Modem8simA767210sslauthsetEv>
				simA7672.sslcacertset();
 80014e2:	4855      	ldr	r0, [pc, #340]	@ (8001638 <_Z9ModemTaskPv+0x33c>)
 80014e4:	f001 fee0 	bl	80032a8 <_ZN5Modem8simA767212sslcacertsetEv>
				simA7672.ssldevicecertset();
 80014e8:	4853      	ldr	r0, [pc, #332]	@ (8001638 <_Z9ModemTaskPv+0x33c>)
 80014ea:	f001 ff19 	bl	8003320 <_ZN5Modem8simA767216ssldevicecertsetEv>
				simA7672.ssldevicekeyset();
 80014ee:	4852      	ldr	r0, [pc, #328]	@ (8001638 <_Z9ModemTaskPv+0x33c>)
 80014f0:	f001 ff52 	bl	8003398 <_ZN5Modem8simA767215ssldevicekeysetEv>


				if (modeminfo == Modem::simA7672::simA7672_OK) {
 80014f4:	f897 31bb 	ldrb.w	r3, [r7, #443]	@ 0x1bb
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	f040 8214 	bne.w	8001926 <_Z9ModemTaskPv+0x62a>
	//				simA7672.activate_deactivatePDP(Modem::simA7672::pdp_deactivated);
	//				simA7672.activate_deactivatePDP(Modem::simA7672::pdp_activate);

					if (mqttserverinfo == Modem::simA7672::mqtt_serverConnected) {
 80014fe:	f897 31be 	ldrb.w	r3, [r7, #446]	@ 0x1be
 8001502:	2b02      	cmp	r3, #2
 8001504:	d108      	bne.n	8001518 <_Z9ModemTaskPv+0x21c>

						simA7672.mqttDisconnectServer(ModemData.mqtt_client_index);
 8001506:	f897 31b8 	ldrb.w	r3, [r7, #440]	@ 0x1b8
 800150a:	4619      	mov	r1, r3
 800150c:	484a      	ldr	r0, [pc, #296]	@ (8001638 <_Z9ModemTaskPv+0x33c>)
 800150e:	f001 fc05 	bl	8002d1c <_ZN5Modem8simA767220mqttDisconnectServerEh>
						mqttserverinfo = Modem::simA7672::mqtt_ERR;
 8001512:	2301      	movs	r3, #1
 8001514:	f887 31be 	strb.w	r3, [r7, #446]	@ 0x1be
					}

					if (mqttstartinfo == Modem::simA7672::mqtt_OK) {
 8001518:	f897 31bf 	ldrb.w	r3, [r7, #447]	@ 0x1bf
 800151c:	2b00      	cmp	r3, #0
 800151e:	d10b      	bne.n	8001538 <_Z9ModemTaskPv+0x23c>
						simA7672.mqttReleaseClient(ModemData.mqtt_client_index);
 8001520:	f897 31b8 	ldrb.w	r3, [r7, #440]	@ 0x1b8
 8001524:	4619      	mov	r1, r3
 8001526:	4844      	ldr	r0, [pc, #272]	@ (8001638 <_Z9ModemTaskPv+0x33c>)
 8001528:	f001 fb1e 	bl	8002b68 <_ZN5Modem8simA767217mqttReleaseClientEh>
						simA7672.mqttStop();
 800152c:	4842      	ldr	r0, [pc, #264]	@ (8001638 <_Z9ModemTaskPv+0x33c>)
 800152e:	f001 fa53 	bl	80029d8 <_ZN5Modem8simA76728mqttStopEv>
						mqttstartinfo = Modem::simA7672::mqtt_ERR;
 8001532:	2301      	movs	r3, #1
 8001534:	f887 31bf 	strb.w	r3, [r7, #447]	@ 0x1bf
					}

					mqtt_routine = mqtt_enable;
 8001538:	2301      	movs	r3, #1
 800153a:	f887 31bd 	strb.w	r3, [r7, #445]	@ 0x1bd

				}

			}

			break;
 800153e:	e1f2      	b.n	8001926 <_Z9ModemTaskPv+0x62a>
		}

		case mqtt_enable: {

			/*Enable MQTT*/
			if ((std::strstr(ModemData.networkStat, networkInfo[0])
 8001540:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001544:	330f      	adds	r3, #15
 8001546:	4943      	ldr	r1, [pc, #268]	@ (8001654 <_Z9ModemTaskPv+0x358>)
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff fec9 	bl	80012e0 <_ZSt6strstrPcPKc>
 800154e:	4603      	mov	r3, r0
					|| std::strstr(ModemData.networkStat, networkInfo[1]))
					&& (std::strstr(ModemData.networkStatpdp, networkInfo[0])
							|| std::strstr(ModemData.networkStatpdp, networkInfo[1]))
					&& cpsiInfo != Modem::simA7672::no_service
					&& mqttstartinfo != Modem::simA7672::mqtt_OK) {
 8001550:	2b00      	cmp	r3, #0
 8001552:	d109      	bne.n	8001568 <_Z9ModemTaskPv+0x26c>
					|| std::strstr(ModemData.networkStat, networkInfo[1]))
 8001554:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001558:	330f      	adds	r3, #15
 800155a:	493f      	ldr	r1, [pc, #252]	@ (8001658 <_Z9ModemTaskPv+0x35c>)
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff febf 	bl	80012e0 <_ZSt6strstrPcPKc>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d020      	beq.n	80015aa <_Z9ModemTaskPv+0x2ae>
					&& (std::strstr(ModemData.networkStatpdp, networkInfo[0])
 8001568:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800156c:	331e      	adds	r3, #30
 800156e:	4939      	ldr	r1, [pc, #228]	@ (8001654 <_Z9ModemTaskPv+0x358>)
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff feb5 	bl	80012e0 <_ZSt6strstrPcPKc>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d109      	bne.n	8001590 <_Z9ModemTaskPv+0x294>
							|| std::strstr(ModemData.networkStatpdp, networkInfo[1]))
 800157c:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001580:	331e      	adds	r3, #30
 8001582:	4935      	ldr	r1, [pc, #212]	@ (8001658 <_Z9ModemTaskPv+0x35c>)
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff feab 	bl	80012e0 <_ZSt6strstrPcPKc>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d00c      	beq.n	80015aa <_Z9ModemTaskPv+0x2ae>
					&& cpsiInfo != Modem::simA7672::no_service
 8001590:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001594:	f2a3 1355 	subw	r3, r3, #341	@ 0x155
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d005      	beq.n	80015aa <_Z9ModemTaskPv+0x2ae>
					&& mqttstartinfo != Modem::simA7672::mqtt_OK) {
 800159e:	f897 31bf 	ldrb.w	r3, [r7, #447]	@ 0x1bf
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <_Z9ModemTaskPv+0x2ae>
 80015a6:	2301      	movs	r3, #1
 80015a8:	e000      	b.n	80015ac <_Z9ModemTaskPv+0x2b0>
 80015aa:	2300      	movs	r3, #0
			if ((std::strstr(ModemData.networkStat, networkInfo[0])
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	f000 81bc 	beq.w	800192a <_Z9ModemTaskPv+0x62e>

				simA7672.activate_deactivatePDP(Modem::simA7672::pdp_deactivated);
 80015b2:	2100      	movs	r1, #0
 80015b4:	4820      	ldr	r0, [pc, #128]	@ (8001638 <_Z9ModemTaskPv+0x33c>)
 80015b6:	f000 fcff 	bl	8001fb8 <_ZN5Modem8simA767222activate_deactivatePDPENS0_8pdp_statE>
				simA7672.activate_deactivatePDP(Modem::simA7672::pdp_activate);
 80015ba:	2101      	movs	r1, #1
 80015bc:	481e      	ldr	r0, [pc, #120]	@ (8001638 <_Z9ModemTaskPv+0x33c>)
 80015be:	f000 fcfb 	bl	8001fb8 <_ZN5Modem8simA767222activate_deactivatePDPENS0_8pdp_statE>
				mqttstartinfo = simA7672.mqttStart(&ModemData.mqtt_client_index);
 80015c2:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80015c6:	33d8      	adds	r3, #216	@ 0xd8
 80015c8:	4619      	mov	r1, r3
 80015ca:	481b      	ldr	r0, [pc, #108]	@ (8001638 <_Z9ModemTaskPv+0x33c>)
 80015cc:	f001 f994 	bl	80028f8 <_ZN5Modem8simA76729mqttStartEPh>
 80015d0:	4603      	mov	r3, r0
 80015d2:	f887 31bf 	strb.w	r3, [r7, #447]	@ 0x1bf
				if (mqttstartinfo == Modem::simA7672::mqtt_OK) {
 80015d6:	f897 31bf 	ldrb.w	r3, [r7, #447]	@ 0x1bf
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d121      	bne.n	8001622 <_Z9ModemTaskPv+0x326>

					mqttstartinfo = simA7672.mqttSetClient(
 80015de:	f897 11b8 	ldrb.w	r1, [r7, #440]	@ 0x1b8
 80015e2:	2301      	movs	r3, #1
 80015e4:	4a1d      	ldr	r2, [pc, #116]	@ (800165c <_Z9ModemTaskPv+0x360>)
 80015e6:	4814      	ldr	r0, [pc, #80]	@ (8001638 <_Z9ModemTaskPv+0x33c>)
 80015e8:	f001 fa5c 	bl	8002aa4 <_ZN5Modem8simA767213mqttSetClientEhPch>
 80015ec:	4603      	mov	r3, r0
 80015ee:	f887 31bf 	strb.w	r3, [r7, #447]	@ 0x1bf
							ModemData.mqtt_client_index,
							const_cast<char*>("STM32"),1);

					if(mqttstartinfo == Modem::simA7672::mqtt_OK)
 80015f2:	f897 31bf 	ldrb.w	r3, [r7, #447]	@ 0x1bf
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d109      	bne.n	800160e <_Z9ModemTaskPv+0x312>
					{

						simA7672.mqttsslenable(ModemData.mqtt_client_index);
 80015fa:	f897 31b8 	ldrb.w	r3, [r7, #440]	@ 0x1b8
 80015fe:	4619      	mov	r1, r3
 8001600:	480d      	ldr	r0, [pc, #52]	@ (8001638 <_Z9ModemTaskPv+0x33c>)
 8001602:	f001 fd7d 	bl	8003100 <_ZN5Modem8simA767213mqttsslenableEh>
						mqtt_routine = mqtt_connect;
 8001606:	2302      	movs	r3, #2
 8001608:	f887 31bd 	strb.w	r3, [r7, #445]	@ 0x1bd
					simA7672.mqttStop();
				}

			}

			break;
 800160c:	e18d      	b.n	800192a <_Z9ModemTaskPv+0x62e>
						simA7672.mqttReleaseClient(ModemData.mqtt_client_index);
 800160e:	f897 31b8 	ldrb.w	r3, [r7, #440]	@ 0x1b8
 8001612:	4619      	mov	r1, r3
 8001614:	4808      	ldr	r0, [pc, #32]	@ (8001638 <_Z9ModemTaskPv+0x33c>)
 8001616:	f001 faa7 	bl	8002b68 <_ZN5Modem8simA767217mqttReleaseClientEh>
						simA7672.mqttStop();
 800161a:	4807      	ldr	r0, [pc, #28]	@ (8001638 <_Z9ModemTaskPv+0x33c>)
 800161c:	f001 f9dc 	bl	80029d8 <_ZN5Modem8simA76728mqttStopEv>
			break;
 8001620:	e183      	b.n	800192a <_Z9ModemTaskPv+0x62e>
					simA7672.mqttReleaseClient(ModemData.mqtt_client_index);
 8001622:	f897 31b8 	ldrb.w	r3, [r7, #440]	@ 0x1b8
 8001626:	4619      	mov	r1, r3
 8001628:	4803      	ldr	r0, [pc, #12]	@ (8001638 <_Z9ModemTaskPv+0x33c>)
 800162a:	f001 fa9d 	bl	8002b68 <_ZN5Modem8simA767217mqttReleaseClientEh>
					simA7672.mqttStop();
 800162e:	4802      	ldr	r0, [pc, #8]	@ (8001638 <_Z9ModemTaskPv+0x33c>)
 8001630:	f001 f9d2 	bl	80029d8 <_ZN5Modem8simA76728mqttStopEv>
			break;
 8001634:	e179      	b.n	800192a <_Z9ModemTaskPv+0x62e>
 8001636:	bf00      	nop
 8001638:	20000538 	.word	0x20000538
 800163c:	08013eb8 	.word	0x08013eb8
 8001640:	08013ef4 	.word	0x08013ef4
 8001644:	08013f04 	.word	0x08013f04
 8001648:	08013f0c 	.word	0x08013f0c
 800164c:	200017b0 	.word	0x200017b0
 8001650:	20001880 	.word	0x20001880
 8001654:	0801474c 	.word	0x0801474c
 8001658:	08014758 	.word	0x08014758
 800165c:	08013f18 	.word	0x08013f18
		case mqtt_connect: {



			/*Connect to Mqtt Server*/
			if (mqttstartinfo == Modem::simA7672::mqtt_OK
 8001660:	f897 31bf 	ldrb.w	r3, [r7, #447]	@ 0x1bf
 8001664:	2b00      	cmp	r3, #0
 8001666:	f040 8162 	bne.w	800192e <_Z9ModemTaskPv+0x632>
					&& mqttserverinfo != Modem::simA7672::mqtt_serverConnected) {
 800166a:	f897 31be 	ldrb.w	r3, [r7, #446]	@ 0x1be
 800166e:	2b02      	cmp	r3, #2
 8001670:	f000 815d 	beq.w	800192e <_Z9ModemTaskPv+0x632>

				mqttserverinfo = simA7672.mqttConnectServer(
 8001674:	f897 11b8 	ldrb.w	r1, [r7, #440]	@ 0x1b8
 8001678:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800167c:	334b      	adds	r3, #75	@ 0x4b
 800167e:	461a      	mov	r2, r3
 8001680:	48ad      	ldr	r0, [pc, #692]	@ (8001938 <_Z9ModemTaskPv+0x63c>)
 8001682:	f001 facd 	bl	8002c20 <_ZN5Modem8simA767217mqttConnectServerEhPc>
 8001686:	4603      	mov	r3, r0
 8001688:	f887 31be 	strb.w	r3, [r7, #446]	@ 0x1be
						ModemData.mqtt_client_index, ModemData.serverAddr);

				if (mqttserverinfo == Modem::simA7672::mqtt_serverConnected) {
 800168c:	f897 31be 	ldrb.w	r3, [r7, #446]	@ 0x1be
 8001690:	2b02      	cmp	r3, #2
 8001692:	d103      	bne.n	800169c <_Z9ModemTaskPv+0x3a0>

					mqtt_routine = mqtt_loop;
 8001694:	2303      	movs	r3, #3
 8001696:	f887 31bd 	strb.w	r3, [r7, #445]	@ 0x1bd
					mqtt_routine = net_enable;
				}

			}

			break;
 800169a:	e148      	b.n	800192e <_Z9ModemTaskPv+0x632>
					simA7672.mqttDisconnectServer(ModemData.mqtt_client_index);
 800169c:	f897 31b8 	ldrb.w	r3, [r7, #440]	@ 0x1b8
 80016a0:	4619      	mov	r1, r3
 80016a2:	48a5      	ldr	r0, [pc, #660]	@ (8001938 <_Z9ModemTaskPv+0x63c>)
 80016a4:	f001 fb3a 	bl	8002d1c <_ZN5Modem8simA767220mqttDisconnectServerEh>
					mqtt_routine = net_enable;
 80016a8:	2300      	movs	r3, #0
 80016aa:	f887 31bd 	strb.w	r3, [r7, #445]	@ 0x1bd
			break;
 80016ae:	e13e      	b.n	800192e <_Z9ModemTaskPv+0x632>
		}

		case mqtt_loop: {

			mqttserverinfo = simA7672.getmqttconnectionstatus(ModemData.serverAddr);
 80016b0:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80016b4:	334b      	adds	r3, #75	@ 0x4b
 80016b6:	4619      	mov	r1, r3
 80016b8:	489f      	ldr	r0, [pc, #636]	@ (8001938 <_Z9ModemTaskPv+0x63c>)
 80016ba:	f001 f8a5 	bl	8002808 <_ZN5Modem8simA767223getmqttconnectionstatusEPc>
 80016be:	4603      	mov	r3, r0
 80016c0:	f887 31be 	strb.w	r3, [r7, #446]	@ 0x1be
			mqtt_counter++;
 80016c4:	f897 31bc 	ldrb.w	r3, [r7, #444]	@ 0x1bc
 80016c8:	3301      	adds	r3, #1
 80016ca:	f887 31bc 	strb.w	r3, [r7, #444]	@ 0x1bc
			/*get retries as well as sometimes we can get some issue */
			if (mqttserverinfo != Modem::simA7672::mqtt_serverConnected && mqtt_counter > 3) {
 80016ce:	f897 31be 	ldrb.w	r3, [r7, #446]	@ 0x1be
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d010      	beq.n	80016f8 <_Z9ModemTaskPv+0x3fc>
 80016d6:	f897 31bc 	ldrb.w	r3, [r7, #444]	@ 0x1bc
 80016da:	2b03      	cmp	r3, #3
 80016dc:	d90c      	bls.n	80016f8 <_Z9ModemTaskPv+0x3fc>
				ModemData.internet = 0;
 80016de:	2300      	movs	r3, #0
 80016e0:	f887 31b7 	strb.w	r3, [r7, #439]	@ 0x1b7
				simA7672.mqttDisconnectServer(ModemData.mqtt_client_index);
 80016e4:	f897 31b8 	ldrb.w	r3, [r7, #440]	@ 0x1b8
 80016e8:	4619      	mov	r1, r3
 80016ea:	4893      	ldr	r0, [pc, #588]	@ (8001938 <_Z9ModemTaskPv+0x63c>)
 80016ec:	f001 fb16 	bl	8002d1c <_ZN5Modem8simA767220mqttDisconnectServerEh>
				mqtt_routine = net_enable;
 80016f0:	2300      	movs	r3, #0
 80016f2:	f887 31bd 	strb.w	r3, [r7, #445]	@ 0x1bd
                      /*take flag to do something*/
				}
				simA7672.mqttunsubTopic(ModemData.mqtt_client_index,  ModemData.mqttSubTopic);
			}

			break;
 80016f6:	e11c      	b.n	8001932 <_Z9ModemTaskPv+0x636>
			else if(mqttserverinfo == Modem::simA7672::mqtt_serverConnected )
 80016f8:	f897 31be 	ldrb.w	r3, [r7, #446]	@ 0x1be
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	f040 8118 	bne.w	8001932 <_Z9ModemTaskPv+0x636>
				ModemData.internet = 1;
 8001702:	2301      	movs	r3, #1
 8001704:	f887 31b7 	strb.w	r3, [r7, #439]	@ 0x1b7
				mqtt_counter = 0;
 8001708:	2300      	movs	r3, #0
 800170a:	f887 31bc 	strb.w	r3, [r7, #444]	@ 0x1bc
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 800170e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001712:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001716:	691b      	ldr	r3, [r3, #16]
 8001718:	663b      	str	r3, [r7, #96]	@ 0x60
						 ,ControlData.V_1
 800171a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800171e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001722:	695b      	ldr	r3, [r3, #20]
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 8001724:	4618      	mov	r0, r3
 8001726:	f7fe ff0f 	bl	8000548 <__aeabi_f2d>
 800172a:	e9c7 0116 	strd	r0, r1, [r7, #88]	@ 0x58
						 ,ControlData.V_2
 800172e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001732:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001736:	699b      	ldr	r3, [r3, #24]
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 8001738:	4618      	mov	r0, r3
 800173a:	f7fe ff05 	bl	8000548 <__aeabi_f2d>
 800173e:	e9c7 0114 	strd	r0, r1, [r7, #80]	@ 0x50
						 ,ControlData.V_3
 8001742:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001746:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800174a:	69db      	ldr	r3, [r3, #28]
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 800174c:	4618      	mov	r0, r3
 800174e:	f7fe fefb 	bl	8000548 <__aeabi_f2d>
 8001752:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48
						 ,ControlData.I_1
 8001756:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800175a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800175e:	6a1b      	ldr	r3, [r3, #32]
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 8001760:	4618      	mov	r0, r3
 8001762:	f7fe fef1 	bl	8000548 <__aeabi_f2d>
 8001766:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
						 ,ControlData.I_2
 800176a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800176e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 8001774:	4618      	mov	r0, r3
 8001776:	f7fe fee7 	bl	8000548 <__aeabi_f2d>
 800177a:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
						 ,ControlData.I_3
 800177e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001782:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 8001788:	4618      	mov	r0, r3
 800178a:	f7fe fedd 	bl	8000548 <__aeabi_f2d>
 800178e:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
						 ,ControlData.P_1
 8001792:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001796:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800179a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 800179c:	4618      	mov	r0, r3
 800179e:	f7fe fed3 	bl	8000548 <__aeabi_f2d>
 80017a2:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
						 ,ControlData.P_2
 80017a6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80017aa:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80017ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7fe fec9 	bl	8000548 <__aeabi_f2d>
 80017b6:	e9c7 0108 	strd	r0, r1, [r7, #32]
						 ,ControlData.P_3
 80017ba:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80017be:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80017c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7fe febf 	bl	8000548 <__aeabi_f2d>
 80017ca:	e9c7 0106 	strd	r0, r1, [r7, #24]
						 ,ControlData.Energy
 80017ce:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80017d2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80017d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 80017d8:	4618      	mov	r0, r3
 80017da:	f7fe feb5 	bl	8000548 <__aeabi_f2d>
 80017de:	4682      	mov	sl, r0
 80017e0:	468b      	mov	fp, r1
						 ,ControlData.Freq
 80017e2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80017e6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80017ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7fe feab 	bl	8000548 <__aeabi_f2d>
 80017f2:	4680      	mov	r8, r0
 80017f4:	4689      	mov	r9, r1
						 ,ControlData.sourceIdentification
 80017f6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80017fa:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80017fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 8001802:	617b      	str	r3, [r7, #20]
						 ,ControlData.fuelPer
 8001804:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001808:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800180c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 8001810:	613b      	str	r3, [r7, #16]
						 ,ControlData.fuelConsp
 8001812:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001816:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800181a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 800181c:	4618      	mov	r0, r3
 800181e:	f7fe fe93 	bl	8000548 <__aeabi_f2d>
 8001822:	4604      	mov	r4, r0
 8001824:	460d      	mov	r5, r1
 8001826:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800182a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800182e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001830:	60fa      	str	r2, [r7, #12]
 8001832:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001836:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800183a:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001842:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001846:	6e1e      	ldr	r6, [r3, #96]	@ 0x60
 8001848:	607e      	str	r6, [r7, #4]
 800184a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800184e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001852:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8001854:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001858:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800185c:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 800185e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001862:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001866:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001868:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800186c:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001872:	f107 066c 	add.w	r6, r7, #108	@ 0x6c
 8001876:	9320      	str	r3, [sp, #128]	@ 0x80
 8001878:	921f      	str	r2, [sp, #124]	@ 0x7c
 800187a:	911e      	str	r1, [sp, #120]	@ 0x78
 800187c:	901d      	str	r0, [sp, #116]	@ 0x74
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	921c      	str	r2, [sp, #112]	@ 0x70
 8001882:	68b9      	ldr	r1, [r7, #8]
 8001884:	911b      	str	r1, [sp, #108]	@ 0x6c
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	921a      	str	r2, [sp, #104]	@ 0x68
 800188a:	e9cd 4518 	strd	r4, r5, [sp, #96]	@ 0x60
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	9217      	str	r2, [sp, #92]	@ 0x5c
 8001892:	697a      	ldr	r2, [r7, #20]
 8001894:	9216      	str	r2, [sp, #88]	@ 0x58
 8001896:	e9cd 8914 	strd	r8, r9, [sp, #80]	@ 0x50
 800189a:	e9cd ab12 	strd	sl, fp, [sp, #72]	@ 0x48
 800189e:	ed97 7b06 	vldr	d7, [r7, #24]
 80018a2:	ed8d 7b10 	vstr	d7, [sp, #64]	@ 0x40
 80018a6:	ed97 7b08 	vldr	d7, [r7, #32]
 80018aa:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80018ae:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 80018b2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80018b6:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80018ba:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80018be:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 80018c2:	ed8d 7b08 	vstr	d7, [sp, #32]
 80018c6:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 80018ca:	ed8d 7b06 	vstr	d7, [sp, #24]
 80018ce:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 80018d2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80018d6:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 80018da:	ed8d 7b02 	vstr	d7, [sp, #8]
 80018de:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 80018e2:	ed8d 7b00 	vstr	d7, [sp]
 80018e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80018e8:	4632      	mov	r2, r6
 80018ea:	4914      	ldr	r1, [pc, #80]	@ (800193c <_Z9ModemTaskPv+0x640>)
 80018ec:	4814      	ldr	r0, [pc, #80]	@ (8001940 <_Z9ModemTaskPv+0x644>)
 80018ee:	f010 f90d 	bl	8011b0c <siprintf>
				if(simA7672.mqttsubTopicAndRead(ModemData.mqtt_client_index, ModemData.mqttSubTopic, command_buffer,255) == Modem::simA7672::mqtt_msgrecv)
 80018f2:	f897 11b8 	ldrb.w	r1, [r7, #440]	@ 0x1b8
 80018f6:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80018fa:	f103 02c3 	add.w	r2, r3, #195	@ 0xc3
 80018fe:	23ff      	movs	r3, #255	@ 0xff
 8001900:	9300      	str	r3, [sp, #0]
 8001902:	4b10      	ldr	r3, [pc, #64]	@ (8001944 <_Z9ModemTaskPv+0x648>)
 8001904:	480c      	ldr	r0, [pc, #48]	@ (8001938 <_Z9ModemTaskPv+0x63c>)
 8001906:	f001 fa85 	bl	8002e14 <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t>
 800190a:	4603      	mov	r3, r0
 800190c:	2b05      	cmp	r3, #5
				simA7672.mqttunsubTopic(ModemData.mqtt_client_index,  ModemData.mqttSubTopic);
 800190e:	f897 11b8 	ldrb.w	r1, [r7, #440]	@ 0x1b8
 8001912:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001916:	33c3      	adds	r3, #195	@ 0xc3
 8001918:	461a      	mov	r2, r3
 800191a:	4807      	ldr	r0, [pc, #28]	@ (8001938 <_Z9ModemTaskPv+0x63c>)
 800191c:	f001 fb36 	bl	8002f8c <_ZN5Modem8simA767214mqttunsubTopicEhPc>
			break;
 8001920:	e007      	b.n	8001932 <_Z9ModemTaskPv+0x636>
		}

		default:
			break;
 8001922:	bf00      	nop
 8001924:	e550      	b.n	80013c8 <_Z9ModemTaskPv+0xcc>
			break;
 8001926:	bf00      	nop
 8001928:	e54e      	b.n	80013c8 <_Z9ModemTaskPv+0xcc>
			break;
 800192a:	bf00      	nop
 800192c:	e54c      	b.n	80013c8 <_Z9ModemTaskPv+0xcc>
			break;
 800192e:	bf00      	nop
 8001930:	e54a      	b.n	80013c8 <_Z9ModemTaskPv+0xcc>
			break;
 8001932:	bf00      	nop
		simA7672.getSim(ModemData.pin);
 8001934:	e548      	b.n	80013c8 <_Z9ModemTaskPv+0xcc>
 8001936:	bf00      	nop
 8001938:	20000538 	.word	0x20000538
 800193c:	08013f20 	.word	0x08013f20
 8001940:	20000d38 	.word	0x20000d38
 8001944:	20001568 	.word	0x20001568

08001948 <_Z41__static_initialization_and_destruction_0ii>:



	}

}
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d108      	bne.n	800196a <_Z41__static_initialization_and_destruction_0ii+0x22>
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800195e:	4293      	cmp	r3, r2
 8001960:	d103      	bne.n	800196a <_Z41__static_initialization_and_destruction_0ii+0x22>
Modem::simA7672 simA7672(&GSM_U);
 8001962:	4904      	ldr	r1, [pc, #16]	@ (8001974 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8001964:	4804      	ldr	r0, [pc, #16]	@ (8001978 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8001966:	f000 f92b 	bl	8001bc0 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef>
}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	200020cc 	.word	0x200020cc
 8001978:	20000538 	.word	0x20000538

0800197c <_GLOBAL__sub_I_simA7672>:
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
 8001980:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001984:	2001      	movs	r0, #1
 8001986:	f7ff ffdf 	bl	8001948 <_Z41__static_initialization_and_destruction_0ii>
 800198a:	bd80      	pop	{r7, pc}

0800198c <_ZN8UniqueID12CharToHexascEPhh>:


const char kaHexAsc[16] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};

void UniqueID::CharToHexasc(uint8_t *pPos, uint8_t Wert)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	460b      	mov	r3, r1
 8001996:	70fb      	strb	r3, [r7, #3]
     *pPos++ = kaHexAsc[Wert >> 4];
 8001998:	78fb      	ldrb	r3, [r7, #3]
 800199a:	091b      	lsrs	r3, r3, #4
 800199c:	b2db      	uxtb	r3, r3
 800199e:	461a      	mov	r2, r3
 80019a0:	4b09      	ldr	r3, [pc, #36]	@ (80019c8 <_ZN8UniqueID12CharToHexascEPhh+0x3c>)
 80019a2:	5c99      	ldrb	r1, [r3, r2]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	1c5a      	adds	r2, r3, #1
 80019a8:	607a      	str	r2, [r7, #4]
 80019aa:	460a      	mov	r2, r1
 80019ac:	701a      	strb	r2, [r3, #0]
     *pPos = kaHexAsc[Wert & 0x0f];
 80019ae:	78fb      	ldrb	r3, [r7, #3]
 80019b0:	f003 030f 	and.w	r3, r3, #15
 80019b4:	4a04      	ldr	r2, [pc, #16]	@ (80019c8 <_ZN8UniqueID12CharToHexascEPhh+0x3c>)
 80019b6:	5cd2      	ldrb	r2, [r2, r3]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	701a      	strb	r2, [r3, #0]
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	08014764 	.word	0x08014764

080019cc <_ZN8UniqueID6GetUidEv>:

char *UniqueID::GetUid()
{
 80019cc:	b590      	push	{r4, r7, lr}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
	static uint8_t sUid[13];
	uint32_t iWafer;

	iWafer = HAL_GetUIDw1() & 0x00FFul;
 80019d2:	f007 fac5 	bl	8008f60 <HAL_GetUIDw1>
 80019d6:	4603      	mov	r3, r0
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	607b      	str	r3, [r7, #4]
	// 7 lot numbers are already in ASCII
	*(uint32_t*) (&sUid[0]) = HAL_GetUIDw1() >> 8;
 80019dc:	f007 fac0 	bl	8008f60 <HAL_GetUIDw1>
 80019e0:	4603      	mov	r3, r0
 80019e2:	4a1d      	ldr	r2, [pc, #116]	@ (8001a58 <_ZN8UniqueID6GetUidEv+0x8c>)
 80019e4:	0a1b      	lsrs	r3, r3, #8
 80019e6:	6013      	str	r3, [r2, #0]
	*(uint32_t*) (&sUid[3]) = HAL_GetUIDw2();
 80019e8:	4c1c      	ldr	r4, [pc, #112]	@ (8001a5c <_ZN8UniqueID6GetUidEv+0x90>)
 80019ea:	f007 fac5 	bl	8008f78 <HAL_GetUIDw2>
 80019ee:	4603      	mov	r3, r0
 80019f0:	6023      	str	r3, [r4, #0]

	// Convert wafer number to 1 ASCII character
	if (iWafer >= 36)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2b23      	cmp	r3, #35	@ 0x23
 80019f6:	d909      	bls.n	8001a0c <_ZN8UniqueID6GetUidEv+0x40>
		sUid[7] = (iWafer >= 62) ? 'z' : ('a' + (iWafer - 36));
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2b3d      	cmp	r3, #61	@ 0x3d
 80019fc:	bf28      	it	cs
 80019fe:	233d      	movcs	r3, #61	@ 0x3d
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	333d      	adds	r3, #61	@ 0x3d
 8001a04:	b2da      	uxtb	r2, r3
 8001a06:	4b14      	ldr	r3, [pc, #80]	@ (8001a58 <_ZN8UniqueID6GetUidEv+0x8c>)
 8001a08:	71da      	strb	r2, [r3, #7]
 8001a0a:	e00b      	b.n	8001a24 <_ZN8UniqueID6GetUidEv+0x58>
	// Display with 10 + 26 + 26 symbols
	else
		sUid[7] = ((iWafer >= 10) ? 'A' : '0') + iWafer;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b09      	cmp	r3, #9
 8001a10:	d901      	bls.n	8001a16 <_ZN8UniqueID6GetUidEv+0x4a>
 8001a12:	2241      	movs	r2, #65	@ 0x41
 8001a14:	e000      	b.n	8001a18 <_ZN8UniqueID6GetUidEv+0x4c>
 8001a16:	2230      	movs	r2, #48	@ 0x30
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	4413      	add	r3, r2
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	4b0d      	ldr	r3, [pc, #52]	@ (8001a58 <_ZN8UniqueID6GetUidEv+0x8c>)
 8001a22:	71da      	strb	r2, [r3, #7]

	// Convert X and Y to 4 ASCII-HEX
	CharToHexasc(&sUid[8], (HAL_GetUIDw0() >> 16) & 0x00FFul);
 8001a24:	f007 fa90 	bl	8008f48 <HAL_GetUIDw0>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	0c1b      	lsrs	r3, r3, #16
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	4619      	mov	r1, r3
 8001a30:	480b      	ldr	r0, [pc, #44]	@ (8001a60 <_ZN8UniqueID6GetUidEv+0x94>)
 8001a32:	f7ff ffab 	bl	800198c <_ZN8UniqueID12CharToHexascEPhh>
	CharToHexasc(&sUid[10], HAL_GetUIDw0() & 0x00FFul);
 8001a36:	f007 fa87 	bl	8008f48 <HAL_GetUIDw0>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4808      	ldr	r0, [pc, #32]	@ (8001a64 <_ZN8UniqueID6GetUidEv+0x98>)
 8001a42:	f7ff ffa3 	bl	800198c <_ZN8UniqueID12CharToHexascEPhh>
	sUid[12] = 0;
 8001a46:	4b04      	ldr	r3, [pc, #16]	@ (8001a58 <_ZN8UniqueID6GetUidEv+0x8c>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	731a      	strb	r2, [r3, #12]
	return ((char*) sUid);
 8001a4c:	4b02      	ldr	r3, [pc, #8]	@ (8001a58 <_ZN8UniqueID6GetUidEv+0x8c>)
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd90      	pop	{r4, r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20001940 	.word	0x20001940
 8001a5c:	20001943 	.word	0x20001943
 8001a60:	20001948 	.word	0x20001948
 8001a64:	2000194a 	.word	0x2000194a

08001a68 <_Z11app_mainCppv>:




void app_mainCpp()
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0

	ModemTaskHandler.createTask();
 8001a6c:	4809      	ldr	r0, [pc, #36]	@ (8001a94 <_Z11app_mainCppv+0x2c>)
 8001a6e:	f002 fbf4 	bl	800425a <_ZN11System_Rtos14freertos_Tasks10createTaskEv>
    ControlTaskHandler.createTask();
 8001a72:	4809      	ldr	r0, [pc, #36]	@ (8001a98 <_Z11app_mainCppv+0x30>)
 8001a74:	f002 fbf1 	bl	800425a <_ZN11System_Rtos14freertos_Tasks10createTaskEv>
    DisplayTaskHandler.createTask();
 8001a78:	4808      	ldr	r0, [pc, #32]	@ (8001a9c <_Z11app_mainCppv+0x34>)
 8001a7a:	f002 fbee 	bl	800425a <_ZN11System_Rtos14freertos_Tasks10createTaskEv>

    ModemDataQueue.queueCreate();
 8001a7e:	4808      	ldr	r0, [pc, #32]	@ (8001aa0 <_Z11app_mainCppv+0x38>)
 8001a80:	f002 fc20 	bl	80042c4 <_ZN11System_Rtos15freertos_queues11queueCreateEv>
    ControlDataQueue.queueCreate();
 8001a84:	4807      	ldr	r0, [pc, #28]	@ (8001aa4 <_Z11app_mainCppv+0x3c>)
 8001a86:	f002 fc1d 	bl	80042c4 <_ZN11System_Rtos15freertos_queues11queueCreateEv>



    button::btn_init();
 8001a8a:	f004 fbcd 	bl	8006228 <_ZN6button8btn_initEv>


}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20001668 	.word	0x20001668
 8001a98:	2000168c 	.word	0x2000168c
 8001a9c:	200016b0 	.word	0x200016b0
 8001aa0:	200017b0 	.word	0x200017b0
 8001aa4:	20001880 	.word	0x20001880

08001aa8 <app_mainC>:
// All the functions that need to be used in C files transport from here
extern "C"
{

    void app_mainC()
    {
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
    	app_mainCpp();
 8001aac:	f7ff ffdc 	bl	8001a68 <_Z11app_mainCppv>
    }
 8001ab0:	bf00      	nop
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <_Z41__static_initialization_and_destruction_0ii>:


}
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af02      	add	r7, sp, #8
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d147      	bne.n	8001b54 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d142      	bne.n	8001b54 <_Z41__static_initialization_and_destruction_0ii+0xa0>
System_Rtos::freertos_Tasks ModemTaskHandler(ModemTask,"Modem",_StackSize_Modem, (void*) 1,24);
 8001ace:	2318      	movs	r3, #24
 8001ad0:	9301      	str	r3, [sp, #4]
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	9300      	str	r3, [sp, #0]
 8001ad6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ada:	4a20      	ldr	r2, [pc, #128]	@ (8001b5c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8001adc:	4920      	ldr	r1, [pc, #128]	@ (8001b60 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8001ade:	4821      	ldr	r0, [pc, #132]	@ (8001b64 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8001ae0:	f002 fb9a 	bl	8004218 <_ZN11System_Rtos14freertos_TasksC1EPFvPvEPKctS1_m>
System_Rtos::freertos_Tasks ControlTaskHandler(ControlTask,"Control",_StackSize_Control, (void*) 1,24);
 8001ae4:	2318      	movs	r3, #24
 8001ae6:	9301      	str	r3, [sp, #4]
 8001ae8:	2301      	movs	r3, #1
 8001aea:	9300      	str	r3, [sp, #0]
 8001aec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001af0:	4a1d      	ldr	r2, [pc, #116]	@ (8001b68 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8001af2:	491e      	ldr	r1, [pc, #120]	@ (8001b6c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8001af4:	481e      	ldr	r0, [pc, #120]	@ (8001b70 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8001af6:	f002 fb8f 	bl	8004218 <_ZN11System_Rtos14freertos_TasksC1EPFvPvEPKctS1_m>
System_Rtos::freertos_Tasks DisplayTaskHandler(DisplayTask,"Display",_StackSize_Display, (void*) 1,24);
 8001afa:	2318      	movs	r3, #24
 8001afc:	9301      	str	r3, [sp, #4]
 8001afe:	2301      	movs	r3, #1
 8001b00:	9300      	str	r3, [sp, #0]
 8001b02:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b06:	4a1b      	ldr	r2, [pc, #108]	@ (8001b74 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8001b08:	491b      	ldr	r1, [pc, #108]	@ (8001b78 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8001b0a:	481c      	ldr	r0, [pc, #112]	@ (8001b7c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8001b0c:	f002 fb84 	bl	8004218 <_ZN11System_Rtos14freertos_TasksC1EPFvPvEPKctS1_m>
System_Rtos::freertos_queues ModemDataQueue(1,sizeof(struct ModemData_Queue),	queuebuffer);
 8001b10:	4b1b      	ldr	r3, [pc, #108]	@ (8001b80 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8001b12:	22d9      	movs	r2, #217	@ 0xd9
 8001b14:	2101      	movs	r1, #1
 8001b16:	481b      	ldr	r0, [pc, #108]	@ (8001b84 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8001b18:	f002 fbb9 	bl	800428e <_ZN11System_Rtos15freertos_queuesC1EttPh>
System_Rtos::freertos_queues ControlDataQueue(1,sizeof(struct ControlData_Queue),	queuebuffer_1);
 8001b1c:	4b1a      	ldr	r3, [pc, #104]	@ (8001b88 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8001b1e:	2274      	movs	r2, #116	@ 0x74
 8001b20:	2101      	movs	r1, #1
 8001b22:	481a      	ldr	r0, [pc, #104]	@ (8001b8c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8001b24:	f002 fbb3 	bl	800428e <_ZN11System_Rtos15freertos_queuesC1EttPh>
System_rtc::stmRTC stmRTC(&hrtc,5);
 8001b28:	2205      	movs	r2, #5
 8001b2a:	4919      	ldr	r1, [pc, #100]	@ (8001b90 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8001b2c:	4819      	ldr	r0, [pc, #100]	@ (8001b94 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8001b2e:	f002 fcf3 	bl	8004518 <_ZN10System_rtc6stmRTCC1EP17RTC_HandleTypeDefa>
sensor_liquidMeas::liquidSensor liquidSensor(&hadc1,0.0, 10.0, 3.3);
 8001b32:	ed9f 1a19 	vldr	s2, [pc, #100]	@ 8001b98 <_Z41__static_initialization_and_destruction_0ii+0xe4>
 8001b36:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 8001b3a:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 8001b9c <_Z41__static_initialization_and_destruction_0ii+0xe8>
 8001b3e:	4918      	ldr	r1, [pc, #96]	@ (8001ba0 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8001b40:	4818      	ldr	r0, [pc, #96]	@ (8001ba4 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 8001b42:	f002 f8e3 	bl	8003d0c <_ZN17sensor_liquidMeas12liquidSensorC1EP17ADC_HandleTypeDeffff>
sensor_TempHumd::AHT20 AHT20(&hi2c1, 0x38);
 8001b46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b4a:	2238      	movs	r2, #56	@ 0x38
 8001b4c:	4916      	ldr	r1, [pc, #88]	@ (8001ba8 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 8001b4e:	4817      	ldr	r0, [pc, #92]	@ (8001bac <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 8001b50:	f001 ff90 	bl	8003a74 <_ZN15sensor_TempHumd5AHT20C1EP17I2C_HandleTypeDefhm>
}
 8001b54:	bf00      	nop
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	080141fc 	.word	0x080141fc
 8001b60:	080012fd 	.word	0x080012fd
 8001b64:	20001668 	.word	0x20001668
 8001b68:	08014204 	.word	0x08014204
 8001b6c:	08000ed9 	.word	0x08000ed9
 8001b70:	2000168c 	.word	0x2000168c
 8001b74:	0801420c 	.word	0x0801420c
 8001b78:	08001269 	.word	0x08001269
 8001b7c:	200016b0 	.word	0x200016b0
 8001b80:	200016d4 	.word	0x200016d4
 8001b84:	200017b0 	.word	0x200017b0
 8001b88:	2000180c 	.word	0x2000180c
 8001b8c:	20001880 	.word	0x20001880
 8001b90:	20001f30 	.word	0x20001f30
 8001b94:	200018dc 	.word	0x200018dc
 8001b98:	40533333 	.word	0x40533333
 8001b9c:	00000000 	.word	0x00000000
 8001ba0:	20001e94 	.word	0x20001e94
 8001ba4:	200018ec 	.word	0x200018ec
 8001ba8:	20001edc 	.word	0x20001edc
 8001bac:	20001928 	.word	0x20001928

08001bb0 <_GLOBAL__sub_I_ModemTaskHandler>:
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001bb8:	2001      	movs	r0, #1
 8001bba:	f7ff ff7b 	bl	8001ab4 <_Z41__static_initialization_and_destruction_0ii>
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef>:
struct simA7672::classInstanceRecorder simA7672::ClassInstances[numberofuart] =
		{ nullptr };

uint8_t simA7672::ClassInstanceIncrementer = 0;

simA7672::simA7672(UART_HandleTypeDef *huart) :
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
		GlobalTxBufs { simA7672::Txbuffer }, GlobalRxBufs { simA7672::Rxbuffer }, serial_(
				huart), checking() {
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	f00f fffc 	bl	8011bd2 <memset>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001be0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001be4:	2100      	movs	r1, #0
 8001be6:	4618      	mov	r0, r3
 8001be8:	f00f fff3 	bl	8011bd2 <memset>
		GlobalTxBufs { simA7672::Txbuffer }, GlobalRxBufs { simA7672::Rxbuffer }, serial_(
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001bf8:	6013      	str	r3, [r2, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c02:	6053      	str	r3, [r2, #4]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8001c0a:	3304      	adds	r3, #4
 8001c0c:	6839      	ldr	r1, [r7, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f002 ff0f 	bl	8004a32 <_ZN13System_serial6serialC1EP20__UART_HandleTypeDef>
				huart), checking() {
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8001c1a:	3308      	adds	r3, #8
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f002 ff57 	bl	8004ad0 <_ZN10System_sys16Parsing_CheckingC1Ev>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c28:	461a      	mov	r2, r3
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

	simA7672::ClassInstances[ClassInstanceIncrementer].huart = huart;
 8001c2e:	4b12      	ldr	r3, [pc, #72]	@ (8001c78 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xb8>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	4619      	mov	r1, r3
 8001c34:	4a11      	ldr	r2, [pc, #68]	@ (8001c7c <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xbc>)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
	simA7672::ClassInstances[ClassInstanceIncrementer].Instance = this;
 8001c3c:	4b0e      	ldr	r3, [pc, #56]	@ (8001c78 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xb8>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	4a0e      	ldr	r2, [pc, #56]	@ (8001c7c <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xbc>)
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	4413      	add	r3, r2
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	605a      	str	r2, [r3, #4]

	simA7672::ClassInstanceIncrementer++;
 8001c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c78 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xb8>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	4b09      	ldr	r3, [pc, #36]	@ (8001c78 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xb8>)
 8001c54:	701a      	strb	r2, [r3, #0]
	if (simA7672::ClassInstanceIncrementer > numberofuart) {
 8001c56:	4b08      	ldr	r3, [pc, #32]	@ (8001c78 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xb8>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	2b03      	cmp	r3, #3
 8001c5c:	d902      	bls.n	8001c64 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xa4>
		simA7672::ClassInstanceIncrementer = 0;
 8001c5e:	4b06      	ldr	r3, [pc, #24]	@ (8001c78 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xb8>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	701a      	strb	r2, [r3, #0]
	}

	setModemCallback(simA7672::RxCBStatic, simA7672::TxCBStatic);
 8001c64:	4906      	ldr	r1, [pc, #24]	@ (8001c80 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xc0>)
 8001c66:	4807      	ldr	r0, [pc, #28]	@ (8001c84 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xc4>)
 8001c68:	f002 fdae 	bl	80047c8 <_Z16setModemCallbackPFvP20__UART_HandleTypeDefhEPFvS0_E>

}
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20001968 	.word	0x20001968
 8001c7c:	20001950 	.word	0x20001950
 8001c80:	08003a61 	.word	0x08003a61
 8001c84:	080039fd 	.word	0x080039fd

08001c88 <_ZN5Modem8simA76724initEv>:

enum simA7672::status simA7672::init() {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af02      	add	r7, sp, #8
 8001c8e:	6078      	str	r0, [r7, #4]
	status stat = simA7672_OK;
 8001c90:	2300      	movs	r3, #0
 8001c92:	73fb      	strb	r3, [r7, #15]

	//Run 3 times
	PrepRxTx(atcmd_AT, sizeof(atcmd_AT) - 1, 1000, _LF, CMD_mode);
 8001c94:	2301      	movs	r3, #1
 8001c96:	9301      	str	r3, [sp, #4]
 8001c98:	230a      	movs	r3, #10
 8001c9a:	9300      	str	r3, [sp, #0]
 8001c9c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ca0:	2204      	movs	r2, #4
 8001ca2:	498f      	ldr	r1, [pc, #572]	@ (8001ee0 <_ZN5Modem8simA76724initEv+0x258>)
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f001 fbb3 	bl	8003410 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8001caa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cae:	2100      	movs	r1, #0
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f001 fcda 	bl	800366a <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_AT, sizeof(atcmd_AT) - 1, 1000, _LF, CMD_mode);
 8001cba:	2301      	movs	r3, #1
 8001cbc:	9301      	str	r3, [sp, #4]
 8001cbe:	230a      	movs	r3, #10
 8001cc0:	9300      	str	r3, [sp, #0]
 8001cc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cc6:	2204      	movs	r2, #4
 8001cc8:	4985      	ldr	r1, [pc, #532]	@ (8001ee0 <_ZN5Modem8simA76724initEv+0x258>)
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f001 fba0 	bl	8003410 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8001cd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f001 fcc7 	bl	800366a <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_AT, sizeof(atcmd_AT) - 1, 1000, _LF, CMD_mode);
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	9301      	str	r3, [sp, #4]
 8001ce4:	230a      	movs	r3, #10
 8001ce6:	9300      	str	r3, [sp, #0]
 8001ce8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cec:	2204      	movs	r2, #4
 8001cee:	497c      	ldr	r1, [pc, #496]	@ (8001ee0 <_ZN5Modem8simA76724initEv+0x258>)
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f001 fb8d 	bl	8003410 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8001cf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f001 fcb4 	bl	800366a <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8001d02:	4603      	mov	r3, r0
 8001d04:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_ATCRESET, sizeof(atcmd_ATCRESET) - 1, 1000, _LF, CMD_mode);
 8001d06:	2301      	movs	r3, #1
 8001d08:	9301      	str	r3, [sp, #4]
 8001d0a:	230a      	movs	r3, #10
 8001d0c:	9300      	str	r3, [sp, #0]
 8001d0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d12:	220b      	movs	r2, #11
 8001d14:	4973      	ldr	r1, [pc, #460]	@ (8001ee4 <_ZN5Modem8simA76724initEv+0x25c>)
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f001 fb7a 	bl	8003410 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8001d1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d20:	2100      	movs	r1, #0
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f001 fca1 	bl	800366a <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	73fb      	strb	r3, [r7, #15]

	System_Rtos::delay(15000);
 8001d2c:	f643 2098 	movw	r0, #15000	@ 0x3a98
 8001d30:	f002 fa5c 	bl	80041ec <_ZN11System_Rtos5delayEm>

	/*After reset send two AT just to make gsm responsive*/
	PrepRxTx(atcmd_AT, sizeof(atcmd_AT) - 1, 1000, _LF, CMD_mode);
 8001d34:	2301      	movs	r3, #1
 8001d36:	9301      	str	r3, [sp, #4]
 8001d38:	230a      	movs	r3, #10
 8001d3a:	9300      	str	r3, [sp, #0]
 8001d3c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d40:	2204      	movs	r2, #4
 8001d42:	4967      	ldr	r1, [pc, #412]	@ (8001ee0 <_ZN5Modem8simA76724initEv+0x258>)
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f001 fb63 	bl	8003410 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8001d4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d4e:	2100      	movs	r1, #0
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f001 fc8a 	bl	800366a <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8001d56:	4603      	mov	r3, r0
 8001d58:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_AT, sizeof(atcmd_AT) - 1, 1000, _LF, CMD_mode);
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	9301      	str	r3, [sp, #4]
 8001d5e:	230a      	movs	r3, #10
 8001d60:	9300      	str	r3, [sp, #0]
 8001d62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d66:	2204      	movs	r2, #4
 8001d68:	495d      	ldr	r1, [pc, #372]	@ (8001ee0 <_ZN5Modem8simA76724initEv+0x258>)
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f001 fb50 	bl	8003410 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8001d70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d74:	2100      	movs	r1, #0
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f001 fc77 	bl	800366a <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_AT, sizeof(atcmd_AT) - 1, 1000, _LF, CMD_mode);
 8001d80:	2301      	movs	r3, #1
 8001d82:	9301      	str	r3, [sp, #4]
 8001d84:	230a      	movs	r3, #10
 8001d86:	9300      	str	r3, [sp, #0]
 8001d88:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d8c:	2204      	movs	r2, #4
 8001d8e:	4954      	ldr	r1, [pc, #336]	@ (8001ee0 <_ZN5Modem8simA76724initEv+0x258>)
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f001 fb3d 	bl	8003410 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8001d96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f001 fc64 	bl	800366a <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8001da2:	4603      	mov	r3, r0
 8001da4:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_AT_F0, sizeof(atcmd_AT_F0) - 1, 1000, _LF, CMD_mode);
 8001da6:	2301      	movs	r3, #1
 8001da8:	9301      	str	r3, [sp, #4]
 8001daa:	230a      	movs	r3, #10
 8001dac:	9300      	str	r3, [sp, #0]
 8001dae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001db2:	2207      	movs	r2, #7
 8001db4:	494c      	ldr	r1, [pc, #304]	@ (8001ee8 <_ZN5Modem8simA76724initEv+0x260>)
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f001 fb2a 	bl	8003410 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8001dbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f001 fc51 	bl	800366a <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_ATE1, sizeof(atcmd_ATE1) - 1, 1000, _LF, CMD_mode);
 8001dcc:	2301      	movs	r3, #1
 8001dce:	9301      	str	r3, [sp, #4]
 8001dd0:	230a      	movs	r3, #10
 8001dd2:	9300      	str	r3, [sp, #0]
 8001dd4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dd8:	2206      	movs	r2, #6
 8001dda:	4944      	ldr	r1, [pc, #272]	@ (8001eec <_ZN5Modem8simA76724initEv+0x264>)
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f001 fb17 	bl	8003410 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8001de2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001de6:	2100      	movs	r1, #0
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f001 fc3e 	bl	800366a <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8001dee:	4603      	mov	r3, r0
 8001df0:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_ATCREG, sizeof(atcmd_ATCREG) - 1, 1000, _LF, CMD_mode);
 8001df2:	2301      	movs	r3, #1
 8001df4:	9301      	str	r3, [sp, #4]
 8001df6:	230a      	movs	r3, #10
 8001df8:	9300      	str	r3, [sp, #0]
 8001dfa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dfe:	220b      	movs	r2, #11
 8001e00:	493b      	ldr	r1, [pc, #236]	@ (8001ef0 <_ZN5Modem8simA76724initEv+0x268>)
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f001 fb04 	bl	8003410 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8001e08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f001 fc2b 	bl	800366a <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8001e14:	4603      	mov	r3, r0
 8001e16:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_ATCGREG, sizeof(atcmd_ATCGREG) - 1, 1000, _LF, CMD_mode);
 8001e18:	2301      	movs	r3, #1
 8001e1a:	9301      	str	r3, [sp, #4]
 8001e1c:	230a      	movs	r3, #10
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e24:	220c      	movs	r2, #12
 8001e26:	4933      	ldr	r1, [pc, #204]	@ (8001ef4 <_ZN5Modem8simA76724initEv+0x26c>)
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f001 faf1 	bl	8003410 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8001e2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e32:	2100      	movs	r1, #0
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f001 fc18 	bl	800366a <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_ATCPMS, sizeof(atcmd_ATCPMS) - 1, 1000, _LF, CMD_mode);
 8001e3e:	2301      	movs	r3, #1
 8001e40:	9301      	str	r3, [sp, #4]
 8001e42:	230a      	movs	r3, #10
 8001e44:	9300      	str	r3, [sp, #0]
 8001e46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e4a:	2218      	movs	r2, #24
 8001e4c:	492a      	ldr	r1, [pc, #168]	@ (8001ef8 <_ZN5Modem8simA76724initEv+0x270>)
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f001 fade 	bl	8003410 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8001e54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e58:	2100      	movs	r1, #0
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f001 fc05 	bl	800366a <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8001e60:	4603      	mov	r3, r0
 8001e62:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_ATCOPS, sizeof(atcmd_ATCOPS) - 1, 1000, _LF, CMD_mode);
 8001e64:	2301      	movs	r3, #1
 8001e66:	9301      	str	r3, [sp, #4]
 8001e68:	230a      	movs	r3, #10
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e70:	220b      	movs	r2, #11
 8001e72:	4922      	ldr	r1, [pc, #136]	@ (8001efc <_ZN5Modem8simA76724initEv+0x274>)
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f001 facb 	bl	8003410 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8001e7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e7e:	2100      	movs	r1, #0
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f001 fbf2 	bl	800366a <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8001e86:	4603      	mov	r3, r0
 8001e88:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_ATCMGF, sizeof(atcmd_ATCMGF) - 1, 1000, _LF, CMD_mode);
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	9301      	str	r3, [sp, #4]
 8001e8e:	230a      	movs	r3, #10
 8001e90:	9300      	str	r3, [sp, #0]
 8001e92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e96:	220b      	movs	r2, #11
 8001e98:	4919      	ldr	r1, [pc, #100]	@ (8001f00 <_ZN5Modem8simA76724initEv+0x278>)
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f001 fab8 	bl	8003410 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8001ea0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f001 fbdf 	bl	800366a <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8001eac:	4603      	mov	r3, r0
 8001eae:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_ATCGATT, sizeof(atcmd_ATCGATT) - 1, 1000, _LF, CMD_mode);
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	9301      	str	r3, [sp, #4]
 8001eb4:	230a      	movs	r3, #10
 8001eb6:	9300      	str	r3, [sp, #0]
 8001eb8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ebc:	220c      	movs	r2, #12
 8001ebe:	4911      	ldr	r1, [pc, #68]	@ (8001f04 <_ZN5Modem8simA76724initEv+0x27c>)
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f001 faa5 	bl	8003410 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8001ec6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eca:	2100      	movs	r1, #0
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f001 fbcc 	bl	800366a <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	73fb      	strb	r3, [r7, #15]

	return stat;
 8001ed6:	7bfb      	ldrb	r3, [r7, #15]

}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	08014774 	.word	0x08014774
 8001ee4:	0801477c 	.word	0x0801477c
 8001ee8:	08014830 	.word	0x08014830
 8001eec:	08014838 	.word	0x08014838
 8001ef0:	08014788 	.word	0x08014788
 8001ef4:	08014794 	.word	0x08014794
 8001ef8:	080147a4 	.word	0x080147a4
 8001efc:	080147c0 	.word	0x080147c0
 8001f00:	080147cc 	.word	0x080147cc
 8001f04:	080147d8 	.word	0x080147d8

08001f08 <_ZN5Modem8simA76726setAPNEPc>:

	}
	return stat;
}

enum simA7672::status simA7672::setAPN(char *apn) {
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b092      	sub	sp, #72	@ 0x48
 8001f0c:	af02      	add	r7, sp, #8
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]

	status stat = simA7672_OK;
 8001f12:	2300      	movs	r3, #0
 8001f14:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	char buf[50] = { 0 };
 8001f18:	2300      	movs	r3, #0
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	f107 0310 	add.w	r3, r7, #16
 8001f20:	222e      	movs	r2, #46	@ 0x2e
 8001f22:	2100      	movs	r1, #0
 8001f24:	4618      	mov	r0, r3
 8001f26:	f00f fe54 	bl	8011bd2 <memset>

	std::sprintf(buf, "AT+CGDCONT=1,\"ip\",\"%s\"\r\n", apn);
 8001f2a:	f107 030c 	add.w	r3, r7, #12
 8001f2e:	683a      	ldr	r2, [r7, #0]
 8001f30:	4920      	ldr	r1, [pc, #128]	@ (8001fb4 <_ZN5Modem8simA76726setAPNEPc+0xac>)
 8001f32:	4618      	mov	r0, r3
 8001f34:	f00f fdea 	bl	8011b0c <siprintf>
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
			std::strlen(const_cast<const char*>(buf)), 1000, _LF, CMD_mode);
 8001f38:	f107 030c 	add.w	r3, r7, #12
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7fe f997 	bl	8000270 <strlen>
 8001f42:	4603      	mov	r3, r0
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	f107 010c 	add.w	r1, r7, #12
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	9301      	str	r3, [sp, #4]
 8001f4e:	230a      	movs	r3, #10
 8001f50:	9300      	str	r3, [sp, #0]
 8001f52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f001 fa5a 	bl	8003410 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 8001f5c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001f60:	2100      	movs	r1, #0
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f001 fb81 	bl	800366a <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	if (stat != simA7672_OK
			|| checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8001f6e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d10f      	bne.n	8001f96 <_ZN5Modem8simA76726setAPNEPc+0x8e>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8001f7c:	3308      	adds	r3, #8
 8001f7e:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) != checking.sys_ok) {
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f86:	8a92      	ldrh	r2, [r2, #20]
 8001f88:	b292      	uxth	r2, r2
			|| checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f002 fdac 	bl	8004ae8 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <_ZN5Modem8simA76726setAPNEPc+0x92>
 8001f96:	2301      	movs	r3, #1
 8001f98:	e000      	b.n	8001f9c <_ZN5Modem8simA76726setAPNEPc+0x94>
 8001f9a:	2300      	movs	r3, #0
	if (stat != simA7672_OK
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d002      	beq.n	8001fa6 <_ZN5Modem8simA76726setAPNEPc+0x9e>

		stat = simA7672_ERR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	}

	return stat;
 8001fa6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f

}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3740      	adds	r7, #64	@ 0x40
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	08014224 	.word	0x08014224

08001fb8 <_ZN5Modem8simA767222activate_deactivatePDPENS0_8pdp_statE>:
enum simA7672::status simA7672::activate_deactivatePDP(
		enum pdp_stat activate_deactivate) {
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b08a      	sub	sp, #40	@ 0x28
 8001fbc:	af02      	add	r7, sp, #8
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	70fb      	strb	r3, [r7, #3]

	status stat = simA7672_OK;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	77fb      	strb	r3, [r7, #31]
	char buf[20] = { 0 };
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60bb      	str	r3, [r7, #8]
 8001fcc:	f107 030c 	add.w	r3, r7, #12
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	605a      	str	r2, [r3, #4]
 8001fd6:	609a      	str	r2, [r3, #8]
 8001fd8:	60da      	str	r2, [r3, #12]

	std::sprintf(buf, "AT+CGACT=%d,1\r\n", activate_deactivate);
 8001fda:	78fa      	ldrb	r2, [r7, #3]
 8001fdc:	f107 0308 	add.w	r3, r7, #8
 8001fe0:	491e      	ldr	r1, [pc, #120]	@ (800205c <_ZN5Modem8simA767222activate_deactivatePDPENS0_8pdp_statE+0xa4>)
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f00f fd92 	bl	8011b0c <siprintf>
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
			std::strlen(const_cast<const char*>(buf)), 1000, _LF, CMD_mode);
 8001fe8:	f107 0308 	add.w	r3, r7, #8
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7fe f93f 	bl	8000270 <strlen>
 8001ff2:	4603      	mov	r3, r0
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
 8001ff4:	b29a      	uxth	r2, r3
 8001ff6:	f107 0108 	add.w	r1, r7, #8
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	9301      	str	r3, [sp, #4]
 8001ffe:	230a      	movs	r3, #10
 8002000:	9300      	str	r3, [sp, #0]
 8002002:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f001 fa02 	bl	8003410 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 800200c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002010:	2100      	movs	r1, #0
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f001 fb29 	bl	800366a <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002018:	4603      	mov	r3, r0
 800201a:	77fb      	strb	r3, [r7, #31]

	if (stat != simA7672_OK
			|| checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 800201c:	7ffb      	ldrb	r3, [r7, #31]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d10f      	bne.n	8002042 <_ZN5Modem8simA767222activate_deactivatePDPENS0_8pdp_statE+0x8a>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8002028:	3308      	adds	r3, #8
 800202a:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) != checking.sys_ok) {
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002032:	8a92      	ldrh	r2, [r2, #20]
 8002034:	b292      	uxth	r2, r2
			|| checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002036:	4618      	mov	r0, r3
 8002038:	f002 fd56 	bl	8004ae8 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <_ZN5Modem8simA767222activate_deactivatePDPENS0_8pdp_statE+0x8e>
 8002042:	2301      	movs	r3, #1
 8002044:	e000      	b.n	8002048 <_ZN5Modem8simA767222activate_deactivatePDPENS0_8pdp_statE+0x90>
 8002046:	2300      	movs	r3, #0
	if (stat != simA7672_OK
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <_ZN5Modem8simA767222activate_deactivatePDPENS0_8pdp_statE+0x98>

		stat = simA7672_ERR;
 800204c:	2301      	movs	r3, #1
 800204e:	77fb      	strb	r3, [r7, #31]

	}

	return stat;
 8002050:	7ffb      	ldrb	r3, [r7, #31]

}
 8002052:	4618      	mov	r0, r3
 8002054:	3720      	adds	r7, #32
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	08014240 	.word	0x08014240

08002060 <_ZN5Modem8simA76726getSimEPc>:

/*Get Functions*/
void simA7672::getSim(char *pin) {
 8002060:	b580      	push	{r7, lr}
 8002062:	b088      	sub	sp, #32
 8002064:	af04      	add	r7, sp, #16
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
	status stat;

	PrepRxTx(atcmd_ATCPIN, sizeof(atcmd_ATCPIN) - 1, 1000, _LF, CMD_mode);
 800206a:	2301      	movs	r3, #1
 800206c:	9301      	str	r3, [sp, #4]
 800206e:	230a      	movs	r3, #10
 8002070:	9300      	str	r3, [sp, #0]
 8002072:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002076:	220a      	movs	r2, #10
 8002078:	492b      	ldr	r1, [pc, #172]	@ (8002128 <_ZN5Modem8simA76726getSimEPc+0xc8>)
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f001 f9c8 	bl	8003410 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 8002080:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002084:	2100      	movs	r1, #0
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f001 faef 	bl	800366a <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 800208c:	4603      	mov	r3, r0
 800208e:	73fb      	strb	r3, [r7, #15]
	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002090:	7bfb      	ldrb	r3, [r7, #15]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d111      	bne.n	80020ba <_ZN5Modem8simA76726getSimEPc+0x5a>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 800209c:	3308      	adds	r3, #8
 800209e:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80020a6:	8a92      	ldrh	r2, [r2, #20]
 80020a8:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80020aa:	4618      	mov	r0, r3
 80020ac:	f002 fd1c 	bl	8004ae8 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <_ZN5Modem8simA76726getSimEPc+0x5a>
 80020b6:	2301      	movs	r3, #1
 80020b8:	e000      	b.n	80020bc <_ZN5Modem8simA76726getSimEPc+0x5c>
 80020ba:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d024      	beq.n	800210a <_ZN5Modem8simA76726getSimEPc+0xaa>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 80020c6:	3008      	adds	r0, #8
 80020c8:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CPIN:", ':', _CR, pin)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020d0:	8a9b      	ldrh	r3, [r3, #20]
 80020d2:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	9302      	str	r3, [sp, #8]
 80020d8:	230d      	movs	r3, #13
 80020da:	9301      	str	r3, [sp, #4]
 80020dc:	233a      	movs	r3, #58	@ 0x3a
 80020de:	9300      	str	r3, [sp, #0]
 80020e0:	4b12      	ldr	r3, [pc, #72]	@ (800212c <_ZN5Modem8simA76726getSimEPc+0xcc>)
 80020e2:	f002 fd27 	bl	8004b34 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 80020e6:	4603      	mov	r3, r0
				== checking.sys_ok) {
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	bf0c      	ite	eq
 80020ec:	2301      	moveq	r3, #1
 80020ee:	2300      	movne	r3, #0
 80020f0:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d113      	bne.n	800211e <_ZN5Modem8simA76726getSimEPc+0xbe>
			return;
		} else {
			std::strcpy(pin, "--------");
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	490d      	ldr	r1, [pc, #52]	@ (8002130 <_ZN5Modem8simA76726getSimEPc+0xd0>)
 80020fa:	461a      	mov	r2, r3
 80020fc:	460b      	mov	r3, r1
 80020fe:	cb03      	ldmia	r3!, {r0, r1}
 8002100:	6010      	str	r0, [r2, #0]
 8002102:	6051      	str	r1, [r2, #4]
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	7213      	strb	r3, [r2, #8]
 8002108:	e00a      	b.n	8002120 <_ZN5Modem8simA76726getSimEPc+0xc0>
		}

	} else {
		std::strcpy(pin, "--------");
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	4908      	ldr	r1, [pc, #32]	@ (8002130 <_ZN5Modem8simA76726getSimEPc+0xd0>)
 800210e:	461a      	mov	r2, r3
 8002110:	460b      	mov	r3, r1
 8002112:	cb03      	ldmia	r3!, {r0, r1}
 8002114:	6010      	str	r0, [r2, #0]
 8002116:	6051      	str	r1, [r2, #4]
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	7213      	strb	r3, [r2, #8]
 800211c:	e000      	b.n	8002120 <_ZN5Modem8simA76726getSimEPc+0xc0>
			return;
 800211e:	bf00      	nop
	}

}
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	080147e8 	.word	0x080147e8
 800212c:	08014250 	.word	0x08014250
 8002130:	08014258 	.word	0x08014258

08002134 <_ZN5Modem8simA767210getNetworkEPc>:
void simA7672::getPin() {

}
void simA7672::getNetwork(char *networkStat) {
 8002134:	b590      	push	{r4, r7, lr}
 8002136:	b089      	sub	sp, #36	@ 0x24
 8002138:	af04      	add	r7, sp, #16
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
	status stat;

	PrepRxTx(atcmd_GATCREG, sizeof(atcmd_GATCREG) - 1, 1000, _LF, CMD_mode);
 800213e:	2301      	movs	r3, #1
 8002140:	9301      	str	r3, [sp, #4]
 8002142:	230a      	movs	r3, #10
 8002144:	9300      	str	r3, [sp, #0]
 8002146:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800214a:	220a      	movs	r2, #10
 800214c:	4961      	ldr	r1, [pc, #388]	@ (80022d4 <_ZN5Modem8simA767210getNetworkEPc+0x1a0>)
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f001 f95e 	bl	8003410 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 8002154:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002158:	2100      	movs	r1, #0
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f001 fa85 	bl	800366a <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002160:	4603      	mov	r3, r0
 8002162:	73fb      	strb	r3, [r7, #15]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002164:	7bfb      	ldrb	r3, [r7, #15]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d111      	bne.n	800218e <_ZN5Modem8simA767210getNetworkEPc+0x5a>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8002170:	3308      	adds	r3, #8
 8002172:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800217a:	8a92      	ldrh	r2, [r2, #20]
 800217c:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 800217e:	4618      	mov	r0, r3
 8002180:	f002 fcb2 	bl	8004ae8 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <_ZN5Modem8simA767210getNetworkEPc+0x5a>
 800218a:	2301      	movs	r3, #1
 800218c:	e000      	b.n	8002190 <_ZN5Modem8simA767210getNetworkEPc+0x5c>
 800218e:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8002190:	2b00      	cmp	r3, #0
 8002192:	f000 8093 	beq.w	80022bc <_ZN5Modem8simA767210getNetworkEPc+0x188>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 800219c:	3008      	adds	r0, #8
 800219e:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CREG:", ',', _CR, networkStat)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021a6:	8a9b      	ldrh	r3, [r3, #20]
 80021a8:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	9302      	str	r3, [sp, #8]
 80021ae:	230d      	movs	r3, #13
 80021b0:	9301      	str	r3, [sp, #4]
 80021b2:	232c      	movs	r3, #44	@ 0x2c
 80021b4:	9300      	str	r3, [sp, #0]
 80021b6:	4b48      	ldr	r3, [pc, #288]	@ (80022d8 <_ZN5Modem8simA767210getNetworkEPc+0x1a4>)
 80021b8:	f002 fcbc 	bl	8004b34 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 80021bc:	4603      	mov	r3, r0
				== checking.sys_ok) {
 80021be:	2b00      	cmp	r3, #0
 80021c0:	bf0c      	ite	eq
 80021c2:	2301      	moveq	r3, #1
 80021c4:	2300      	movne	r3, #0
 80021c6:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d06d      	beq.n	80022a8 <_ZN5Modem8simA767210getNetworkEPc+0x174>
			switch (*networkStat) {
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	3b30      	subs	r3, #48	@ 0x30
 80021d2:	2b07      	cmp	r3, #7
 80021d4:	d85d      	bhi.n	8002292 <_ZN5Modem8simA767210getNetworkEPc+0x15e>
 80021d6:	a201      	add	r2, pc, #4	@ (adr r2, 80021dc <_ZN5Modem8simA767210getNetworkEPc+0xa8>)
 80021d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021dc:	080021fd 	.word	0x080021fd
 80021e0:	0800220d 	.word	0x0800220d
 80021e4:	08002221 	.word	0x08002221
 80021e8:	08002235 	.word	0x08002235
 80021ec:	0800224d 	.word	0x0800224d
 80021f0:	0800225d 	.word	0x0800225d
 80021f4:	0800226f 	.word	0x0800226f
 80021f8:	0800227f 	.word	0x0800227f
			case '0': {
				std::strcpy(networkStat, "Not-Reg");
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	4937      	ldr	r1, [pc, #220]	@ (80022dc <_ZN5Modem8simA767210getNetworkEPc+0x1a8>)
 8002200:	461a      	mov	r2, r3
 8002202:	460b      	mov	r3, r1
 8002204:	cb03      	ldmia	r3!, {r0, r1}
 8002206:	6010      	str	r0, [r2, #0]
 8002208:	6051      	str	r1, [r2, #4]

				break;
 800220a:	e04c      	b.n	80022a6 <_ZN5Modem8simA767210getNetworkEPc+0x172>
			}
			case '1': {
				std::strcpy(networkStat, "Reg-Home");
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	4934      	ldr	r1, [pc, #208]	@ (80022e0 <_ZN5Modem8simA767210getNetworkEPc+0x1ac>)
 8002210:	461a      	mov	r2, r3
 8002212:	460b      	mov	r3, r1
 8002214:	cb03      	ldmia	r3!, {r0, r1}
 8002216:	6010      	str	r0, [r2, #0]
 8002218:	6051      	str	r1, [r2, #4]
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	7213      	strb	r3, [r2, #8]

				break;
 800221e:	e042      	b.n	80022a6 <_ZN5Modem8simA767210getNetworkEPc+0x172>
			}
			case '2': {
				std::strcpy(networkStat, "Searching");
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	4930      	ldr	r1, [pc, #192]	@ (80022e4 <_ZN5Modem8simA767210getNetworkEPc+0x1b0>)
 8002224:	461a      	mov	r2, r3
 8002226:	460b      	mov	r3, r1
 8002228:	cb03      	ldmia	r3!, {r0, r1}
 800222a:	6010      	str	r0, [r2, #0]
 800222c:	6051      	str	r1, [r2, #4]
 800222e:	881b      	ldrh	r3, [r3, #0]
 8002230:	8113      	strh	r3, [r2, #8]

				break;
 8002232:	e038      	b.n	80022a6 <_ZN5Modem8simA767210getNetworkEPc+0x172>
			}
			case '3': {
				std::strcpy(networkStat, "Reg-denied");
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	492c      	ldr	r1, [pc, #176]	@ (80022e8 <_ZN5Modem8simA767210getNetworkEPc+0x1b4>)
 8002238:	461a      	mov	r2, r3
 800223a:	460b      	mov	r3, r1
 800223c:	cb03      	ldmia	r3!, {r0, r1}
 800223e:	6010      	str	r0, [r2, #0]
 8002240:	6051      	str	r1, [r2, #4]
 8002242:	8819      	ldrh	r1, [r3, #0]
 8002244:	789b      	ldrb	r3, [r3, #2]
 8002246:	8111      	strh	r1, [r2, #8]
 8002248:	7293      	strb	r3, [r2, #10]

				break;
 800224a:	e02c      	b.n	80022a6 <_ZN5Modem8simA767210getNetworkEPc+0x172>
			}
			case '4': {
				std::strcpy(networkStat, "Unknown");
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	4927      	ldr	r1, [pc, #156]	@ (80022ec <_ZN5Modem8simA767210getNetworkEPc+0x1b8>)
 8002250:	461a      	mov	r2, r3
 8002252:	460b      	mov	r3, r1
 8002254:	cb03      	ldmia	r3!, {r0, r1}
 8002256:	6010      	str	r0, [r2, #0]
 8002258:	6051      	str	r1, [r2, #4]

				break;
 800225a:	e024      	b.n	80022a6 <_ZN5Modem8simA767210getNetworkEPc+0x172>
			}
			case '5': {
				std::strcpy(networkStat, "Reg-Roaming");
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	4a24      	ldr	r2, [pc, #144]	@ (80022f0 <_ZN5Modem8simA767210getNetworkEPc+0x1bc>)
 8002260:	461c      	mov	r4, r3
 8002262:	4613      	mov	r3, r2
 8002264:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002266:	6020      	str	r0, [r4, #0]
 8002268:	6061      	str	r1, [r4, #4]
 800226a:	60a2      	str	r2, [r4, #8]

				break;
 800226c:	e01b      	b.n	80022a6 <_ZN5Modem8simA767210getNetworkEPc+0x172>
			}
			case '6': {
				std::strcpy(networkStat, "Reg-SMS");
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	4920      	ldr	r1, [pc, #128]	@ (80022f4 <_ZN5Modem8simA767210getNetworkEPc+0x1c0>)
 8002272:	461a      	mov	r2, r3
 8002274:	460b      	mov	r3, r1
 8002276:	cb03      	ldmia	r3!, {r0, r1}
 8002278:	6010      	str	r0, [r2, #0]
 800227a:	6051      	str	r1, [r2, #4]

				break;
 800227c:	e013      	b.n	80022a6 <_ZN5Modem8simA767210getNetworkEPc+0x172>
			}
			case '7': {
				std::strcpy(networkStat, "Reg-SMSR");
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	491d      	ldr	r1, [pc, #116]	@ (80022f8 <_ZN5Modem8simA767210getNetworkEPc+0x1c4>)
 8002282:	461a      	mov	r2, r3
 8002284:	460b      	mov	r3, r1
 8002286:	cb03      	ldmia	r3!, {r0, r1}
 8002288:	6010      	str	r0, [r2, #0]
 800228a:	6051      	str	r1, [r2, #4]
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	7213      	strb	r3, [r2, #8]

				break;
 8002290:	e009      	b.n	80022a6 <_ZN5Modem8simA767210getNetworkEPc+0x172>
			}
			default: {
				std::strcpy(networkStat, "--------");
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	4919      	ldr	r1, [pc, #100]	@ (80022fc <_ZN5Modem8simA767210getNetworkEPc+0x1c8>)
 8002296:	461a      	mov	r2, r3
 8002298:	460b      	mov	r3, r1
 800229a:	cb03      	ldmia	r3!, {r0, r1}
 800229c:	6010      	str	r0, [r2, #0]
 800229e:	6051      	str	r1, [r2, #4]
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	7213      	strb	r3, [r2, #8]

				break;
 80022a4:	bf00      	nop
			}
			}
			return;
 80022a6:	e012      	b.n	80022ce <_ZN5Modem8simA767210getNetworkEPc+0x19a>
		} else {
			std::strcpy(networkStat, "--------");
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	4914      	ldr	r1, [pc, #80]	@ (80022fc <_ZN5Modem8simA767210getNetworkEPc+0x1c8>)
 80022ac:	461a      	mov	r2, r3
 80022ae:	460b      	mov	r3, r1
 80022b0:	cb03      	ldmia	r3!, {r0, r1}
 80022b2:	6010      	str	r0, [r2, #0]
 80022b4:	6051      	str	r1, [r2, #4]
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	7213      	strb	r3, [r2, #8]
 80022ba:	e008      	b.n	80022ce <_ZN5Modem8simA767210getNetworkEPc+0x19a>
		}

	} else {
		std::strcpy(networkStat, "--------");
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	490f      	ldr	r1, [pc, #60]	@ (80022fc <_ZN5Modem8simA767210getNetworkEPc+0x1c8>)
 80022c0:	461a      	mov	r2, r3
 80022c2:	460b      	mov	r3, r1
 80022c4:	cb03      	ldmia	r3!, {r0, r1}
 80022c6:	6010      	str	r0, [r2, #0]
 80022c8:	6051      	str	r1, [r2, #4]
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	7213      	strb	r3, [r2, #8]
	}

}
 80022ce:	3714      	adds	r7, #20
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd90      	pop	{r4, r7, pc}
 80022d4:	080147f4 	.word	0x080147f4
 80022d8:	08014264 	.word	0x08014264
 80022dc:	0801426c 	.word	0x0801426c
 80022e0:	08014274 	.word	0x08014274
 80022e4:	08014280 	.word	0x08014280
 80022e8:	0801428c 	.word	0x0801428c
 80022ec:	08014298 	.word	0x08014298
 80022f0:	080142a0 	.word	0x080142a0
 80022f4:	080142ac 	.word	0x080142ac
 80022f8:	080142b4 	.word	0x080142b4
 80022fc:	08014258 	.word	0x08014258

08002300 <_ZN5Modem8simA767213getNetworkPDPEPc>:

void simA7672::getNetworkPDP(char *networkStatpdp) {
 8002300:	b590      	push	{r4, r7, lr}
 8002302:	b089      	sub	sp, #36	@ 0x24
 8002304:	af04      	add	r7, sp, #16
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
	status stat;

	PrepRxTx(atcmd_GATCGREG, sizeof(atcmd_GATCGREG) - 1, 1000, _LF, CMD_mode);
 800230a:	2301      	movs	r3, #1
 800230c:	9301      	str	r3, [sp, #4]
 800230e:	230a      	movs	r3, #10
 8002310:	9300      	str	r3, [sp, #0]
 8002312:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002316:	220b      	movs	r2, #11
 8002318:	495b      	ldr	r1, [pc, #364]	@ (8002488 <_ZN5Modem8simA767213getNetworkPDPEPc+0x188>)
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f001 f878 	bl	8003410 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 8002320:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002324:	2100      	movs	r1, #0
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f001 f99f 	bl	800366a <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 800232c:	4603      	mov	r3, r0
 800232e:	73fb      	strb	r3, [r7, #15]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002330:	7bfb      	ldrb	r3, [r7, #15]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d111      	bne.n	800235a <_ZN5Modem8simA767213getNetworkPDPEPc+0x5a>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 800233c:	3308      	adds	r3, #8
 800233e:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002346:	8a92      	ldrh	r2, [r2, #20]
 8002348:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 800234a:	4618      	mov	r0, r3
 800234c:	f002 fbcc 	bl	8004ae8 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <_ZN5Modem8simA767213getNetworkPDPEPc+0x5a>
 8002356:	2301      	movs	r3, #1
 8002358:	e000      	b.n	800235c <_ZN5Modem8simA767213getNetworkPDPEPc+0x5c>
 800235a:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 800235c:	2b00      	cmp	r3, #0
 800235e:	f000 8087 	beq.w	8002470 <_ZN5Modem8simA767213getNetworkPDPEPc+0x170>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8002368:	3008      	adds	r0, #8
 800236a:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CGREG:", ',', _CR, networkStatpdp)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002372:	8a9b      	ldrh	r3, [r3, #20]
 8002374:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	9302      	str	r3, [sp, #8]
 800237a:	230d      	movs	r3, #13
 800237c:	9301      	str	r3, [sp, #4]
 800237e:	232c      	movs	r3, #44	@ 0x2c
 8002380:	9300      	str	r3, [sp, #0]
 8002382:	4b42      	ldr	r3, [pc, #264]	@ (800248c <_ZN5Modem8simA767213getNetworkPDPEPc+0x18c>)
 8002384:	f002 fbd6 	bl	8004b34 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 8002388:	4603      	mov	r3, r0
				== checking.sys_ok) {
 800238a:	2b00      	cmp	r3, #0
 800238c:	bf0c      	ite	eq
 800238e:	2301      	moveq	r3, #1
 8002390:	2300      	movne	r3, #0
 8002392:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002394:	2b00      	cmp	r3, #0
 8002396:	d061      	beq.n	800245c <_ZN5Modem8simA767213getNetworkPDPEPc+0x15c>
			switch (*networkStatpdp) {
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	3b30      	subs	r3, #48	@ 0x30
 800239e:	2b06      	cmp	r3, #6
 80023a0:	d851      	bhi.n	8002446 <_ZN5Modem8simA767213getNetworkPDPEPc+0x146>
 80023a2:	a201      	add	r2, pc, #4	@ (adr r2, 80023a8 <_ZN5Modem8simA767213getNetworkPDPEPc+0xa8>)
 80023a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023a8:	080023c5 	.word	0x080023c5
 80023ac:	080023d5 	.word	0x080023d5
 80023b0:	080023e9 	.word	0x080023e9
 80023b4:	080023fd 	.word	0x080023fd
 80023b8:	08002415 	.word	0x08002415
 80023bc:	08002425 	.word	0x08002425
 80023c0:	08002437 	.word	0x08002437
			case '0': {
				std::strcpy(networkStatpdp, "Not-Reg");
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	4932      	ldr	r1, [pc, #200]	@ (8002490 <_ZN5Modem8simA767213getNetworkPDPEPc+0x190>)
 80023c8:	461a      	mov	r2, r3
 80023ca:	460b      	mov	r3, r1
 80023cc:	cb03      	ldmia	r3!, {r0, r1}
 80023ce:	6010      	str	r0, [r2, #0]
 80023d0:	6051      	str	r1, [r2, #4]

				break;
 80023d2:	e042      	b.n	800245a <_ZN5Modem8simA767213getNetworkPDPEPc+0x15a>
			}
			case '1': {
				std::strcpy(networkStatpdp, "Reg-Home");
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	492f      	ldr	r1, [pc, #188]	@ (8002494 <_ZN5Modem8simA767213getNetworkPDPEPc+0x194>)
 80023d8:	461a      	mov	r2, r3
 80023da:	460b      	mov	r3, r1
 80023dc:	cb03      	ldmia	r3!, {r0, r1}
 80023de:	6010      	str	r0, [r2, #0]
 80023e0:	6051      	str	r1, [r2, #4]
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	7213      	strb	r3, [r2, #8]

				break;
 80023e6:	e038      	b.n	800245a <_ZN5Modem8simA767213getNetworkPDPEPc+0x15a>
			}
			case '2': {
				std::strcpy(networkStatpdp, "Searching");
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	492b      	ldr	r1, [pc, #172]	@ (8002498 <_ZN5Modem8simA767213getNetworkPDPEPc+0x198>)
 80023ec:	461a      	mov	r2, r3
 80023ee:	460b      	mov	r3, r1
 80023f0:	cb03      	ldmia	r3!, {r0, r1}
 80023f2:	6010      	str	r0, [r2, #0]
 80023f4:	6051      	str	r1, [r2, #4]
 80023f6:	881b      	ldrh	r3, [r3, #0]
 80023f8:	8113      	strh	r3, [r2, #8]

				break;
 80023fa:	e02e      	b.n	800245a <_ZN5Modem8simA767213getNetworkPDPEPc+0x15a>
			}
			case '3': {
				std::strcpy(networkStatpdp, "Reg-denied");
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	4927      	ldr	r1, [pc, #156]	@ (800249c <_ZN5Modem8simA767213getNetworkPDPEPc+0x19c>)
 8002400:	461a      	mov	r2, r3
 8002402:	460b      	mov	r3, r1
 8002404:	cb03      	ldmia	r3!, {r0, r1}
 8002406:	6010      	str	r0, [r2, #0]
 8002408:	6051      	str	r1, [r2, #4]
 800240a:	8819      	ldrh	r1, [r3, #0]
 800240c:	789b      	ldrb	r3, [r3, #2]
 800240e:	8111      	strh	r1, [r2, #8]
 8002410:	7293      	strb	r3, [r2, #10]

				break;
 8002412:	e022      	b.n	800245a <_ZN5Modem8simA767213getNetworkPDPEPc+0x15a>
			}
			case '4': {
				std::strcpy(networkStatpdp, "Unknown");
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	4922      	ldr	r1, [pc, #136]	@ (80024a0 <_ZN5Modem8simA767213getNetworkPDPEPc+0x1a0>)
 8002418:	461a      	mov	r2, r3
 800241a:	460b      	mov	r3, r1
 800241c:	cb03      	ldmia	r3!, {r0, r1}
 800241e:	6010      	str	r0, [r2, #0]
 8002420:	6051      	str	r1, [r2, #4]

				break;
 8002422:	e01a      	b.n	800245a <_ZN5Modem8simA767213getNetworkPDPEPc+0x15a>
			}
			case '5': {
				std::strcpy(networkStatpdp, "Reg-Roaming");
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	4a1f      	ldr	r2, [pc, #124]	@ (80024a4 <_ZN5Modem8simA767213getNetworkPDPEPc+0x1a4>)
 8002428:	461c      	mov	r4, r3
 800242a:	4613      	mov	r3, r2
 800242c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800242e:	6020      	str	r0, [r4, #0]
 8002430:	6061      	str	r1, [r4, #4]
 8002432:	60a2      	str	r2, [r4, #8]

				break;
 8002434:	e011      	b.n	800245a <_ZN5Modem8simA767213getNetworkPDPEPc+0x15a>
			}
			case '6': {
				std::strcpy(networkStatpdp, "Reg-SMS");
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	491b      	ldr	r1, [pc, #108]	@ (80024a8 <_ZN5Modem8simA767213getNetworkPDPEPc+0x1a8>)
 800243a:	461a      	mov	r2, r3
 800243c:	460b      	mov	r3, r1
 800243e:	cb03      	ldmia	r3!, {r0, r1}
 8002440:	6010      	str	r0, [r2, #0]
 8002442:	6051      	str	r1, [r2, #4]

				break;
 8002444:	e009      	b.n	800245a <_ZN5Modem8simA767213getNetworkPDPEPc+0x15a>
			}
			default: {
				std::strcpy(networkStatpdp, "--------");
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	4918      	ldr	r1, [pc, #96]	@ (80024ac <_ZN5Modem8simA767213getNetworkPDPEPc+0x1ac>)
 800244a:	461a      	mov	r2, r3
 800244c:	460b      	mov	r3, r1
 800244e:	cb03      	ldmia	r3!, {r0, r1}
 8002450:	6010      	str	r0, [r2, #0]
 8002452:	6051      	str	r1, [r2, #4]
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	7213      	strb	r3, [r2, #8]

				break;
 8002458:	bf00      	nop
			}
			}
			return;
 800245a:	e012      	b.n	8002482 <_ZN5Modem8simA767213getNetworkPDPEPc+0x182>
		} else {
			std::strcpy(networkStatpdp, "--------");
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	4913      	ldr	r1, [pc, #76]	@ (80024ac <_ZN5Modem8simA767213getNetworkPDPEPc+0x1ac>)
 8002460:	461a      	mov	r2, r3
 8002462:	460b      	mov	r3, r1
 8002464:	cb03      	ldmia	r3!, {r0, r1}
 8002466:	6010      	str	r0, [r2, #0]
 8002468:	6051      	str	r1, [r2, #4]
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	7213      	strb	r3, [r2, #8]
 800246e:	e008      	b.n	8002482 <_ZN5Modem8simA767213getNetworkPDPEPc+0x182>
		}

	} else {
		std::strcpy(networkStatpdp, "--------");
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	490e      	ldr	r1, [pc, #56]	@ (80024ac <_ZN5Modem8simA767213getNetworkPDPEPc+0x1ac>)
 8002474:	461a      	mov	r2, r3
 8002476:	460b      	mov	r3, r1
 8002478:	cb03      	ldmia	r3!, {r0, r1}
 800247a:	6010      	str	r0, [r2, #0]
 800247c:	6051      	str	r1, [r2, #4]
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	7213      	strb	r3, [r2, #8]
	}

}
 8002482:	3714      	adds	r7, #20
 8002484:	46bd      	mov	sp, r7
 8002486:	bd90      	pop	{r4, r7, pc}
 8002488:	08014800 	.word	0x08014800
 800248c:	080142c0 	.word	0x080142c0
 8002490:	0801426c 	.word	0x0801426c
 8002494:	08014274 	.word	0x08014274
 8002498:	08014280 	.word	0x08014280
 800249c:	0801428c 	.word	0x0801428c
 80024a0:	08014298 	.word	0x08014298
 80024a4:	080142a0 	.word	0x080142a0
 80024a8:	080142ac 	.word	0x080142ac
 80024ac:	08014258 	.word	0x08014258

080024b0 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE>:

void simA7672::getPDPstatus(enum pdp_stat *status_pdp) {
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b08a      	sub	sp, #40	@ 0x28
 80024b4:	af04      	add	r7, sp, #16
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]

	status stat;

	char buf[10] = { 0 };
 80024ba:	2300      	movs	r3, #0
 80024bc:	60fb      	str	r3, [r7, #12]
 80024be:	f107 0310 	add.w	r3, r7, #16
 80024c2:	2200      	movs	r2, #0
 80024c4:	601a      	str	r2, [r3, #0]
 80024c6:	809a      	strh	r2, [r3, #4]

	*status_pdp = pdp_noReply;
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	2202      	movs	r2, #2
 80024cc:	701a      	strb	r2, [r3, #0]

	PrepRxTx(atcmd_GATCGACT, sizeof(atcmd_GATCGACT) - 1, 1000, _LF, CMD_mode);
 80024ce:	2301      	movs	r3, #1
 80024d0:	9301      	str	r3, [sp, #4]
 80024d2:	230a      	movs	r3, #10
 80024d4:	9300      	str	r3, [sp, #0]
 80024d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024da:	220b      	movs	r2, #11
 80024dc:	4928      	ldr	r1, [pc, #160]	@ (8002580 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0xd0>)
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 ff96 	bl	8003410 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 80024e4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80024e8:	2100      	movs	r1, #0
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f001 f8bd 	bl	800366a <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80024f0:	4603      	mov	r3, r0
 80024f2:	75fb      	strb	r3, [r7, #23]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80024f4:	7dfb      	ldrb	r3, [r7, #23]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d111      	bne.n	800251e <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0x6e>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8002500:	3308      	adds	r3, #8
 8002502:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800250a:	8a92      	ldrh	r2, [r2, #20]
 800250c:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 800250e:	4618      	mov	r0, r3
 8002510:	f002 faea 	bl	8004ae8 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0x6e>
 800251a:	2301      	movs	r3, #1
 800251c:	e000      	b.n	8002520 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0x70>
 800251e:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8002520:	2b00      	cmp	r3, #0
 8002522:	d029      	beq.n	8002578 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0xc8>

		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 800252a:	3008      	adds	r0, #8
 800252c:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CGACT:", ':', ',', buf)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002534:	8a9b      	ldrh	r3, [r3, #20]
 8002536:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002538:	f107 030c 	add.w	r3, r7, #12
 800253c:	9302      	str	r3, [sp, #8]
 800253e:	232c      	movs	r3, #44	@ 0x2c
 8002540:	9301      	str	r3, [sp, #4]
 8002542:	233a      	movs	r3, #58	@ 0x3a
 8002544:	9300      	str	r3, [sp, #0]
 8002546:	4b0f      	ldr	r3, [pc, #60]	@ (8002584 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0xd4>)
 8002548:	f002 faf4 	bl	8004b34 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 800254c:	4603      	mov	r3, r0
				== checking.sys_ok) {
 800254e:	2b00      	cmp	r3, #0
 8002550:	bf0c      	ite	eq
 8002552:	2301      	moveq	r3, #1
 8002554:	2300      	movne	r3, #0
 8002556:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00d      	beq.n	8002578 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0xc8>
			switch (*buf) {
 800255c:	7b3b      	ldrb	r3, [r7, #12]
 800255e:	2b30      	cmp	r3, #48	@ 0x30
 8002560:	d002      	beq.n	8002568 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0xb8>
 8002562:	2b31      	cmp	r3, #49	@ 0x31
 8002564:	d004      	beq.n	8002570 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0xc0>

		}

	}

}
 8002566:	e007      	b.n	8002578 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0xc8>
				*status_pdp = pdp_deactivated;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	2200      	movs	r2, #0
 800256c:	701a      	strb	r2, [r3, #0]
				break;
 800256e:	e003      	b.n	8002578 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0xc8>
				*status_pdp = pdp_activate;
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	2201      	movs	r2, #1
 8002574:	701a      	strb	r2, [r3, #0]
				break;
 8002576:	bf00      	nop
}
 8002578:	bf00      	nop
 800257a:	3718      	adds	r7, #24
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	0801480c 	.word	0x0801480c
 8002584:	080142c8 	.word	0x080142c8

08002588 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE>:

void simA7672::getUEsystemInfo(enum UE_systemInfo *status_ue) {
 8002588:	b580      	push	{r7, lr}
 800258a:	b08a      	sub	sp, #40	@ 0x28
 800258c:	af04      	add	r7, sp, #16
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]

	status stat;

	char buf[15] = { 0 };
 8002592:	2300      	movs	r3, #0
 8002594:	60bb      	str	r3, [r7, #8]
 8002596:	f107 030c 	add.w	r3, r7, #12
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	605a      	str	r2, [r3, #4]
 80025a0:	f8c3 2007 	str.w	r2, [r3, #7]

	*status_ue = no_service;
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	2200      	movs	r2, #0
 80025a8:	701a      	strb	r2, [r3, #0]

	PrepRxTx(atcmd_GATCPSI, sizeof(atcmd_GATCPSI) - 1, 1000, _LF, CMD_mode);
 80025aa:	2301      	movs	r3, #1
 80025ac:	9301      	str	r3, [sp, #4]
 80025ae:	230a      	movs	r3, #10
 80025b0:	9300      	str	r3, [sp, #0]
 80025b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025b6:	220a      	movs	r2, #10
 80025b8:	4945      	ldr	r1, [pc, #276]	@ (80026d0 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x148>)
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 ff28 	bl	8003410 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 80025c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025c4:	2100      	movs	r1, #0
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f001 f84f 	bl	800366a <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80025cc:	4603      	mov	r3, r0
 80025ce:	75fb      	strb	r3, [r7, #23]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80025d0:	7dfb      	ldrb	r3, [r7, #23]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d111      	bne.n	80025fa <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x72>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80025dc:	3308      	adds	r3, #8
 80025de:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80025e6:	8a92      	ldrh	r2, [r2, #20]
 80025e8:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80025ea:	4618      	mov	r0, r3
 80025ec:	f002 fa7c 	bl	8004ae8 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x72>
 80025f6:	2301      	movs	r3, #1
 80025f8:	e000      	b.n	80025fc <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x74>
 80025fa:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d062      	beq.n	80026c6 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x13e>

		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8002606:	3008      	adds	r0, #8
 8002608:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CPSI:", ':', ',', buf)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002610:	8a9b      	ldrh	r3, [r3, #20]
 8002612:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002614:	f107 0308 	add.w	r3, r7, #8
 8002618:	9302      	str	r3, [sp, #8]
 800261a:	232c      	movs	r3, #44	@ 0x2c
 800261c:	9301      	str	r3, [sp, #4]
 800261e:	233a      	movs	r3, #58	@ 0x3a
 8002620:	9300      	str	r3, [sp, #0]
 8002622:	4b2c      	ldr	r3, [pc, #176]	@ (80026d4 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x14c>)
 8002624:	f002 fa86 	bl	8004b34 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 8002628:	4603      	mov	r3, r0
				== checking.sys_ok) {
 800262a:	2b00      	cmp	r3, #0
 800262c:	bf0c      	ite	eq
 800262e:	2301      	moveq	r3, #1
 8002630:	2300      	movne	r3, #0
 8002632:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002634:	2b00      	cmp	r3, #0
 8002636:	d046      	beq.n	80026c6 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x13e>
			if (std::strstr(buf, "NO SERVICE")) {
 8002638:	f107 0308 	add.w	r3, r7, #8
 800263c:	4926      	ldr	r1, [pc, #152]	@ (80026d8 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x150>)
 800263e:	4618      	mov	r0, r3
 8002640:	f7fe fe4e 	bl	80012e0 <_ZSt6strstrPcPKc>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	bf14      	ite	ne
 800264a:	2301      	movne	r3, #1
 800264c:	2300      	moveq	r3, #0
 800264e:	b2db      	uxtb	r3, r3
 8002650:	2b00      	cmp	r3, #0
 8002652:	d003      	beq.n	800265c <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0xd4>
				*status_ue = no_service;
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	2200      	movs	r2, #0
 8002658:	701a      	strb	r2, [r3, #0]

		}

	}

}
 800265a:	e034      	b.n	80026c6 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x13e>
			} else if (std::strstr(buf, "GSM")) {
 800265c:	f107 0308 	add.w	r3, r7, #8
 8002660:	491e      	ldr	r1, [pc, #120]	@ (80026dc <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x154>)
 8002662:	4618      	mov	r0, r3
 8002664:	f7fe fe3c 	bl	80012e0 <_ZSt6strstrPcPKc>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	bf14      	ite	ne
 800266e:	2301      	movne	r3, #1
 8002670:	2300      	moveq	r3, #0
 8002672:	b2db      	uxtb	r3, r3
 8002674:	2b00      	cmp	r3, #0
 8002676:	d003      	beq.n	8002680 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0xf8>
				*status_ue = gsm;
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	2201      	movs	r2, #1
 800267c:	701a      	strb	r2, [r3, #0]
}
 800267e:	e022      	b.n	80026c6 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x13e>
			} else if (std::strstr(buf, "WCDMA")) {
 8002680:	f107 0308 	add.w	r3, r7, #8
 8002684:	4916      	ldr	r1, [pc, #88]	@ (80026e0 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x158>)
 8002686:	4618      	mov	r0, r3
 8002688:	f7fe fe2a 	bl	80012e0 <_ZSt6strstrPcPKc>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	bf14      	ite	ne
 8002692:	2301      	movne	r3, #1
 8002694:	2300      	moveq	r3, #0
 8002696:	b2db      	uxtb	r3, r3
 8002698:	2b00      	cmp	r3, #0
 800269a:	d003      	beq.n	80026a4 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x11c>
				*status_ue = wcdma;
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	2202      	movs	r2, #2
 80026a0:	701a      	strb	r2, [r3, #0]
}
 80026a2:	e010      	b.n	80026c6 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x13e>
			} else if (std::strstr(buf, "LTE")) {
 80026a4:	f107 0308 	add.w	r3, r7, #8
 80026a8:	490e      	ldr	r1, [pc, #56]	@ (80026e4 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x15c>)
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7fe fe18 	bl	80012e0 <_ZSt6strstrPcPKc>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	bf14      	ite	ne
 80026b6:	2301      	movne	r3, #1
 80026b8:	2300      	moveq	r3, #0
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d002      	beq.n	80026c6 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x13e>
				*status_ue = lte;
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	2203      	movs	r2, #3
 80026c4:	701a      	strb	r2, [r3, #0]
}
 80026c6:	bf00      	nop
 80026c8:	3718      	adds	r7, #24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	08014818 	.word	0x08014818
 80026d4:	080142d0 	.word	0x080142d0
 80026d8:	080142d8 	.word	0x080142d8
 80026dc:	080142e4 	.word	0x080142e4
 80026e0:	080142e8 	.word	0x080142e8
 80026e4:	080142f0 	.word	0x080142f0

080026e8 <_ZN5Modem8simA767210getSignalQEPc>:

void simA7672::getSignalQ(char *quality) {
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b08a      	sub	sp, #40	@ 0x28
 80026ec:	af04      	add	r7, sp, #16
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]

	status stat;

	char buffer[10] = { 0 };
 80026f2:	2300      	movs	r3, #0
 80026f4:	60fb      	str	r3, [r7, #12]
 80026f6:	f107 0310 	add.w	r3, r7, #16
 80026fa:	2200      	movs	r2, #0
 80026fc:	601a      	str	r2, [r3, #0]
 80026fe:	809a      	strh	r2, [r3, #4]
	int8_t csq = 0;
 8002700:	2300      	movs	r3, #0
 8002702:	75fb      	strb	r3, [r7, #23]
	PrepRxTx(atcmd_ATCSQ, sizeof(atcmd_ATCSQ) - 1, 1000, _LF, CMD_mode);
 8002704:	2301      	movs	r3, #1
 8002706:	9301      	str	r3, [sp, #4]
 8002708:	230a      	movs	r3, #10
 800270a:	9300      	str	r3, [sp, #0]
 800270c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002710:	2208      	movs	r2, #8
 8002712:	4939      	ldr	r1, [pc, #228]	@ (80027f8 <_ZN5Modem8simA767210getSignalQEPc+0x110>)
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f000 fe7b 	bl	8003410 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 800271a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800271e:	2100      	movs	r1, #0
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f000 ffa2 	bl	800366a <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002726:	4603      	mov	r3, r0
 8002728:	75bb      	strb	r3, [r7, #22]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 800272a:	7dbb      	ldrb	r3, [r7, #22]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d111      	bne.n	8002754 <_ZN5Modem8simA767210getSignalQEPc+0x6c>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8002736:	3308      	adds	r3, #8
 8002738:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002740:	8a92      	ldrh	r2, [r2, #20]
 8002742:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002744:	4618      	mov	r0, r3
 8002746:	f002 f9cf 	bl	8004ae8 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d101      	bne.n	8002754 <_ZN5Modem8simA767210getSignalQEPc+0x6c>
 8002750:	2301      	movs	r3, #1
 8002752:	e000      	b.n	8002756 <_ZN5Modem8simA767210getSignalQEPc+0x6e>
 8002754:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8002756:	2b00      	cmp	r3, #0
 8002758:	d041      	beq.n	80027de <_ZN5Modem8simA767210getSignalQEPc+0xf6>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8002760:	3008      	adds	r0, #8
 8002762:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CSQ:", ':', ',', buffer)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800276a:	8a9b      	ldrh	r3, [r3, #20]
 800276c:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 800276e:	f107 030c 	add.w	r3, r7, #12
 8002772:	9302      	str	r3, [sp, #8]
 8002774:	232c      	movs	r3, #44	@ 0x2c
 8002776:	9301      	str	r3, [sp, #4]
 8002778:	233a      	movs	r3, #58	@ 0x3a
 800277a:	9300      	str	r3, [sp, #0]
 800277c:	4b1f      	ldr	r3, [pc, #124]	@ (80027fc <_ZN5Modem8simA767210getSignalQEPc+0x114>)
 800277e:	f002 f9d9 	bl	8004b34 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 8002782:	4603      	mov	r3, r0
				== checking.sys_ok) {
 8002784:	2b00      	cmp	r3, #0
 8002786:	bf0c      	ite	eq
 8002788:	2301      	moveq	r3, #1
 800278a:	2300      	movne	r3, #0
 800278c:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 800278e:	2b00      	cmp	r3, #0
 8002790:	d01b      	beq.n	80027ca <_ZN5Modem8simA767210getSignalQEPc+0xe2>

			csq = std::atoi(buffer);
 8002792:	f107 030c 	add.w	r3, r7, #12
 8002796:	4618      	mov	r0, r3
 8002798:	f00e fc16 	bl	8010fc8 <atoi>
 800279c:	4603      	mov	r3, r0
 800279e:	75fb      	strb	r3, [r7, #23]
			if (csq >= 99) {
 80027a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80027a4:	2b62      	cmp	r3, #98	@ 0x62
 80027a6:	dd02      	ble.n	80027ae <_ZN5Modem8simA767210getSignalQEPc+0xc6>
				csq = 0;
 80027a8:	2300      	movs	r3, #0
 80027aa:	75fb      	strb	r3, [r7, #23]
 80027ac:	e005      	b.n	80027ba <_ZN5Modem8simA767210getSignalQEPc+0xd2>

			} else {
				csq = (2 * (csq)) - 113;
 80027ae:	7dfb      	ldrb	r3, [r7, #23]
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	3b71      	subs	r3, #113	@ 0x71
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	75fb      	strb	r3, [r7, #23]
			}

			std::sprintf(quality, "%02d dbm", csq);
 80027ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80027be:	461a      	mov	r2, r3
 80027c0:	490f      	ldr	r1, [pc, #60]	@ (8002800 <_ZN5Modem8simA767210getSignalQEPc+0x118>)
 80027c2:	6838      	ldr	r0, [r7, #0]
 80027c4:	f00f f9a2 	bl	8011b0c <siprintf>
 80027c8:	e012      	b.n	80027f0 <_ZN5Modem8simA767210getSignalQEPc+0x108>

			return;
		} else {
			std::strcpy(quality, "--------");
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	490d      	ldr	r1, [pc, #52]	@ (8002804 <_ZN5Modem8simA767210getSignalQEPc+0x11c>)
 80027ce:	461a      	mov	r2, r3
 80027d0:	460b      	mov	r3, r1
 80027d2:	cb03      	ldmia	r3!, {r0, r1}
 80027d4:	6010      	str	r0, [r2, #0]
 80027d6:	6051      	str	r1, [r2, #4]
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	7213      	strb	r3, [r2, #8]
 80027dc:	e008      	b.n	80027f0 <_ZN5Modem8simA767210getSignalQEPc+0x108>
		}

	} else {
		std::strcpy(quality, "--------");
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	4908      	ldr	r1, [pc, #32]	@ (8002804 <_ZN5Modem8simA767210getSignalQEPc+0x11c>)
 80027e2:	461a      	mov	r2, r3
 80027e4:	460b      	mov	r3, r1
 80027e6:	cb03      	ldmia	r3!, {r0, r1}
 80027e8:	6010      	str	r0, [r2, #0]
 80027ea:	6051      	str	r1, [r2, #4]
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	7213      	strb	r3, [r2, #8]
	}

}
 80027f0:	3718      	adds	r7, #24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	08014824 	.word	0x08014824
 80027fc:	080142f4 	.word	0x080142f4
 8002800:	080142fc 	.word	0x080142fc
 8002804:	08014258 	.word	0x08014258

08002808 <_ZN5Modem8simA767223getmqttconnectionstatusEPc>:
		/*ToDo*/
	}

}

enum simA7672::mqtt_flags simA7672::getmqttconnectionstatus(char *serverAddr) {
 8002808:	b580      	push	{r7, lr}
 800280a:	b0a0      	sub	sp, #128	@ 0x80
 800280c:	af04      	add	r7, sp, #16
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
	status stat = simA7672_ERR;
 8002812:	2301      	movs	r3, #1
 8002814:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
	mqtt_flags statMqtt = mqtt_serverDisconnected;
 8002818:	2303      	movs	r3, #3
 800281a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

	char buf[100] = { 0 };
 800281e:	2300      	movs	r3, #0
 8002820:	60bb      	str	r3, [r7, #8]
 8002822:	f107 030c 	add.w	r3, r7, #12
 8002826:	2260      	movs	r2, #96	@ 0x60
 8002828:	2100      	movs	r1, #0
 800282a:	4618      	mov	r0, r3
 800282c:	f00f f9d1 	bl	8011bd2 <memset>

	PrepRxTx(atcmd_GATCMQTTCONNECT, sizeof(atcmd_GATCMQTTCONNECT) - 1, 1000,
 8002830:	2301      	movs	r3, #1
 8002832:	9301      	str	r3, [sp, #4]
 8002834:	230a      	movs	r3, #10
 8002836:	9300      	str	r3, [sp, #0]
 8002838:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800283c:	2212      	movs	r2, #18
 800283e:	492c      	ldr	r1, [pc, #176]	@ (80028f0 <_ZN5Modem8simA767223getmqttconnectionstatusEPc+0xe8>)
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f000 fde5 	bl	8003410 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
			_LF, CMD_mode);
	stat = check_eventTimeout(rx_evt, 8000);
 8002846:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 800284a:	2100      	movs	r1, #0
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f000 ff0c 	bl	800366a <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002852:	4603      	mov	r3, r0
 8002854:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002858:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800285c:	2b00      	cmp	r3, #0
 800285e:	d111      	bne.n	8002884 <_ZN5Modem8simA767223getmqttconnectionstatusEPc+0x7c>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8002866:	3308      	adds	r3, #8
 8002868:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002870:	8a92      	ldrh	r2, [r2, #20]
 8002872:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002874:	4618      	mov	r0, r3
 8002876:	f002 f937 	bl	8004ae8 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d101      	bne.n	8002884 <_ZN5Modem8simA767223getmqttconnectionstatusEPc+0x7c>
 8002880:	2301      	movs	r3, #1
 8002882:	e000      	b.n	8002886 <_ZN5Modem8simA767223getmqttconnectionstatusEPc+0x7e>
 8002884:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8002886:	2b00      	cmp	r3, #0
 8002888:	d02c      	beq.n	80028e4 <_ZN5Modem8simA767223getmqttconnectionstatusEPc+0xdc>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8002890:	3008      	adds	r0, #8
 8002892:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CMQTTCONNECT:", '"', '"', buf)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800289a:	8a9b      	ldrh	r3, [r3, #20]
 800289c:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 800289e:	f107 0308 	add.w	r3, r7, #8
 80028a2:	9302      	str	r3, [sp, #8]
 80028a4:	2322      	movs	r3, #34	@ 0x22
 80028a6:	9301      	str	r3, [sp, #4]
 80028a8:	2322      	movs	r3, #34	@ 0x22
 80028aa:	9300      	str	r3, [sp, #0]
 80028ac:	4b11      	ldr	r3, [pc, #68]	@ (80028f4 <_ZN5Modem8simA767223getmqttconnectionstatusEPc+0xec>)
 80028ae:	f002 f941 	bl	8004b34 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 80028b2:	4603      	mov	r3, r0
				== checking.sys_ok) {
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	bf0c      	ite	eq
 80028b8:	2301      	moveq	r3, #1
 80028ba:	2300      	movne	r3, #0
 80028bc:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d010      	beq.n	80028e4 <_ZN5Modem8simA767223getmqttconnectionstatusEPc+0xdc>

			if (std::strstr(serverAddr, const_cast<const char*>(buf))) {
 80028c2:	f107 0308 	add.w	r3, r7, #8
 80028c6:	4619      	mov	r1, r3
 80028c8:	6838      	ldr	r0, [r7, #0]
 80028ca:	f7fe fd09 	bl	80012e0 <_ZSt6strstrPcPKc>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	bf14      	ite	ne
 80028d4:	2301      	movne	r3, #1
 80028d6:	2300      	moveq	r3, #0
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d002      	beq.n	80028e4 <_ZN5Modem8simA767223getmqttconnectionstatusEPc+0xdc>
				statMqtt = mqtt_serverConnected;
 80028de:	2302      	movs	r3, #2
 80028e0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

		}

	}

	return statMqtt;
 80028e4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3770      	adds	r7, #112	@ 0x70
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	08014860 	.word	0x08014860
 80028f4:	08014324 	.word	0x08014324

080028f8 <_ZN5Modem8simA76729mqttStartEPh>:

enum simA7672::mqtt_flags simA7672::mqttStart(uint8_t *mqtt_index) {
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b08a      	sub	sp, #40	@ 0x28
 80028fc:	af04      	add	r7, sp, #16
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]

	status stat = simA7672_ERR;
 8002902:	2301      	movs	r3, #1
 8002904:	75bb      	strb	r3, [r7, #22]
	mqtt_flags statMqtt = mqtt_ERR;
 8002906:	2301      	movs	r3, #1
 8002908:	75fb      	strb	r3, [r7, #23]
	char buf[10] = { 0 };
 800290a:	2300      	movs	r3, #0
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	f107 0310 	add.w	r3, r7, #16
 8002912:	2200      	movs	r2, #0
 8002914:	601a      	str	r2, [r3, #0]
 8002916:	809a      	strh	r2, [r3, #4]

	PrepRxTx(atmcd_ATCMQTTSTART, sizeof(atmcd_ATCMQTTSTART) - 1, 1000, '+', 2,_LF,
 8002918:	2303      	movs	r3, #3
 800291a:	9303      	str	r3, [sp, #12]
 800291c:	230a      	movs	r3, #10
 800291e:	9302      	str	r3, [sp, #8]
 8002920:	2302      	movs	r3, #2
 8002922:	9301      	str	r3, [sp, #4]
 8002924:	232b      	movs	r3, #43	@ 0x2b
 8002926:	9300      	str	r3, [sp, #0]
 8002928:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800292c:	220f      	movs	r2, #15
 800292e:	4928      	ldr	r1, [pc, #160]	@ (80029d0 <_ZN5Modem8simA76729mqttStartEPh+0xd8>)
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 fdcf 	bl	80034d4 <_ZN5Modem8simA76728PrepRxTxEPKhtthhhNS0_6RxmodeE>
			Notification_mode);
	stat = check_eventTimeout(rx_evt, 10000);
 8002936:	f242 7210 	movw	r2, #10000	@ 0x2710
 800293a:	2100      	movs	r1, #0
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f000 fe94 	bl	800366a <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002942:	4603      	mov	r3, r0
 8002944:	75bb      	strb	r3, [r7, #22]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002946:	7dbb      	ldrb	r3, [r7, #22]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d111      	bne.n	8002970 <_ZN5Modem8simA76729mqttStartEPh+0x78>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8002952:	3308      	adds	r3, #8
 8002954:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800295c:	8a92      	ldrh	r2, [r2, #20]
 800295e:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002960:	4618      	mov	r0, r3
 8002962:	f002 f8c1 	bl	8004ae8 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d101      	bne.n	8002970 <_ZN5Modem8simA76729mqttStartEPh+0x78>
 800296c:	2301      	movs	r3, #1
 800296e:	e000      	b.n	8002972 <_ZN5Modem8simA76729mqttStartEPh+0x7a>
 8002970:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8002972:	2b00      	cmp	r3, #0
 8002974:	d026      	beq.n	80029c4 <_ZN5Modem8simA76729mqttStartEPh+0xcc>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 800297c:	3008      	adds	r0, #8
 800297e:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CMQTTSTART:", ':', _LF, buf)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002986:	8a9b      	ldrh	r3, [r3, #20]
 8002988:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 800298a:	f107 030c 	add.w	r3, r7, #12
 800298e:	9302      	str	r3, [sp, #8]
 8002990:	230a      	movs	r3, #10
 8002992:	9301      	str	r3, [sp, #4]
 8002994:	233a      	movs	r3, #58	@ 0x3a
 8002996:	9300      	str	r3, [sp, #0]
 8002998:	4b0e      	ldr	r3, [pc, #56]	@ (80029d4 <_ZN5Modem8simA76729mqttStartEPh+0xdc>)
 800299a:	f002 f8cb 	bl	8004b34 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 800299e:	4603      	mov	r3, r0
				== checking.sys_ok) {
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	bf0c      	ite	eq
 80029a4:	2301      	moveq	r3, #1
 80029a6:	2300      	movne	r3, #0
 80029a8:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00a      	beq.n	80029c4 <_ZN5Modem8simA76729mqttStartEPh+0xcc>

			statMqtt = mqtt_OK;
 80029ae:	2300      	movs	r3, #0
 80029b0:	75fb      	strb	r3, [r7, #23]

			*mqtt_index = std::atoi(buf);
 80029b2:	f107 030c 	add.w	r3, r7, #12
 80029b6:	4618      	mov	r0, r3
 80029b8:	f00e fb06 	bl	8010fc8 <atoi>
 80029bc:	4603      	mov	r3, r0
 80029be:	b2da      	uxtb	r2, r3
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	701a      	strb	r2, [r3, #0]

		}

	}

	return statMqtt;
 80029c4:	7dfb      	ldrb	r3, [r7, #23]

}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3718      	adds	r7, #24
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	08014840 	.word	0x08014840
 80029d4:	08014334 	.word	0x08014334

080029d8 <_ZN5Modem8simA76728mqttStopEv>:

enum simA7672::mqtt_flags simA7672::mqttStop() {
 80029d8:	b580      	push	{r7, lr}
 80029da:	b08a      	sub	sp, #40	@ 0x28
 80029dc:	af04      	add	r7, sp, #16
 80029de:	6078      	str	r0, [r7, #4]
	status stat = simA7672_ERR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	75bb      	strb	r3, [r7, #22]
	mqtt_flags statMqtt = mqtt_ERR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	75fb      	strb	r3, [r7, #23]
	char buf[10] = { 0 };
 80029e8:	2300      	movs	r3, #0
 80029ea:	60fb      	str	r3, [r7, #12]
 80029ec:	f107 0310 	add.w	r3, r7, #16
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	809a      	strh	r2, [r3, #4]
	PrepRxTx(atcmd_ATCMQTTSTOP, sizeof(atcmd_ATCMQTTSTOP) - 1, 1000, '+',2, _LF,
 80029f6:	2303      	movs	r3, #3
 80029f8:	9303      	str	r3, [sp, #12]
 80029fa:	230a      	movs	r3, #10
 80029fc:	9302      	str	r3, [sp, #8]
 80029fe:	2302      	movs	r3, #2
 8002a00:	9301      	str	r3, [sp, #4]
 8002a02:	232b      	movs	r3, #43	@ 0x2b
 8002a04:	9300      	str	r3, [sp, #0]
 8002a06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a0a:	220e      	movs	r2, #14
 8002a0c:	4923      	ldr	r1, [pc, #140]	@ (8002a9c <_ZN5Modem8simA76728mqttStopEv+0xc4>)
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 fd60 	bl	80034d4 <_ZN5Modem8simA76728PrepRxTxEPKhtthhhNS0_6RxmodeE>
			Notification_mode);
	stat = check_eventTimeout(rx_evt, 10000);
 8002a14:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002a18:	2100      	movs	r1, #0
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 fe25 	bl	800366a <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002a20:	4603      	mov	r3, r0
 8002a22:	75bb      	strb	r3, [r7, #22]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002a24:	7dbb      	ldrb	r3, [r7, #22]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d111      	bne.n	8002a4e <_ZN5Modem8simA76728mqttStopEv+0x76>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8002a30:	3308      	adds	r3, #8
 8002a32:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002a3a:	8a92      	ldrh	r2, [r2, #20]
 8002a3c:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f002 f852 	bl	8004ae8 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <_ZN5Modem8simA76728mqttStopEv+0x76>
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e000      	b.n	8002a50 <_ZN5Modem8simA76728mqttStopEv+0x78>
 8002a4e:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d01d      	beq.n	8002a90 <_ZN5Modem8simA76728mqttStopEv+0xb8>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8002a5a:	3008      	adds	r0, #8
 8002a5c:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CMQTTSTOP:", ':', _LF, buf)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a64:	8a9b      	ldrh	r3, [r3, #20]
 8002a66:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002a68:	f107 030c 	add.w	r3, r7, #12
 8002a6c:	9302      	str	r3, [sp, #8]
 8002a6e:	230a      	movs	r3, #10
 8002a70:	9301      	str	r3, [sp, #4]
 8002a72:	233a      	movs	r3, #58	@ 0x3a
 8002a74:	9300      	str	r3, [sp, #0]
 8002a76:	4b0a      	ldr	r3, [pc, #40]	@ (8002aa0 <_ZN5Modem8simA76728mqttStopEv+0xc8>)
 8002a78:	f002 f85c 	bl	8004b34 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 8002a7c:	4603      	mov	r3, r0
				== checking.sys_ok) {
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	bf0c      	ite	eq
 8002a82:	2301      	moveq	r3, #1
 8002a84:	2300      	movne	r3, #0
 8002a86:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <_ZN5Modem8simA76728mqttStopEv+0xb8>

			statMqtt = mqtt_OK;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	75fb      	strb	r3, [r7, #23]

		}

	}

	return statMqtt;
 8002a90:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3718      	adds	r7, #24
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	08014850 	.word	0x08014850
 8002aa0:	08014344 	.word	0x08014344

08002aa4 <_ZN5Modem8simA767213mqttSetClientEhPch>:

enum simA7672::mqtt_flags simA7672::mqttSetClient(uint8_t mqtt_index,
		char *client,uint8_t activate_ssl) {
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b09c      	sub	sp, #112	@ 0x70
 8002aa8:	af02      	add	r7, sp, #8
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	607a      	str	r2, [r7, #4]
 8002aae:	461a      	mov	r2, r3
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	72fb      	strb	r3, [r7, #11]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	72bb      	strb	r3, [r7, #10]
	status stat = simA7672_ERR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
	mqtt_flags statMqtt = mqtt_ERR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	char buf[80] = { 0 };
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	617b      	str	r3, [r7, #20]
 8002ac8:	f107 0318 	add.w	r3, r7, #24
 8002acc:	224c      	movs	r2, #76	@ 0x4c
 8002ace:	2100      	movs	r1, #0
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f00f f87e 	bl	8011bd2 <memset>

	std::sprintf(buf, "AT+CMQTTACCQ=%d,\"%s\",%d\r\n", mqtt_index, client,activate_ssl);
 8002ad6:	7afa      	ldrb	r2, [r7, #11]
 8002ad8:	7abb      	ldrb	r3, [r7, #10]
 8002ada:	f107 0014 	add.w	r0, r7, #20
 8002ade:	9300      	str	r3, [sp, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4920      	ldr	r1, [pc, #128]	@ (8002b64 <_ZN5Modem8simA767213mqttSetClientEhPch+0xc0>)
 8002ae4:	f00f f812 	bl	8011b0c <siprintf>
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
			std::strlen(const_cast<const char*>(buf)), 1000, _LF, CMD_mode);
 8002ae8:	f107 0314 	add.w	r3, r7, #20
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7fd fbbf 	bl	8000270 <strlen>
 8002af2:	4603      	mov	r3, r0
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	f107 0114 	add.w	r1, r7, #20
 8002afa:	2301      	movs	r3, #1
 8002afc:	9301      	str	r3, [sp, #4]
 8002afe:	230a      	movs	r3, #10
 8002b00:	9300      	str	r3, [sp, #0]
 8002b02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	f000 fc82 	bl	8003410 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 8000);
 8002b0c:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8002b10:	2100      	movs	r1, #0
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	f000 fda9 	bl	800366a <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002b1e:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d111      	bne.n	8002b4a <_ZN5Modem8simA767213mqttSetClientEhPch+0xa6>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8002b2c:	3308      	adds	r3, #8
 8002b2e:	68f9      	ldr	r1, [r7, #12]
					Rx_info.Rxcount) == checking.sys_ok) {
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002b36:	8a92      	ldrh	r2, [r2, #20]
 8002b38:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f001 ffd4 	bl	8004ae8 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <_ZN5Modem8simA767213mqttSetClientEhPch+0xa6>
 8002b46:	2301      	movs	r3, #1
 8002b48:	e000      	b.n	8002b4c <_ZN5Modem8simA767213mqttSetClientEhPch+0xa8>
 8002b4a:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d002      	beq.n	8002b56 <_ZN5Modem8simA767213mqttSetClientEhPch+0xb2>

		statMqtt = mqtt_OK;
 8002b50:	2300      	movs	r3, #0
 8002b52:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

	}

	return statMqtt;
 8002b56:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3768      	adds	r7, #104	@ 0x68
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	08014350 	.word	0x08014350

08002b68 <_ZN5Modem8simA767217mqttReleaseClientEh>:

enum simA7672::mqtt_flags simA7672::mqttReleaseClient(uint8_t mqtt_index) {
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b09a      	sub	sp, #104	@ 0x68
 8002b6c:	af02      	add	r7, sp, #8
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	460b      	mov	r3, r1
 8002b72:	70fb      	strb	r3, [r7, #3]
	status stat = simA7672_ERR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	mqtt_flags statMqtt = mqtt_ERR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

	char buf[80] = { 0 };
 8002b80:	2300      	movs	r3, #0
 8002b82:	60fb      	str	r3, [r7, #12]
 8002b84:	f107 0310 	add.w	r3, r7, #16
 8002b88:	224c      	movs	r2, #76	@ 0x4c
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f00f f820 	bl	8011bd2 <memset>

	std::sprintf(buf, "AT+CMQTTREL=%d\r\n", mqtt_index);
 8002b92:	78fa      	ldrb	r2, [r7, #3]
 8002b94:	f107 030c 	add.w	r3, r7, #12
 8002b98:	4920      	ldr	r1, [pc, #128]	@ (8002c1c <_ZN5Modem8simA767217mqttReleaseClientEh+0xb4>)
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f00e ffb6 	bl	8011b0c <siprintf>
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
			std::strlen(const_cast<const char*>(buf)), 1000, _LF, CMD_mode);
 8002ba0:	f107 030c 	add.w	r3, r7, #12
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7fd fb63 	bl	8000270 <strlen>
 8002baa:	4603      	mov	r3, r0
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	f107 010c 	add.w	r1, r7, #12
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	9301      	str	r3, [sp, #4]
 8002bb6:	230a      	movs	r3, #10
 8002bb8:	9300      	str	r3, [sp, #0]
 8002bba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 fc26 	bl	8003410 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 8000);
 8002bc4:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8002bc8:	2100      	movs	r1, #0
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 fd4d 	bl	800366a <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002bd6:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d111      	bne.n	8002c02 <_ZN5Modem8simA767217mqttReleaseClientEh+0x9a>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8002be4:	3308      	adds	r3, #8
 8002be6:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002bee:	8a92      	ldrh	r2, [r2, #20]
 8002bf0:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f001 ff78 	bl	8004ae8 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <_ZN5Modem8simA767217mqttReleaseClientEh+0x9a>
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e000      	b.n	8002c04 <_ZN5Modem8simA767217mqttReleaseClientEh+0x9c>
 8002c02:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d002      	beq.n	8002c0e <_ZN5Modem8simA767217mqttReleaseClientEh+0xa6>
		statMqtt = mqtt_OK;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

	}

	return statMqtt;
 8002c0e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3760      	adds	r7, #96	@ 0x60
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	0801436c 	.word	0x0801436c

08002c20 <_ZN5Modem8simA767217mqttConnectServerEhPc>:

enum simA7672::mqtt_flags simA7672::mqttConnectServer(uint8_t mqtt_index,
		char *url) {
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b0b0      	sub	sp, #192	@ 0xc0
 8002c24:	af04      	add	r7, sp, #16
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	460b      	mov	r3, r1
 8002c2a:	607a      	str	r2, [r7, #4]
 8002c2c:	72fb      	strb	r3, [r7, #11]

	status stat = simA7672_ERR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
	mqtt_flags statMqtt = mqtt_ERR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
	char buf[150] = { 0 };
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	61bb      	str	r3, [r7, #24]
 8002c3e:	f107 031c 	add.w	r3, r7, #28
 8002c42:	2292      	movs	r2, #146	@ 0x92
 8002c44:	2100      	movs	r1, #0
 8002c46:	4618      	mov	r0, r3
 8002c48:	f00e ffc3 	bl	8011bd2 <memset>
	char recv_buf[5] = { 0 };
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	613b      	str	r3, [r7, #16]
 8002c50:	2300      	movs	r3, #0
 8002c52:	753b      	strb	r3, [r7, #20]

	std::sprintf(buf, "AT+CMQTTCONNECT=%d,\"%s\",60,1\r\n", mqtt_index, url);
 8002c54:	7afa      	ldrb	r2, [r7, #11]
 8002c56:	f107 0018 	add.w	r0, r7, #24
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	492c      	ldr	r1, [pc, #176]	@ (8002d10 <_ZN5Modem8simA767217mqttConnectServerEhPc+0xf0>)
 8002c5e:	f00e ff55 	bl	8011b0c <siprintf>
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
			std::strlen(const_cast<const char*>(buf)), 1000, '+',2, _LF,
 8002c62:	f107 0318 	add.w	r3, r7, #24
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7fd fb02 	bl	8000270 <strlen>
 8002c6c:	4603      	mov	r3, r0
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	f107 0118 	add.w	r1, r7, #24
 8002c74:	2303      	movs	r3, #3
 8002c76:	9303      	str	r3, [sp, #12]
 8002c78:	230a      	movs	r3, #10
 8002c7a:	9302      	str	r3, [sp, #8]
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	9301      	str	r3, [sp, #4]
 8002c80:	232b      	movs	r3, #43	@ 0x2b
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c88:	68f8      	ldr	r0, [r7, #12]
 8002c8a:	f000 fc23 	bl	80034d4 <_ZN5Modem8simA76728PrepRxTxEPKhtthhhNS0_6RxmodeE>
			Notification_mode);
	stat = check_eventTimeout(rx_evt, 30000); //more delay as this commands take sometimes to generate notification
 8002c8e:	f247 5230 	movw	r2, #30000	@ 0x7530
 8002c92:	2100      	movs	r1, #0
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f000 fce8 	bl	800366a <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae

	if (stat == simA7672_OK) {
 8002ca0:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d12c      	bne.n	8002d02 <_ZN5Modem8simA767217mqttConnectServerEhPc+0xe2>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8002cae:	3008      	adds	r0, #8
 8002cb0:	68f9      	ldr	r1, [r7, #12]
				Rx_info.Rxcount, (char*) "+CMQTTCONNECT:", ',', _LF, recv_buf)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cb8:	8a9b      	ldrh	r3, [r3, #20]
 8002cba:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002cbc:	f107 0310 	add.w	r3, r7, #16
 8002cc0:	9302      	str	r3, [sp, #8]
 8002cc2:	230a      	movs	r3, #10
 8002cc4:	9301      	str	r3, [sp, #4]
 8002cc6:	232c      	movs	r3, #44	@ 0x2c
 8002cc8:	9300      	str	r3, [sp, #0]
 8002cca:	4b12      	ldr	r3, [pc, #72]	@ (8002d14 <_ZN5Modem8simA767217mqttConnectServerEhPc+0xf4>)
 8002ccc:	f001 ff32 	bl	8004b34 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 8002cd0:	4603      	mov	r3, r0
				== checking.sys_ok) {
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	bf0c      	ite	eq
 8002cd6:	2301      	moveq	r3, #1
 8002cd8:	2300      	movne	r3, #0
 8002cda:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d010      	beq.n	8002d02 <_ZN5Modem8simA767217mqttConnectServerEhPc+0xe2>

			if (std::strstr(recv_buf, "0")) {
 8002ce0:	f107 0310 	add.w	r3, r7, #16
 8002ce4:	490c      	ldr	r1, [pc, #48]	@ (8002d18 <_ZN5Modem8simA767217mqttConnectServerEhPc+0xf8>)
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7fe fafa 	bl	80012e0 <_ZSt6strstrPcPKc>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	bf14      	ite	ne
 8002cf2:	2301      	movne	r3, #1
 8002cf4:	2300      	moveq	r3, #0
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d002      	beq.n	8002d02 <_ZN5Modem8simA767217mqttConnectServerEhPc+0xe2>
				statMqtt = mqtt_serverConnected;
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf

		}

	}

	return statMqtt;
 8002d02:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	37b0      	adds	r7, #176	@ 0xb0
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	08014380 	.word	0x08014380
 8002d14:	08014324 	.word	0x08014324
 8002d18:	080143a0 	.word	0x080143a0

08002d1c <_ZN5Modem8simA767220mqttDisconnectServerEh>:

enum simA7672::mqtt_flags simA7672::mqttDisconnectServer(uint8_t mqtt_index) {
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b0ae      	sub	sp, #184	@ 0xb8
 8002d20:	af04      	add	r7, sp, #16
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	460b      	mov	r3, r1
 8002d26:	70fb      	strb	r3, [r7, #3]

	status stat = simA7672_ERR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
	mqtt_flags statMqtt = mqtt_ERR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	char buf[150] = { 0 };
 8002d34:	2300      	movs	r3, #0
 8002d36:	613b      	str	r3, [r7, #16]
 8002d38:	f107 0314 	add.w	r3, r7, #20
 8002d3c:	2292      	movs	r2, #146	@ 0x92
 8002d3e:	2100      	movs	r1, #0
 8002d40:	4618      	mov	r0, r3
 8002d42:	f00e ff46 	bl	8011bd2 <memset>
	char recv_buf[5] = { 0 };
 8002d46:	2300      	movs	r3, #0
 8002d48:	60bb      	str	r3, [r7, #8]
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	733b      	strb	r3, [r7, #12]

	std::sprintf(buf, "AT+CMQTTDISC=%d,120\r\n", mqtt_index);
 8002d4e:	78fa      	ldrb	r2, [r7, #3]
 8002d50:	f107 0310 	add.w	r3, r7, #16
 8002d54:	492c      	ldr	r1, [pc, #176]	@ (8002e08 <_ZN5Modem8simA767220mqttDisconnectServerEh+0xec>)
 8002d56:	4618      	mov	r0, r3
 8002d58:	f00e fed8 	bl	8011b0c <siprintf>
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
			std::strlen(const_cast<const char*>(buf)), 1000, '+',2, _LF,
 8002d5c:	f107 0310 	add.w	r3, r7, #16
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7fd fa85 	bl	8000270 <strlen>
 8002d66:	4603      	mov	r3, r0
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	f107 0110 	add.w	r1, r7, #16
 8002d6e:	2303      	movs	r3, #3
 8002d70:	9303      	str	r3, [sp, #12]
 8002d72:	230a      	movs	r3, #10
 8002d74:	9302      	str	r3, [sp, #8]
 8002d76:	2302      	movs	r3, #2
 8002d78:	9301      	str	r3, [sp, #4]
 8002d7a:	232b      	movs	r3, #43	@ 0x2b
 8002d7c:	9300      	str	r3, [sp, #0]
 8002d7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 fba6 	bl	80034d4 <_ZN5Modem8simA76728PrepRxTxEPKhtthhhNS0_6RxmodeE>
			Notification_mode);
	stat = check_eventTimeout(rx_evt, 10000);
 8002d88:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002d8c:	2100      	movs	r1, #0
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 fc6b 	bl	800366a <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002d94:	4603      	mov	r3, r0
 8002d96:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6

	if (stat == simA7672_OK) {
 8002d9a:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d12c      	bne.n	8002dfc <_ZN5Modem8simA767220mqttDisconnectServerEh+0xe0>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8002da8:	3008      	adds	r0, #8
 8002daa:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CMQTTDISC:", ',', _LF, recv_buf)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002db2:	8a9b      	ldrh	r3, [r3, #20]
 8002db4:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002db6:	f107 0308 	add.w	r3, r7, #8
 8002dba:	9302      	str	r3, [sp, #8]
 8002dbc:	230a      	movs	r3, #10
 8002dbe:	9301      	str	r3, [sp, #4]
 8002dc0:	232c      	movs	r3, #44	@ 0x2c
 8002dc2:	9300      	str	r3, [sp, #0]
 8002dc4:	4b11      	ldr	r3, [pc, #68]	@ (8002e0c <_ZN5Modem8simA767220mqttDisconnectServerEh+0xf0>)
 8002dc6:	f001 feb5 	bl	8004b34 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 8002dca:	4603      	mov	r3, r0
				== checking.sys_ok) {
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	bf0c      	ite	eq
 8002dd0:	2301      	moveq	r3, #1
 8002dd2:	2300      	movne	r3, #0
 8002dd4:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d010      	beq.n	8002dfc <_ZN5Modem8simA767220mqttDisconnectServerEh+0xe0>

			if (std::strstr(recv_buf, "0")) {
 8002dda:	f107 0308 	add.w	r3, r7, #8
 8002dde:	490c      	ldr	r1, [pc, #48]	@ (8002e10 <_ZN5Modem8simA767220mqttDisconnectServerEh+0xf4>)
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7fe fa7d 	bl	80012e0 <_ZSt6strstrPcPKc>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	bf14      	ite	ne
 8002dec:	2301      	movne	r3, #1
 8002dee:	2300      	moveq	r3, #0
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d002      	beq.n	8002dfc <_ZN5Modem8simA767220mqttDisconnectServerEh+0xe0>
				statMqtt = mqtt_serverDisconnected;
 8002df6:	2303      	movs	r3, #3
 8002df8:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

		}

	}

	return statMqtt;
 8002dfc:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7

}
 8002e00:	4618      	mov	r0, r3
 8002e02:	37a8      	adds	r7, #168	@ 0xa8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	080143a4 	.word	0x080143a4
 8002e0c:	080143bc 	.word	0x080143bc
 8002e10:	080143a0 	.word	0x080143a0

08002e14 <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t>:

	return statMqtt;

}
enum simA7672::mqtt_flags simA7672::mqttsubTopicAndRead(uint8_t mqtt_index,
		char *subTopic, char *Message,uint16_t msgbufferSize) {
 8002e14:	b590      	push	{r4, r7, lr}
 8002e16:	b0af      	sub	sp, #188	@ 0xbc
 8002e18:	af04      	add	r7, sp, #16
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	607a      	str	r2, [r7, #4]
 8002e1e:	603b      	str	r3, [r7, #0]
 8002e20:	460b      	mov	r3, r1
 8002e22:	72fb      	strb	r3, [r7, #11]
	status stat = simA7672_ERR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
	mqtt_flags statMqtt = mqtt_ERR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

	char buf[150] = { 0 };
 8002e30:	2300      	movs	r3, #0
 8002e32:	613b      	str	r3, [r7, #16]
 8002e34:	f107 0314 	add.w	r3, r7, #20
 8002e38:	2292      	movs	r2, #146	@ 0x92
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f00e fec8 	bl	8011bd2 <memset>


	std::sprintf(buf, "AT+CMQTTSUB=%d,%d,1\r\n", mqtt_index,
 8002e42:	7afc      	ldrb	r4, [r7, #11]
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f7fd fa13 	bl	8000270 <strlen>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	f107 0010 	add.w	r0, r7, #16
 8002e50:	4622      	mov	r2, r4
 8002e52:	494b      	ldr	r1, [pc, #300]	@ (8002f80 <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x16c>)
 8002e54:	f00e fe5a 	bl	8011b0c <siprintf>
			std::strlen(const_cast<const char*>(subTopic)));
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
			std::strlen(const_cast<const char*>(buf)), 1000, '>', MSG_mode);
 8002e58:	f107 0310 	add.w	r3, r7, #16
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7fd fa07 	bl	8000270 <strlen>
 8002e62:	4603      	mov	r3, r0
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	f107 0110 	add.w	r1, r7, #16
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	9301      	str	r3, [sp, #4]
 8002e6e:	233e      	movs	r3, #62	@ 0x3e
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f000 faca 	bl	8003410 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 1000);
 8002e7c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002e80:	2100      	movs	r1, #0
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f000 fbf1 	bl	800366a <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6

	//Rx_info.reset_timeout =1;
	if (stat == simA7672_OK) {
 8002e8e:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d16e      	bne.n	8002f74 <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x160>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8002e9c:	3008      	adds	r0, #8
 8002e9e:	68f9      	ldr	r1, [r7, #12]
				Rx_info.Rxcount, (char*) ">", ',', _LF, nullptr)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ea6:	8a9b      	ldrh	r3, [r3, #20]
 8002ea8:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002eaa:	2300      	movs	r3, #0
 8002eac:	9302      	str	r3, [sp, #8]
 8002eae:	230a      	movs	r3, #10
 8002eb0:	9301      	str	r3, [sp, #4]
 8002eb2:	232c      	movs	r3, #44	@ 0x2c
 8002eb4:	9300      	str	r3, [sp, #0]
 8002eb6:	4b33      	ldr	r3, [pc, #204]	@ (8002f84 <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x170>)
 8002eb8:	f001 fe3c 	bl	8004b34 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 8002ebc:	4603      	mov	r3, r0
				== checking.sys_ok) {
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	bf0c      	ite	eq
 8002ec2:	2301      	moveq	r3, #1
 8002ec4:	2300      	movne	r3, #0
 8002ec6:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d053      	beq.n	8002f74 <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x160>

			PrepRxTx(reinterpret_cast<const uint8_t*>(subTopic),
					std::strlen(const_cast<const char*>(subTopic)), 1000,'+' ,5,_LF,
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f7fd f9cf 	bl	8000270 <strlen>
 8002ed2:	4603      	mov	r3, r0
			PrepRxTx(reinterpret_cast<const uint8_t*>(subTopic),
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	9303      	str	r3, [sp, #12]
 8002eda:	230a      	movs	r3, #10
 8002edc:	9302      	str	r3, [sp, #8]
 8002ede:	2305      	movs	r3, #5
 8002ee0:	9301      	str	r3, [sp, #4]
 8002ee2:	232b      	movs	r3, #43	@ 0x2b
 8002ee4:	9300      	str	r3, [sp, #0]
 8002ee6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002eea:	6879      	ldr	r1, [r7, #4]
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f000 faf1 	bl	80034d4 <_ZN5Modem8simA76728PrepRxTxEPKhtthhhNS0_6RxmodeE>
					Notification_mode);
			stat = check_eventTimeout(rx_evt,1000);
 8002ef2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	68f8      	ldr	r0, [r7, #12]
 8002efa:	f000 fbb6 	bl	800366a <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002efe:	4603      	mov	r3, r0
 8002f00:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6

			if (stat == simA7672_OK
					&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002f04:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d111      	bne.n	8002f30 <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x11c>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8002f12:	3308      	adds	r3, #8
 8002f14:	68f9      	ldr	r1, [r7, #12]
							Rx_info.Rxcount) == checking.sys_ok) {
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002f1c:	8a92      	ldrh	r2, [r2, #20]
 8002f1e:	b292      	uxth	r2, r2
					&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002f20:	4618      	mov	r0, r3
 8002f22:	f001 fde1 	bl	8004ae8 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d101      	bne.n	8002f30 <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x11c>
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e000      	b.n	8002f32 <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x11e>
 8002f30:	2300      	movs	r3, #0
			if (stat == simA7672_OK
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d01e      	beq.n	8002f74 <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x160>

				if(checking.extractData((const char*) Rxbuffer, "+CMQTTRXPAYLOAD:", '\n', '\r', Message, msgbufferSize) == checking.sys_ok)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8002f3c:	3008      	adds	r0, #8
 8002f3e:	68f9      	ldr	r1, [r7, #12]
 8002f40:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	@ 0xb8
 8002f44:	9302      	str	r3, [sp, #8]
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	9301      	str	r3, [sp, #4]
 8002f4a:	230d      	movs	r3, #13
 8002f4c:	9300      	str	r3, [sp, #0]
 8002f4e:	230a      	movs	r3, #10
 8002f50:	4a0d      	ldr	r2, [pc, #52]	@ (8002f88 <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x174>)
 8002f52:	f001 feb7 	bl	8004cc4 <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	bf0c      	ite	eq
 8002f5c:	2301      	moveq	r3, #1
 8002f5e:	2300      	movne	r3, #0
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d003      	beq.n	8002f6e <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x15a>
				{

					statMqtt = mqtt_msgrecv;
 8002f66:	2305      	movs	r3, #5
 8002f68:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 8002f6c:	e002      	b.n	8002f74 <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x160>
				}
				else
				{
					statMqtt = mqtt_OK;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

		}

	}
	//Rx_info.reset_timeout =0;
	return statMqtt;
 8002f74:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	37ac      	adds	r7, #172	@ 0xac
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd90      	pop	{r4, r7, pc}
 8002f80:	080143c8 	.word	0x080143c8
 8002f84:	080143e0 	.word	0x080143e0
 8002f88:	080143e4 	.word	0x080143e4

08002f8c <_ZN5Modem8simA767214mqttunsubTopicEhPc>:
enum simA7672::mqtt_flags simA7672::mqttunsubTopic(uint8_t mqtt_index,
		char *subTopic) {
 8002f8c:	b590      	push	{r4, r7, lr}
 8002f8e:	b0b1      	sub	sp, #196	@ 0xc4
 8002f90:	af04      	add	r7, sp, #16
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	460b      	mov	r3, r1
 8002f96:	607a      	str	r2, [r7, #4]
 8002f98:	72fb      	strb	r3, [r7, #11]
	status stat = simA7672_ERR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
	mqtt_flags statMqtt = mqtt_ERR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf

	char buf[150] = { 0 };
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	61bb      	str	r3, [r7, #24]
 8002faa:	f107 031c 	add.w	r3, r7, #28
 8002fae:	2292      	movs	r2, #146	@ 0x92
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f00e fe0d 	bl	8011bd2 <memset>
	char recv_buf[5] = { 0 };
 8002fb8:	2300      	movs	r3, #0
 8002fba:	613b      	str	r3, [r7, #16]
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	753b      	strb	r3, [r7, #20]

	std::sprintf(buf, "AT+CMQTTUNSUB=%d,%d,0\r\n", mqtt_index,
 8002fc0:	7afc      	ldrb	r4, [r7, #11]
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f7fd f954 	bl	8000270 <strlen>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	f107 0018 	add.w	r0, r7, #24
 8002fce:	4622      	mov	r2, r4
 8002fd0:	4947      	ldr	r1, [pc, #284]	@ (80030f0 <_ZN5Modem8simA767214mqttunsubTopicEhPc+0x164>)
 8002fd2:	f00e fd9b 	bl	8011b0c <siprintf>
			std::strlen(const_cast<const char*>(subTopic)));
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
			std::strlen(const_cast<const char*>(buf)), 1000, '>', MSG_mode);
 8002fd6:	f107 0318 	add.w	r3, r7, #24
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fd f948 	bl	8000270 <strlen>
 8002fe0:	4603      	mov	r3, r0
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	f107 0118 	add.w	r1, r7, #24
 8002fe8:	2302      	movs	r3, #2
 8002fea:	9301      	str	r3, [sp, #4]
 8002fec:	233e      	movs	r3, #62	@ 0x3e
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ff4:	68f8      	ldr	r0, [r7, #12]
 8002ff6:	f000 fa0b 	bl	8003410 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 1000);
 8002ffa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002ffe:	2100      	movs	r1, #0
 8003000:	68f8      	ldr	r0, [r7, #12]
 8003002:	f000 fb32 	bl	800366a <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8003006:	4603      	mov	r3, r0
 8003008:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
	if (stat == simA7672_OK) {
 800300c:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 8003010:	2b00      	cmp	r3, #0
 8003012:	d167      	bne.n	80030e4 <_ZN5Modem8simA767214mqttunsubTopicEhPc+0x158>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 800301a:	3008      	adds	r0, #8
 800301c:	68f9      	ldr	r1, [r7, #12]
				Rx_info.Rxcount, (char*) ">", ',', _LF, nullptr)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003024:	8a9b      	ldrh	r3, [r3, #20]
 8003026:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003028:	2300      	movs	r3, #0
 800302a:	9302      	str	r3, [sp, #8]
 800302c:	230a      	movs	r3, #10
 800302e:	9301      	str	r3, [sp, #4]
 8003030:	232c      	movs	r3, #44	@ 0x2c
 8003032:	9300      	str	r3, [sp, #0]
 8003034:	4b2f      	ldr	r3, [pc, #188]	@ (80030f4 <_ZN5Modem8simA767214mqttunsubTopicEhPc+0x168>)
 8003036:	f001 fd7d 	bl	8004b34 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 800303a:	4603      	mov	r3, r0
				== checking.sys_ok) {
 800303c:	2b00      	cmp	r3, #0
 800303e:	bf0c      	ite	eq
 8003040:	2301      	moveq	r3, #1
 8003042:	2300      	movne	r3, #0
 8003044:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003046:	2b00      	cmp	r3, #0
 8003048:	d04c      	beq.n	80030e4 <_ZN5Modem8simA767214mqttunsubTopicEhPc+0x158>

			PrepRxTx(reinterpret_cast<const uint8_t*>(subTopic),
					std::strlen(const_cast<const char*>(subTopic)), 1000, '+',1, _LF,
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f7fd f910 	bl	8000270 <strlen>
 8003050:	4603      	mov	r3, r0
			PrepRxTx(reinterpret_cast<const uint8_t*>(subTopic),
 8003052:	b29a      	uxth	r2, r3
 8003054:	2303      	movs	r3, #3
 8003056:	9303      	str	r3, [sp, #12]
 8003058:	230a      	movs	r3, #10
 800305a:	9302      	str	r3, [sp, #8]
 800305c:	2301      	movs	r3, #1
 800305e:	9301      	str	r3, [sp, #4]
 8003060:	232b      	movs	r3, #43	@ 0x2b
 8003062:	9300      	str	r3, [sp, #0]
 8003064:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003068:	6879      	ldr	r1, [r7, #4]
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	f000 fa32 	bl	80034d4 <_ZN5Modem8simA76728PrepRxTxEPKhtthhhNS0_6RxmodeE>
					Notification_mode);
			stat = check_eventTimeout(rx_evt, 10000);
 8003070:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003074:	2100      	movs	r1, #0
 8003076:	68f8      	ldr	r0, [r7, #12]
 8003078:	f000 faf7 	bl	800366a <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 800307c:	4603      	mov	r3, r0
 800307e:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae

			if (stat == simA7672_OK) {
 8003082:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 8003086:	2b00      	cmp	r3, #0
 8003088:	d12c      	bne.n	80030e4 <_ZN5Modem8simA767214mqttunsubTopicEhPc+0x158>
				if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8003090:	3008      	adds	r0, #8
 8003092:	68f9      	ldr	r1, [r7, #12]
						Rx_info.Rxcount, (char*) "+CMQTTUNSUB:", ',', _LF,
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800309a:	8a9b      	ldrh	r3, [r3, #20]
 800309c:	b29a      	uxth	r2, r3
				if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 800309e:	f107 0310 	add.w	r3, r7, #16
 80030a2:	9302      	str	r3, [sp, #8]
 80030a4:	230a      	movs	r3, #10
 80030a6:	9301      	str	r3, [sp, #4]
 80030a8:	232c      	movs	r3, #44	@ 0x2c
 80030aa:	9300      	str	r3, [sp, #0]
 80030ac:	4b12      	ldr	r3, [pc, #72]	@ (80030f8 <_ZN5Modem8simA767214mqttunsubTopicEhPc+0x16c>)
 80030ae:	f001 fd41 	bl	8004b34 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 80030b2:	4603      	mov	r3, r0
						recv_buf) == checking.sys_ok) {
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	bf0c      	ite	eq
 80030b8:	2301      	moveq	r3, #1
 80030ba:	2300      	movne	r3, #0
 80030bc:	b2db      	uxtb	r3, r3
				if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d010      	beq.n	80030e4 <_ZN5Modem8simA767214mqttunsubTopicEhPc+0x158>

					if (std::strstr(recv_buf, "0")) {
 80030c2:	f107 0310 	add.w	r3, r7, #16
 80030c6:	490d      	ldr	r1, [pc, #52]	@ (80030fc <_ZN5Modem8simA767214mqttunsubTopicEhPc+0x170>)
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7fe f909 	bl	80012e0 <_ZSt6strstrPcPKc>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	bf14      	ite	ne
 80030d4:	2301      	movne	r3, #1
 80030d6:	2300      	moveq	r3, #0
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d002      	beq.n	80030e4 <_ZN5Modem8simA767214mqttunsubTopicEhPc+0x158>
						statMqtt = mqtt_OK;
 80030de:	2300      	movs	r3, #0
 80030e0:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf

			}
		}
	}

	return statMqtt;
 80030e4:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	37b4      	adds	r7, #180	@ 0xb4
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd90      	pop	{r4, r7, pc}
 80030f0:	080143f8 	.word	0x080143f8
 80030f4:	080143e0 	.word	0x080143e0
 80030f8:	08014410 	.word	0x08014410
 80030fc:	080143a0 	.word	0x080143a0

08003100 <_ZN5Modem8simA767213mqttsslenableEh>:

enum simA7672::ssl_flags simA7672::mqttsslenable(uint8_t mqtt_index)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b09a      	sub	sp, #104	@ 0x68
 8003104:	af02      	add	r7, sp, #8
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	460b      	mov	r3, r1
 800310a:	70fb      	strb	r3, [r7, #3]
	status stat = simA7672_ERR;
 800310c:	2301      	movs	r3, #1
 800310e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	ssl_flags sslstat = ssl_ERR;
 8003112:	2301      	movs	r3, #1
 8003114:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

	char buf[80] = { 0 };
 8003118:	2300      	movs	r3, #0
 800311a:	60fb      	str	r3, [r7, #12]
 800311c:	f107 0310 	add.w	r3, r7, #16
 8003120:	224c      	movs	r2, #76	@ 0x4c
 8003122:	2100      	movs	r1, #0
 8003124:	4618      	mov	r0, r3
 8003126:	f00e fd54 	bl	8011bd2 <memset>

	std::sprintf(buf, "AT+CMQTTSSLCFG=%d,0\r\n", mqtt_index);
 800312a:	78fa      	ldrb	r2, [r7, #3]
 800312c:	f107 030c 	add.w	r3, r7, #12
 8003130:	4920      	ldr	r1, [pc, #128]	@ (80031b4 <_ZN5Modem8simA767213mqttsslenableEh+0xb4>)
 8003132:	4618      	mov	r0, r3
 8003134:	f00e fcea 	bl	8011b0c <siprintf>
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
			std::strlen(const_cast<const char*>(buf)), 1000, _LF, CMD_mode);
 8003138:	f107 030c 	add.w	r3, r7, #12
 800313c:	4618      	mov	r0, r3
 800313e:	f7fd f897 	bl	8000270 <strlen>
 8003142:	4603      	mov	r3, r0
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
 8003144:	b29a      	uxth	r2, r3
 8003146:	f107 010c 	add.w	r1, r7, #12
 800314a:	2301      	movs	r3, #1
 800314c:	9301      	str	r3, [sp, #4]
 800314e:	230a      	movs	r3, #10
 8003150:	9300      	str	r3, [sp, #0]
 8003152:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 f95a 	bl	8003410 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 8000);
 800315c:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8003160:	2100      	movs	r1, #0
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 fa81 	bl	800366a <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8003168:	4603      	mov	r3, r0
 800316a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 800316e:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8003172:	2b00      	cmp	r3, #0
 8003174:	d111      	bne.n	800319a <_ZN5Modem8simA767213mqttsslenableEh+0x9a>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 800317c:	3308      	adds	r3, #8
 800317e:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003186:	8a92      	ldrh	r2, [r2, #20]
 8003188:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 800318a:	4618      	mov	r0, r3
 800318c:	f001 fcac 	bl	8004ae8 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <_ZN5Modem8simA767213mqttsslenableEh+0x9a>
 8003196:	2301      	movs	r3, #1
 8003198:	e000      	b.n	800319c <_ZN5Modem8simA767213mqttsslenableEh+0x9c>
 800319a:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 800319c:	2b00      	cmp	r3, #0
 800319e:	d002      	beq.n	80031a6 <_ZN5Modem8simA767213mqttsslenableEh+0xa6>

		sslstat = ssl_OK;
 80031a0:	2300      	movs	r3, #0
 80031a2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

	}

	return sslstat;
 80031a6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3760      	adds	r7, #96	@ 0x60
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	08014420 	.word	0x08014420

080031b8 <_ZN5Modem8simA767213sslversionsetEv>:
enum simA7672::ssl_flags simA7672::sslversionset()
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af02      	add	r7, sp, #8
 80031be:	6078      	str	r0, [r7, #4]
	status stat = simA7672_ERR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	73bb      	strb	r3, [r7, #14]
	ssl_flags sslstat = ssl_ERR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	73fb      	strb	r3, [r7, #15]


	PrepRxTx(atcmd_ATCSSLCFG_ver, sizeof(atcmd_ATCSSLCFG_ver) - 1,1000, _LF, CMD_mode);
 80031c8:	2301      	movs	r3, #1
 80031ca:	9301      	str	r3, [sp, #4]
 80031cc:	230a      	movs	r3, #10
 80031ce:	9300      	str	r3, [sp, #0]
 80031d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80031d4:	221d      	movs	r2, #29
 80031d6:	4915      	ldr	r1, [pc, #84]	@ (800322c <_ZN5Modem8simA767213sslversionsetEv+0x74>)
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 f919 	bl	8003410 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 80031de:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80031e2:	2100      	movs	r1, #0
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f000 fa40 	bl	800366a <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80031ea:	4603      	mov	r3, r0
 80031ec:	73bb      	strb	r3, [r7, #14]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80031ee:	7bbb      	ldrb	r3, [r7, #14]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d111      	bne.n	8003218 <_ZN5Modem8simA767213sslversionsetEv+0x60>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80031fa:	3308      	adds	r3, #8
 80031fc:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003204:	8a92      	ldrh	r2, [r2, #20]
 8003206:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003208:	4618      	mov	r0, r3
 800320a:	f001 fc6d 	bl	8004ae8 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d101      	bne.n	8003218 <_ZN5Modem8simA767213sslversionsetEv+0x60>
 8003214:	2301      	movs	r3, #1
 8003216:	e000      	b.n	800321a <_ZN5Modem8simA767213sslversionsetEv+0x62>
 8003218:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <_ZN5Modem8simA767213sslversionsetEv+0x6a>

		sslstat = ssl_OK;
 800321e:	2300      	movs	r3, #0
 8003220:	73fb      	strb	r3, [r7, #15]

	}

	return sslstat;
 8003222:	7bfb      	ldrb	r3, [r7, #15]
}
 8003224:	4618      	mov	r0, r3
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	08014874 	.word	0x08014874

08003230 <_ZN5Modem8simA767210sslauthsetEv>:
enum simA7672::ssl_flags simA7672::sslauthset()
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af02      	add	r7, sp, #8
 8003236:	6078      	str	r0, [r7, #4]
	status stat = simA7672_ERR;
 8003238:	2301      	movs	r3, #1
 800323a:	73bb      	strb	r3, [r7, #14]
	ssl_flags sslstat = ssl_ERR;
 800323c:	2301      	movs	r3, #1
 800323e:	73fb      	strb	r3, [r7, #15]


	PrepRxTx(atcmd_ATCSSLCFG_auth, sizeof(atcmd_ATCSSLCFG_auth) - 1,1000, _LF, CMD_mode);
 8003240:	2301      	movs	r3, #1
 8003242:	9301      	str	r3, [sp, #4]
 8003244:	230a      	movs	r3, #10
 8003246:	9300      	str	r3, [sp, #0]
 8003248:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800324c:	221b      	movs	r2, #27
 800324e:	4915      	ldr	r1, [pc, #84]	@ (80032a4 <_ZN5Modem8simA767210sslauthsetEv+0x74>)
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 f8dd 	bl	8003410 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 8003256:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800325a:	2100      	movs	r1, #0
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 fa04 	bl	800366a <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8003262:	4603      	mov	r3, r0
 8003264:	73bb      	strb	r3, [r7, #14]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003266:	7bbb      	ldrb	r3, [r7, #14]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d111      	bne.n	8003290 <_ZN5Modem8simA767210sslauthsetEv+0x60>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003272:	3308      	adds	r3, #8
 8003274:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800327c:	8a92      	ldrh	r2, [r2, #20]
 800327e:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003280:	4618      	mov	r0, r3
 8003282:	f001 fc31 	bl	8004ae8 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d101      	bne.n	8003290 <_ZN5Modem8simA767210sslauthsetEv+0x60>
 800328c:	2301      	movs	r3, #1
 800328e:	e000      	b.n	8003292 <_ZN5Modem8simA767210sslauthsetEv+0x62>
 8003290:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <_ZN5Modem8simA767210sslauthsetEv+0x6a>

		sslstat = ssl_OK;
 8003296:	2300      	movs	r3, #0
 8003298:	73fb      	strb	r3, [r7, #15]

	}

	return sslstat;
 800329a:	7bfb      	ldrb	r3, [r7, #15]
}
 800329c:	4618      	mov	r0, r3
 800329e:	3710      	adds	r7, #16
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	08014894 	.word	0x08014894

080032a8 <_ZN5Modem8simA767212sslcacertsetEv>:
enum simA7672::ssl_flags simA7672::sslcacertset()
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af02      	add	r7, sp, #8
 80032ae:	6078      	str	r0, [r7, #4]
	status stat = simA7672_ERR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	73bb      	strb	r3, [r7, #14]
	ssl_flags sslstat = ssl_ERR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	73fb      	strb	r3, [r7, #15]


	PrepRxTx(atcmd_ATCSSLCFG_ca, sizeof(atcmd_ATCSSLCFG_ca) - 1,1000, _LF, CMD_mode);
 80032b8:	2301      	movs	r3, #1
 80032ba:	9301      	str	r3, [sp, #4]
 80032bc:	230a      	movs	r3, #10
 80032be:	9300      	str	r3, [sp, #0]
 80032c0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80032c4:	2220      	movs	r2, #32
 80032c6:	4915      	ldr	r1, [pc, #84]	@ (800331c <_ZN5Modem8simA767212sslcacertsetEv+0x74>)
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f000 f8a1 	bl	8003410 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 80032ce:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80032d2:	2100      	movs	r1, #0
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f000 f9c8 	bl	800366a <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80032da:	4603      	mov	r3, r0
 80032dc:	73bb      	strb	r3, [r7, #14]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80032de:	7bbb      	ldrb	r3, [r7, #14]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d111      	bne.n	8003308 <_ZN5Modem8simA767212sslcacertsetEv+0x60>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80032ea:	3308      	adds	r3, #8
 80032ec:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80032f4:	8a92      	ldrh	r2, [r2, #20]
 80032f6:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80032f8:	4618      	mov	r0, r3
 80032fa:	f001 fbf5 	bl	8004ae8 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d101      	bne.n	8003308 <_ZN5Modem8simA767212sslcacertsetEv+0x60>
 8003304:	2301      	movs	r3, #1
 8003306:	e000      	b.n	800330a <_ZN5Modem8simA767212sslcacertsetEv+0x62>
 8003308:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <_ZN5Modem8simA767212sslcacertsetEv+0x6a>

		sslstat = ssl_OK;
 800330e:	2300      	movs	r3, #0
 8003310:	73fb      	strb	r3, [r7, #15]

	}

	return sslstat;
 8003312:	7bfb      	ldrb	r3, [r7, #15]
}
 8003314:	4618      	mov	r0, r3
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	080148b0 	.word	0x080148b0

08003320 <_ZN5Modem8simA767216ssldevicecertsetEv>:
enum simA7672::ssl_flags simA7672::ssldevicecertset()
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b086      	sub	sp, #24
 8003324:	af02      	add	r7, sp, #8
 8003326:	6078      	str	r0, [r7, #4]
	status stat = simA7672_ERR;
 8003328:	2301      	movs	r3, #1
 800332a:	73bb      	strb	r3, [r7, #14]
	ssl_flags sslstat = ssl_ERR;
 800332c:	2301      	movs	r3, #1
 800332e:	73fb      	strb	r3, [r7, #15]


	PrepRxTx(atcmd_ATCSSLCFG_device, sizeof(atcmd_ATCSSLCFG_device) - 1,1000, _LF, CMD_mode);
 8003330:	2301      	movs	r3, #1
 8003332:	9301      	str	r3, [sp, #4]
 8003334:	230a      	movs	r3, #10
 8003336:	9300      	str	r3, [sp, #0]
 8003338:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800333c:	222c      	movs	r2, #44	@ 0x2c
 800333e:	4915      	ldr	r1, [pc, #84]	@ (8003394 <_ZN5Modem8simA767216ssldevicecertsetEv+0x74>)
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f000 f865 	bl	8003410 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 8003346:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800334a:	2100      	movs	r1, #0
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 f98c 	bl	800366a <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8003352:	4603      	mov	r3, r0
 8003354:	73bb      	strb	r3, [r7, #14]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003356:	7bbb      	ldrb	r3, [r7, #14]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d111      	bne.n	8003380 <_ZN5Modem8simA767216ssldevicecertsetEv+0x60>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003362:	3308      	adds	r3, #8
 8003364:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800336c:	8a92      	ldrh	r2, [r2, #20]
 800336e:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003370:	4618      	mov	r0, r3
 8003372:	f001 fbb9 	bl	8004ae8 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d101      	bne.n	8003380 <_ZN5Modem8simA767216ssldevicecertsetEv+0x60>
 800337c:	2301      	movs	r3, #1
 800337e:	e000      	b.n	8003382 <_ZN5Modem8simA767216ssldevicecertsetEv+0x62>
 8003380:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <_ZN5Modem8simA767216ssldevicecertsetEv+0x6a>

		sslstat = ssl_OK;
 8003386:	2300      	movs	r3, #0
 8003388:	73fb      	strb	r3, [r7, #15]

	}

	return sslstat;
 800338a:	7bfb      	ldrb	r3, [r7, #15]
}
 800338c:	4618      	mov	r0, r3
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	080148d4 	.word	0x080148d4

08003398 <_ZN5Modem8simA767215ssldevicekeysetEv>:
enum simA7672::ssl_flags simA7672::ssldevicekeyset()
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af02      	add	r7, sp, #8
 800339e:	6078      	str	r0, [r7, #4]
	status stat = simA7672_ERR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	73bb      	strb	r3, [r7, #14]
	ssl_flags sslstat = ssl_ERR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	73fb      	strb	r3, [r7, #15]


	PrepRxTx(atcmd_ATCSSLCFG_key, sizeof(atcmd_ATCSSLCFG_key) - 1,1000, _LF, CMD_mode);
 80033a8:	2301      	movs	r3, #1
 80033aa:	9301      	str	r3, [sp, #4]
 80033ac:	230a      	movs	r3, #10
 80033ae:	9300      	str	r3, [sp, #0]
 80033b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80033b4:	222a      	movs	r2, #42	@ 0x2a
 80033b6:	4915      	ldr	r1, [pc, #84]	@ (800340c <_ZN5Modem8simA767215ssldevicekeysetEv+0x74>)
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f000 f829 	bl	8003410 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 80033be:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80033c2:	2100      	movs	r1, #0
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f000 f950 	bl	800366a <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80033ca:	4603      	mov	r3, r0
 80033cc:	73bb      	strb	r3, [r7, #14]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80033ce:	7bbb      	ldrb	r3, [r7, #14]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d111      	bne.n	80033f8 <_ZN5Modem8simA767215ssldevicekeysetEv+0x60>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80033da:	3308      	adds	r3, #8
 80033dc:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80033e4:	8a92      	ldrh	r2, [r2, #20]
 80033e6:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80033e8:	4618      	mov	r0, r3
 80033ea:	f001 fb7d 	bl	8004ae8 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d101      	bne.n	80033f8 <_ZN5Modem8simA767215ssldevicekeysetEv+0x60>
 80033f4:	2301      	movs	r3, #1
 80033f6:	e000      	b.n	80033fa <_ZN5Modem8simA767215ssldevicekeysetEv+0x62>
 80033f8:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d001      	beq.n	8003402 <_ZN5Modem8simA767215ssldevicekeysetEv+0x6a>

		sslstat = ssl_OK;
 80033fe:	2300      	movs	r3, #0
 8003400:	73fb      	strb	r3, [r7, #15]

	}

	return sslstat;
 8003402:	7bfb      	ldrb	r3, [r7, #15]

}
 8003404:	4618      	mov	r0, r3
 8003406:	3710      	adds	r7, #16
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	08014904 	.word	0x08014904

08003410 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>:
	rst_event(tx_evt);
	serial_.TransmitData(Txbuf, len, timeout);

}
void simA7672::PrepRxTx(const uint8_t *Txbuf, uint16_t len, uint16_t timeout,
		uint8_t end_char, enum Rxmode Rxmode) {
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	4611      	mov	r1, r2
 800341c:	461a      	mov	r2, r3
 800341e:	460b      	mov	r3, r1
 8003420:	80fb      	strh	r3, [r7, #6]
 8003422:	4613      	mov	r3, r2
 8003424:	80bb      	strh	r3, [r7, #4]

	memset(Rxbuffer, 0, BufferLen);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800342c:	2100      	movs	r1, #0
 800342e:	4618      	mov	r0, r3
 8003430:	f00e fbcf 	bl	8011bd2 <memset>
	memset(Txbuffer, 0, BufferLen);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800343a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800343e:	2100      	movs	r1, #0
 8003440:	4618      	mov	r0, r3
 8003442:	f00e fbc6 	bl	8011bd2 <memset>
	rst_event(rx_evt);
 8003446:	2100      	movs	r1, #0
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	f000 f8c8 	bl	80035de <_ZN5Modem8simA76729rst_eventENS0_9eventTypeE>
	rst_event(tx_evt);
 800344e:	2101      	movs	r1, #1
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f000 f8c4 	bl	80035de <_ZN5Modem8simA76729rst_eventENS0_9eventTypeE>

	Rx_info.end_char = end_char;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800345c:	461a      	mov	r2, r3
 800345e:	7e3b      	ldrb	r3, [r7, #24]
 8003460:	7213      	strb	r3, [r2, #8]
	Rx_info.rx_mode = Rxmode;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003468:	461a      	mov	r2, r3
 800346a:	7f3b      	ldrb	r3, [r7, #28]
 800346c:	72d3      	strb	r3, [r2, #11]
	Rx_info.detect_endchar = 0;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003474:	2200      	movs	r2, #0
 8003476:	725a      	strb	r2, [r3, #9]
	Rx_info.end_char_count = 0;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800347e:	2200      	movs	r2, #0
 8003480:	731a      	strb	r2, [r3, #12]
	Rx_info.release_event = -1;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003488:	22ff      	movs	r2, #255	@ 0xff
 800348a:	739a      	strb	r2, [r3, #14]
	Rx_info.Rx = Rxbuffer;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003494:	6113      	str	r3, [r2, #16]
	Rx_info.Rxcount = 0;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800349c:	2200      	movs	r2, #0
 800349e:	829a      	strh	r2, [r3, #20]
	serial_.RxintEn(Rx_info.Rx, BufferLen);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80034a6:	3304      	adds	r3, #4
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80034ae:	6911      	ldr	r1, [r2, #16]
 80034b0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80034b4:	4618      	mov	r0, r3
 80034b6:	f001 fade 	bl	8004a76 <_ZN13System_serial6serial7RxintEnEPht>
	serial_.TransmitData(Txbuf, len, timeout);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 80034c0:	3004      	adds	r0, #4
 80034c2:	88bb      	ldrh	r3, [r7, #4]
 80034c4:	88fa      	ldrh	r2, [r7, #6]
 80034c6:	68b9      	ldr	r1, [r7, #8]
 80034c8:	f001 fac2 	bl	8004a50 <_ZN13System_serial6serial12TransmitDataEPKhtm>

}
 80034cc:	bf00      	nop
 80034ce:	3710      	adds	r7, #16
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <_ZN5Modem8simA76728PrepRxTxEPKhtthhhNS0_6RxmodeE>:
	serial_.RxintEn(Rx_info.Rx, BufferLen);
	serial_.TransmitData(Txbuf, len, timeout);
}

void simA7672::PrepRxTx(const uint8_t *Txbuf, uint16_t len, uint16_t timeout,
		uint8_t start_char_notiMode,uint8_t start_char_notiModeCount,uint8_t end_char, enum Rxmode Rxmode) {
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	4611      	mov	r1, r2
 80034e0:	461a      	mov	r2, r3
 80034e2:	460b      	mov	r3, r1
 80034e4:	80fb      	strh	r3, [r7, #6]
 80034e6:	4613      	mov	r3, r2
 80034e8:	80bb      	strh	r3, [r7, #4]

	memset(Rxbuffer, 0, BufferLen);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80034f0:	2100      	movs	r1, #0
 80034f2:	4618      	mov	r0, r3
 80034f4:	f00e fb6d 	bl	8011bd2 <memset>
	memset(Txbuffer, 0, BufferLen);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003502:	2100      	movs	r1, #0
 8003504:	4618      	mov	r0, r3
 8003506:	f00e fb64 	bl	8011bd2 <memset>
	rst_event(rx_evt);
 800350a:	2100      	movs	r1, #0
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f000 f866 	bl	80035de <_ZN5Modem8simA76729rst_eventENS0_9eventTypeE>
	rst_event(tx_evt);
 8003512:	2101      	movs	r1, #1
 8003514:	68f8      	ldr	r0, [r7, #12]
 8003516:	f000 f862 	bl	80035de <_ZN5Modem8simA76729rst_eventENS0_9eventTypeE>

	Rx_info.end_char = end_char;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003520:	461a      	mov	r2, r3
 8003522:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003526:	7213      	strb	r3, [r2, #8]
	Rx_info.rx_mode = Rxmode;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800352e:	461a      	mov	r2, r3
 8003530:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003534:	72d3      	strb	r3, [r2, #11]
	Rx_info.detect_endchar = 0;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800353c:	2200      	movs	r2, #0
 800353e:	725a      	strb	r2, [r3, #9]
	Rx_info.end_char_count = 0;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003546:	2200      	movs	r2, #0
 8003548:	731a      	strb	r2, [r3, #12]
	Rx_info.release_event = -1;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003550:	22ff      	movs	r2, #255	@ 0xff
 8003552:	739a      	strb	r2, [r3, #14]
	Rx_info.Rx = Rxbuffer;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800355c:	6113      	str	r3, [r2, #16]
	Rx_info.Rxcount = 0;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003564:	2200      	movs	r2, #0
 8003566:	829a      	strh	r2, [r3, #20]
	Rx_info.start_char_notiMode = start_char_notiMode;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800356e:	461a      	mov	r2, r3
 8003570:	7e3b      	ldrb	r3, [r7, #24]
 8003572:	7793      	strb	r3, [r2, #30]
	Rx_info.start_char_notiModeCount = start_char_notiModeCount-1;
 8003574:	7f3b      	ldrb	r3, [r7, #28]
 8003576:	3b01      	subs	r3, #1
 8003578:	b2da      	uxtb	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003580:	77da      	strb	r2, [r3, #31]
	serial_.RxintEn(Rx_info.Rx, BufferLen);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003588:	3304      	adds	r3, #4
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003590:	6911      	ldr	r1, [r2, #16]
 8003592:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003596:	4618      	mov	r0, r3
 8003598:	f001 fa6d 	bl	8004a76 <_ZN13System_serial6serial7RxintEnEPht>
	serial_.TransmitData(Txbuf, len, timeout);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 80035a2:	3004      	adds	r0, #4
 80035a4:	88bb      	ldrh	r3, [r7, #4]
 80035a6:	88fa      	ldrh	r2, [r7, #6]
 80035a8:	68b9      	ldr	r1, [r7, #8]
 80035aa:	f001 fa51 	bl	8004a50 <_ZN13System_serial6serial12TransmitDataEPKhtm>

}
 80035ae:	bf00      	nop
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <_ZN5Modem8simA76729set_eventENS0_9eventTypeE>:
	serial_.RxintEn(Rx_info.Rx, BufferLen);
	serial_.TransmitData(Txbuf, len, timeout);

}

inline void simA7672::set_event(enum eventType event) {
 80035b6:	b480      	push	{r7}
 80035b8:	b083      	sub	sp, #12
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
 80035be:	460b      	mov	r3, r1
 80035c0:	70fb      	strb	r3, [r7, #3]
	Event[event] = 1;
 80035c2:	78fb      	ldrb	r3, [r7, #3]
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	4413      	add	r3, r2
 80035c8:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80035cc:	3309      	adds	r3, #9
 80035ce:	2201      	movs	r2, #1
 80035d0:	701a      	strb	r2, [r3, #0]
}
 80035d2:	bf00      	nop
 80035d4:	370c      	adds	r7, #12
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr

080035de <_ZN5Modem8simA76729rst_eventENS0_9eventTypeE>:
inline void simA7672::rst_event(enum eventType event) {
 80035de:	b480      	push	{r7}
 80035e0:	b083      	sub	sp, #12
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
 80035e6:	460b      	mov	r3, r1
 80035e8:	70fb      	strb	r3, [r7, #3]
	Event[event] = 0;
 80035ea:	78fb      	ldrb	r3, [r7, #3]
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	4413      	add	r3, r2
 80035f0:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80035f4:	3309      	adds	r3, #9
 80035f6:	2200      	movs	r2, #0
 80035f8:	701a      	strb	r2, [r3, #0]
}
 80035fa:	bf00      	nop
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr

08003606 <_ZN5Modem8simA767211check_eventENS0_9eventTypeE>:
enum simA7672::status simA7672::check_event(enum eventType event) {
 8003606:	b480      	push	{r7}
 8003608:	b085      	sub	sp, #20
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
 800360e:	460b      	mov	r3, r1
 8003610:	70fb      	strb	r3, [r7, #3]

	status stat = simA7672_OK;
 8003612:	2300      	movs	r3, #0
 8003614:	73fb      	strb	r3, [r7, #15]

	if (Event[event]) {
 8003616:	78fb      	ldrb	r3, [r7, #3]
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	4413      	add	r3, r2
 800361c:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003620:	3309      	adds	r3, #9
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	b2db      	uxtb	r3, r3
 8003626:	2b00      	cmp	r3, #0
 8003628:	bf14      	ite	ne
 800362a:	2301      	movne	r3, #1
 800362c:	2300      	moveq	r3, #0
 800362e:	b2db      	uxtb	r3, r3
 8003630:	2b00      	cmp	r3, #0
 8003632:	d002      	beq.n	800363a <_ZN5Modem8simA767211check_eventENS0_9eventTypeE+0x34>
		stat = simA7672_OK;
 8003634:	2300      	movs	r3, #0
 8003636:	73fb      	strb	r3, [r7, #15]
 8003638:	e010      	b.n	800365c <_ZN5Modem8simA767211check_eventENS0_9eventTypeE+0x56>
	} else if (!Event[event]) {
 800363a:	78fb      	ldrb	r3, [r7, #3]
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	4413      	add	r3, r2
 8003640:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003644:	3309      	adds	r3, #9
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b00      	cmp	r3, #0
 800364c:	bf0c      	ite	eq
 800364e:	2301      	moveq	r3, #1
 8003650:	2300      	movne	r3, #0
 8003652:	b2db      	uxtb	r3, r3
 8003654:	2b00      	cmp	r3, #0
 8003656:	d001      	beq.n	800365c <_ZN5Modem8simA767211check_eventENS0_9eventTypeE+0x56>
		stat = simA7672_ERR;
 8003658:	2301      	movs	r3, #1
 800365a:	73fb      	strb	r3, [r7, #15]
	}

	return stat;
 800365c:	7bfb      	ldrb	r3, [r7, #15]

}
 800365e:	4618      	mov	r0, r3
 8003660:	3714      	adds	r7, #20
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr

0800366a <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>:

	return stat;

}
enum simA7672::status simA7672::check_eventTimeout(enum eventType event,
		uint16_t timeout) {
 800366a:	b580      	push	{r7, lr}
 800366c:	b084      	sub	sp, #16
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
 8003672:	460b      	mov	r3, r1
 8003674:	70fb      	strb	r3, [r7, #3]
 8003676:	4613      	mov	r3, r2
 8003678:	803b      	strh	r3, [r7, #0]
	status stat = simA7672_OK;
 800367a:	2300      	movs	r3, #0
 800367c:	73fb      	strb	r3, [r7, #15]
	 prev_time = 0;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003684:	461a      	mov	r2, r3
 8003686:	2300      	movs	r3, #0
 8003688:	62d3      	str	r3, [r2, #44]	@ 0x2c

	prev_time = HAL_GetTick(); //we get new time before going into while
 800368a:	f005 fc51 	bl	8008f30 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003696:	62da      	str	r2, [r3, #44]	@ 0x2c
	while ((check_event(event) != simA7672_OK)
 8003698:	e002      	b.n	80036a0 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt+0x36>
			&& (HAL_GetTick() - prev_time < timeout)) {
		//wait here until get event or time passes
		System_Rtos::delay(10);
 800369a:	200a      	movs	r0, #10
 800369c:	f000 fda6 	bl	80041ec <_ZN11System_Rtos5delayEm>
	while ((check_event(event) != simA7672_OK)
 80036a0:	78fb      	ldrb	r3, [r7, #3]
 80036a2:	4619      	mov	r1, r3
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f7ff ffae 	bl	8003606 <_ZN5Modem8simA767211check_eventENS0_9eventTypeE>
 80036aa:	4603      	mov	r3, r0
			&& (HAL_GetTick() - prev_time < timeout)) {
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00c      	beq.n	80036ca <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt+0x60>
 80036b0:	f005 fc3e 	bl	8008f30 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80036bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036be:	1ad2      	subs	r2, r2, r3
 80036c0:	883b      	ldrh	r3, [r7, #0]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d201      	bcs.n	80036ca <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt+0x60>
 80036c6:	2301      	movs	r3, #1
 80036c8:	e000      	b.n	80036cc <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt+0x62>
 80036ca:	2300      	movs	r3, #0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1e4      	bne.n	800369a <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt+0x30>
	}

	if (check_event(event) != simA7672_OK) {
 80036d0:	78fb      	ldrb	r3, [r7, #3]
 80036d2:	4619      	mov	r1, r3
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f7ff ff96 	bl	8003606 <_ZN5Modem8simA767211check_eventENS0_9eventTypeE>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	bf14      	ite	ne
 80036e0:	2301      	movne	r3, #1
 80036e2:	2300      	moveq	r3, #0
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt+0x84>
		stat = simA7672::simA7672_ERR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	73fb      	strb	r3, [r7, #15]
	}

	return stat;
 80036ee:	7bfb      	ldrb	r3, [r7, #15]

}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3710      	adds	r7, #16
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <_ZN5Modem8simA76724RxCBEh>:

/*Interrupt callbacks*/

void simA7672::RxCB(uint8_t data) {
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	460b      	mov	r3, r1
 8003702:	70fb      	strb	r3, [r7, #3]
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wvolatile"
	if (Rx_info.rx_mode == CMD_mode) {
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800370a:	7adb      	ldrb	r3, [r3, #11]
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b01      	cmp	r3, #1
 8003710:	bf0c      	ite	eq
 8003712:	2301      	moveq	r3, #1
 8003714:	2300      	movne	r3, #0
 8003716:	b2db      	uxtb	r3, r3
 8003718:	2b00      	cmp	r3, #0
 800371a:	f000 808a 	beq.w	8003832 <_ZN5Modem8simA76724RxCBEh+0x13a>
		*Rx_info.Rx++ = data;
 800371e:	78f8      	ldrb	r0, [r7, #3]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	1c5a      	adds	r2, r3, #1
 800372a:	6879      	ldr	r1, [r7, #4]
 800372c:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8003730:	610a      	str	r2, [r1, #16]
 8003732:	4602      	mov	r2, r0
 8003734:	701a      	strb	r2, [r3, #0]
		Rx_info.Rxcount++;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800373c:	8a9b      	ldrh	r3, [r3, #20]
 800373e:	b29b      	uxth	r3, r3
 8003740:	3301      	adds	r3, #1
 8003742:	b29a      	uxth	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800374a:	829a      	strh	r2, [r3, #20]

		if (Rx_info.end_char_count == 1) {
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003752:	7b1b      	ldrb	r3, [r3, #12]
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b01      	cmp	r3, #1
 8003758:	bf0c      	ite	eq
 800375a:	2301      	moveq	r3, #1
 800375c:	2300      	movne	r3, #0
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00c      	beq.n	800377e <_ZN5Modem8simA76724RxCBEh+0x86>
			Rx_info.release_event++;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800376a:	7b9b      	ldrb	r3, [r3, #14]
 800376c:	b25b      	sxtb	r3, r3
 800376e:	b2db      	uxtb	r3, r3
 8003770:	3301      	adds	r3, #1
 8003772:	b2db      	uxtb	r3, r3
 8003774:	b25a      	sxtb	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800377c:	739a      	strb	r2, [r3, #14]

		}

		if (Rx_info.detect_nextlinechar == 1 && (data == 'O' || data == 'E')) {
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003784:	7a9b      	ldrb	r3, [r3, #10]
 8003786:	b2db      	uxtb	r3, r3
 8003788:	2b01      	cmp	r3, #1
 800378a:	d107      	bne.n	800379c <_ZN5Modem8simA76724RxCBEh+0xa4>
 800378c:	78fb      	ldrb	r3, [r7, #3]
 800378e:	2b4f      	cmp	r3, #79	@ 0x4f
 8003790:	d002      	beq.n	8003798 <_ZN5Modem8simA76724RxCBEh+0xa0>
 8003792:	78fb      	ldrb	r3, [r7, #3]
 8003794:	2b45      	cmp	r3, #69	@ 0x45
 8003796:	d101      	bne.n	800379c <_ZN5Modem8simA76724RxCBEh+0xa4>
 8003798:	2301      	movs	r3, #1
 800379a:	e000      	b.n	800379e <_ZN5Modem8simA76724RxCBEh+0xa6>
 800379c:	2300      	movs	r3, #0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d01b      	beq.n	80037da <_ZN5Modem8simA76724RxCBEh+0xe2>
			Rx_info.detect_nextlinechar = 0; //reset it
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037a8:	2200      	movs	r2, #0
 80037aa:	729a      	strb	r2, [r3, #10]
			Rx_info.end_char_count = 1;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037b2:	2201      	movs	r2, #1
 80037b4:	731a      	strb	r2, [r3, #12]
			if (data == 'O') {
 80037b6:	78fb      	ldrb	r3, [r7, #3]
 80037b8:	2b4f      	cmp	r3, #79	@ 0x4f
 80037ba:	d105      	bne.n	80037c8 <_ZN5Modem8simA76724RxCBEh+0xd0>
				Rx_info.total_char = 2;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037c2:	2202      	movs	r2, #2
 80037c4:	735a      	strb	r2, [r3, #13]
 80037c6:	e00d      	b.n	80037e4 <_ZN5Modem8simA76724RxCBEh+0xec>
			} else if (data == 'E') {
 80037c8:	78fb      	ldrb	r3, [r7, #3]
 80037ca:	2b45      	cmp	r3, #69	@ 0x45
 80037cc:	d10a      	bne.n	80037e4 <_ZN5Modem8simA76724RxCBEh+0xec>
				Rx_info.total_char = 5;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037d4:	2205      	movs	r2, #5
 80037d6:	735a      	strb	r2, [r3, #13]
 80037d8:	e004      	b.n	80037e4 <_ZN5Modem8simA76724RxCBEh+0xec>
			}

		} else {
			Rx_info.detect_nextlinechar = 0; //reset it
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037e0:	2200      	movs	r2, #0
 80037e2:	729a      	strb	r2, [r3, #10]

		}

		if (data == simA7672::_LF) {
 80037e4:	78fb      	ldrb	r3, [r7, #3]
 80037e6:	2b0a      	cmp	r3, #10
 80037e8:	d104      	bne.n	80037f4 <_ZN5Modem8simA76724RxCBEh+0xfc>
			Rx_info.detect_nextlinechar = 1;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037f0:	2201      	movs	r2, #1
 80037f2:	729a      	strb	r2, [r3, #10]

		}

		if (Rx_info.release_event >= Rx_info.total_char) {
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037fa:	7b9b      	ldrb	r3, [r3, #14]
 80037fc:	b25b      	sxtb	r3, r3
 80037fe:	461a      	mov	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003806:	7b5b      	ldrb	r3, [r3, #13]
 8003808:	b2db      	uxtb	r3, r3
 800380a:	429a      	cmp	r2, r3
 800380c:	bfac      	ite	ge
 800380e:	2301      	movge	r3, #1
 8003810:	2300      	movlt	r3, #0
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b00      	cmp	r3, #0
 8003816:	f000 80ed 	beq.w	80039f4 <_ZN5Modem8simA76724RxCBEh+0x2fc>
			set_event(rx_evt);
 800381a:	2100      	movs	r1, #0
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f7ff feca 	bl	80035b6 <_ZN5Modem8simA76729set_eventENS0_9eventTypeE>
			serial_.RxintDis();
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003828:	3304      	adds	r3, #4
 800382a:	4618      	mov	r0, r3
 800382c:	f001 f935 	bl	8004a9a <_ZN13System_serial6serial8RxintDisEv>
		}

	}
#pragma GCC diagnostic pop

}
 8003830:	e0e0      	b.n	80039f4 <_ZN5Modem8simA76724RxCBEh+0x2fc>
	} else if (Rx_info.rx_mode == MSG_mode) {
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003838:	7adb      	ldrb	r3, [r3, #11]
 800383a:	b2db      	uxtb	r3, r3
 800383c:	2b02      	cmp	r3, #2
 800383e:	bf0c      	ite	eq
 8003840:	2301      	moveq	r3, #1
 8003842:	2300      	movne	r3, #0
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d072      	beq.n	8003930 <_ZN5Modem8simA76724RxCBEh+0x238>
		*Rx_info.Rx++ = data;
 800384a:	78f8      	ldrb	r0, [r7, #3]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	1c5a      	adds	r2, r3, #1
 8003856:	6879      	ldr	r1, [r7, #4]
 8003858:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 800385c:	610a      	str	r2, [r1, #16]
 800385e:	4602      	mov	r2, r0
 8003860:	701a      	strb	r2, [r3, #0]
		Rx_info.Rxcount++;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003868:	8a9b      	ldrh	r3, [r3, #20]
 800386a:	b29b      	uxth	r3, r3
 800386c:	3301      	adds	r3, #1
 800386e:	b29a      	uxth	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003876:	829a      	strh	r2, [r3, #20]
		if (Rx_info.end_char != _LF) {
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800387e:	7a1b      	ldrb	r3, [r3, #8]
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b0a      	cmp	r3, #10
 8003884:	bf14      	ite	ne
 8003886:	2301      	movne	r3, #1
 8003888:	2300      	moveq	r3, #0
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00f      	beq.n	80038b0 <_ZN5Modem8simA76724RxCBEh+0x1b8>
			if (data == '>') {
 8003890:	78fb      	ldrb	r3, [r7, #3]
 8003892:	2b3e      	cmp	r3, #62	@ 0x3e
 8003894:	f040 80ae 	bne.w	80039f4 <_ZN5Modem8simA76724RxCBEh+0x2fc>
				set_event(rx_evt);
 8003898:	2100      	movs	r1, #0
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f7ff fe8b 	bl	80035b6 <_ZN5Modem8simA76729set_eventENS0_9eventTypeE>
				serial_.RxintDis();
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80038a6:	3304      	adds	r3, #4
 80038a8:	4618      	mov	r0, r3
 80038aa:	f001 f8f6 	bl	8004a9a <_ZN13System_serial6serial8RxintDisEv>
}
 80038ae:	e0a1      	b.n	80039f4 <_ZN5Modem8simA76724RxCBEh+0x2fc>
			if (Rx_info.end_char_count == 1 && data == 'E') {
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80038b6:	7b1b      	ldrb	r3, [r3, #12]
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d104      	bne.n	80038c8 <_ZN5Modem8simA76724RxCBEh+0x1d0>
 80038be:	78fb      	ldrb	r3, [r7, #3]
 80038c0:	2b45      	cmp	r3, #69	@ 0x45
 80038c2:	d101      	bne.n	80038c8 <_ZN5Modem8simA76724RxCBEh+0x1d0>
 80038c4:	2301      	movs	r3, #1
 80038c6:	e000      	b.n	80038ca <_ZN5Modem8simA76724RxCBEh+0x1d2>
 80038c8:	2300      	movs	r3, #0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d004      	beq.n	80038d8 <_ZN5Modem8simA76724RxCBEh+0x1e0>
				Rx_info.release_event = 2;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80038d4:	2202      	movs	r2, #2
 80038d6:	739a      	strb	r2, [r3, #14]
			if (data == _LF) {
 80038d8:	78fb      	ldrb	r3, [r7, #3]
 80038da:	2b0a      	cmp	r3, #10
 80038dc:	d10a      	bne.n	80038f4 <_ZN5Modem8simA76724RxCBEh+0x1fc>
				Rx_info.end_char_count++;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80038e4:	7b1b      	ldrb	r3, [r3, #12]
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	3301      	adds	r3, #1
 80038ea:	b2da      	uxtb	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80038f2:	731a      	strb	r2, [r3, #12]
			if (Rx_info.end_char_count == Rx_info.release_event) {
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80038fa:	7b1b      	ldrb	r3, [r3, #12]
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	461a      	mov	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003906:	7b9b      	ldrb	r3, [r3, #14]
 8003908:	b25b      	sxtb	r3, r3
 800390a:	429a      	cmp	r2, r3
 800390c:	bf0c      	ite	eq
 800390e:	2301      	moveq	r3, #1
 8003910:	2300      	movne	r3, #0
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b00      	cmp	r3, #0
 8003916:	d06d      	beq.n	80039f4 <_ZN5Modem8simA76724RxCBEh+0x2fc>
				set_event(rx_evt);
 8003918:	2100      	movs	r1, #0
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f7ff fe4b 	bl	80035b6 <_ZN5Modem8simA76729set_eventENS0_9eventTypeE>
				serial_.RxintDis();
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003926:	3304      	adds	r3, #4
 8003928:	4618      	mov	r0, r3
 800392a:	f001 f8b6 	bl	8004a9a <_ZN13System_serial6serial8RxintDisEv>
}
 800392e:	e061      	b.n	80039f4 <_ZN5Modem8simA76724RxCBEh+0x2fc>
	} else if (Rx_info.rx_mode == Notification_mode) {
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003936:	7adb      	ldrb	r3, [r3, #11]
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b03      	cmp	r3, #3
 800393c:	bf0c      	ite	eq
 800393e:	2301      	moveq	r3, #1
 8003940:	2300      	movne	r3, #0
 8003942:	b2db      	uxtb	r3, r3
 8003944:	2b00      	cmp	r3, #0
 8003946:	d055      	beq.n	80039f4 <_ZN5Modem8simA76724RxCBEh+0x2fc>
		*Rx_info.Rx++ = data;
 8003948:	78f8      	ldrb	r0, [r7, #3]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	1c5a      	adds	r2, r3, #1
 8003954:	6879      	ldr	r1, [r7, #4]
 8003956:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 800395a:	610a      	str	r2, [r1, #16]
 800395c:	4602      	mov	r2, r0
 800395e:	701a      	strb	r2, [r3, #0]
		Rx_info.Rxcount++;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003966:	8a9b      	ldrh	r3, [r3, #20]
 8003968:	b29b      	uxth	r3, r3
 800396a:	3301      	adds	r3, #1
 800396c:	b29a      	uxth	r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003974:	829a      	strh	r2, [r3, #20]
		if (data == Rx_info.start_char_notiMode) {
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800397c:	7f9b      	ldrb	r3, [r3, #30]
 800397e:	b2db      	uxtb	r3, r3
 8003980:	78fa      	ldrb	r2, [r7, #3]
 8003982:	429a      	cmp	r2, r3
 8003984:	bf0c      	ite	eq
 8003986:	2301      	moveq	r3, #1
 8003988:	2300      	movne	r3, #0
 800398a:	b2db      	uxtb	r3, r3
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00c      	beq.n	80039aa <_ZN5Modem8simA76724RxCBEh+0x2b2>
			Rx_info.release_event++;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003996:	7b9b      	ldrb	r3, [r3, #14]
 8003998:	b25b      	sxtb	r3, r3
 800399a:	b2db      	uxtb	r3, r3
 800399c:	3301      	adds	r3, #1
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	b25a      	sxtb	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039a8:	739a      	strb	r2, [r3, #14]
		if (data == Rx_info.end_char && Rx_info.release_event >= Rx_info.start_char_notiModeCount) {
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039b0:	7a1b      	ldrb	r3, [r3, #8]
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	78fa      	ldrb	r2, [r7, #3]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d10e      	bne.n	80039d8 <_ZN5Modem8simA76724RxCBEh+0x2e0>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039c0:	7b9b      	ldrb	r3, [r3, #14]
 80039c2:	b25b      	sxtb	r3, r3
 80039c4:	461a      	mov	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039cc:	7fdb      	ldrb	r3, [r3, #31]
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	429a      	cmp	r2, r3
 80039d2:	db01      	blt.n	80039d8 <_ZN5Modem8simA76724RxCBEh+0x2e0>
 80039d4:	2301      	movs	r3, #1
 80039d6:	e000      	b.n	80039da <_ZN5Modem8simA76724RxCBEh+0x2e2>
 80039d8:	2300      	movs	r3, #0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00a      	beq.n	80039f4 <_ZN5Modem8simA76724RxCBEh+0x2fc>
			set_event(rx_evt);
 80039de:	2100      	movs	r1, #0
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f7ff fde8 	bl	80035b6 <_ZN5Modem8simA76729set_eventENS0_9eventTypeE>
			serial_.RxintDis();
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80039ec:	3304      	adds	r3, #4
 80039ee:	4618      	mov	r0, r3
 80039f0:	f001 f853 	bl	8004a9a <_ZN13System_serial6serial8RxintDisEv>
}
 80039f4:	bf00      	nop
 80039f6:	3708      	adds	r7, #8
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh>:

void simA7672::TxCB(UART_HandleTypeDef *huart) {

}

void simA7672::RxCBStatic(UART_HandleTypeDef *huart, uint8_t data) {
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	460b      	mov	r3, r1
 8003a06:	70fb      	strb	r3, [r7, #3]
	// Find the instance and call its instance method
	uint8_t i = 0;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < numberofuart; i++) {
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	73fb      	strb	r3, [r7, #15]
 8003a10:	e009      	b.n	8003a26 <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh+0x2a>
		if (ClassInstances[i].huart == huart) {
 8003a12:	7bfb      	ldrb	r3, [r7, #15]
 8003a14:	4a11      	ldr	r2, [pc, #68]	@ (8003a5c <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh+0x60>)
 8003a16:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d006      	beq.n	8003a2e <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh+0x32>
	for (i = 0; i < numberofuart; i++) {
 8003a20:	7bfb      	ldrb	r3, [r7, #15]
 8003a22:	3301      	adds	r3, #1
 8003a24:	73fb      	strb	r3, [r7, #15]
 8003a26:	7bfb      	ldrb	r3, [r7, #15]
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d9f2      	bls.n	8003a12 <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh+0x16>
 8003a2c:	e000      	b.n	8003a30 <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh+0x34>
			break;
 8003a2e:	bf00      	nop
		}
	}

	if (ClassInstances[i].Instance) {
 8003a30:	7bfb      	ldrb	r3, [r7, #15]
 8003a32:	4a0a      	ldr	r2, [pc, #40]	@ (8003a5c <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh+0x60>)
 8003a34:	00db      	lsls	r3, r3, #3
 8003a36:	4413      	add	r3, r2
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d009      	beq.n	8003a52 <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh+0x56>
		ClassInstances[i].Instance->RxCB(data); // Delegate to instance-specific method
 8003a3e:	7bfb      	ldrb	r3, [r7, #15]
 8003a40:	4a06      	ldr	r2, [pc, #24]	@ (8003a5c <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh+0x60>)
 8003a42:	00db      	lsls	r3, r3, #3
 8003a44:	4413      	add	r3, r2
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	78fa      	ldrb	r2, [r7, #3]
 8003a4a:	4611      	mov	r1, r2
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7ff fe53 	bl	80036f8 <_ZN5Modem8simA76724RxCBEh>
	}

}
 8003a52:	bf00      	nop
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	20001950 	.word	0x20001950

08003a60 <_ZN5Modem8simA767210TxCBStaticEP20__UART_HandleTypeDef>:
void simA7672::TxCBStatic(UART_HandleTypeDef *huart) {
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]

}
 8003a68:	bf00      	nop
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <_ZN15sensor_TempHumd5AHT20C1EP17I2C_HandleTypeDefhm>:
}




AHT20::AHT20( I2C_HandleTypeDef *ui2c,uint8_t devAddr,uint32_t timeout) : AHT20Semaphore()
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	603b      	str	r3, [r7, #0]
 8003a80:	4613      	mov	r3, r2
 8003a82:	71fb      	strb	r3, [r7, #7]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	3314      	adds	r3, #20
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f000 fc71 	bl	8004370 <_ZN11System_Rtos18freertos_semaphoreC1Ev>
{
	_aht20_ui2c=ui2c;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	68ba      	ldr	r2, [r7, #8]
 8003a92:	605a      	str	r2, [r3, #4]
	devAddr_=devAddr;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	79fa      	ldrb	r2, [r7, #7]
 8003a98:	721a      	strb	r2, [r3, #8]
	timeout_ = timeout;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	601a      	str	r2, [r3, #0]
	AHT20Semaphore.semaphoreCreate();
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	3314      	adds	r3, #20
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f000 fc6e 	bl	8004386 <_ZN11System_Rtos18freertos_semaphore15semaphoreCreateEv>
}
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	4618      	mov	r0, r3
 8003aae:	3710      	adds	r7, #16
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <_ZN15sensor_TempHumd5AHT207measureEPmS1_>:
	}
	AHT20Semaphore.semaphoreGive();
	}
}
void AHT20::measure(uint32_t *temp_,uint32_t *humid_)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b08a      	sub	sp, #40	@ 0x28
 8003ab8:	af02      	add	r7, sp, #8
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	607a      	str	r2, [r7, #4]
	if (AHT20Semaphore.semaphoreTake(1000)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	3314      	adds	r3, #20
 8003ac4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f000 fc6b 	bl	80043a4 <_ZN11System_Rtos18freertos_semaphore13semaphoreTakeEm>
 8003ace:	4603      	mov	r3, r0
			== System_Rtos::freertos_semaphore::semaphore_recived) {
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	bf0c      	ite	eq
 8003ad4:	2301      	moveq	r3, #1
 8003ad6:	2300      	movne	r3, #0
 8003ad8:	b2db      	uxtb	r3, r3
	if (AHT20Semaphore.semaphoreTake(1000)
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	f000 8084 	beq.w	8003be8 <_ZN15sensor_TempHumd5AHT207measureEPmS1_+0x134>
	uint16_t counter = 0;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	83fb      	strh	r3, [r7, #30]
	System_Rtos::delay(50);
 8003ae4:	2032      	movs	r0, #50	@ 0x32
 8003ae6:	f000 fb81 	bl	80041ec <_ZN11System_Rtos5delayEm>
	uint8_t ahtTData[3];
	uint8_t ahtRData[7];
	ahtTData[0]=0xAC;
 8003aea:	23ac      	movs	r3, #172	@ 0xac
 8003aec:	763b      	strb	r3, [r7, #24]
	ahtTData[1]=0x33;
 8003aee:	2333      	movs	r3, #51	@ 0x33
 8003af0:	767b      	strb	r3, [r7, #25]
	ahtTData[2]=0x00;
 8003af2:	2300      	movs	r3, #0
 8003af4:	76bb      	strb	r3, [r7, #26]

	if(check_Device() == AHT_OK)
 8003af6:	68f8      	ldr	r0, [r7, #12]
 8003af8:	f000 f87a 	bl	8003bf0 <_ZN15sensor_TempHumd5AHT2012check_DeviceEv>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	bf0c      	ite	eq
 8003b02:	2301      	moveq	r3, #1
 8003b04:	2300      	movne	r3, #0
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d068      	beq.n	8003bde <_ZN15sensor_TempHumd5AHT207measureEPmS1_+0x12a>
	{

	HAL_I2C_Master_Transmit(_aht20_ui2c, devAddr_<<1, ahtTData, 3, timeout_);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6858      	ldr	r0, [r3, #4]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	7a1b      	ldrb	r3, [r3, #8]
 8003b14:	005b      	lsls	r3, r3, #1
 8003b16:	b299      	uxth	r1, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f107 0218 	add.w	r2, r7, #24
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	2303      	movs	r3, #3
 8003b24:	f006 fb9c 	bl	800a260 <HAL_I2C_Master_Transmit>
	System_Rtos::delay(100);
 8003b28:	2064      	movs	r0, #100	@ 0x64
 8003b2a:	f000 fb5f 	bl	80041ec <_ZN11System_Rtos5delayEm>
    while(1){
    	HAL_I2C_Master_Receive(_aht20_ui2c, devAddr_<<1, ahtRData, 7, timeout_);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6858      	ldr	r0, [r3, #4]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	7a1b      	ldrb	r3, [r3, #8]
 8003b36:	005b      	lsls	r3, r3, #1
 8003b38:	b299      	uxth	r1, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f107 0210 	add.w	r2, r7, #16
 8003b42:	9300      	str	r3, [sp, #0]
 8003b44:	2307      	movs	r3, #7
 8003b46:	f006 fc89 	bl	800a45c <HAL_I2C_Master_Receive>
    	DATA_State=ahtRData[0];
 8003b4a:	7c3a      	ldrb	r2, [r7, #16]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	725a      	strb	r2, [r3, #9]
    	if((DATA_State&(1<<7))==0)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	7a5b      	ldrb	r3, [r3, #9]
 8003b54:	b25b      	sxtb	r3, r3
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	db36      	blt.n	8003bc8 <_ZN15sensor_TempHumd5AHT207measureEPmS1_+0x114>
    		{
    	    DATA_Humi=ahtRData[1];
 8003b5a:	7c7b      	ldrb	r3, [r7, #17]
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	611a      	str	r2, [r3, #16]
    	    DATA_Humi=(DATA_Humi<<8)|ahtRData[2];
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	021b      	lsls	r3, r3, #8
 8003b68:	7cba      	ldrb	r2, [r7, #18]
 8003b6a:	431a      	orrs	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	611a      	str	r2, [r3, #16]
    	    DATA_Humi=(DATA_Humi<<4)|(ahtRData[3]>>4);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	011b      	lsls	r3, r3, #4
 8003b76:	7cfa      	ldrb	r2, [r7, #19]
 8003b78:	0912      	lsrs	r2, r2, #4
 8003b7a:	b2d2      	uxtb	r2, r2
 8003b7c:	431a      	orrs	r2, r3
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	611a      	str	r2, [r3, #16]
    	    DATA_Temp=ahtRData[3]&0x0F;
 8003b82:	7cfb      	ldrb	r3, [r7, #19]
 8003b84:	f003 020f 	and.w	r2, r3, #15
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	60da      	str	r2, [r3, #12]
    	    DATA_Temp=(DATA_Temp<<8)|ahtRData[4];
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	021b      	lsls	r3, r3, #8
 8003b92:	7d3a      	ldrb	r2, [r7, #20]
 8003b94:	431a      	orrs	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	60da      	str	r2, [r3, #12]
    	    DATA_Temp=(DATA_Temp<<8)|ahtRData[5];
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	021b      	lsls	r3, r3, #8
 8003ba0:	7d7a      	ldrb	r2, [r7, #21]
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	60da      	str	r2, [r3, #12]
    	    DATA_CRCreg= ahtRData[6];
 8003ba8:	7dba      	ldrb	r2, [r7, #22]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	729a      	strb	r2, [r3, #10]

    	    *temp_ = temp();
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f000 f83e 	bl	8003c30 <_ZN15sensor_TempHumd5AHT204tempEv>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	601a      	str	r2, [r3, #0]
    	    *humid_ = humid();
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f000 f874 	bl	8003ca8 <_ZN15sensor_TempHumd5AHT205humidEv>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	601a      	str	r2, [r3, #0]
    		break;
 8003bc6:	e00a      	b.n	8003bde <_ZN15sensor_TempHumd5AHT207measureEPmS1_+0x12a>
    		}
    	else {
    		counter++;
 8003bc8:	8bfb      	ldrh	r3, [r7, #30]
 8003bca:	3301      	adds	r3, #1
 8003bcc:	83fb      	strh	r3, [r7, #30]
    		System_Rtos::delay(10);
 8003bce:	200a      	movs	r0, #10
 8003bd0:	f000 fb0c 	bl	80041ec <_ZN11System_Rtos5delayEm>

    		if(counter > 50)
 8003bd4:	8bfb      	ldrh	r3, [r7, #30]
 8003bd6:	2b32      	cmp	r3, #50	@ 0x32
 8003bd8:	d800      	bhi.n	8003bdc <_ZN15sensor_TempHumd5AHT207measureEPmS1_+0x128>
    	HAL_I2C_Master_Receive(_aht20_ui2c, devAddr_<<1, ahtRData, 7, timeout_);
 8003bda:	e7a8      	b.n	8003b2e <_ZN15sensor_TempHumd5AHT207measureEPmS1_+0x7a>
    		{
    			break;
 8003bdc:	bf00      	nop
    		}
    	}
    }
	}

	AHT20Semaphore.semaphoreGive();
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	3314      	adds	r3, #20
 8003be2:	4618      	mov	r0, r3
 8003be4:	f000 fc06 	bl	80043f4 <_ZN11System_Rtos18freertos_semaphore13semaphoreGiveEv>
	}
}
 8003be8:	bf00      	nop
 8003bea:	3720      	adds	r7, #32
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <_ZN15sensor_TempHumd5AHT2012check_DeviceEv>:

enum AHT20::status AHT20::check_Device()
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]

	status stat = AHT_OK;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	73fb      	strb	r3, [r7, #15]

	if(HAL_I2C_IsDeviceReady(_aht20_ui2c, devAddr_ << 1, 3, 1000) != HAL_OK)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6858      	ldr	r0, [r3, #4]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	7a1b      	ldrb	r3, [r3, #8]
 8003c04:	005b      	lsls	r3, r3, #1
 8003c06:	b299      	uxth	r1, r3
 8003c08:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003c0c:	2203      	movs	r2, #3
 8003c0e:	f006 fe57 	bl	800a8c0 <HAL_I2C_IsDeviceReady>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	bf14      	ite	ne
 8003c18:	2301      	movne	r3, #1
 8003c1a:	2300      	moveq	r3, #0
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d001      	beq.n	8003c26 <_ZN15sensor_TempHumd5AHT2012check_DeviceEv+0x36>
	{
		return AHT_ERR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e000      	b.n	8003c28 <_ZN15sensor_TempHumd5AHT2012check_DeviceEv+0x38>
	}

	return stat;
 8003c26:	7bfb      	ldrb	r3, [r7, #15]

}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3710      	adds	r7, #16
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <_ZN15sensor_TempHumd5AHT204tempEv>:


uint32_t AHT20::temp()
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
	uint32_t TEMP_CALC;
	TEMP_CALC= (((DATA_Temp/1024.0)/1024.0) * 200.0) -50.0;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7fc fc61 	bl	8000504 <__aeabi_ui2d>
 8003c42:	f04f 0200 	mov.w	r2, #0
 8003c46:	4b15      	ldr	r3, [pc, #84]	@ (8003c9c <_ZN15sensor_TempHumd5AHT204tempEv+0x6c>)
 8003c48:	f7fc fe00 	bl	800084c <__aeabi_ddiv>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	460b      	mov	r3, r1
 8003c50:	4610      	mov	r0, r2
 8003c52:	4619      	mov	r1, r3
 8003c54:	f04f 0200 	mov.w	r2, #0
 8003c58:	4b10      	ldr	r3, [pc, #64]	@ (8003c9c <_ZN15sensor_TempHumd5AHT204tempEv+0x6c>)
 8003c5a:	f7fc fdf7 	bl	800084c <__aeabi_ddiv>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	460b      	mov	r3, r1
 8003c62:	4610      	mov	r0, r2
 8003c64:	4619      	mov	r1, r3
 8003c66:	f04f 0200 	mov.w	r2, #0
 8003c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ca0 <_ZN15sensor_TempHumd5AHT204tempEv+0x70>)
 8003c6c:	f7fc fcc4 	bl	80005f8 <__aeabi_dmul>
 8003c70:	4602      	mov	r2, r0
 8003c72:	460b      	mov	r3, r1
 8003c74:	4610      	mov	r0, r2
 8003c76:	4619      	mov	r1, r3
 8003c78:	f04f 0200 	mov.w	r2, #0
 8003c7c:	4b09      	ldr	r3, [pc, #36]	@ (8003ca4 <_ZN15sensor_TempHumd5AHT204tempEv+0x74>)
 8003c7e:	f7fc fb03 	bl	8000288 <__aeabi_dsub>
 8003c82:	4602      	mov	r2, r0
 8003c84:	460b      	mov	r3, r1
 8003c86:	4610      	mov	r0, r2
 8003c88:	4619      	mov	r1, r3
 8003c8a:	f7fc ff8d 	bl	8000ba8 <__aeabi_d2uiz>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	60fb      	str	r3, [r7, #12]
	return TEMP_CALC;
 8003c92:	68fb      	ldr	r3, [r7, #12]
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3710      	adds	r7, #16
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	40900000 	.word	0x40900000
 8003ca0:	40690000 	.word	0x40690000
 8003ca4:	40490000 	.word	0x40490000

08003ca8 <_ZN15sensor_TempHumd5AHT205humidEv>:



uint32_t AHT20::humid()
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
	uint32_t HUMID_CALC;
	HUMID_CALC = ((DATA_Humi/1024.0)/1024.0)*100;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7fc fc25 	bl	8000504 <__aeabi_ui2d>
 8003cba:	f04f 0200 	mov.w	r2, #0
 8003cbe:	4b11      	ldr	r3, [pc, #68]	@ (8003d04 <_ZN15sensor_TempHumd5AHT205humidEv+0x5c>)
 8003cc0:	f7fc fdc4 	bl	800084c <__aeabi_ddiv>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	4610      	mov	r0, r2
 8003cca:	4619      	mov	r1, r3
 8003ccc:	f04f 0200 	mov.w	r2, #0
 8003cd0:	4b0c      	ldr	r3, [pc, #48]	@ (8003d04 <_ZN15sensor_TempHumd5AHT205humidEv+0x5c>)
 8003cd2:	f7fc fdbb 	bl	800084c <__aeabi_ddiv>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	460b      	mov	r3, r1
 8003cda:	4610      	mov	r0, r2
 8003cdc:	4619      	mov	r1, r3
 8003cde:	f04f 0200 	mov.w	r2, #0
 8003ce2:	4b09      	ldr	r3, [pc, #36]	@ (8003d08 <_ZN15sensor_TempHumd5AHT205humidEv+0x60>)
 8003ce4:	f7fc fc88 	bl	80005f8 <__aeabi_dmul>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	460b      	mov	r3, r1
 8003cec:	4610      	mov	r0, r2
 8003cee:	4619      	mov	r1, r3
 8003cf0:	f7fc ff5a 	bl	8000ba8 <__aeabi_d2uiz>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	60fb      	str	r3, [r7, #12]
	return HUMID_CALC;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3710      	adds	r7, #16
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	40900000 	.word	0x40900000
 8003d08:	40590000 	.word	0x40590000

08003d0c <_ZN17sensor_liquidMeas12liquidSensorC1EP17ADC_HandleTypeDeffff>:
#include "adc.h"

namespace sensor_liquidMeas {


liquidSensor::liquidSensor(ADC_HandleTypeDef *hadc,float LowSpan,float FullSpan,float VoltOut) : LiquidMeasSemaphore()
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b086      	sub	sp, #24
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6178      	str	r0, [r7, #20]
 8003d14:	6139      	str	r1, [r7, #16]
 8003d16:	ed87 0a03 	vstr	s0, [r7, #12]
 8003d1a:	edc7 0a02 	vstr	s1, [r7, #8]
 8003d1e:	ed87 1a01 	vstr	s2, [r7, #4]
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	4a19      	ldr	r2, [pc, #100]	@ (8003d8c <_ZN17sensor_liquidMeas12liquidSensorC1EP17ADC_HandleTypeDeffff+0x80>)
 8003d26:	609a      	str	r2, [r3, #8]
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	60da      	str	r2, [r3, #12]
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	f04f 0200 	mov.w	r2, #0
 8003d34:	611a      	str	r2, [r3, #16]
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	4a14      	ldr	r2, [pc, #80]	@ (8003d8c <_ZN17sensor_liquidMeas12liquidSensorC1EP17ADC_HandleTypeDeffff+0x80>)
 8003d3a:	615a      	str	r2, [r3, #20]
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	761a      	strb	r2, [r3, #24]
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	2200      	movs	r2, #0
 8003d46:	61da      	str	r2, [r3, #28]
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	621a      	str	r2, [r3, #32]
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	2200      	movs	r2, #0
 8003d52:	625a      	str	r2, [r3, #36]	@ 0x24
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	3338      	adds	r3, #56	@ 0x38
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f000 fb09 	bl	8004370 <_ZN11System_Rtos18freertos_semaphoreC1Ev>
{
	hadc_sensor = hadc;
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	635a      	str	r2, [r3, #52]	@ 0x34
	LiquidMeasSemaphore.semaphoreCreate();
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	3338      	adds	r3, #56	@ 0x38
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f000 fb0c 	bl	8004386 <_ZN11System_Rtos18freertos_semaphore15semaphoreCreateEv>

    InternalLowSpan = LowSpan;
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	629a      	str	r2, [r3, #40]	@ 0x28
    InternalFullSpan = FullSpan;
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	68ba      	ldr	r2, [r7, #8]
 8003d78:	62da      	str	r2, [r3, #44]	@ 0x2c
    InternalVoltOut = VoltOut;
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	4618      	mov	r0, r3
 8003d84:	3718      	adds	r7, #24
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	bf800000 	.word	0xbf800000

08003d90 <_ZN17sensor_liquidMeas12liquidSensor16Measurement_loopEPhPfmPmS3_>:

void liquidSensor::Measurement_loop(uint8_t *getlevel,float *consumption,uint32_t curEpochTime,uint32_t *startEpochtime,uint32_t *endEpochtime)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
 8003d9c:	603b      	str	r3, [r7, #0]
	getLevel(getlevel);
 8003d9e:	68b9      	ldr	r1, [r7, #8]
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	f000 f80f 	bl	8003dc4 <_ZN17sensor_liquidMeas12liquidSensor8getLevelEPh>
	consumptionliters(consumption);
 8003da6:	6879      	ldr	r1, [r7, #4]
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f000 f907 	bl	8003fbc <_ZN17sensor_liquidMeas12liquidSensor17consumptionlitersEPf>
	refuelingDetection(curEpochTime,startEpochtime,endEpochtime);
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	69ba      	ldr	r2, [r7, #24]
 8003db2:	6839      	ldr	r1, [r7, #0]
 8003db4:	68f8      	ldr	r0, [r7, #12]
 8003db6:	f000 f953 	bl	8004060 <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_>
}
 8003dba:	bf00      	nop
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
	...

08003dc4 <_ZN17sensor_liquidMeas12liquidSensor8getLevelEPh>:

liquidSensor::status liquidSensor::getLevel(uint8_t *getlevel)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b096      	sub	sp, #88	@ 0x58
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]


	enum status stat = liquidSensor_OK;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (LiquidMeasSemaphore.semaphoreTake(1000)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	3338      	adds	r3, #56	@ 0x38
 8003dd8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f000 fae1 	bl	80043a4 <_ZN11System_Rtos18freertos_semaphore13semaphoreTakeEm>
 8003de2:	4603      	mov	r3, r0
			== System_Rtos::freertos_semaphore::semaphore_recived) {
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	bf0c      	ite	eq
 8003de8:	2301      	moveq	r3, #1
 8003dea:	2300      	movne	r3, #0
 8003dec:	b2db      	uxtb	r3, r3
	if (LiquidMeasSemaphore.semaphoreTake(1000)
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f000 80d1 	beq.w	8003f96 <_ZN17sensor_liquidMeas12liquidSensor8getLevelEPh+0x1d2>
	float totalSpan = InternalFullSpan - InternalLowSpan;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8003e00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e04:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44

	float current_mA;

	  uint32_t adcaverage[10] = {0};
 8003e08:	f107 0314 	add.w	r3, r7, #20
 8003e0c:	2228      	movs	r2, #40	@ 0x28
 8003e0e:	2100      	movs	r1, #0
 8003e10:	4618      	mov	r0, r3
 8003e12:	f00d fede 	bl	8011bd2 <memset>
	  uint32_t adcValue = 0;
 8003e16:	2300      	movs	r3, #0
 8003e18:	653b      	str	r3, [r7, #80]	@ 0x50




	if(hadc_sensor == NULL)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <_ZN17sensor_liquidMeas12liquidSensor8getLevelEPh+0x62>
	{
		return liquidSensor_ERR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e0bc      	b.n	8003fa0 <_ZN17sensor_liquidMeas12liquidSensor8getLevelEPh+0x1dc>
	}
    for(int i = 0; i< 10; i++)
 8003e26:	2300      	movs	r3, #0
 8003e28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e2a:	e03a      	b.n	8003ea2 <_ZN17sensor_liquidMeas12liquidSensor8getLevelEPh+0xde>
    {
        CheckError(HAL_ADC_Start(hadc_sensor),liquidSensor_ERR,HAL_OK);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e30:	4618      	mov	r0, r3
 8003e32:	f005 f8f1 	bl	8009018 <HAL_ADC_Start>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	bf14      	ite	ne
 8003e3c:	2301      	movne	r3, #1
 8003e3e:	2300      	moveq	r3, #0
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d006      	beq.n	8003e54 <_ZN17sensor_liquidMeas12liquidSensor8getLevelEPh+0x90>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	3338      	adds	r3, #56	@ 0x38
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f000 fad2 	bl	80043f4 <_ZN11System_Rtos18freertos_semaphore13semaphoreGiveEv>
 8003e50:	2301      	movs	r3, #1
 8003e52:	e0a5      	b.n	8003fa0 <_ZN17sensor_liquidMeas12liquidSensor8getLevelEPh+0x1dc>
        CheckError(HAL_ADC_PollForConversion(hadc_sensor, 10000),liquidSensor_ERR,HAL_OK); //take the value
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e58:	f242 7110 	movw	r1, #10000	@ 0x2710
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f005 f9e0 	bl	8009222 <HAL_ADC_PollForConversion>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	bf14      	ite	ne
 8003e68:	2301      	movne	r3, #1
 8003e6a:	2300      	moveq	r3, #0
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d006      	beq.n	8003e80 <_ZN17sensor_liquidMeas12liquidSensor8getLevelEPh+0xbc>
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	3338      	adds	r3, #56	@ 0x38
 8003e76:	4618      	mov	r0, r3
 8003e78:	f000 fabc 	bl	80043f4 <_ZN11System_Rtos18freertos_semaphore13semaphoreGiveEv>
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e08f      	b.n	8003fa0 <_ZN17sensor_liquidMeas12liquidSensor8getLevelEPh+0x1dc>
        adcaverage[i] = HAL_ADC_GetValue(hadc_sensor);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e84:	4618      	mov	r0, r3
 8003e86:	f005 fb67 	bl	8009558 <HAL_ADC_GetValue>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	3350      	adds	r3, #80	@ 0x50
 8003e92:	f107 0108 	add.w	r1, r7, #8
 8003e96:	440b      	add	r3, r1
 8003e98:	f843 2c44 	str.w	r2, [r3, #-68]
    for(int i = 0; i< 10; i++)
 8003e9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ea2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ea4:	2b09      	cmp	r3, #9
 8003ea6:	ddc1      	ble.n	8003e2c <_ZN17sensor_liquidMeas12liquidSensor8getLevelEPh+0x68>
    }
    HAL_ADC_Stop(hadc_sensor);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eac:	4618      	mov	r0, r3
 8003eae:	f005 f985 	bl	80091bc <HAL_ADC_Stop>
    for(int i = 0; i< 10; i++)
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003eb6:	e00d      	b.n	8003ed4 <_ZN17sensor_liquidMeas12liquidSensor8getLevelEPh+0x110>
    {
    	adcValue = adcValue +  adcaverage[i];
 8003eb8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	3350      	adds	r3, #80	@ 0x50
 8003ebe:	f107 0208 	add.w	r2, r7, #8
 8003ec2:	4413      	add	r3, r2
 8003ec4:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8003ec8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003eca:	4413      	add	r3, r2
 8003ecc:	653b      	str	r3, [r7, #80]	@ 0x50
    for(int i = 0; i< 10; i++)
 8003ece:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ed4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ed6:	2b09      	cmp	r3, #9
 8003ed8:	ddee      	ble.n	8003eb8 <_ZN17sensor_liquidMeas12liquidSensor8getLevelEPh+0xf4>
    }
    adcValue = adcValue/10;
 8003eda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003edc:	4a32      	ldr	r2, [pc, #200]	@ (8003fa8 <_ZN17sensor_liquidMeas12liquidSensor8getLevelEPh+0x1e4>)
 8003ede:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee2:	08db      	lsrs	r3, r3, #3
 8003ee4:	653b      	str	r3, [r7, #80]	@ 0x50
    float voltage = (adcValue / Resolution) * Vref;
 8003ee6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ee8:	ee07 3a90 	vmov	s15, r3
 8003eec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ef0:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 8003fac <_ZN17sensor_liquidMeas12liquidSensor8getLevelEPh+0x1e8>
 8003ef4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ef8:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8003fb0 <_ZN17sensor_liquidMeas12liquidSensor8getLevelEPh+0x1ec>
 8003efc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f00:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    current_mA = ((voltage/InternalVoltOut) *  (max_cur - min_cur)) + min_cur;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8003f0a:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 8003f0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f12:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8003f16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f1a:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8003f1e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003f22:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    fuel_level = (current_mA - min_cur) / (max_cur - min_cur) * totalSpan;
 8003f26:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8003f2a:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8003f2e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003f32:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8003f36:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003f3a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8003f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	edc3 7a01 	vstr	s15, [r3, #4]
    tank_volumeLiters = (fuel_level/totalSpan) * max_liters;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	edd3 6a01 	vldr	s13, [r3, #4]
 8003f4e:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8003f52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f56:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8003fb4 <_ZN17sensor_liquidMeas12liquidSensor8getLevelEPh+0x1f0>
 8003f5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	edc3 7a00 	vstr	s15, [r3]
	*getlevel = (tank_volumeLiters/max_liters) * 100; //get percentage
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	ed93 7a00 	vldr	s14, [r3]
 8003f6a:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8003fb4 <_ZN17sensor_liquidMeas12liquidSensor8getLevelEPh+0x1f0>
 8003f6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f72:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8003fb8 <_ZN17sensor_liquidMeas12liquidSensor8getLevelEPh+0x1f4>
 8003f76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f7e:	edc7 7a01 	vstr	s15, [r7, #4]
 8003f82:	793b      	ldrb	r3, [r7, #4]
 8003f84:	b2da      	uxtb	r2, r3
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	701a      	strb	r2, [r3, #0]

	LiquidMeasSemaphore.semaphoreGive();
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	3338      	adds	r3, #56	@ 0x38
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f000 fa30 	bl	80043f4 <_ZN11System_Rtos18freertos_semaphore13semaphoreGiveEv>
 8003f94:	e002      	b.n	8003f9c <_ZN17sensor_liquidMeas12liquidSensor8getLevelEPh+0x1d8>
	}
	else
	{
		stat = liquidSensor_ERR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	}

	  return stat;
 8003f9c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3758      	adds	r7, #88	@ 0x58
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	cccccccd 	.word	0xcccccccd
 8003fac:	45800000 	.word	0x45800000
 8003fb0:	40533333 	.word	0x40533333
 8003fb4:	43fa0000 	.word	0x43fa0000
 8003fb8:	42c80000 	.word	0x42c80000

08003fbc <_ZN17sensor_liquidMeas12liquidSensor17consumptionlitersEPf>:

void liquidSensor::consumptionliters(float *consumption)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
	if (LiquidMeasSemaphore.semaphoreTake(1000)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	3338      	adds	r3, #56	@ 0x38
 8003fca:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f000 f9e8 	bl	80043a4 <_ZN11System_Rtos18freertos_semaphore13semaphoreTakeEm>
 8003fd4:	4603      	mov	r3, r0
			== System_Rtos::freertos_semaphore::semaphore_recived) {
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	bf0c      	ite	eq
 8003fda:	2301      	moveq	r3, #1
 8003fdc:	2300      	movne	r3, #0
 8003fde:	b2db      	uxtb	r3, r3
	if (LiquidMeasSemaphore.semaphoreTake(1000)
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d038      	beq.n	8004056 <_ZN17sensor_liquidMeas12liquidSensor17consumptionlitersEPf+0x9a>
    uint32_t current_time = HAL_GetTick();
 8003fe4:	f004 ffa4 	bl	8008f30 <HAL_GetTick>
 8003fe8:	60f8      	str	r0, [r7, #12]

    if(prev_volumeLiters < tank_volumeLiters)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	ed93 7a02 	vldr	s14, [r3, #8]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	edd3 7a00 	vldr	s15, [r3]
 8003ff6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ffe:	d50c      	bpl.n	800401a <_ZN17sensor_liquidMeas12liquidSensor17consumptionlitersEPf+0x5e>
    {
        prev_volumeLiters = tank_volumeLiters;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	609a      	str	r2, [r3, #8]
        last_consumption_time = current_time;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	61da      	str	r2, [r3, #28]
    	LiquidMeasSemaphore.semaphoreGive();
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	3338      	adds	r3, #56	@ 0x38
 8004012:	4618      	mov	r0, r3
 8004014:	f000 f9ee 	bl	80043f4 <_ZN11System_Rtos18freertos_semaphore13semaphoreGiveEv>
        return;
 8004018:	e01d      	b.n	8004056 <_ZN17sensor_liquidMeas12liquidSensor17consumptionlitersEPf+0x9a>
    }

    if (current_time - last_consumption_time >= 3600000) { // 1hour
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	69db      	ldr	r3, [r3, #28]
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	4a0e      	ldr	r2, [pc, #56]	@ (800405c <_ZN17sensor_liquidMeas12liquidSensor17consumptionlitersEPf+0xa0>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d311      	bcc.n	800404c <_ZN17sensor_liquidMeas12liquidSensor17consumptionlitersEPf+0x90>
    	*consumption = prev_volumeLiters - tank_volumeLiters;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	ed93 7a02 	vldr	s14, [r3, #8]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	edd3 7a00 	vldr	s15, [r3]
 8004034:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	edc3 7a00 	vstr	s15, [r3]

        // Update for next interval
        prev_volumeLiters = tank_volumeLiters;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	609a      	str	r2, [r3, #8]
        last_consumption_time = current_time;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	61da      	str	r2, [r3, #28]
    }

	LiquidMeasSemaphore.semaphoreGive();
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	3338      	adds	r3, #56	@ 0x38
 8004050:	4618      	mov	r0, r3
 8004052:	f000 f9cf 	bl	80043f4 <_ZN11System_Rtos18freertos_semaphore13semaphoreGiveEv>

	}

}
 8004056:	3710      	adds	r7, #16
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}
 800405c:	0036ee80 	.word	0x0036ee80

08004060 <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_>:

void liquidSensor::refuelingDetection(uint32_t curEpochTime,uint32_t *startEpochtime,uint32_t *endEpochtime)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
 800406c:	603b      	str	r3, [r7, #0]
	if (LiquidMeasSemaphore.semaphoreTake(1000)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	3338      	adds	r3, #56	@ 0x38
 8004072:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004076:	4618      	mov	r0, r3
 8004078:	f000 f994 	bl	80043a4 <_ZN11System_Rtos18freertos_semaphore13semaphoreTakeEm>
 800407c:	4603      	mov	r3, r0
			== System_Rtos::freertos_semaphore::semaphore_recived) {
 800407e:	2b00      	cmp	r3, #0
 8004080:	bf0c      	ite	eq
 8004082:	2301      	moveq	r3, #1
 8004084:	2300      	movne	r3, #0
 8004086:	b2db      	uxtb	r3, r3
	if (LiquidMeasSemaphore.semaphoreTake(1000)
 8004088:	2b00      	cmp	r3, #0
 800408a:	d05f      	beq.n	800414c <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_+0xec>
	current_volume_change = tank_volumeLiters;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	611a      	str	r2, [r3, #16]
    if(prev_volume_change < 0)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	edd3 7a05 	vldr	s15, [r3, #20]
 800409a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800409e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040a2:	d509      	bpl.n	80040b8 <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_+0x58>
    {
    	prev_volume_change = current_volume_change;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	691a      	ldr	r2, [r3, #16]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	615a      	str	r2, [r3, #20]
    	LiquidMeasSemaphore.semaphoreGive();
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	3338      	adds	r3, #56	@ 0x38
 80040b0:	4618      	mov	r0, r3
 80040b2:	f000 f99f 	bl	80043f4 <_ZN11System_Rtos18freertos_semaphore13semaphoreGiveEv>
        return;
 80040b6:	e049      	b.n	800414c <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_+0xec>
    }

    // Calculate the change in volume
  volume_change = current_volume_change - prev_volume_change;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	ed93 7a04 	vldr	s14, [r3, #16]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	edd3 7a05 	vldr	s15, [r3, #20]
 80040c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040cc:	ee17 2a90 	vmov	r2, s15
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	60da      	str	r2, [r3, #12]

     refueling_start_time = HAL_GetTick();
 80040d4:	f004 ff2c 	bl	8008f30 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	621a      	str	r2, [r3, #32]


  if (!refueling_active) {
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	7e1b      	ldrb	r3, [r3, #24]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d111      	bne.n	800410a <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_+0xaa>
	    // Detect start of refueling
      if (volume_change > refueling_threshold) {
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	2b05      	cmp	r3, #5
 80040ec:	dd25      	ble.n	800413a <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_+0xda>
    	  refueling_active = 1;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2201      	movs	r2, #1
 80040f2:	761a      	strb	r2, [r3, #24]
    	  refueling_prev_time = refueling_start_time;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6a1a      	ldr	r2, [r3, #32]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	625a      	str	r2, [r3, #36]	@ 0x24
    	  *startEpochtime = curEpochTime;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	68ba      	ldr	r2, [r7, #8]
 8004100:	601a      	str	r2, [r3, #0]
    	  *endEpochtime = 0; //make it zero so we know we are refueling now to erase previous end time so user dont get confused
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	2200      	movs	r2, #0
 8004106:	601a      	str	r2, [r3, #0]
 8004108:	e017      	b.n	800413a <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_+0xda>
      }
  }
  else
  {
	  if (volume_change <= 0) {
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	2b00      	cmp	r3, #0
 8004110:	dc0f      	bgt.n	8004132 <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_+0xd2>
		  if ((refueling_start_time - refueling_prev_time) >= refuel_stabilize_time) {
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6a1a      	ldr	r2, [r3, #32]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	f241 3287 	movw	r2, #4999	@ 0x1387
 8004120:	4293      	cmp	r3, r2
 8004122:	d90a      	bls.n	800413a <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_+0xda>

			  refueling_active = 0;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	761a      	strb	r2, [r3, #24]
			  *endEpochtime = curEpochTime;
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	68ba      	ldr	r2, [r7, #8]
 800412e:	601a      	str	r2, [r3, #0]
 8004130:	e003      	b.n	800413a <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_+0xda>

		  }
	  }
	  else
	  {
    	  refueling_prev_time = refueling_start_time;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6a1a      	ldr	r2, [r3, #32]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	625a      	str	r2, [r3, #36]	@ 0x24
	  }
  }

  // Update prev_volume for the next iteration
	prev_volume_change = current_volume_change;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	691a      	ldr	r2, [r3, #16]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	615a      	str	r2, [r3, #20]

	LiquidMeasSemaphore.semaphoreGive();
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	3338      	adds	r3, #56	@ 0x38
 8004146:	4618      	mov	r0, r3
 8004148:	f000 f954 	bl	80043f4 <_ZN11System_Rtos18freertos_semaphore13semaphoreGiveEv>
	}

}
 800414c:	3710      	adds	r7, #16
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <_ZN17sensor_liquidMeas12liquidSensor13setParametersEff>:


void liquidSensor::setParameters(float LowSpan,float FullSpan)
{
 8004152:	b580      	push	{r7, lr}
 8004154:	b084      	sub	sp, #16
 8004156:	af00      	add	r7, sp, #0
 8004158:	60f8      	str	r0, [r7, #12]
 800415a:	ed87 0a02 	vstr	s0, [r7, #8]
 800415e:	edc7 0a01 	vstr	s1, [r7, #4]
	if (LiquidMeasSemaphore.semaphoreTake(8000)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	3338      	adds	r3, #56	@ 0x38
 8004166:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 800416a:	4618      	mov	r0, r3
 800416c:	f000 f91a 	bl	80043a4 <_ZN11System_Rtos18freertos_semaphore13semaphoreTakeEm>
 8004170:	4603      	mov	r3, r0
			== System_Rtos::freertos_semaphore::semaphore_recived) {
 8004172:	2b00      	cmp	r3, #0
 8004174:	bf0c      	ite	eq
 8004176:	2301      	moveq	r3, #1
 8004178:	2300      	movne	r3, #0
 800417a:	b2db      	uxtb	r3, r3
	if (LiquidMeasSemaphore.semaphoreTake(8000)
 800417c:	2b00      	cmp	r3, #0
 800417e:	d00a      	beq.n	8004196 <_ZN17sensor_liquidMeas12liquidSensor13setParametersEff+0x44>
    InternalLowSpan = LowSpan;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	68ba      	ldr	r2, [r7, #8]
 8004184:	629a      	str	r2, [r3, #40]	@ 0x28
    InternalFullSpan = FullSpan;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	62da      	str	r2, [r3, #44]	@ 0x2c
	LiquidMeasSemaphore.semaphoreGive();
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	3338      	adds	r3, #56	@ 0x38
 8004190:	4618      	mov	r0, r3
 8004192:	f000 f92f 	bl	80043f4 <_ZN11System_Rtos18freertos_semaphore13semaphoreGiveEv>
	}
}
 8004196:	bf00      	nop
 8004198:	3710      	adds	r7, #16
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <_ZN17sensor_liquidMeas12liquidSensor13getParametersEPfS1_>:

void liquidSensor::getParameters(float *LowSpan,float *FullSpan)
{
 800419e:	b580      	push	{r7, lr}
 80041a0:	b084      	sub	sp, #16
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	60f8      	str	r0, [r7, #12]
 80041a6:	60b9      	str	r1, [r7, #8]
 80041a8:	607a      	str	r2, [r7, #4]
	if (LiquidMeasSemaphore.semaphoreTake(8000)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	3338      	adds	r3, #56	@ 0x38
 80041ae:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 80041b2:	4618      	mov	r0, r3
 80041b4:	f000 f8f6 	bl	80043a4 <_ZN11System_Rtos18freertos_semaphore13semaphoreTakeEm>
 80041b8:	4603      	mov	r3, r0
			== System_Rtos::freertos_semaphore::semaphore_recived) {
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	bf0c      	ite	eq
 80041be:	2301      	moveq	r3, #1
 80041c0:	2300      	movne	r3, #0
 80041c2:	b2db      	uxtb	r3, r3
	if (LiquidMeasSemaphore.semaphoreTake(8000)
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00c      	beq.n	80041e2 <_ZN17sensor_liquidMeas12liquidSensor13getParametersEPfS1_+0x44>
	 *LowSpan   =  InternalLowSpan  ;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	601a      	str	r2, [r3, #0]
     *FullSpan  =  InternalFullSpan ;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	601a      	str	r2, [r3, #0]
 	LiquidMeasSemaphore.semaphoreGive();
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	3338      	adds	r3, #56	@ 0x38
 80041dc:	4618      	mov	r0, r3
 80041de:	f000 f909 	bl	80043f4 <_ZN11System_Rtos18freertos_semaphore13semaphoreGiveEv>
	}
}
 80041e2:	bf00      	nop
 80041e4:	3710      	adds	r7, #16
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
	...

080041ec <_ZN11System_Rtos5delayEm>:
#include "cstring"

namespace System_Rtos {

void delay(uint32_t d)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  vTaskDelay(pdMS_TO_TICKS(d));
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80041fa:	fb02 f303 	mul.w	r3, r2, r3
 80041fe:	4a05      	ldr	r2, [pc, #20]	@ (8004214 <_ZN11System_Rtos5delayEm+0x28>)
 8004200:	fba2 2303 	umull	r2, r3, r2, r3
 8004204:	099b      	lsrs	r3, r3, #6
 8004206:	4618      	mov	r0, r3
 8004208:	f00a fff0 	bl	800f1ec <vTaskDelay>
}
 800420c:	bf00      	nop
 800420e:	3708      	adds	r7, #8
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	10624dd3 	.word	0x10624dd3

08004218 <_ZN11System_Rtos14freertos_TasksC1EPFvPvEPKctS1_m>:

freertos_Tasks::freertos_Tasks(TaskFunction_t pxTaskCode_, const char *pcName_, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
 8004224:	807b      	strh	r3, [r7, #2]
const configSTACK_DEPTH_TYPE usStackDepth_, void *const pvParameters_,
		UBaseType_t uxPriority_): taskHandle(0) {
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	621a      	str	r2, [r3, #32]

	pxTask = pxTaskCode_;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	68ba      	ldr	r2, [r7, #8]
 8004230:	601a      	str	r2, [r3, #0]
	std::strcpy(pcName, pcName_);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	3304      	adds	r3, #4
 8004236:	6879      	ldr	r1, [r7, #4]
 8004238:	4618      	mov	r0, r3
 800423a:	f00d fdd6 	bl	8011dea <strcpy>
	usStackDepth = usStackDepth_;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	887a      	ldrh	r2, [r7, #2]
 8004242:	829a      	strh	r2, [r3, #20]
	pvParameters = pvParameters_;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	69ba      	ldr	r2, [r7, #24]
 8004248:	619a      	str	r2, [r3, #24]
	uxPriority = uxPriority_;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	69fa      	ldr	r2, [r7, #28]
 800424e:	61da      	str	r2, [r3, #28]


}
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	4618      	mov	r0, r3
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <_ZN11System_Rtos14freertos_Tasks10createTaskEv>:

void freertos_Tasks::createTask() {
 800425a:	b5b0      	push	{r4, r5, r7, lr}
 800425c:	b084      	sub	sp, #16
 800425e:	af02      	add	r7, sp, #8
 8004260:	6078      	str	r0, [r7, #4]
	xTaskCreate(pxTask, pcName, usStackDepth, pvParameters, uxPriority,
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6818      	ldr	r0, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	1d19      	adds	r1, r3, #4
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	8a9c      	ldrh	r4, [r3, #20]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	699d      	ldr	r5, [r3, #24]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	69db      	ldr	r3, [r3, #28]
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	3220      	adds	r2, #32
 800427a:	9201      	str	r2, [sp, #4]
 800427c:	9300      	str	r3, [sp, #0]
 800427e:	462b      	mov	r3, r5
 8004280:	4622      	mov	r2, r4
 8004282:	f00a fe55 	bl	800ef30 <xTaskCreate>
			&taskHandle);
}
 8004286:	bf00      	nop
 8004288:	3708      	adds	r7, #8
 800428a:	46bd      	mov	sp, r7
 800428c:	bdb0      	pop	{r4, r5, r7, pc}

0800428e <_ZN11System_Rtos15freertos_queuesC1EttPh>:
}




freertos_queues::freertos_queues(uint16_t queLen_,uint16_t itemsize_, uint8_t *pucQueueStorage_)
 800428e:	b480      	push	{r7}
 8004290:	b085      	sub	sp, #20
 8004292:	af00      	add	r7, sp, #0
 8004294:	60f8      	str	r0, [r7, #12]
 8004296:	607b      	str	r3, [r7, #4]
 8004298:	460b      	mov	r3, r1
 800429a:	817b      	strh	r3, [r7, #10]
 800429c:	4613      	mov	r3, r2
 800429e:	813b      	strh	r3, [r7, #8]
{
	 queLen = queLen_;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	897a      	ldrh	r2, [r7, #10]
 80042a4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
	 itemsize = itemsize_;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	893a      	ldrh	r2, [r7, #8]
 80042ac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
	 pucQueueStorage = pucQueueStorage_;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	659a      	str	r2, [r3, #88]	@ 0x58

}
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	4618      	mov	r0, r3
 80042ba:	3714      	adds	r7, #20
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <_ZN11System_Rtos15freertos_queues11queueCreateEv>:

void freertos_queues::queueCreate()
{
 80042c4:	b590      	push	{r4, r7, lr}
 80042c6:	b085      	sub	sp, #20
 80042c8:	af02      	add	r7, sp, #8
 80042ca:	6078      	str	r0, [r7, #4]
	xQueue = xQueueCreateStatic(queLen,itemsize,pucQueueStorage,&xStaticQueue);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80042d2:	4618      	mov	r0, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80042da:	461c      	mov	r4, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	3304      	adds	r3, #4
 80042e4:	2100      	movs	r1, #0
 80042e6:	9100      	str	r1, [sp, #0]
 80042e8:	4621      	mov	r1, r4
 80042ea:	f009 ff9b 	bl	800e224 <xQueueGenericCreateStatic>
 80042ee:	4602      	mov	r2, r0
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	601a      	str	r2, [r3, #0]
}
 80042f4:	bf00      	nop
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd90      	pop	{r4, r7, pc}

080042fc <_ZN11System_Rtos15freertos_queues9queueSendEPv>:


enum freertos_queues::queues_stat freertos_queues::queueSend(void *SendBuf)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
	enum queues_stat stat = queues_sent;
 8004306:	2301      	movs	r3, #1
 8004308:	73fb      	strb	r3, [r7, #15]

	if(xQueueSend(xQueue,SendBuf,pdMS_TO_TICKS(200)) != pdPASS)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6818      	ldr	r0, [r3, #0]
 800430e:	2300      	movs	r3, #0
 8004310:	22c8      	movs	r2, #200	@ 0xc8
 8004312:	6839      	ldr	r1, [r7, #0]
 8004314:	f00a f894 	bl	800e440 <xQueueGenericSend>
 8004318:	4603      	mov	r3, r0
 800431a:	2b01      	cmp	r3, #1
 800431c:	bf14      	ite	ne
 800431e:	2301      	movne	r3, #1
 8004320:	2300      	moveq	r3, #0
 8004322:	b2db      	uxtb	r3, r3
 8004324:	2b00      	cmp	r3, #0
 8004326:	d001      	beq.n	800432c <_ZN11System_Rtos15freertos_queues9queueSendEPv+0x30>
	{
       return queues_err;
 8004328:	2303      	movs	r3, #3
 800432a:	e000      	b.n	800432e <_ZN11System_Rtos15freertos_queues9queueSendEPv+0x32>
	}


	return stat;
 800432c:	7bfb      	ldrb	r3, [r7, #15]

}
 800432e:	4618      	mov	r0, r3
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <_ZN11System_Rtos15freertos_queues12queueReceiveEPv>:
enum freertos_queues::queues_stat freertos_queues::queueReceive(void *RecvBuf)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b084      	sub	sp, #16
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
 800433e:	6039      	str	r1, [r7, #0]
	enum queues_stat stat = queues_nothing;
 8004340:	2302      	movs	r3, #2
 8004342:	73fb      	strb	r3, [r7, #15]

    if( xQueueReceive( xQueue,
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2232      	movs	r2, #50	@ 0x32
 800434a:	6839      	ldr	r1, [r7, #0]
 800434c:	4618      	mov	r0, r3
 800434e:	f00a fa17 	bl	800e780 <xQueueReceive>
 8004352:	4603      	mov	r3, r0
    		           RecvBuf,
					   pdMS_TO_TICKS(50)) == pdPASS )
 8004354:	2b01      	cmp	r3, #1
 8004356:	bf0c      	ite	eq
 8004358:	2301      	moveq	r3, #1
 800435a:	2300      	movne	r3, #0
 800435c:	b2db      	uxtb	r3, r3
    if( xQueueReceive( xQueue,
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <_ZN11System_Rtos15freertos_queues12queueReceiveEPv+0x30>
      {
    	 return queues_recived;
 8004362:	2300      	movs	r3, #0
 8004364:	e000      	b.n	8004368 <_ZN11System_Rtos15freertos_queues12queueReceiveEPv+0x32>
      }


	return stat;
 8004366:	7bfb      	ldrb	r3, [r7, #15]
}
 8004368:	4618      	mov	r0, r3
 800436a:	3710      	adds	r7, #16
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <_ZN11System_Rtos18freertos_semaphoreC1Ev>:


freertos_semaphore::freertos_semaphore()
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
{

}
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4618      	mov	r0, r3
 800437c:	370c      	adds	r7, #12
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr

08004386 <_ZN11System_Rtos18freertos_semaphore15semaphoreCreateEv>:

void freertos_semaphore::semaphoreCreate()
{
 8004386:	b580      	push	{r7, lr}
 8004388:	b082      	sub	sp, #8
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
	xSemaphor = xSemaphoreCreateMutex();
 800438e:	2001      	movs	r0, #1
 8004390:	f00a f83d 	bl	800e40e <xQueueCreateMutex>
 8004394:	4602      	mov	r2, r0
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	601a      	str	r2, [r3, #0]
}
 800439a:	bf00      	nop
 800439c:	3708      	adds	r7, #8
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
	...

080043a4 <_ZN11System_Rtos18freertos_semaphore13semaphoreTakeEm>:

	return stat;
}

enum freertos_semaphore::semaphore_stat freertos_semaphore::semaphoreTake(uint32_t timeout)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
	enum semaphore_stat stat = senaphore_nothing;
 80043ae:	2301      	movs	r3, #1
 80043b0:	73fb      	strb	r3, [r7, #15]

    if( xSemaphoreTake(xSemaphor,
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80043bc:	fb01 f303 	mul.w	r3, r1, r3
 80043c0:	490b      	ldr	r1, [pc, #44]	@ (80043f0 <_ZN11System_Rtos18freertos_semaphore13semaphoreTakeEm+0x4c>)
 80043c2:	fba1 1303 	umull	r1, r3, r1, r3
 80043c6:	099b      	lsrs	r3, r3, #6
 80043c8:	4619      	mov	r1, r3
 80043ca:	4610      	mov	r0, r2
 80043cc:	f00a faba 	bl	800e944 <xQueueSemaphoreTake>
 80043d0:	4603      	mov	r3, r0
					   pdMS_TO_TICKS(timeout)) == pdPASS )
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	bf0c      	ite	eq
 80043d6:	2301      	moveq	r3, #1
 80043d8:	2300      	movne	r3, #0
 80043da:	b2db      	uxtb	r3, r3
    if( xSemaphoreTake(xSemaphor,
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d001      	beq.n	80043e4 <_ZN11System_Rtos18freertos_semaphore13semaphoreTakeEm+0x40>
      {
    	 return semaphore_recived;
 80043e0:	2300      	movs	r3, #0
 80043e2:	e000      	b.n	80043e6 <_ZN11System_Rtos18freertos_semaphore13semaphoreTakeEm+0x42>
      }


	return stat;
 80043e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3710      	adds	r7, #16
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	10624dd3 	.word	0x10624dd3

080043f4 <_ZN11System_Rtos18freertos_semaphore13semaphoreGiveEv>:



enum freertos_semaphore::semaphore_stat freertos_semaphore::semaphoreGive()
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
	enum semaphore_stat stat = senaphore_nothing;
 80043fc:	2301      	movs	r3, #1
 80043fe:	73fb      	strb	r3, [r7, #15]
	xSemaphoreGive(xSemaphor);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6818      	ldr	r0, [r3, #0]
 8004404:	2300      	movs	r3, #0
 8004406:	2200      	movs	r2, #0
 8004408:	2100      	movs	r1, #0
 800440a:	f00a f819 	bl	800e440 <xQueueGenericSend>

	return stat;
 800440e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004410:	4618      	mov	r0, r3
 8004412:	3710      	adds	r7, #16
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <_ZN11System_Rtos15freertos_eventsC1Ev>:




freertos_events::freertos_events() {
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]

}
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4618      	mov	r0, r3
 8004424:	370c      	adds	r7, #12
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr

0800442e <_ZN11System_Rtos15freertos_events11eventCreateEv>:

void freertos_events::eventCreate()
{
 800442e:	b580      	push	{r7, lr}
 8004430:	b082      	sub	sp, #8
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
	xeventgroup = xEventGroupCreate();
 8004436:	f009 fc1b 	bl	800dc70 <xEventGroupCreate>
 800443a:	4602      	mov	r2, r0
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	601a      	str	r2, [r3, #0]
}
 8004440:	bf00      	nop
 8004442:	3708      	adds	r7, #8
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <_ZN11System_Rtos15freertos_events9eventGiveEv>:

void freertos_events::eventGive()
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004450:	f3ef 8305 	mrs	r3, IPSR
 8004454:	60fb      	str	r3, [r7, #12]
  return(result);
 8004456:	68fb      	ldr	r3, [r7, #12]
	if( (__get_IPSR() != 0U))
 8004458:	2b00      	cmp	r3, #0
 800445a:	bf14      	ite	ne
 800445c:	2301      	movne	r3, #1
 800445e:	2300      	moveq	r3, #0
 8004460:	b2db      	uxtb	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d01e      	beq.n	80044a4 <_ZN11System_Rtos15freertos_events9eventGiveEv+0x5c>
     {
		 xHigherPriorityTaskWoken = pdFALSE;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	605a      	str	r2, [r3, #4]
		 xResult = xEventGroupSetBitsFromISR(xeventgroup,  1, &xHigherPriorityTaskWoken );
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6818      	ldr	r0, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	3304      	adds	r3, #4
 8004474:	461a      	mov	r2, r3
 8004476:	2101      	movs	r1, #1
 8004478:	f009 fda2 	bl	800dfc0 <xEventGroupSetBitsFromISR>
 800447c:	4602      	mov	r2, r0
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	609a      	str	r2, [r3, #8]
		 if( xResult != pdFAIL )
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d012      	beq.n	80044b0 <_ZN11System_Rtos15freertos_events9eventGiveEv+0x68>
          {
			 portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00e      	beq.n	80044b0 <_ZN11System_Rtos15freertos_events9eventGiveEv+0x68>
 8004492:	4b09      	ldr	r3, [pc, #36]	@ (80044b8 <_ZN11System_Rtos15freertos_events9eventGiveEv+0x70>)
 8004494:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004498:	601a      	str	r2, [r3, #0]
 800449a:	f3bf 8f4f 	dsb	sy
 800449e:	f3bf 8f6f 	isb	sy
     else
     {
    	 xEventGroupSetBits( xeventgroup, 1);
     }

}
 80044a2:	e005      	b.n	80044b0 <_ZN11System_Rtos15freertos_events9eventGiveEv+0x68>
    	 xEventGroupSetBits( xeventgroup, 1);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2101      	movs	r1, #1
 80044aa:	4618      	mov	r0, r3
 80044ac:	f009 fccc 	bl	800de48 <xEventGroupSetBits>
}
 80044b0:	bf00      	nop
 80044b2:	3710      	adds	r7, #16
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	e000ed04 	.word	0xe000ed04

080044bc <_ZN11System_Rtos15freertos_events9eventTakeEv>:
void freertos_events::eventTake()
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af02      	add	r7, sp, #8
 80044c2:	6078      	str	r0, [r7, #4]
	 xEventGroupWaitBits(xeventgroup, 1 , pdTRUE,pdFALSE, portMAX_DELAY);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6818      	ldr	r0, [r3, #0]
 80044c8:	f04f 33ff 	mov.w	r3, #4294967295
 80044cc:	9300      	str	r3, [sp, #0]
 80044ce:	2300      	movs	r3, #0
 80044d0:	2201      	movs	r2, #1
 80044d2:	2101      	movs	r1, #1
 80044d4:	f009 fbe6 	bl	800dca4 <xEventGroupWaitBits>
}
 80044d8:	bf00      	nop
 80044da:	3708      	adds	r7, #8
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <_ZN11System_Rtos15freertos_events14eventTakeTimedEm>:
void freertos_events::eventTakeTimed(uint32_t time)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af02      	add	r7, sp, #8
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
	 xEventGroupWaitBits(xeventgroup, 1 , pdTRUE,pdFALSE, pdMS_TO_TICKS(time));
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6818      	ldr	r0, [r3, #0]
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80044f4:	fb02 f303 	mul.w	r3, r2, r3
 80044f8:	4a06      	ldr	r2, [pc, #24]	@ (8004514 <_ZN11System_Rtos15freertos_events14eventTakeTimedEm+0x34>)
 80044fa:	fba2 2303 	umull	r2, r3, r2, r3
 80044fe:	099b      	lsrs	r3, r3, #6
 8004500:	9300      	str	r3, [sp, #0]
 8004502:	2300      	movs	r3, #0
 8004504:	2201      	movs	r2, #1
 8004506:	2101      	movs	r1, #1
 8004508:	f009 fbcc 	bl	800dca4 <xEventGroupWaitBits>
}
 800450c:	bf00      	nop
 800450e:	3708      	adds	r7, #8
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	10624dd3 	.word	0x10624dd3

08004518 <_ZN10System_rtc6stmRTCC1EP17RTC_HandleTypeDefa>:
#include "cstring"
#include "cstdlib"

namespace System_rtc {

stmRTC::stmRTC(RTC_HandleTypeDef *hrtc, int8_t timezone) :
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	4613      	mov	r3, r2
 8004524:	71fb      	strb	r3, [r7, #7]
		checking(), rtcSemaphore() {
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	3308      	adds	r3, #8
 800452a:	4618      	mov	r0, r3
 800452c:	f000 fad0 	bl	8004ad0 <_ZN10System_sys16Parsing_CheckingC1Ev>
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	330c      	adds	r3, #12
 8004534:	4618      	mov	r0, r3
 8004536:	f7ff ff1b 	bl	8004370 <_ZN11System_Rtos18freertos_semaphoreC1Ev>
	Internal_handler = hrtc;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	68ba      	ldr	r2, [r7, #8]
 800453e:	605a      	str	r2, [r3, #4]
	zone = timezone;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	79fa      	ldrb	r2, [r7, #7]
 8004544:	701a      	strb	r2, [r3, #0]
	rtcSemaphore.semaphoreCreate();
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	330c      	adds	r3, #12
 800454a:	4618      	mov	r0, r3
 800454c:	f7ff ff1b 	bl	8004386 <_ZN11System_Rtos18freertos_semaphore15semaphoreCreateEv>
}
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	4618      	mov	r0, r3
 8004554:	3710      	adds	r7, #16
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPm>:



uint8_t stmRTC::getTime(RTC_DateTypeDef *DDate, RTC_TimeTypeDef *DTime,
		uint32_t *timestamp) {
 800455a:	b5b0      	push	{r4, r5, r7, lr}
 800455c:	b090      	sub	sp, #64	@ 0x40
 800455e:	af04      	add	r7, sp, #16
 8004560:	60f8      	str	r0, [r7, #12]
 8004562:	60b9      	str	r1, [r7, #8]
 8004564:	607a      	str	r2, [r7, #4]
 8004566:	603b      	str	r3, [r7, #0]
	int err = 1;
 8004568:	2301      	movs	r3, #1
 800456a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (rtcSemaphore.semaphoreTake(1000)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	330c      	adds	r3, #12
 8004570:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004574:	4618      	mov	r0, r3
 8004576:	f7ff ff15 	bl	80043a4 <_ZN11System_Rtos18freertos_semaphore13semaphoreTakeEm>
 800457a:	4603      	mov	r3, r0
			== System_Rtos::freertos_semaphore::semaphore_recived) {
 800457c:	2b00      	cmp	r3, #0
 800457e:	bf0c      	ite	eq
 8004580:	2301      	moveq	r3, #1
 8004582:	2300      	movne	r3, #0
 8004584:	b2db      	uxtb	r3, r3
	if (rtcSemaphore.semaphoreTake(1000)
 8004586:	2b00      	cmp	r3, #0
 8004588:	d042      	beq.n	8004610 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPm+0xb6>
		RTC_DateTypeDef Date;
		RTC_TimeTypeDef Time;
		HAL_RTC_GetTime(Internal_handler, &Time, RTC_FORMAT_BIN);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f107 0114 	add.w	r1, r7, #20
 8004592:	2200      	movs	r2, #0
 8004594:	4618      	mov	r0, r3
 8004596:	f007 fcd0 	bl	800bf3a <HAL_RTC_GetTime>
		HAL_RTC_GetDate(Internal_handler, &Date, RTC_FORMAT_BIN);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80045a2:	2200      	movs	r2, #0
 80045a4:	4618      	mov	r0, r3
 80045a6:	f007 fdaa 	bl	800c0fe <HAL_RTC_GetDate>

		if (timestamp != nullptr) {
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d017      	beq.n	80045e0 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPm+0x86>
		*timestamp = checking.convertToEpoch(Date, Time, zone);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f103 0508 	add.w	r5, r3, #8
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f993 3000 	ldrsb.w	r3, [r3]
 80045bc:	9303      	str	r3, [sp, #12]
 80045be:	466c      	mov	r4, sp
 80045c0:	f107 031c 	add.w	r3, r7, #28
 80045c4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80045c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80045cc:	f107 0314 	add.w	r3, r7, #20
 80045d0:	cb0c      	ldmia	r3, {r2, r3}
 80045d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045d4:	4628      	mov	r0, r5
 80045d6:	f000 fbc9 	bl	8004d6c <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa>
 80045da:	4602      	mov	r2, r0
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	601a      	str	r2, [r3, #0]

		}
		if (DDate != nullptr) {
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d002      	beq.n	80045ec <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPm+0x92>
			std::memcpy(DDate, &Date, sizeof(RTC_DateTypeDef));
 80045e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	601a      	str	r2, [r3, #0]
		}

		if (DTime != nullptr) {
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d006      	beq.n	8004600 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPm+0xa6>
			std::memcpy(DTime, &Time, sizeof(RTC_TimeTypeDef));
 80045f2:	f107 0314 	add.w	r3, r7, #20
 80045f6:	2214      	movs	r2, #20
 80045f8:	4619      	mov	r1, r3
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f00d fbfd 	bl	8011dfa <memcpy>
		}

		rtcSemaphore.semaphoreGive();
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	330c      	adds	r3, #12
 8004604:	4618      	mov	r0, r3
 8004606:	f7ff fef5 	bl	80043f4 <_ZN11System_Rtos18freertos_semaphore13semaphoreGiveEv>

		err = 0;
 800460a:	2300      	movs	r3, #0
 800460c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800460e:	e014      	b.n	800463a <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPm+0xe0>
	}
	else
	{
		if (timestamp != nullptr) {
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d002      	beq.n	800461c <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPm+0xc2>
		*timestamp = 0;
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	2200      	movs	r2, #0
 800461a:	601a      	str	r2, [r3, #0]

		}
		if (DDate != nullptr) {
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d003      	beq.n	800462a <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPm+0xd0>
			std::memcpy(DDate, 0, sizeof(RTC_DateTypeDef));
 8004622:	2300      	movs	r3, #0
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	601a      	str	r2, [r3, #0]
		}

		if (DTime != nullptr) {
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d004      	beq.n	800463a <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPm+0xe0>
			std::memcpy(DTime, 0, sizeof(RTC_TimeTypeDef));
 8004630:	2214      	movs	r2, #20
 8004632:	2100      	movs	r1, #0
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f00d fbe0 	bl	8011dfa <memcpy>
		}

	}


	return err;
 800463a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800463c:	b2db      	uxtb	r3, r3


}
 800463e:	4618      	mov	r0, r3
 8004640:	3730      	adds	r7, #48	@ 0x30
 8004642:	46bd      	mov	sp, r7
 8004644:	bdb0      	pop	{r4, r5, r7, pc}

08004646 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPmPa>:

uint8_t stmRTC::getTime(RTC_DateTypeDef *DDate, RTC_TimeTypeDef *DTime,
		uint32_t *timestamp,int8_t *timezone) {
 8004646:	b5b0      	push	{r4, r5, r7, lr}
 8004648:	b090      	sub	sp, #64	@ 0x40
 800464a:	af04      	add	r7, sp, #16
 800464c:	60f8      	str	r0, [r7, #12]
 800464e:	60b9      	str	r1, [r7, #8]
 8004650:	607a      	str	r2, [r7, #4]
 8004652:	603b      	str	r3, [r7, #0]
	int err = 1;
 8004654:	2301      	movs	r3, #1
 8004656:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (rtcSemaphore.semaphoreTake(1000)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	330c      	adds	r3, #12
 800465c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004660:	4618      	mov	r0, r3
 8004662:	f7ff fe9f 	bl	80043a4 <_ZN11System_Rtos18freertos_semaphore13semaphoreTakeEm>
 8004666:	4603      	mov	r3, r0
			== System_Rtos::freertos_semaphore::semaphore_recived) {
 8004668:	2b00      	cmp	r3, #0
 800466a:	bf0c      	ite	eq
 800466c:	2301      	moveq	r3, #1
 800466e:	2300      	movne	r3, #0
 8004670:	b2db      	uxtb	r3, r3
	if (rtcSemaphore.semaphoreTake(1000)
 8004672:	2b00      	cmp	r3, #0
 8004674:	d047      	beq.n	8004706 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPmPa+0xc0>

		RTC_DateTypeDef Date;
		RTC_TimeTypeDef Time;
		HAL_RTC_GetTime(Internal_handler, &Time, RTC_FORMAT_BIN);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f107 0114 	add.w	r1, r7, #20
 800467e:	2200      	movs	r2, #0
 8004680:	4618      	mov	r0, r3
 8004682:	f007 fc5a 	bl	800bf3a <HAL_RTC_GetTime>
		HAL_RTC_GetDate(Internal_handler, &Date, RTC_FORMAT_BIN);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800468e:	2200      	movs	r2, #0
 8004690:	4618      	mov	r0, r3
 8004692:	f007 fd34 	bl	800c0fe <HAL_RTC_GetDate>

       *timezone = zone;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f993 2000 	ldrsb.w	r2, [r3]
 800469c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800469e:	701a      	strb	r2, [r3, #0]

		if (timestamp != nullptr) {
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d017      	beq.n	80046d6 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPmPa+0x90>
		*timestamp = checking.convertToEpoch(Date, Time, zone);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f103 0508 	add.w	r5, r3, #8
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f993 3000 	ldrsb.w	r3, [r3]
 80046b2:	9303      	str	r3, [sp, #12]
 80046b4:	466c      	mov	r4, sp
 80046b6:	f107 031c 	add.w	r3, r7, #28
 80046ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80046be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80046c2:	f107 0314 	add.w	r3, r7, #20
 80046c6:	cb0c      	ldmia	r3, {r2, r3}
 80046c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046ca:	4628      	mov	r0, r5
 80046cc:	f000 fb4e 	bl	8004d6c <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa>
 80046d0:	4602      	mov	r2, r0
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	601a      	str	r2, [r3, #0]



		}
		if (DDate != nullptr) {
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d002      	beq.n	80046e2 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPmPa+0x9c>
			std::memcpy(DDate, &Date, sizeof(RTC_DateTypeDef));
 80046dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	601a      	str	r2, [r3, #0]
		}

		if (DTime != nullptr) {
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d006      	beq.n	80046f6 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPmPa+0xb0>
			std::memcpy(DTime, &Time, sizeof(RTC_TimeTypeDef));
 80046e8:	f107 0314 	add.w	r3, r7, #20
 80046ec:	2214      	movs	r2, #20
 80046ee:	4619      	mov	r1, r3
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f00d fb82 	bl	8011dfa <memcpy>
		}

		rtcSemaphore.semaphoreGive();
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	330c      	adds	r3, #12
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7ff fe7a 	bl	80043f4 <_ZN11System_Rtos18freertos_semaphore13semaphoreGiveEv>

		err = 0;
 8004700:	2300      	movs	r3, #0
 8004702:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004704:	e014      	b.n	8004730 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPmPa+0xea>
	}
	else
	{
		if (timestamp != nullptr) {
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d002      	beq.n	8004712 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPmPa+0xcc>
		*timestamp = 0;
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	2200      	movs	r2, #0
 8004710:	601a      	str	r2, [r3, #0]

		}
		if (DDate != nullptr) {
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d003      	beq.n	8004720 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPmPa+0xda>
			std::memcpy(DDate, 0, sizeof(RTC_DateTypeDef));
 8004718:	2300      	movs	r3, #0
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	601a      	str	r2, [r3, #0]
		}

		if (DTime != nullptr) {
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d004      	beq.n	8004730 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPmPa+0xea>
			std::memcpy(DTime, 0, sizeof(RTC_TimeTypeDef));
 8004726:	2214      	movs	r2, #20
 8004728:	2100      	movs	r1, #0
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f00d fb65 	bl	8011dfa <memcpy>
		}

	}


	return err;
 8004730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004732:	b2db      	uxtb	r3, r3


}
 8004734:	4618      	mov	r0, r3
 8004736:	3730      	adds	r7, #48	@ 0x30
 8004738:	46bd      	mov	sp, r7
 800473a:	bdb0      	pop	{r4, r5, r7, pc}

0800473c <_ZN10System_rtc6stmRTC7setTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefa>:
	return err;

}

uint8_t stmRTC::setTime(RTC_DateTypeDef *DDate,RTC_TimeTypeDef *DTime,int8_t timezone)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b08c      	sub	sp, #48	@ 0x30
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
 8004748:	70fb      	strb	r3, [r7, #3]
	int err = 1;
 800474a:	2301      	movs	r3, #1
 800474c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (rtcSemaphore.semaphoreTake(1000)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	330c      	adds	r3, #12
 8004752:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004756:	4618      	mov	r0, r3
 8004758:	f7ff fe24 	bl	80043a4 <_ZN11System_Rtos18freertos_semaphore13semaphoreTakeEm>
 800475c:	4603      	mov	r3, r0
			== System_Rtos::freertos_semaphore::semaphore_recived) {
 800475e:	2b00      	cmp	r3, #0
 8004760:	bf0c      	ite	eq
 8004762:	2301      	moveq	r3, #1
 8004764:	2300      	movne	r3, #0
 8004766:	b2db      	uxtb	r3, r3
	if (rtcSemaphore.semaphoreTake(1000)
 8004768:	2b00      	cmp	r3, #0
 800476a:	d027      	beq.n	80047bc <_ZN10System_rtc6stmRTC7setTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefa+0x80>
	    HAL_RTC_SetTime(Internal_handler, DTime, RTC_FORMAT_BIN);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	6879      	ldr	r1, [r7, #4]
 8004774:	4618      	mov	r0, r3
 8004776:	f007 fb46 	bl	800be06 <HAL_RTC_SetTime>
	    HAL_RTC_SetDate(Internal_handler, DDate, RTC_FORMAT_BIN);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	68b9      	ldr	r1, [r7, #8]
 8004782:	4618      	mov	r0, r3
 8004784:	f007 fc37 	bl	800bff6 <HAL_RTC_SetDate>
		zone = timezone;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	78fa      	ldrb	r2, [r7, #3]
 800478c:	701a      	strb	r2, [r3, #0]

		RTC_DateTypeDef Date;
		RTC_TimeTypeDef Time;
		HAL_RTC_GetTime(Internal_handler, &Time, RTC_FORMAT_BIN);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f107 0114 	add.w	r1, r7, #20
 8004796:	2200      	movs	r2, #0
 8004798:	4618      	mov	r0, r3
 800479a:	f007 fbce 	bl	800bf3a <HAL_RTC_GetTime>
		HAL_RTC_GetDate(Internal_handler, &Date, RTC_FORMAT_BIN);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80047a6:	2200      	movs	r2, #0
 80047a8:	4618      	mov	r0, r3
 80047aa:	f007 fca8 	bl	800c0fe <HAL_RTC_GetDate>

		rtcSemaphore.semaphoreGive();
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	330c      	adds	r3, #12
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7ff fe1e 	bl	80043f4 <_ZN11System_Rtos18freertos_semaphore13semaphoreGiveEv>
		err = 0;
 80047b8:	2300      	movs	r3, #0
 80047ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}


	return err;
 80047bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047be:	b2db      	uxtb	r3, r3
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3730      	adds	r7, #48	@ 0x30
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <_Z16setModemCallbackPFvP20__UART_HandleTypeDefhEPFvS0_E>:

 ModemTxCB LocalModemTxCB = nullptr ;
 InverterTxCB LocalInverterTxCB = nullptr ;


void setModemCallback(ModemRxCB Rxcb, ModemTxCB TxCB) {
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
	LocalModemRxCB = Rxcb;
 80047d2:	4a06      	ldr	r2, [pc, #24]	@ (80047ec <_Z16setModemCallbackPFvP20__UART_HandleTypeDefhEPFvS0_E+0x24>)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6013      	str	r3, [r2, #0]
	LocalModemTxCB = TxCB;
 80047d8:	4a05      	ldr	r2, [pc, #20]	@ (80047f0 <_Z16setModemCallbackPFvP20__UART_HandleTypeDefhEPFvS0_E+0x28>)
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	6013      	str	r3, [r2, #0]
}
 80047de:	bf00      	nop
 80047e0:	370c      	adds	r7, #12
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop
 80047ec:	2000196c 	.word	0x2000196c
 80047f0:	20001970 	.word	0x20001970

080047f4 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef>:
void setInverterCallback(InverterRxCB Rxcb, InverterTxCB TxCB) {
	LocalInverterRxCB = Rxcb;
	LocalInverterTxCB = TxCB;
}

HAL_StatusTypeDef My_UART_Receive_Endless(UART_HandleTypeDef *huart) {
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]


	uint16_t uhErr = (uint16_t) huart->ErrorCode;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004800:	81bb      	strh	r3, [r7, #12]
	uint16_t uhData;

	if (huart->RxState == HAL_UART_STATE_BUSY_RX) {
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2b22      	cmp	r3, #34	@ 0x22
 800480c:	bf0c      	ite	eq
 800480e:	2301      	moveq	r3, #1
 8004810:	2300      	movne	r3, #0
 8004812:	b2db      	uxtb	r3, r3
 8004814:	2b00      	cmp	r3, #0
 8004816:	d021      	beq.n	800485c <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0x68>

		uhData = ((uint16_t) READ_REG(huart->Instance->DR)) & 0x00FF;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	b29b      	uxth	r3, r3
 8004820:	b2db      	uxtb	r3, r3
 8004822:	81fb      	strh	r3, [r7, #14]

		if (uhErr != HAL_UART_ERROR_NONE)
 8004824:	89bb      	ldrh	r3, [r7, #12]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d007      	beq.n	800483a <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0x46>
			uhData |= (uhErr << 8);
 800482a:	89bb      	ldrh	r3, [r7, #12]
 800482c:	021b      	lsls	r3, r3, #8
 800482e:	b21a      	sxth	r2, r3
 8004830:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004834:	4313      	orrs	r3, r2
 8004836:	b21b      	sxth	r3, r3
 8004838:	81fb      	strh	r3, [r7, #14]




		if (huart == &GSM_U) {
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a0b      	ldr	r2, [pc, #44]	@ (800486c <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0x78>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d10a      	bne.n	8004858 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0x64>
			if(LocalModemRxCB)
 8004842:	4b0b      	ldr	r3, [pc, #44]	@ (8004870 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0x7c>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d006      	beq.n	8004858 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0x64>
			{
				LocalModemRxCB(huart,(uint8_t)uhData);
 800484a:	4b09      	ldr	r3, [pc, #36]	@ (8004870 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0x7c>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	89fa      	ldrh	r2, [r7, #14]
 8004850:	b2d2      	uxtb	r2, r2
 8004852:	4611      	mov	r1, r2
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	4798      	blx	r3
			}

		}


		return HAL_OK;
 8004858:	2300      	movs	r3, #0
 800485a:	e003      	b.n	8004864 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0x70>
	} else {
		/* Clear RXNE interrupt flag */
		__HAL_UART_FLUSH_DRREGISTER(huart);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	685b      	ldr	r3, [r3, #4]

		return HAL_BUSY;
 8004862:	2302      	movs	r3, #2
	}
}
 8004864:	4618      	mov	r0, r3
 8004866:	3710      	adds	r7, #16
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	200020cc 	.word	0x200020cc
 8004870:	2000196c 	.word	0x2000196c

08004874 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef>:
	      __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
	 }
}


void My_UART_IRQHandler(UART_HandleTypeDef *huart) {
 8004874:	b580      	push	{r7, lr}
 8004876:	b086      	sub	sp, #24
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]

	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	613b      	str	r3, [r7, #16]
	  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	60fb      	str	r3, [r7, #12]
	  uint32_t errorflags = 0x00U;
 8004894:	2300      	movs	r3, #0
 8004896:	60bb      	str	r3, [r7, #8]

	  /* If no error occurs */
	  /* If no error occurs */
	  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	f003 030f 	and.w	r3, r3, #15
 800489e:	60bb      	str	r3, [r7, #8]
	  if (errorflags == RESET)
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d10d      	bne.n	80048c2 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x4e>
	  {
	    /* UART in mode Receiver ---------------------------------------------------*/
	     if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	f003 0320 	and.w	r3, r3, #32
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d008      	beq.n	80048c2 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x4e>
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	f003 0320 	and.w	r3, r3, #32
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d003      	beq.n	80048c2 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x4e>
	    {

	      My_UART_Receive_Endless(huart);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f7ff ff9a 	bl	80047f4 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef>


	      return;
 80048c0:	e0a4      	b.n	8004a0c <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x198>
	    }
	  }

	  /* If some errors occur */
	  cr3its = READ_REG(huart->Instance->CR3);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	695b      	ldr	r3, [r3, #20]
 80048c8:	60fb      	str	r3, [r7, #12]
	  if(   (errorflags != RESET)
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	f000 8083 	beq.w	80049d8 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x164>
	     && (   ((cr3its & USART_CR3_EIE) != RESET)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f003 0301 	and.w	r3, r3, #1
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d104      	bne.n	80048e6 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x72>
	         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d078      	beq.n	80049d8 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x164>
	  {
	    /* UART parity error interrupt occurred -------------------------------------*/
	    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	f003 0301 	and.w	r3, r3, #1
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00f      	beq.n	8004910 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x9c>
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00a      	beq.n	8004910 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x9c>
	    {

	      __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_PE);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f06f 0201 	mvn.w	r2, #1
 8004902:	601a      	str	r2, [r3, #0]

	      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004908:	f043 0201 	orr.w	r2, r3, #1
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	645a      	str	r2, [r3, #68]	@ 0x44


	    }

	    /* UART frame error interrupt occurred --------------------------------------*/
	    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	f003 0302 	and.w	r3, r3, #2
 8004916:	2b00      	cmp	r3, #0
 8004918:	d00f      	beq.n	800493a <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0xc6>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f003 0301 	and.w	r3, r3, #1
 8004920:	2b00      	cmp	r3, #0
 8004922:	d00a      	beq.n	800493a <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0xc6>
	    {
	    	__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_FE);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f06f 0202 	mvn.w	r2, #2
 800492c:	601a      	str	r2, [r3, #0]

	      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004932:	f043 0204 	orr.w	r2, r3, #4
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	645a      	str	r2, [r3, #68]	@ 0x44

	    }

	    /* UART noise error interrupt occurred --------------------------------------*/
	    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	f003 0304 	and.w	r3, r3, #4
 8004940:	2b00      	cmp	r3, #0
 8004942:	d00f      	beq.n	8004964 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0xf0>
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00a      	beq.n	8004964 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0xf0>
	    {
	    	__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_NE);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f06f 0204 	mvn.w	r2, #4
 8004956:	601a      	str	r2, [r3, #0]

	      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800495c:	f043 0202 	orr.w	r2, r3, #2
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	645a      	str	r2, [r3, #68]	@ 0x44
	    }

	    /* UART Over-Run interrupt occurred -----------------------------------------*/
	    if(((isrflags & USART_SR_ORE) != RESET) &&
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	f003 0308 	and.w	r3, r3, #8
 800496a:	2b00      	cmp	r3, #0
 800496c:	d014      	beq.n	8004998 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x124>
	       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	f003 0320 	and.w	r3, r3, #32
	    if(((isrflags & USART_SR_ORE) != RESET) &&
 8004974:	2b00      	cmp	r3, #0
 8004976:	d104      	bne.n	8004982 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x10e>
	       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f003 0301 	and.w	r3, r3, #1
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00a      	beq.n	8004998 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x124>
	    {
	    	__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_ORE);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f06f 0208 	mvn.w	r2, #8
 800498a:	601a      	str	r2, [r3, #0]

	      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004990:	f043 0208 	orr.w	r2, r3, #8
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	645a      	str	r2, [r3, #68]	@ 0x44

	    }

	    /* Call UART Error Call back function if need be --------------------------*/
	    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800499c:	2b00      	cmp	r3, #0
 800499e:	bf14      	ite	ne
 80049a0:	2301      	movne	r3, #1
 80049a2:	2300      	moveq	r3, #0
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d02d      	beq.n	8004a06 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x192>
	    {
	      /* UART in mode Receiver ---------------------------------------------------*/
	      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	f003 0320 	and.w	r3, r3, #32
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d00a      	beq.n	80049ca <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x156>
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	f003 0320 	and.w	r3, r3, #32
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d005      	beq.n	80049ca <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x156>
	      {
	            // Erfassungs-SS weitermachen
	             huart->ErrorCode = HAL_UART_ERROR_NONE;   // loeschen
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	645a      	str	r2, [r3, #68]	@ 0x44
	            //__HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);  // Clear RXNE interrupt flag

	             __HAL_UART_FLUSH_DRREGISTER(huart);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	685b      	ldr	r3, [r3, #4]
	         consider error as blocking */
	      if (1)
	      {
	        /* Non Blocking error : transfer could go on.
	           Error is notified to user through user error callback */
	        HAL_UART_ErrorCallback(huart);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f008 fd76 	bl	800d4bc <HAL_UART_ErrorCallback>
	        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	645a      	str	r2, [r3, #68]	@ 0x44
	      }
	    }



	    return;
 80049d6:	e016      	b.n	8004a06 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x192>
	  } /* End if some error occurs */



	  /* UART in mode Transmitter ------------------------------------------------*/
	  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d014      	beq.n	8004a0c <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x198>
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00f      	beq.n	8004a0c <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x198>
	  {


			if (huart == &GSM_U) {
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a09      	ldr	r2, [pc, #36]	@ (8004a14 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1a0>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d10a      	bne.n	8004a0a <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x196>
				if(LocalModemTxCB)
 80049f4:	4b08      	ldr	r3, [pc, #32]	@ (8004a18 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1a4>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d006      	beq.n	8004a0a <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x196>
				{
					LocalModemTxCB(huart);
 80049fc:	4b06      	ldr	r3, [pc, #24]	@ (8004a18 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1a4>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	4798      	blx	r3
				}

			}


	    return;
 8004a04:	e001      	b.n	8004a0a <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x196>
	    return;
 8004a06:	bf00      	nop
 8004a08:	e000      	b.n	8004a0c <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x198>
	    return;
 8004a0a:	bf00      	nop
	  }



}
 8004a0c:	3718      	adds	r7, #24
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	200020cc 	.word	0x200020cc
 8004a18:	20001970 	.word	0x20001970

08004a1c <My_UART_IRQHandlerC>:
extern "C"
{


    void My_UART_IRQHandlerC(UART_HandleTypeDef *huart)
    {
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
    	My_UART_IRQHandler(huart);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f7ff ff25 	bl	8004874 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef>
    }
 8004a2a:	bf00      	nop
 8004a2c:	3708      	adds	r7, #8
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}

08004a32 <_ZN13System_serial6serialC1EP20__UART_HandleTypeDef>:

namespace System_serial {

//UART_HandleTypeDef *serial::Internal_UartHandler;

serial::serial(UART_HandleTypeDef *huart) {
 8004a32:	b480      	push	{r7}
 8004a34:	b083      	sub	sp, #12
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
 8004a3a:	6039      	str	r1, [r7, #0]
	Internal_UartHandler = huart;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	683a      	ldr	r2, [r7, #0]
 8004a40:	601a      	str	r2, [r3, #0]
}
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4618      	mov	r0, r3
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <_ZN13System_serial6serial12TransmitDataEPKhtm>:

	HAL_UART_Receive(Internal_UartHandler, data, size, timeout);

}

void serial::TransmitData(const uint8_t *data, uint16_t size, uint32_t timeout) {
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	603b      	str	r3, [r7, #0]
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	80fb      	strh	r3, [r7, #6]

	HAL_UART_Transmit(Internal_UartHandler, data, size, timeout);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6818      	ldr	r0, [r3, #0]
 8004a64:	88fa      	ldrh	r2, [r7, #6]
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	68b9      	ldr	r1, [r7, #8]
 8004a6a:	f008 fbc5 	bl	800d1f8 <HAL_UART_Transmit>


}
 8004a6e:	bf00      	nop
 8004a70:	3710      	adds	r7, #16
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}

08004a76 <_ZN13System_serial6serial7RxintEnEPht>:


void serial::RxintEn(uint8_t *buf,uint16_t size)
{
 8004a76:	b580      	push	{r7, lr}
 8004a78:	b084      	sub	sp, #16
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	60f8      	str	r0, [r7, #12]
 8004a7e:	60b9      	str	r1, [r7, #8]
 8004a80:	4613      	mov	r3, r2
 8004a82:	80fb      	strh	r3, [r7, #6]
//	/__HAL_UART_CLEAR_OREFLAG(Internal_UartHandler);
	//buffer and length can be dummy as this function is just used to enable interrupts for specific uart
	HAL_UART_Receive_IT(Internal_UartHandler, buf, size);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	88fa      	ldrh	r2, [r7, #6]
 8004a8a:	68b9      	ldr	r1, [r7, #8]
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f008 fc3e 	bl	800d30e <HAL_UART_Receive_IT>
}
 8004a92:	bf00      	nop
 8004a94:	3710      	adds	r7, #16
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <_ZN13System_serial6serial8RxintDisEv>:
	HAL_UART_Transmit_IT(Internal_UartHandler,buf, size);
}


void serial::RxintDis()
{
 8004a9a:	b580      	push	{r7, lr}
 8004a9c:	b082      	sub	sp, #8
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
  HAL_UART_AbortReceive_IT(Internal_UartHandler);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f008 fc56 	bl	800d358 <HAL_UART_AbortReceive_IT>
}
 8004aac:	bf00      	nop
 8004aae:	3708      	adds	r7, #8
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <_ZSt6strchrPci>:
  { return __builtin_strchr(__s, __n); }
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
 8004abe:	6839      	ldr	r1, [r7, #0]
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f00d f88e 	bl	8011be2 <strchr>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3708      	adds	r7, #8
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <_ZN10System_sys16Parsing_CheckingC1Ev>:
//TODO
//Put receiving buffer check as well due to overflow check its length as well

namespace System_sys {

Parsing_Checking::Parsing_Checking()
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
{

}
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4618      	mov	r0, r3
 8004adc:	370c      	adds	r7, #12
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
	...

08004ae8 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>:

enum Parsing_Checking::status Parsing_Checking::checkResponse_OK_ERR(const char *buffer,uint16_t bufferSize)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	4613      	mov	r3, r2
 8004af4:	80fb      	strh	r3, [r7, #6]
	enum status stat = sys_notFound;
 8004af6:	2302      	movs	r3, #2
 8004af8:	75fb      	strb	r3, [r7, #23]

    if(std::strstr(buffer,"OK") != nullptr)
 8004afa:	490c      	ldr	r1, [pc, #48]	@ (8004b2c <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct+0x44>)
 8004afc:	68b8      	ldr	r0, [r7, #8]
 8004afe:	f00d f890 	bl	8011c22 <strstr>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d002      	beq.n	8004b0e <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct+0x26>
    {
    	stat = sys_ok;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	75fb      	strb	r3, [r7, #23]
 8004b0c:	e008      	b.n	8004b20 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct+0x38>

    }
    else if(std::strstr(buffer, "ERROR") != nullptr)
 8004b0e:	4908      	ldr	r1, [pc, #32]	@ (8004b30 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct+0x48>)
 8004b10:	68b8      	ldr	r0, [r7, #8]
 8004b12:	f00d f886 	bl	8011c22 <strstr>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d001      	beq.n	8004b20 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct+0x38>
    {
    	stat = sys_err;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	75fb      	strb	r3, [r7, #23]

    }


    return stat;
 8004b20:	7dfb      	ldrb	r3, [r7, #23]


}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3718      	adds	r7, #24
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	0801448c 	.word	0x0801448c
 8004b30:	08014490 	.word	0x08014490

08004b34 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>:

}

enum Parsing_Checking::status Parsing_Checking::parseSkipCharnDTillEndChar(char *buffer, uint16_t bufferLen,char *CheckString,
		                                                         uint8_t skipChar,uint8_t endChar,char *databuf)
{
 8004b34:	b590      	push	{r4, r7, lr}
 8004b36:	f5ad 7d07 	sub.w	sp, sp, #540	@ 0x21c
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	f507 7406 	add.w	r4, r7, #536	@ 0x218
 8004b40:	f5a4 7403 	sub.w	r4, r4, #524	@ 0x20c
 8004b44:	6020      	str	r0, [r4, #0]
 8004b46:	f507 7006 	add.w	r0, r7, #536	@ 0x218
 8004b4a:	f5a0 7004 	sub.w	r0, r0, #528	@ 0x210
 8004b4e:	6001      	str	r1, [r0, #0]
 8004b50:	4611      	mov	r1, r2
 8004b52:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8004b56:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 8004b5a:	6013      	str	r3, [r2, #0]
 8004b5c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004b60:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 8004b64:	460a      	mov	r2, r1
 8004b66:	801a      	strh	r2, [r3, #0]


	enum status stat = sys_notFound;
 8004b68:	2302      	movs	r3, #2
 8004b6a:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
    uint16_t len = 0;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
	char temp[500];

	std::strncpy(temp,buffer,bufferLen);
 8004b74:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004b78:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 8004b7c:	881a      	ldrh	r2, [r3, #0]
 8004b7e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004b82:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8004b86:	f107 0014 	add.w	r0, r7, #20
 8004b8a:	6819      	ldr	r1, [r3, #0]
 8004b8c:	f00d f836 	bl	8011bfc <strncpy>

	if(!std::strstr((const char *)temp,CheckString))
 8004b90:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004b94:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004b98:	f107 0214 	add.w	r2, r7, #20
 8004b9c:	6819      	ldr	r1, [r3, #0]
 8004b9e:	4610      	mov	r0, r2
 8004ba0:	f00d f83f 	bl	8011c22 <strstr>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d101      	bne.n	8004bae <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x7a>
	{

		return sys_notFound;
 8004baa:	2302      	movs	r3, #2
 8004bac:	e085      	b.n	8004cba <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x186>

	}

	//this means we dont want to check anything below just need to check checkstring
	if(databuf == nullptr )
 8004bae:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d101      	bne.n	8004bba <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x86>
	{
		return sys_ok;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	e07f      	b.n	8004cba <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x186>
	char *Scolonpos;
	int Nendpos;
	char *Sendpos;


	Scolonpos = std::strchr(temp, skipChar);
 8004bba:	f897 2228 	ldrb.w	r2, [r7, #552]	@ 0x228
 8004bbe:	f107 0314 	add.w	r3, r7, #20
 8004bc2:	4611      	mov	r1, r2
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7ff ff75 	bl	8004ab4 <_ZSt6strchrPci>
 8004bca:	f8c7 0208 	str.w	r0, [r7, #520]	@ 0x208


	if(Scolonpos != nullptr)
 8004bce:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d016      	beq.n	8004c04 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0xd0>
	{
		Ncolonpos = Scolonpos - temp;
 8004bd6:	f107 0314 	add.w	r3, r7, #20
 8004bda:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
		if(skipChar == ':')
 8004be4:	f897 3228 	ldrb.w	r3, [r7, #552]	@ 0x228
 8004be8:	2b3a      	cmp	r3, #58	@ 0x3a
 8004bea:	d105      	bne.n	8004bf8 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0xc4>
        {
			Ncolonpos = Ncolonpos + 2;
 8004bec:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8004bf0:	3302      	adds	r3, #2
 8004bf2:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 8004bf6:	e007      	b.n	8004c08 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0xd4>
        }
		else
		{
			Ncolonpos = Ncolonpos + 1;
 8004bf8:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 8004c02:	e001      	b.n	8004c08 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0xd4>
		}
	}
	else
	{
		return sys_notFound;
 8004c04:	2302      	movs	r3, #2
 8004c06:	e058      	b.n	8004cba <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x186>
	}


	uint16_t buf_index = Ncolonpos;
 8004c08:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8004c0c:	f8a7 320e 	strh.w	r3, [r7, #526]	@ 0x20e

	while(len < bufferLen - Ncolonpos && buf_index < bufferLen)
 8004c10:	e03c      	b.n	8004c8c <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x158>
	{

		if(buffer[buf_index] != endChar)
 8004c12:	f8b7 320e 	ldrh.w	r3, [r7, #526]	@ 0x20e
 8004c16:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8004c1a:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 8004c1e:	6812      	ldr	r2, [r2, #0]
 8004c20:	4413      	add	r3, r2
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	f897 222c 	ldrb.w	r2, [r7, #556]	@ 0x22c
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d00f      	beq.n	8004c4c <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x118>
		{
			databuf[len] = buffer[buf_index];
 8004c2c:	f8b7 320e 	ldrh.w	r3, [r7, #526]	@ 0x20e
 8004c30:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8004c34:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 8004c38:	6812      	ldr	r2, [r2, #0]
 8004c3a:	441a      	add	r2, r3
 8004c3c:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8004c40:	f8d7 1230 	ldr.w	r1, [r7, #560]	@ 0x230
 8004c44:	440b      	add	r3, r1
 8004c46:	7812      	ldrb	r2, [r2, #0]
 8004c48:	701a      	strb	r2, [r3, #0]
 8004c4a:	e015      	b.n	8004c78 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x144>

		}else if(buffer[buf_index] == endChar)
 8004c4c:	f8b7 320e 	ldrh.w	r3, [r7, #526]	@ 0x20e
 8004c50:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8004c54:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 8004c58:	6812      	ldr	r2, [r2, #0]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	f897 222c 	ldrb.w	r2, [r7, #556]	@ 0x22c
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d108      	bne.n	8004c78 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x144>
		{
			databuf[len] = 0x00;
 8004c66:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8004c6a:	f8d7 2230 	ldr.w	r2, [r7, #560]	@ 0x230
 8004c6e:	4413      	add	r3, r2
 8004c70:	2200      	movs	r2, #0
 8004c72:	701a      	strb	r2, [r3, #0]
			return sys_ok;
 8004c74:	2300      	movs	r3, #0
 8004c76:	e020      	b.n	8004cba <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x186>
		}


		buf_index++;
 8004c78:	f8b7 320e 	ldrh.w	r3, [r7, #526]	@ 0x20e
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	f8a7 320e 	strh.w	r3, [r7, #526]	@ 0x20e
		len++;
 8004c82:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8004c86:	3301      	adds	r3, #1
 8004c88:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
	while(len < bufferLen - Ncolonpos && buf_index < bufferLen)
 8004c8c:	f8b7 2216 	ldrh.w	r2, [r7, #534]	@ 0x216
 8004c90:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004c94:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 8004c98:	8819      	ldrh	r1, [r3, #0]
 8004c9a:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8004c9e:	1acb      	subs	r3, r1, r3
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	da08      	bge.n	8004cb6 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x182>
 8004ca4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004ca8:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 8004cac:	f8b7 220e 	ldrh.w	r2, [r7, #526]	@ 0x20e
 8004cb0:	881b      	ldrh	r3, [r3, #0]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d3ad      	bcc.n	8004c12 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0xde>

	}


	  return stat;
 8004cb6:	f897 320d 	ldrb.w	r3, [r7, #525]	@ 0x20d
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f507 7707 	add.w	r7, r7, #540	@ 0x21c
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd90      	pop	{r4, r7, pc}

08004cc4 <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct>:



enum Parsing_Checking::status Parsing_Checking::extractData(const char *buffer,const char *cmd,char midchar,char endchar,char *outputbuf,uint16_t outputSize)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b088      	sub	sp, #32
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	607a      	str	r2, [r7, #4]
 8004cd0:	70fb      	strb	r3, [r7, #3]
	enum status stat = sys_ok;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	767b      	strb	r3, [r7, #25]


	//if buffer is null dont run as it does not make sense to run after this
	if(outputbuf == nullptr)
 8004cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d101      	bne.n	8004ce0 <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct+0x1c>
	{
		return sys_err;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e040      	b.n	8004d62 <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct+0x9e>
	}

     char* commandStart = std::strstr(buffer, cmd);
 8004ce0:	6879      	ldr	r1, [r7, #4]
 8004ce2:	68b8      	ldr	r0, [r7, #8]
 8004ce4:	f00c ff9d 	bl	8011c22 <strstr>
 8004ce8:	61f8      	str	r0, [r7, #28]
    if (!commandStart) {
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d101      	bne.n	8004cf4 <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct+0x30>
        // Command not found
        return sys_notFound;
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	e036      	b.n	8004d62 <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct+0x9e>
    }



    // Move the pointer to the end of the command
    commandStart += std::strlen(cmd);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f7fb fabb 	bl	8000270 <strlen>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	4413      	add	r3, r2
 8004d00:	61fb      	str	r3, [r7, #28]
    commandStart++; //to skip space
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	3301      	adds	r3, #1
 8004d06:	61fb      	str	r3, [r7, #28]


     //Check for the mid character and skip it
     char* midCharPos = std::strchr(commandStart, midchar);
 8004d08:	78fb      	ldrb	r3, [r7, #3]
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	69f8      	ldr	r0, [r7, #28]
 8004d0e:	f7ff fed1 	bl	8004ab4 <_ZSt6strchrPci>
 8004d12:	6178      	str	r0, [r7, #20]
    if (!midCharPos) {
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d101      	bne.n	8004d1e <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct+0x5a>
        // Mid character not found
        return sys_notFound;
 8004d1a:	2302      	movs	r3, #2
 8004d1c:	e021      	b.n	8004d62 <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct+0x9e>
    }
    commandStart = midCharPos + 1;
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	3301      	adds	r3, #1
 8004d22:	61fb      	str	r3, [r7, #28]



    // Copy the remaining part until the end character or end of string
    uint16_t i = 0;
 8004d24:	2300      	movs	r3, #0
 8004d26:	837b      	strh	r3, [r7, #26]
    while (*commandStart != endchar && i < outputSize - 1) {
 8004d28:	e00a      	b.n	8004d40 <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct+0x7c>
    	outputbuf[i++] = *commandStart++;
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	1c5a      	adds	r2, r3, #1
 8004d2e:	61fa      	str	r2, [r7, #28]
 8004d30:	7819      	ldrb	r1, [r3, #0]
 8004d32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d34:	8b7b      	ldrh	r3, [r7, #26]
 8004d36:	1c58      	adds	r0, r3, #1
 8004d38:	8378      	strh	r0, [r7, #26]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	460a      	mov	r2, r1
 8004d3e:	701a      	strb	r2, [r3, #0]
    while (*commandStart != endchar && i < outputSize - 1) {
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d004      	beq.n	8004d56 <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct+0x92>
 8004d4c:	8b7a      	ldrh	r2, [r7, #26]
 8004d4e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004d50:	3b01      	subs	r3, #1
 8004d52:	429a      	cmp	r2, r3
 8004d54:	dbe9      	blt.n	8004d2a <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct+0x66>
    }
    outputbuf[i] = '\0'; // Null-terminate the output buffer
 8004d56:	8b7b      	ldrh	r3, [r7, #26]
 8004d58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d5a:	4413      	add	r3, r2
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	701a      	strb	r2, [r3, #0]


    return stat;
 8004d60:	7e7b      	ldrb	r3, [r7, #25]

}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3720      	adds	r7, #32
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
	...

08004d6c <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa>:

	    return epoch;
}

uint32_t Parsing_Checking::convertToEpoch(RTC_DateTypeDef sDate,RTC_TimeTypeDef sTime,int8_t zone)
{
 8004d6c:	b082      	sub	sp, #8
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b08c      	sub	sp, #48	@ 0x30
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
 8004d76:	6039      	str	r1, [r7, #0]
 8004d78:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8004d7c:	e881 000c 	stmia.w	r1, {r2, r3}
	 int day,month ,year, hour, minute, second, timezoneOffset;


	    day = sDate.Date;
 8004d80:	78bb      	ldrb	r3, [r7, #2]
 8004d82:	623b      	str	r3, [r7, #32]
		month = sDate.Month;
 8004d84:	787b      	ldrb	r3, [r7, #1]
 8004d86:	61fb      	str	r3, [r7, #28]
	    year = sDate.Year;
 8004d88:	78fb      	ldrb	r3, [r7, #3]
 8004d8a:	61bb      	str	r3, [r7, #24]

	    year += (year < 70) ? 2000 : 1900; // Convert year to full format
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	2b45      	cmp	r3, #69	@ 0x45
 8004d90:	dc02      	bgt.n	8004d98 <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x2c>
 8004d92:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8004d96:	e001      	b.n	8004d9c <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x30>
 8004d98:	f240 736c 	movw	r3, #1900	@ 0x76c
 8004d9c:	69ba      	ldr	r2, [r7, #24]
 8004d9e:	4413      	add	r3, r2
 8004da0:	61bb      	str	r3, [r7, #24]

	    hour = sTime.Hours;
 8004da2:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8004da6:	617b      	str	r3, [r7, #20]
		minute = sTime.Minutes;
 8004da8:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004dac:	613b      	str	r3, [r7, #16]
		second = sTime.Seconds;
 8004dae:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8004db2:	60fb      	str	r3, [r7, #12]

	    timezoneOffset = zone * 60; // Convert offset hours to minutes
 8004db4:	f997 204c 	ldrsb.w	r2, [r7, #76]	@ 0x4c
 8004db8:	4613      	mov	r3, r2
 8004dba:	011b      	lsls	r3, r3, #4
 8004dbc:	1a9b      	subs	r3, r3, r2
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	60bb      	str	r3, [r7, #8]


	    // Convert date and time to seconds since 1970-01-01 (UTC)
	    uint32_t epoch = 0;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c

	    // Add seconds for each complete year
	    for (int y = 1970; y < year; y++) {
 8004dc6:	f240 73b2 	movw	r3, #1970	@ 0x7b2
 8004dca:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dcc:	e012      	b.n	8004df4 <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x88>
	        epoch += isLeapYear(y) ? DAYS_IN_LEAP_YEAR : DAYS_IN_YEAR;
 8004dce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f000 f861 	bl	8004e98 <_ZN10System_sys16Parsing_Checking10isLeapYearEi>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d002      	beq.n	8004de2 <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x76>
 8004ddc:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 8004de0:	e001      	b.n	8004de6 <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x7a>
 8004de2:	f240 136d 	movw	r3, #365	@ 0x16d
 8004de6:	461a      	mov	r2, r3
 8004de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dea:	4413      	add	r3, r2
 8004dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    for (int y = 1970; y < year; y++) {
 8004dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004df0:	3301      	adds	r3, #1
 8004df2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004df4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	dbe8      	blt.n	8004dce <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x62>
	    }
	    epoch *= SECONDS_IN_DAY;
 8004dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dfe:	4a25      	ldr	r2, [pc, #148]	@ (8004e94 <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x128>)
 8004e00:	fb02 f303 	mul.w	r3, r2, r3
 8004e04:	62fb      	str	r3, [r7, #44]	@ 0x2c

	    // Add seconds for each complete month in the current year
	    for (int m = 1; m < month; m++) {
 8004e06:	2301      	movs	r3, #1
 8004e08:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e0a:	e00f      	b.n	8004e2c <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0xc0>
	        epoch += daysInMonth(year, m) * SECONDS_IN_DAY;
 8004e0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e0e:	69b9      	ldr	r1, [r7, #24]
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 f871 	bl	8004ef8 <_ZN10System_sys16Parsing_Checking11daysInMonthEii>
 8004e16:	4603      	mov	r3, r0
 8004e18:	4a1e      	ldr	r2, [pc, #120]	@ (8004e94 <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x128>)
 8004e1a:	fb02 f303 	mul.w	r3, r2, r3
 8004e1e:	461a      	mov	r2, r3
 8004e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e22:	4413      	add	r3, r2
 8004e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    for (int m = 1; m < month; m++) {
 8004e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e28:	3301      	adds	r3, #1
 8004e2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	dbeb      	blt.n	8004e0c <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0xa0>
	    }

	    // Add seconds for the days, hours, minutes, and seconds
	    epoch += (day - 1) * SECONDS_IN_DAY;
 8004e34:	6a3b      	ldr	r3, [r7, #32]
 8004e36:	3b01      	subs	r3, #1
 8004e38:	4a16      	ldr	r2, [pc, #88]	@ (8004e94 <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x128>)
 8004e3a:	fb02 f303 	mul.w	r3, r2, r3
 8004e3e:	461a      	mov	r2, r3
 8004e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e42:	4413      	add	r3, r2
 8004e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    epoch += hour * SECONDS_IN_HOUR;
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8004e4c:	fb02 f303 	mul.w	r3, r2, r3
 8004e50:	461a      	mov	r2, r3
 8004e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e54:	4413      	add	r3, r2
 8004e56:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    epoch += minute * SECONDS_IN_MINUTE;
 8004e58:	693a      	ldr	r2, [r7, #16]
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	011b      	lsls	r3, r3, #4
 8004e5e:	1a9b      	subs	r3, r3, r2
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	461a      	mov	r2, r3
 8004e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e66:	4413      	add	r3, r2
 8004e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    epoch += second;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e6e:	4413      	add	r3, r2
 8004e70:	62fb      	str	r3, [r7, #44]	@ 0x2c

	    // Adjust for the timezone offset
	    epoch -= timezoneOffset * SECONDS_IN_MINUTE;
 8004e72:	68ba      	ldr	r2, [r7, #8]
 8004e74:	4613      	mov	r3, r2
 8004e76:	011b      	lsls	r3, r3, #4
 8004e78:	1a9b      	subs	r3, r3, r2
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e80:	1a9b      	subs	r3, r3, r2
 8004e82:	62fb      	str	r3, [r7, #44]	@ 0x2c

	    return epoch;
 8004e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3730      	adds	r7, #48	@ 0x30
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e90:	b002      	add	sp, #8
 8004e92:	4770      	bx	lr
 8004e94:	00015180 	.word	0x00015180

08004e98 <_ZN10System_sys16Parsing_Checking10isLeapYearEi>:
		}

}

bool Parsing_Checking::isLeapYear(int year)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
	  return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	f003 0303 	and.w	r3, r3, #3
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d10c      	bne.n	8004ec6 <_ZN10System_sys16Parsing_Checking10isLeapYearEi+0x2e>
 8004eac:	683a      	ldr	r2, [r7, #0]
 8004eae:	4b11      	ldr	r3, [pc, #68]	@ (8004ef4 <_ZN10System_sys16Parsing_Checking10isLeapYearEi+0x5c>)
 8004eb0:	fb83 1302 	smull	r1, r3, r3, r2
 8004eb4:	1159      	asrs	r1, r3, #5
 8004eb6:	17d3      	asrs	r3, r2, #31
 8004eb8:	1acb      	subs	r3, r1, r3
 8004eba:	2164      	movs	r1, #100	@ 0x64
 8004ebc:	fb01 f303 	mul.w	r3, r1, r3
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d10d      	bne.n	8004ee2 <_ZN10System_sys16Parsing_Checking10isLeapYearEi+0x4a>
 8004ec6:	683a      	ldr	r2, [r7, #0]
 8004ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8004ef4 <_ZN10System_sys16Parsing_Checking10isLeapYearEi+0x5c>)
 8004eca:	fb83 1302 	smull	r1, r3, r3, r2
 8004ece:	11d9      	asrs	r1, r3, #7
 8004ed0:	17d3      	asrs	r3, r2, #31
 8004ed2:	1acb      	subs	r3, r1, r3
 8004ed4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8004ed8:	fb01 f303 	mul.w	r3, r1, r3
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d101      	bne.n	8004ee6 <_ZN10System_sys16Parsing_Checking10isLeapYearEi+0x4e>
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e000      	b.n	8004ee8 <_ZN10System_sys16Parsing_Checking10isLeapYearEi+0x50>
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	370c      	adds	r7, #12
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr
 8004ef4:	51eb851f 	.word	0x51eb851f

08004ef8 <_ZN10System_sys16Parsing_Checking11daysInMonthEii>:
int Parsing_Checking::daysInMonth(int year, int month)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	607a      	str	r2, [r7, #4]
    if (month == 2 && isLeapYear(year)) {
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d108      	bne.n	8004f1c <_ZN10System_sys16Parsing_Checking11daysInMonthEii+0x24>
 8004f0a:	68b9      	ldr	r1, [r7, #8]
 8004f0c:	68f8      	ldr	r0, [r7, #12]
 8004f0e:	f7ff ffc3 	bl	8004e98 <_ZN10System_sys16Parsing_Checking10isLeapYearEi>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d001      	beq.n	8004f1c <_ZN10System_sys16Parsing_Checking11daysInMonthEii+0x24>
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e000      	b.n	8004f1e <_ZN10System_sys16Parsing_Checking11daysInMonthEii+0x26>
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d001      	beq.n	8004f26 <_ZN10System_sys16Parsing_Checking11daysInMonthEii+0x2e>
        return 29;
 8004f22:	231d      	movs	r3, #29
 8004f24:	e004      	b.n	8004f30 <_ZN10System_sys16Parsing_Checking11daysInMonthEii+0x38>
    }
    return monthDays[month - 1];
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	4a03      	ldr	r2, [pc, #12]	@ (8004f38 <_ZN10System_sys16Parsing_Checking11daysInMonthEii+0x40>)
 8004f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3710      	adds	r7, #16
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	08014930 	.word	0x08014930

08004f3c <_ZN2UI8SettingsEP11u8g2_struct>:

};


void Settings(u8g2_t *u8g2)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b088      	sub	sp, #32
 8004f40:	af02      	add	r7, sp, #8
 8004f42:	6078      	str	r0, [r7, #4]
	enum button::btncodes btncodes;
	int8_t sel_sub = 0;
 8004f44:	2300      	movs	r3, #0
 8004f46:	75fb      	strb	r3, [r7, #23]
do {

	button::resetCode(button::btncodes::cNONE);
 8004f48:	2000      	movs	r0, #0
 8004f4a:	f001 f9c3 	bl	80062d4 <_ZN6button9resetCodeENS_8btncodesE>
	do {
		u8g2_ClearBuffer(u8g2);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f001 fc0f 	bl	8006772 <u8g2_ClearBuffer>

		u8g2_DrawXBM(u8g2, 104, 0, imgcont::Settings.w, imgcont::Settings.h,imgcont::Settings.img);
 8004f54:	4b4b      	ldr	r3, [pc, #300]	@ (8005084 <_ZN2UI8SettingsEP11u8g2_struct+0x148>)
 8004f56:	7919      	ldrb	r1, [r3, #4]
 8004f58:	4b4a      	ldr	r3, [pc, #296]	@ (8005084 <_ZN2UI8SettingsEP11u8g2_struct+0x148>)
 8004f5a:	795b      	ldrb	r3, [r3, #5]
 8004f5c:	4a49      	ldr	r2, [pc, #292]	@ (8005084 <_ZN2UI8SettingsEP11u8g2_struct+0x148>)
 8004f5e:	6812      	ldr	r2, [r2, #0]
 8004f60:	9201      	str	r2, [sp, #4]
 8004f62:	9300      	str	r3, [sp, #0]
 8004f64:	460b      	mov	r3, r1
 8004f66:	2200      	movs	r2, #0
 8004f68:	2168      	movs	r1, #104	@ 0x68
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f001 fb88 	bl	8006680 <u8g2_DrawXBM>

		u8g2_SetFontMode(u8g2, 1);
 8004f70:	2101      	movs	r1, #1
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f002 f8bd 	bl	80070f2 <u8g2_SetFontMode>
		u8g2_SetDrawColor(u8g2, 2);
 8004f78:	2102      	movs	r1, #2
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f002 fb47 	bl	800760e <u8g2_SetDrawColor>
		u8g2_SetFont(u8g2, u8g2_font_5x8_mf);
 8004f80:	4941      	ldr	r1, [pc, #260]	@ (8005088 <_ZN2UI8SettingsEP11u8g2_struct+0x14c>)
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f002 fa16 	bl	80073b4 <u8g2_SetFont>

		uint8_t strSize = std::strlen( UI_txts::Settings[sel_sub]);
 8004f88:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	4413      	add	r3, r2
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	4a3d      	ldr	r2, [pc, #244]	@ (800508c <_ZN2UI8SettingsEP11u8g2_struct+0x150>)
 8004f96:	4413      	add	r3, r2
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f7fb f969 	bl	8000270 <strlen>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	73fb      	strb	r3, [r7, #15]


		u8g2_DrawBox(u8g2, 2, 3 + (8*sel_sub) , (strSize * 5) + 1 , 9);
 8004fa2:	7dfb      	ldrb	r3, [r7, #23]
 8004fa4:	00db      	lsls	r3, r3, #3
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	3303      	adds	r3, #3
 8004faa:	b2da      	uxtb	r2, r3
 8004fac:	7bfb      	ldrb	r3, [r7, #15]
 8004fae:	4619      	mov	r1, r3
 8004fb0:	0089      	lsls	r1, r1, #2
 8004fb2:	440b      	add	r3, r1
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	2109      	movs	r1, #9
 8004fbc:	9100      	str	r1, [sp, #0]
 8004fbe:	2102      	movs	r1, #2
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f001 fba0 	bl	8006706 <u8g2_DrawBox>




		for(int i=0; i < TotalSettingsSub;i++)
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	613b      	str	r3, [r7, #16]
 8004fca:	e014      	b.n	8004ff6 <_ZN2UI8SettingsEP11u8g2_struct+0xba>
		{
			u8g2_DrawStr(u8g2, 3, 10 + (8*i), UI_txts::Settings[i]);
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	00db      	lsls	r3, r3, #3
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	330a      	adds	r3, #10
 8004fd6:	b2d9      	uxtb	r1, r3
 8004fd8:	693a      	ldr	r2, [r7, #16]
 8004fda:	4613      	mov	r3, r2
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	4413      	add	r3, r2
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	4a2a      	ldr	r2, [pc, #168]	@ (800508c <_ZN2UI8SettingsEP11u8g2_struct+0x150>)
 8004fe4:	4413      	add	r3, r2
 8004fe6:	460a      	mov	r2, r1
 8004fe8:	2103      	movs	r1, #3
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f002 f940 	bl	8007270 <u8g2_DrawStr>
		for(int i=0; i < TotalSettingsSub;i++)
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	613b      	str	r3, [r7, #16]
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	dde7      	ble.n	8004fcc <_ZN2UI8SettingsEP11u8g2_struct+0x90>





		u8g2_SendBuffer(u8g2);
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f001 fc2b 	bl	8006858 <u8g2_SendBuffer>

		btncodes = button::get_event();
 8005002:	f001 f93b 	bl	800627c <_ZN6button9get_eventEv>
 8005006:	60b8      	str	r0, [r7, #8]
	}while (btncodes == button::btncodes::cNONE);
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d09f      	beq.n	8004f4e <_ZN2UI8SettingsEP11u8g2_struct+0x12>

	if(btncodes == button::btncodes::cDWN_BT)
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	2b28      	cmp	r3, #40	@ 0x28
 8005012:	d106      	bne.n	8005022 <_ZN2UI8SettingsEP11u8g2_struct+0xe6>
	{
		sel_sub++;
 8005014:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005018:	b2db      	uxtb	r3, r3
 800501a:	3301      	adds	r3, #1
 800501c:	b2db      	uxtb	r3, r3
 800501e:	75fb      	strb	r3, [r7, #23]
 8005020:	e01a      	b.n	8005058 <_ZN2UI8SettingsEP11u8g2_struct+0x11c>
	}
	else if(btncodes == button::btncodes::cUP_BT)
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	2b1e      	cmp	r3, #30
 8005026:	d10c      	bne.n	8005042 <_ZN2UI8SettingsEP11u8g2_struct+0x106>
	{
		sel_sub--;
 8005028:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800502c:	b2db      	uxtb	r3, r3
 800502e:	3b01      	subs	r3, #1
 8005030:	b2db      	uxtb	r3, r3
 8005032:	75fb      	strb	r3, [r7, #23]
        if(sel_sub < 0)
 8005034:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005038:	2b00      	cmp	r3, #0
 800503a:	da0d      	bge.n	8005058 <_ZN2UI8SettingsEP11u8g2_struct+0x11c>
        {
        	sel_sub = TotalSettingsSub - 1;
 800503c:	2301      	movs	r3, #1
 800503e:	75fb      	strb	r3, [r7, #23]
 8005040:	e00a      	b.n	8005058 <_ZN2UI8SettingsEP11u8g2_struct+0x11c>
        }
	}
	else if(btncodes == button::btncodes::cEnter_BT)
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	2b0a      	cmp	r3, #10
 8005046:	d107      	bne.n	8005058 <_ZN2UI8SettingsEP11u8g2_struct+0x11c>
	{
		UI::UI_helper::set_UIcode(SettingsMenuCodes[sel_sub].code);
 8005048:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800504c:	4a10      	ldr	r2, [pc, #64]	@ (8005090 <_ZN2UI8SettingsEP11u8g2_struct+0x154>)
 800504e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005052:	4618      	mov	r0, r3
 8005054:	f001 f810 	bl	8006078 <_ZN2UI9UI_helper10set_UIcodeE6MenuNo>
	}


	sel_sub = sel_sub % TotalSettingsSub;
 8005058:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800505c:	2b00      	cmp	r3, #0
 800505e:	f003 0301 	and.w	r3, r3, #1
 8005062:	bfb8      	it	lt
 8005064:	425b      	neglt	r3, r3
 8005066:	75fb      	strb	r3, [r7, #23]

}while (btncodes != button::btncodes::cRGHT_BT && btncodes != button::btncodes::cLFT_BT &&  btncodes != button::btncodes::cEnter_BT);
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	2b32      	cmp	r3, #50	@ 0x32
 800506c:	d006      	beq.n	800507c <_ZN2UI8SettingsEP11u8g2_struct+0x140>
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	2b3c      	cmp	r3, #60	@ 0x3c
 8005072:	d003      	beq.n	800507c <_ZN2UI8SettingsEP11u8g2_struct+0x140>
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	2b0a      	cmp	r3, #10
 8005078:	f47f af66 	bne.w	8004f48 <_ZN2UI8SettingsEP11u8g2_struct+0xc>

}
 800507c:	bf00      	nop
 800507e:	3718      	adds	r7, #24
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}
 8005084:	08014f40 	.word	0x08014f40
 8005088:	08015344 	.word	0x08015344
 800508c:	08014960 	.word	0x08014960
 8005090:	20000000 	.word	0x20000000

08005094 <_ZN2UI14fuel_temp_humdEP11u8g2_struct>:

void fuel_temp_humd(u8g2_t *u8g2) {
 8005094:	b580      	push	{r7, lr}
 8005096:	b086      	sub	sp, #24
 8005098:	af02      	add	r7, sp, #8
 800509a:	6078      	str	r0, [r7, #4]
	enum button::btncodes btncodes;
	button::resetCode(button::btncodes::cNONE);
 800509c:	2000      	movs	r0, #0
 800509e:	f001 f919 	bl	80062d4 <_ZN6button9resetCodeENS_8btncodesE>
	do {
		u8g2_ClearBuffer(u8g2);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f001 fb65 	bl	8006772 <u8g2_ClearBuffer>
		UI::UI_helper::common_iconsMain(u8g2);
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f001 f801 	bl	80060b0 <_ZN2UI9UI_helper16common_iconsMainEP11u8g2_struct>

		u8g2_DrawXBM(u8g2, 48, 2, imgcont::SensorInfo.w, imgcont::SensorInfo.h,
 80050ae:	4b35      	ldr	r3, [pc, #212]	@ (8005184 <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0xf0>)
 80050b0:	7919      	ldrb	r1, [r3, #4]
 80050b2:	4b34      	ldr	r3, [pc, #208]	@ (8005184 <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0xf0>)
 80050b4:	795b      	ldrb	r3, [r3, #5]
				imgcont::SensorInfo.img);
 80050b6:	4a33      	ldr	r2, [pc, #204]	@ (8005184 <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0xf0>)
 80050b8:	6812      	ldr	r2, [r2, #0]
		u8g2_DrawXBM(u8g2, 48, 2, imgcont::SensorInfo.w, imgcont::SensorInfo.h,
 80050ba:	9201      	str	r2, [sp, #4]
 80050bc:	9300      	str	r3, [sp, #0]
 80050be:	460b      	mov	r3, r1
 80050c0:	2202      	movs	r2, #2
 80050c2:	2130      	movs	r1, #48	@ 0x30
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f001 fadb 	bl	8006680 <u8g2_DrawXBM>

		u8g2_SetFontMode(u8g2, 1);
 80050ca:	2101      	movs	r1, #1
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f002 f810 	bl	80070f2 <u8g2_SetFontMode>
		u8g2_SetDrawColor(u8g2, 2);
 80050d2:	2102      	movs	r1, #2
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f002 fa9a 	bl	800760e <u8g2_SetDrawColor>
		u8g2_SetFont(u8g2, u8g2_font_5x8_mf);
 80050da:	492b      	ldr	r1, [pc, #172]	@ (8005188 <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0xf4>)
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f002 f969 	bl	80073b4 <u8g2_SetFont>

		u8g2_DrawBox(u8g2, 2, 17, 26, 9);
 80050e2:	2309      	movs	r3, #9
 80050e4:	9300      	str	r3, [sp, #0]
 80050e6:	231a      	movs	r3, #26
 80050e8:	2211      	movs	r2, #17
 80050ea:	2102      	movs	r1, #2
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f001 fb0a 	bl	8006706 <u8g2_DrawBox>
		u8g2_DrawStr(u8g2, 3, 25, "Fuel:");
 80050f2:	4b26      	ldr	r3, [pc, #152]	@ (800518c <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0xf8>)
 80050f4:	2219      	movs	r2, #25
 80050f6:	2103      	movs	r1, #3
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f002 f8b9 	bl	8007270 <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 5, 35, "90%");
 80050fe:	4b24      	ldr	r3, [pc, #144]	@ (8005190 <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0xfc>)
 8005100:	2223      	movs	r2, #35	@ 0x23
 8005102:	2105      	movs	r1, #5
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f002 f8b3 	bl	8007270 <u8g2_DrawStr>

		u8g2_DrawBox(u8g2, 2, 40, 26, 9);
 800510a:	2309      	movs	r3, #9
 800510c:	9300      	str	r3, [sp, #0]
 800510e:	231a      	movs	r3, #26
 8005110:	2228      	movs	r2, #40	@ 0x28
 8005112:	2102      	movs	r1, #2
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f001 faf6 	bl	8006706 <u8g2_DrawBox>
		u8g2_DrawStr(u8g2, 3, 48, "Temp:");
 800511a:	4b1e      	ldr	r3, [pc, #120]	@ (8005194 <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0x100>)
 800511c:	2230      	movs	r2, #48	@ 0x30
 800511e:	2103      	movs	r1, #3
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f002 f8a5 	bl	8007270 <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 5, 58, "90C");
 8005126:	4b1c      	ldr	r3, [pc, #112]	@ (8005198 <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0x104>)
 8005128:	223a      	movs	r2, #58	@ 0x3a
 800512a:	2105      	movs	r1, #5
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f002 f89f 	bl	8007270 <u8g2_DrawStr>

		u8g2_DrawBox(u8g2, 86, 17, 31, 9);
 8005132:	2309      	movs	r3, #9
 8005134:	9300      	str	r3, [sp, #0]
 8005136:	231f      	movs	r3, #31
 8005138:	2211      	movs	r2, #17
 800513a:	2156      	movs	r1, #86	@ 0x56
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f001 fae2 	bl	8006706 <u8g2_DrawBox>
		u8g2_DrawStr(u8g2, 88, 25, "Humid:");
 8005142:	4b16      	ldr	r3, [pc, #88]	@ (800519c <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0x108>)
 8005144:	2219      	movs	r2, #25
 8005146:	2158      	movs	r1, #88	@ 0x58
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f002 f891 	bl	8007270 <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 88, 35, "50%");
 800514e:	4b14      	ldr	r3, [pc, #80]	@ (80051a0 <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0x10c>)
 8005150:	2223      	movs	r2, #35	@ 0x23
 8005152:	2158      	movs	r1, #88	@ 0x58
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f002 f88b 	bl	8007270 <u8g2_DrawStr>

		u8g2_SendBuffer(u8g2);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f001 fb7c 	bl	8006858 <u8g2_SendBuffer>

		btncodes = button::get_eventTimed(1000);
 8005160:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005164:	f001 f898 	bl	8006298 <_ZN6button14get_eventTimedEm>
 8005168:	60f8      	str	r0, [r7, #12]

	} while (btncodes == button::btncodes::cNONE);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d098      	beq.n	80050a2 <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0xe>

	if(btncodes == button::btncodes::cEnter_BT)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2b0a      	cmp	r3, #10
 8005174:	d102      	bne.n	800517c <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0xe8>
	{
		UI::UI_helper::set_UIcode(MenuNo::Settings);
 8005176:	2006      	movs	r0, #6
 8005178:	f000 ff7e 	bl	8006078 <_ZN2UI9UI_helper10set_UIcodeE6MenuNo>
	}

}
 800517c:	bf00      	nop
 800517e:	3710      	adds	r7, #16
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}
 8005184:	08014f38 	.word	0x08014f38
 8005188:	08015344 	.word	0x08015344
 800518c:	08014550 	.word	0x08014550
 8005190:	08014558 	.word	0x08014558
 8005194:	0801455c 	.word	0x0801455c
 8005198:	08014564 	.word	0x08014564
 800519c:	08014568 	.word	0x08014568
 80051a0:	08014570 	.word	0x08014570

080051a4 <_ZN2UI6AlarmsEP11u8g2_struct>:
void Alarms(u8g2_t *u8g2) {
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b086      	sub	sp, #24
 80051a8:	af02      	add	r7, sp, #8
 80051aa:	6078      	str	r0, [r7, #4]
	enum button::btncodes btncodes;
	button::resetCode(button::btncodes::cNONE);
 80051ac:	2000      	movs	r0, #0
 80051ae:	f001 f891 	bl	80062d4 <_ZN6button9resetCodeENS_8btncodesE>
	do {

		u8g2_ClearBuffer(u8g2);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f001 fadd 	bl	8006772 <u8g2_ClearBuffer>
		UI::UI_helper::common_iconsMain(u8g2);
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f000 ff79 	bl	80060b0 <_ZN2UI9UI_helper16common_iconsMainEP11u8g2_struct>
		u8g2_DrawXBM(u8g2, 48, 2, imgcont::Alarms.w, imgcont::Alarms.h,
 80051be:	4b35      	ldr	r3, [pc, #212]	@ (8005294 <_ZN2UI6AlarmsEP11u8g2_struct+0xf0>)
 80051c0:	7919      	ldrb	r1, [r3, #4]
 80051c2:	4b34      	ldr	r3, [pc, #208]	@ (8005294 <_ZN2UI6AlarmsEP11u8g2_struct+0xf0>)
 80051c4:	795b      	ldrb	r3, [r3, #5]
				imgcont::Alarms.img);
 80051c6:	4a33      	ldr	r2, [pc, #204]	@ (8005294 <_ZN2UI6AlarmsEP11u8g2_struct+0xf0>)
 80051c8:	6812      	ldr	r2, [r2, #0]
		u8g2_DrawXBM(u8g2, 48, 2, imgcont::Alarms.w, imgcont::Alarms.h,
 80051ca:	9201      	str	r2, [sp, #4]
 80051cc:	9300      	str	r3, [sp, #0]
 80051ce:	460b      	mov	r3, r1
 80051d0:	2202      	movs	r2, #2
 80051d2:	2130      	movs	r1, #48	@ 0x30
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f001 fa53 	bl	8006680 <u8g2_DrawXBM>

		u8g2_SetFontMode(u8g2, 1);
 80051da:	2101      	movs	r1, #1
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f001 ff88 	bl	80070f2 <u8g2_SetFontMode>
		u8g2_SetDrawColor(u8g2, 2);
 80051e2:	2102      	movs	r1, #2
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f002 fa12 	bl	800760e <u8g2_SetDrawColor>
		u8g2_SetFont(u8g2, u8g2_font_5x8_mf);
 80051ea:	492b      	ldr	r1, [pc, #172]	@ (8005298 <_ZN2UI6AlarmsEP11u8g2_struct+0xf4>)
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f002 f8e1 	bl	80073b4 <u8g2_SetFont>

		u8g2_DrawBox(u8g2, 2, 17, 51, 9);
 80051f2:	2309      	movs	r3, #9
 80051f4:	9300      	str	r3, [sp, #0]
 80051f6:	2333      	movs	r3, #51	@ 0x33
 80051f8:	2211      	movs	r2, #17
 80051fa:	2102      	movs	r1, #2
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f001 fa82 	bl	8006706 <u8g2_DrawBox>
		u8g2_DrawStr(u8g2, 3, 25, "Frequency:");
 8005202:	4b26      	ldr	r3, [pc, #152]	@ (800529c <_ZN2UI6AlarmsEP11u8g2_struct+0xf8>)
 8005204:	2219      	movs	r2, #25
 8005206:	2103      	movs	r1, #3
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f002 f831 	bl	8007270 <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 5, 35, "Normal"); //Over // under
 800520e:	4b24      	ldr	r3, [pc, #144]	@ (80052a0 <_ZN2UI6AlarmsEP11u8g2_struct+0xfc>)
 8005210:	2223      	movs	r2, #35	@ 0x23
 8005212:	2105      	movs	r1, #5
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f002 f82b 	bl	8007270 <u8g2_DrawStr>

		u8g2_DrawBox(u8g2, 2, 40, 46, 9);
 800521a:	2309      	movs	r3, #9
 800521c:	9300      	str	r3, [sp, #0]
 800521e:	232e      	movs	r3, #46	@ 0x2e
 8005220:	2228      	movs	r2, #40	@ 0x28
 8005222:	2102      	movs	r1, #2
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f001 fa6e 	bl	8006706 <u8g2_DrawBox>
		u8g2_DrawStr(u8g2, 3, 48, "Overload:");
 800522a:	4b1e      	ldr	r3, [pc, #120]	@ (80052a4 <_ZN2UI6AlarmsEP11u8g2_struct+0x100>)
 800522c:	2230      	movs	r2, #48	@ 0x30
 800522e:	2103      	movs	r1, #3
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f002 f81d 	bl	8007270 <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 5, 58, "Normal"); //Over under
 8005236:	4b1a      	ldr	r3, [pc, #104]	@ (80052a0 <_ZN2UI6AlarmsEP11u8g2_struct+0xfc>)
 8005238:	223a      	movs	r2, #58	@ 0x3a
 800523a:	2105      	movs	r1, #5
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f002 f817 	bl	8007270 <u8g2_DrawStr>

		u8g2_DrawBox(u8g2, 81, 17, 51, 9);
 8005242:	2309      	movs	r3, #9
 8005244:	9300      	str	r3, [sp, #0]
 8005246:	2333      	movs	r3, #51	@ 0x33
 8005248:	2211      	movs	r2, #17
 800524a:	2151      	movs	r1, #81	@ 0x51
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f001 fa5a 	bl	8006706 <u8g2_DrawBox>
		u8g2_DrawStr(u8g2, 82, 25, "Phaseload:");
 8005252:	4b15      	ldr	r3, [pc, #84]	@ (80052a8 <_ZN2UI6AlarmsEP11u8g2_struct+0x104>)
 8005254:	2219      	movs	r2, #25
 8005256:	2152      	movs	r1, #82	@ 0x52
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f002 f809 	bl	8007270 <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 82, 35, "Normal"); //Over under
 800525e:	4b10      	ldr	r3, [pc, #64]	@ (80052a0 <_ZN2UI6AlarmsEP11u8g2_struct+0xfc>)
 8005260:	2223      	movs	r2, #35	@ 0x23
 8005262:	2152      	movs	r1, #82	@ 0x52
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f002 f803 	bl	8007270 <u8g2_DrawStr>

		u8g2_SendBuffer(u8g2);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f001 faf4 	bl	8006858 <u8g2_SendBuffer>
		btncodes = button::get_eventTimed(1000);
 8005270:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005274:	f001 f810 	bl	8006298 <_ZN6button14get_eventTimedEm>
 8005278:	60f8      	str	r0, [r7, #12]

	} while (btncodes == button::btncodes::cNONE);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d098      	beq.n	80051b2 <_ZN2UI6AlarmsEP11u8g2_struct+0xe>

	if(btncodes == button::btncodes::cEnter_BT)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2b0a      	cmp	r3, #10
 8005284:	d102      	bne.n	800528c <_ZN2UI6AlarmsEP11u8g2_struct+0xe8>
	{
		UI::UI_helper::set_UIcode(MenuNo::Settings);
 8005286:	2006      	movs	r0, #6
 8005288:	f000 fef6 	bl	8006078 <_ZN2UI9UI_helper10set_UIcodeE6MenuNo>
	}
}
 800528c:	bf00      	nop
 800528e:	3710      	adds	r7, #16
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	08014f30 	.word	0x08014f30
 8005298:	08015344 	.word	0x08015344
 800529c:	08014574 	.word	0x08014574
 80052a0:	08014580 	.word	0x08014580
 80052a4:	08014588 	.word	0x08014588
 80052a8:	08014594 	.word	0x08014594

080052ac <_ZN2UI7BatteryEP11u8g2_struct>:
void Battery(u8g2_t *u8g2) {
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b086      	sub	sp, #24
 80052b0:	af02      	add	r7, sp, #8
 80052b2:	6078      	str	r0, [r7, #4]
	enum button::btncodes btncodes;
	button::resetCode(button::btncodes::cNONE);
 80052b4:	2000      	movs	r0, #0
 80052b6:	f001 f80d 	bl	80062d4 <_ZN6button9resetCodeENS_8btncodesE>
	do {

		u8g2_ClearBuffer(u8g2);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f001 fa59 	bl	8006772 <u8g2_ClearBuffer>
		UI::UI_helper::common_iconsMain(u8g2);
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 fef5 	bl	80060b0 <_ZN2UI9UI_helper16common_iconsMainEP11u8g2_struct>

		u8g2_DrawXBM(u8g2, 48, 2, imgcont::Battery.w, imgcont::Battery.h,
 80052c6:	4b35      	ldr	r3, [pc, #212]	@ (800539c <_ZN2UI7BatteryEP11u8g2_struct+0xf0>)
 80052c8:	7919      	ldrb	r1, [r3, #4]
 80052ca:	4b34      	ldr	r3, [pc, #208]	@ (800539c <_ZN2UI7BatteryEP11u8g2_struct+0xf0>)
 80052cc:	795b      	ldrb	r3, [r3, #5]
				imgcont::Battery.img);
 80052ce:	4a33      	ldr	r2, [pc, #204]	@ (800539c <_ZN2UI7BatteryEP11u8g2_struct+0xf0>)
 80052d0:	6812      	ldr	r2, [r2, #0]
		u8g2_DrawXBM(u8g2, 48, 2, imgcont::Battery.w, imgcont::Battery.h,
 80052d2:	9201      	str	r2, [sp, #4]
 80052d4:	9300      	str	r3, [sp, #0]
 80052d6:	460b      	mov	r3, r1
 80052d8:	2202      	movs	r2, #2
 80052da:	2130      	movs	r1, #48	@ 0x30
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f001 f9cf 	bl	8006680 <u8g2_DrawXBM>

		u8g2_SetFontMode(u8g2, 1);
 80052e2:	2101      	movs	r1, #1
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f001 ff04 	bl	80070f2 <u8g2_SetFontMode>
		u8g2_SetDrawColor(u8g2, 2);
 80052ea:	2102      	movs	r1, #2
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f002 f98e 	bl	800760e <u8g2_SetDrawColor>
		u8g2_SetFont(u8g2, u8g2_font_5x8_mf);
 80052f2:	492b      	ldr	r1, [pc, #172]	@ (80053a0 <_ZN2UI7BatteryEP11u8g2_struct+0xf4>)
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f002 f85d 	bl	80073b4 <u8g2_SetFont>

		u8g2_DrawBox(u8g2, 2, 17, 41, 9);
 80052fa:	2309      	movs	r3, #9
 80052fc:	9300      	str	r3, [sp, #0]
 80052fe:	2329      	movs	r3, #41	@ 0x29
 8005300:	2211      	movs	r2, #17
 8005302:	2102      	movs	r1, #2
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f001 f9fe 	bl	8006706 <u8g2_DrawBox>
		u8g2_DrawStr(u8g2, 3, 25, "Percent:");
 800530a:	4b26      	ldr	r3, [pc, #152]	@ (80053a4 <_ZN2UI7BatteryEP11u8g2_struct+0xf8>)
 800530c:	2219      	movs	r2, #25
 800530e:	2103      	movs	r1, #3
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f001 ffad 	bl	8007270 <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 15, 35, "98%");
 8005316:	4b24      	ldr	r3, [pc, #144]	@ (80053a8 <_ZN2UI7BatteryEP11u8g2_struct+0xfc>)
 8005318:	2223      	movs	r2, #35	@ 0x23
 800531a:	210f      	movs	r1, #15
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f001 ffa7 	bl	8007270 <u8g2_DrawStr>

		u8g2_DrawBox(u8g2, 2, 40, 46, 9);
 8005322:	2309      	movs	r3, #9
 8005324:	9300      	str	r3, [sp, #0]
 8005326:	232e      	movs	r3, #46	@ 0x2e
 8005328:	2228      	movs	r2, #40	@ 0x28
 800532a:	2102      	movs	r1, #2
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f001 f9ea 	bl	8006706 <u8g2_DrawBox>
		u8g2_DrawStr(u8g2, 3, 48, "ChrgTime:");
 8005332:	4b1e      	ldr	r3, [pc, #120]	@ (80053ac <_ZN2UI7BatteryEP11u8g2_struct+0x100>)
 8005334:	2230      	movs	r2, #48	@ 0x30
 8005336:	2103      	movs	r1, #3
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f001 ff99 	bl	8007270 <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 5, 58, "01:25:08");
 800533e:	4b1c      	ldr	r3, [pc, #112]	@ (80053b0 <_ZN2UI7BatteryEP11u8g2_struct+0x104>)
 8005340:	223a      	movs	r2, #58	@ 0x3a
 8005342:	2105      	movs	r1, #5
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f001 ff93 	bl	8007270 <u8g2_DrawStr>

		u8g2_DrawBox(u8g2, 81, 17, 51, 9);
 800534a:	2309      	movs	r3, #9
 800534c:	9300      	str	r3, [sp, #0]
 800534e:	2333      	movs	r3, #51	@ 0x33
 8005350:	2211      	movs	r2, #17
 8005352:	2151      	movs	r1, #81	@ 0x51
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f001 f9d6 	bl	8006706 <u8g2_DrawBox>
		u8g2_DrawStr(u8g2, 82, 25, "DchrgTime:");
 800535a:	4b16      	ldr	r3, [pc, #88]	@ (80053b4 <_ZN2UI7BatteryEP11u8g2_struct+0x108>)
 800535c:	2219      	movs	r2, #25
 800535e:	2152      	movs	r1, #82	@ 0x52
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f001 ff85 	bl	8007270 <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 82, 35, "02:25:08");
 8005366:	4b14      	ldr	r3, [pc, #80]	@ (80053b8 <_ZN2UI7BatteryEP11u8g2_struct+0x10c>)
 8005368:	2223      	movs	r2, #35	@ 0x23
 800536a:	2152      	movs	r1, #82	@ 0x52
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f001 ff7f 	bl	8007270 <u8g2_DrawStr>

		u8g2_SendBuffer(u8g2);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f001 fa70 	bl	8006858 <u8g2_SendBuffer>
		btncodes = button::get_eventTimed(1000);
 8005378:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800537c:	f000 ff8c 	bl	8006298 <_ZN6button14get_eventTimedEm>
 8005380:	60f8      	str	r0, [r7, #12]

	} while (btncodes == button::btncodes::cNONE);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d098      	beq.n	80052ba <_ZN2UI7BatteryEP11u8g2_struct+0xe>

	if(btncodes == button::btncodes::cEnter_BT)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2b0a      	cmp	r3, #10
 800538c:	d102      	bne.n	8005394 <_ZN2UI7BatteryEP11u8g2_struct+0xe8>
	{
		UI::UI_helper::set_UIcode(MenuNo::Settings);
 800538e:	2006      	movs	r0, #6
 8005390:	f000 fe72 	bl	8006078 <_ZN2UI9UI_helper10set_UIcodeE6MenuNo>
	}
}
 8005394:	bf00      	nop
 8005396:	3710      	adds	r7, #16
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}
 800539c:	08014f28 	.word	0x08014f28
 80053a0:	08015344 	.word	0x08015344
 80053a4:	080145a0 	.word	0x080145a0
 80053a8:	080145ac 	.word	0x080145ac
 80053ac:	080145b0 	.word	0x080145b0
 80053b0:	080145bc 	.word	0x080145bc
 80053b4:	080145c8 	.word	0x080145c8
 80053b8:	080145d4 	.word	0x080145d4

080053bc <_ZN2UI6sourceEP11u8g2_struct>:
void source(u8g2_t *u8g2) {
 80053bc:	b580      	push	{r7, lr}
 80053be:	b086      	sub	sp, #24
 80053c0:	af02      	add	r7, sp, #8
 80053c2:	6078      	str	r0, [r7, #4]
	enum button::btncodes btncodes;
	button::resetCode(button::btncodes::cNONE);
 80053c4:	2000      	movs	r0, #0
 80053c6:	f000 ff85 	bl	80062d4 <_ZN6button9resetCodeENS_8btncodesE>
	do {
		u8g2_ClearBuffer(u8g2);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f001 f9d1 	bl	8006772 <u8g2_ClearBuffer>
		UI::UI_helper::common_iconsMain(u8g2);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 fe6d 	bl	80060b0 <_ZN2UI9UI_helper16common_iconsMainEP11u8g2_struct>
		u8g2_DrawXBM(u8g2, 48, 2, imgcont::Source.w, imgcont::Source.h,
 80053d6:	4b35      	ldr	r3, [pc, #212]	@ (80054ac <_ZN2UI6sourceEP11u8g2_struct+0xf0>)
 80053d8:	7919      	ldrb	r1, [r3, #4]
 80053da:	4b34      	ldr	r3, [pc, #208]	@ (80054ac <_ZN2UI6sourceEP11u8g2_struct+0xf0>)
 80053dc:	795b      	ldrb	r3, [r3, #5]
				imgcont::Source.img);
 80053de:	4a33      	ldr	r2, [pc, #204]	@ (80054ac <_ZN2UI6sourceEP11u8g2_struct+0xf0>)
 80053e0:	6812      	ldr	r2, [r2, #0]
		u8g2_DrawXBM(u8g2, 48, 2, imgcont::Source.w, imgcont::Source.h,
 80053e2:	9201      	str	r2, [sp, #4]
 80053e4:	9300      	str	r3, [sp, #0]
 80053e6:	460b      	mov	r3, r1
 80053e8:	2202      	movs	r2, #2
 80053ea:	2130      	movs	r1, #48	@ 0x30
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f001 f947 	bl	8006680 <u8g2_DrawXBM>

		u8g2_SetFontMode(u8g2, 1);
 80053f2:	2101      	movs	r1, #1
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f001 fe7c 	bl	80070f2 <u8g2_SetFontMode>
		u8g2_SetDrawColor(u8g2, 2);
 80053fa:	2102      	movs	r1, #2
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f002 f906 	bl	800760e <u8g2_SetDrawColor>
		u8g2_SetFont(u8g2, u8g2_font_5x8_mf);
 8005402:	492b      	ldr	r1, [pc, #172]	@ (80054b0 <_ZN2UI6sourceEP11u8g2_struct+0xf4>)
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f001 ffd5 	bl	80073b4 <u8g2_SetFont>

		u8g2_DrawBox(u8g2, 2, 17, 41, 9);
 800540a:	2309      	movs	r3, #9
 800540c:	9300      	str	r3, [sp, #0]
 800540e:	2329      	movs	r3, #41	@ 0x29
 8005410:	2211      	movs	r2, #17
 8005412:	2102      	movs	r1, #2
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f001 f976 	bl	8006706 <u8g2_DrawBox>
		u8g2_DrawStr(u8g2, 3, 25, "Battery:");
 800541a:	4b26      	ldr	r3, [pc, #152]	@ (80054b4 <_ZN2UI6sourceEP11u8g2_struct+0xf8>)
 800541c:	2219      	movs	r2, #25
 800541e:	2103      	movs	r1, #3
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f001 ff25 	bl	8007270 <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 2, 35, "Active");  //Off
 8005426:	4b24      	ldr	r3, [pc, #144]	@ (80054b8 <_ZN2UI6sourceEP11u8g2_struct+0xfc>)
 8005428:	2223      	movs	r2, #35	@ 0x23
 800542a:	2102      	movs	r1, #2
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f001 ff1f 	bl	8007270 <u8g2_DrawStr>

		u8g2_DrawBox(u8g2, 2, 40, 51, 9);
 8005432:	2309      	movs	r3, #9
 8005434:	9300      	str	r3, [sp, #0]
 8005436:	2333      	movs	r3, #51	@ 0x33
 8005438:	2228      	movs	r2, #40	@ 0x28
 800543a:	2102      	movs	r1, #2
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f001 f962 	bl	8006706 <u8g2_DrawBox>
		u8g2_DrawStr(u8g2, 3, 48, "Generator:");
 8005442:	4b1e      	ldr	r3, [pc, #120]	@ (80054bc <_ZN2UI6sourceEP11u8g2_struct+0x100>)
 8005444:	2230      	movs	r2, #48	@ 0x30
 8005446:	2103      	movs	r1, #3
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f001 ff11 	bl	8007270 <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 5, 58, "Idle"); //running
 800544e:	4b1c      	ldr	r3, [pc, #112]	@ (80054c0 <_ZN2UI6sourceEP11u8g2_struct+0x104>)
 8005450:	223a      	movs	r2, #58	@ 0x3a
 8005452:	2105      	movs	r1, #5
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f001 ff0b 	bl	8007270 <u8g2_DrawStr>

		u8g2_DrawBox(u8g2, 84, 17, 31, 9);
 800545a:	2309      	movs	r3, #9
 800545c:	9300      	str	r3, [sp, #0]
 800545e:	231f      	movs	r3, #31
 8005460:	2211      	movs	r2, #17
 8005462:	2154      	movs	r1, #84	@ 0x54
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f001 f94e 	bl	8006706 <u8g2_DrawBox>
		u8g2_DrawStr(u8g2, 85, 25, "Solar:");
 800546a:	4b16      	ldr	r3, [pc, #88]	@ (80054c4 <_ZN2UI6sourceEP11u8g2_struct+0x108>)
 800546c:	2219      	movs	r2, #25
 800546e:	2155      	movs	r1, #85	@ 0x55
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f001 fefd 	bl	8007270 <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 82, 35, "Standby"); //Online
 8005476:	4b14      	ldr	r3, [pc, #80]	@ (80054c8 <_ZN2UI6sourceEP11u8g2_struct+0x10c>)
 8005478:	2223      	movs	r2, #35	@ 0x23
 800547a:	2152      	movs	r1, #82	@ 0x52
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f001 fef7 	bl	8007270 <u8g2_DrawStr>

		u8g2_SendBuffer(u8g2);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f001 f9e8 	bl	8006858 <u8g2_SendBuffer>
		btncodes = button::get_eventTimed(1000);
 8005488:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800548c:	f000 ff04 	bl	8006298 <_ZN6button14get_eventTimedEm>
 8005490:	60f8      	str	r0, [r7, #12]

	} while (btncodes == button::btncodes::cNONE);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d098      	beq.n	80053ca <_ZN2UI6sourceEP11u8g2_struct+0xe>

	if(btncodes == button::btncodes::cEnter_BT)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2b0a      	cmp	r3, #10
 800549c:	d102      	bne.n	80054a4 <_ZN2UI6sourceEP11u8g2_struct+0xe8>
	{
		UI::UI_helper::set_UIcode(MenuNo::Settings);
 800549e:	2006      	movs	r0, #6
 80054a0:	f000 fdea 	bl	8006078 <_ZN2UI9UI_helper10set_UIcodeE6MenuNo>
	}

}
 80054a4:	bf00      	nop
 80054a6:	3710      	adds	r7, #16
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	08014f20 	.word	0x08014f20
 80054b0:	08015344 	.word	0x08015344
 80054b4:	080145e0 	.word	0x080145e0
 80054b8:	080145ec 	.word	0x080145ec
 80054bc:	080145f4 	.word	0x080145f4
 80054c0:	08014600 	.word	0x08014600
 80054c4:	08014608 	.word	0x08014608
 80054c8:	08014610 	.word	0x08014610

080054cc <_ZN2UI7networkEP11u8g2_struct>:
void network(u8g2_t *u8g2) {
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b086      	sub	sp, #24
 80054d0:	af02      	add	r7, sp, #8
 80054d2:	6078      	str	r0, [r7, #4]
	enum button::btncodes btncodes;
	button::resetCode(button::btncodes::cNONE);
 80054d4:	2000      	movs	r0, #0
 80054d6:	f000 fefd 	bl	80062d4 <_ZN6button9resetCodeENS_8btncodesE>
	do {

		u8g2_ClearBuffer(u8g2);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f001 f949 	bl	8006772 <u8g2_ClearBuffer>
		UI::UI_helper::common_iconsMain(u8g2);
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f000 fde5 	bl	80060b0 <_ZN2UI9UI_helper16common_iconsMainEP11u8g2_struct>

		u8g2_DrawXBM(u8g2, 48, 2, imgcont::Network.w, imgcont::Network.h,
 80054e6:	4b35      	ldr	r3, [pc, #212]	@ (80055bc <_ZN2UI7networkEP11u8g2_struct+0xf0>)
 80054e8:	7919      	ldrb	r1, [r3, #4]
 80054ea:	4b34      	ldr	r3, [pc, #208]	@ (80055bc <_ZN2UI7networkEP11u8g2_struct+0xf0>)
 80054ec:	795b      	ldrb	r3, [r3, #5]
				imgcont::Network.img);
 80054ee:	4a33      	ldr	r2, [pc, #204]	@ (80055bc <_ZN2UI7networkEP11u8g2_struct+0xf0>)
 80054f0:	6812      	ldr	r2, [r2, #0]
		u8g2_DrawXBM(u8g2, 48, 2, imgcont::Network.w, imgcont::Network.h,
 80054f2:	9201      	str	r2, [sp, #4]
 80054f4:	9300      	str	r3, [sp, #0]
 80054f6:	460b      	mov	r3, r1
 80054f8:	2202      	movs	r2, #2
 80054fa:	2130      	movs	r1, #48	@ 0x30
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f001 f8bf 	bl	8006680 <u8g2_DrawXBM>

		u8g2_SetFontMode(u8g2, 1);
 8005502:	2101      	movs	r1, #1
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f001 fdf4 	bl	80070f2 <u8g2_SetFontMode>
		u8g2_SetDrawColor(u8g2, 2);
 800550a:	2102      	movs	r1, #2
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f002 f87e 	bl	800760e <u8g2_SetDrawColor>
		u8g2_SetFont(u8g2, u8g2_font_5x8_mf);
 8005512:	492b      	ldr	r1, [pc, #172]	@ (80055c0 <_ZN2UI7networkEP11u8g2_struct+0xf4>)
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f001 ff4d 	bl	80073b4 <u8g2_SetFont>

		u8g2_DrawBox(u8g2, 2, 17, 41, 9);
 800551a:	2309      	movs	r3, #9
 800551c:	9300      	str	r3, [sp, #0]
 800551e:	2329      	movs	r3, #41	@ 0x29
 8005520:	2211      	movs	r2, #17
 8005522:	2102      	movs	r1, #2
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f001 f8ee 	bl	8006706 <u8g2_DrawBox>
		u8g2_DrawStr(u8g2, 3, 25, "Network:");
 800552a:	4b26      	ldr	r3, [pc, #152]	@ (80055c4 <_ZN2UI7networkEP11u8g2_struct+0xf8>)
 800552c:	2219      	movs	r2, #25
 800552e:	2103      	movs	r1, #3
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f001 fe9d 	bl	8007270 <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 2, 35, "Connected");
 8005536:	4b24      	ldr	r3, [pc, #144]	@ (80055c8 <_ZN2UI7networkEP11u8g2_struct+0xfc>)
 8005538:	2223      	movs	r2, #35	@ 0x23
 800553a:	2102      	movs	r1, #2
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f001 fe97 	bl	8007270 <u8g2_DrawStr>

		u8g2_DrawBox(u8g2, 2, 40, 46, 9);
 8005542:	2309      	movs	r3, #9
 8005544:	9300      	str	r3, [sp, #0]
 8005546:	232e      	movs	r3, #46	@ 0x2e
 8005548:	2228      	movs	r2, #40	@ 0x28
 800554a:	2102      	movs	r1, #2
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f001 f8da 	bl	8006706 <u8g2_DrawBox>
		u8g2_DrawStr(u8g2, 3, 48, "Signal-Q:");
 8005552:	4b1e      	ldr	r3, [pc, #120]	@ (80055cc <_ZN2UI7networkEP11u8g2_struct+0x100>)
 8005554:	2230      	movs	r2, #48	@ 0x30
 8005556:	2103      	movs	r1, #3
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f001 fe89 	bl	8007270 <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 5, 58, "-50dBm");
 800555e:	4b1c      	ldr	r3, [pc, #112]	@ (80055d0 <_ZN2UI7networkEP11u8g2_struct+0x104>)
 8005560:	223a      	movs	r2, #58	@ 0x3a
 8005562:	2105      	movs	r1, #5
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f001 fe83 	bl	8007270 <u8g2_DrawStr>

		u8g2_DrawBox(u8g2, 84, 17, 26, 9);
 800556a:	2309      	movs	r3, #9
 800556c:	9300      	str	r3, [sp, #0]
 800556e:	231a      	movs	r3, #26
 8005570:	2211      	movs	r2, #17
 8005572:	2154      	movs	r1, #84	@ 0x54
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f001 f8c6 	bl	8006706 <u8g2_DrawBox>
		u8g2_DrawStr(u8g2, 85, 25, "Data:");
 800557a:	4b16      	ldr	r3, [pc, #88]	@ (80055d4 <_ZN2UI7networkEP11u8g2_struct+0x108>)
 800557c:	2219      	movs	r2, #25
 800557e:	2155      	movs	r1, #85	@ 0x55
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f001 fe75 	bl	8007270 <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 83, 35, "Discon");
 8005586:	4b14      	ldr	r3, [pc, #80]	@ (80055d8 <_ZN2UI7networkEP11u8g2_struct+0x10c>)
 8005588:	2223      	movs	r2, #35	@ 0x23
 800558a:	2153      	movs	r1, #83	@ 0x53
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f001 fe6f 	bl	8007270 <u8g2_DrawStr>

		u8g2_SendBuffer(u8g2);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f001 f960 	bl	8006858 <u8g2_SendBuffer>
		btncodes = button::get_eventTimed(1000);
 8005598:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800559c:	f000 fe7c 	bl	8006298 <_ZN6button14get_eventTimedEm>
 80055a0:	60f8      	str	r0, [r7, #12]

	} while (btncodes == button::btncodes::cNONE);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d098      	beq.n	80054da <_ZN2UI7networkEP11u8g2_struct+0xe>

	if(btncodes == button::btncodes::cEnter_BT)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2b0a      	cmp	r3, #10
 80055ac:	d102      	bne.n	80055b4 <_ZN2UI7networkEP11u8g2_struct+0xe8>
	{
		UI::UI_helper::set_UIcode(MenuNo::Settings);
 80055ae:	2006      	movs	r0, #6
 80055b0:	f000 fd62 	bl	8006078 <_ZN2UI9UI_helper10set_UIcodeE6MenuNo>
	}
}
 80055b4:	bf00      	nop
 80055b6:	3710      	adds	r7, #16
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	08014f18 	.word	0x08014f18
 80055c0:	08015344 	.word	0x08015344
 80055c4:	08014618 	.word	0x08014618
 80055c8:	08014624 	.word	0x08014624
 80055cc:	08014630 	.word	0x08014630
 80055d0:	0801463c 	.word	0x0801463c
 80055d4:	08014644 	.word	0x08014644
 80055d8:	0801464c 	.word	0x0801464c

080055dc <_ZN2UI5powerEP11u8g2_struct>:

void power(u8g2_t *u8g2) {
 80055dc:	b580      	push	{r7, lr}
 80055de:	b086      	sub	sp, #24
 80055e0:	af02      	add	r7, sp, #8
 80055e2:	6078      	str	r0, [r7, #4]

	enum button::btncodes btncodes;
	button::resetCode(button::btncodes::cNONE);
 80055e4:	2000      	movs	r0, #0
 80055e6:	f000 fe75 	bl	80062d4 <_ZN6button9resetCodeENS_8btncodesE>
	do {

		u8g2_ClearBuffer(u8g2);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f001 f8c1 	bl	8006772 <u8g2_ClearBuffer>

		UI::UI_helper::common_iconsMain(u8g2);
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 fd5d 	bl	80060b0 <_ZN2UI9UI_helper16common_iconsMainEP11u8g2_struct>
		u8g2_SetFont(u8g2, u8g2_font_5x8_mf);
 80055f6:	4933      	ldr	r1, [pc, #204]	@ (80056c4 <_ZN2UI5powerEP11u8g2_struct+0xe8>)
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f001 fedb 	bl	80073b4 <u8g2_SetFont>

		u8g2_DrawXBM(u8g2, 10, 16, imgcont::Phase.w, imgcont::Phase.h,
 80055fe:	4b32      	ldr	r3, [pc, #200]	@ (80056c8 <_ZN2UI5powerEP11u8g2_struct+0xec>)
 8005600:	7919      	ldrb	r1, [r3, #4]
 8005602:	4b31      	ldr	r3, [pc, #196]	@ (80056c8 <_ZN2UI5powerEP11u8g2_struct+0xec>)
 8005604:	795b      	ldrb	r3, [r3, #5]
				imgcont::Phase.img);
 8005606:	4a30      	ldr	r2, [pc, #192]	@ (80056c8 <_ZN2UI5powerEP11u8g2_struct+0xec>)
 8005608:	6812      	ldr	r2, [r2, #0]
		u8g2_DrawXBM(u8g2, 10, 16, imgcont::Phase.w, imgcont::Phase.h,
 800560a:	9201      	str	r2, [sp, #4]
 800560c:	9300      	str	r3, [sp, #0]
 800560e:	460b      	mov	r3, r1
 8005610:	2210      	movs	r2, #16
 8005612:	210a      	movs	r1, #10
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f001 f833 	bl	8006680 <u8g2_DrawXBM>
		u8g2_DrawStr(u8g2, 5, 38, "220.0V");
 800561a:	4b2c      	ldr	r3, [pc, #176]	@ (80056cc <_ZN2UI5powerEP11u8g2_struct+0xf0>)
 800561c:	2226      	movs	r2, #38	@ 0x26
 800561e:	2105      	movs	r1, #5
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f001 fe25 	bl	8007270 <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 5, 46, "020.6A");
 8005626:	4b2a      	ldr	r3, [pc, #168]	@ (80056d0 <_ZN2UI5powerEP11u8g2_struct+0xf4>)
 8005628:	222e      	movs	r2, #46	@ 0x2e
 800562a:	2105      	movs	r1, #5
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f001 fe1f 	bl	8007270 <u8g2_DrawStr>

		u8g2_DrawXBM(u8g2, 54, 10, imgcont::Phase.w, imgcont::Phase.h,
 8005632:	4b25      	ldr	r3, [pc, #148]	@ (80056c8 <_ZN2UI5powerEP11u8g2_struct+0xec>)
 8005634:	7919      	ldrb	r1, [r3, #4]
 8005636:	4b24      	ldr	r3, [pc, #144]	@ (80056c8 <_ZN2UI5powerEP11u8g2_struct+0xec>)
 8005638:	795b      	ldrb	r3, [r3, #5]
				imgcont::Phase.img);
 800563a:	4a23      	ldr	r2, [pc, #140]	@ (80056c8 <_ZN2UI5powerEP11u8g2_struct+0xec>)
 800563c:	6812      	ldr	r2, [r2, #0]
		u8g2_DrawXBM(u8g2, 54, 10, imgcont::Phase.w, imgcont::Phase.h,
 800563e:	9201      	str	r2, [sp, #4]
 8005640:	9300      	str	r3, [sp, #0]
 8005642:	460b      	mov	r3, r1
 8005644:	220a      	movs	r2, #10
 8005646:	2136      	movs	r1, #54	@ 0x36
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f001 f819 	bl	8006680 <u8g2_DrawXBM>
		u8g2_DrawStr(u8g2, 50, 32, "220.0V");
 800564e:	4b1f      	ldr	r3, [pc, #124]	@ (80056cc <_ZN2UI5powerEP11u8g2_struct+0xf0>)
 8005650:	2220      	movs	r2, #32
 8005652:	2132      	movs	r1, #50	@ 0x32
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f001 fe0b 	bl	8007270 <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 50, 40, "020.6A");
 800565a:	4b1d      	ldr	r3, [pc, #116]	@ (80056d0 <_ZN2UI5powerEP11u8g2_struct+0xf4>)
 800565c:	2228      	movs	r2, #40	@ 0x28
 800565e:	2132      	movs	r1, #50	@ 0x32
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f001 fe05 	bl	8007270 <u8g2_DrawStr>

		u8g2_DrawXBM(u8g2, 100, 16, imgcont::Phase.w, imgcont::Phase.h,
 8005666:	4b18      	ldr	r3, [pc, #96]	@ (80056c8 <_ZN2UI5powerEP11u8g2_struct+0xec>)
 8005668:	7919      	ldrb	r1, [r3, #4]
 800566a:	4b17      	ldr	r3, [pc, #92]	@ (80056c8 <_ZN2UI5powerEP11u8g2_struct+0xec>)
 800566c:	795b      	ldrb	r3, [r3, #5]
				imgcont::Phase.img);
 800566e:	4a16      	ldr	r2, [pc, #88]	@ (80056c8 <_ZN2UI5powerEP11u8g2_struct+0xec>)
 8005670:	6812      	ldr	r2, [r2, #0]
		u8g2_DrawXBM(u8g2, 100, 16, imgcont::Phase.w, imgcont::Phase.h,
 8005672:	9201      	str	r2, [sp, #4]
 8005674:	9300      	str	r3, [sp, #0]
 8005676:	460b      	mov	r3, r1
 8005678:	2210      	movs	r2, #16
 800567a:	2164      	movs	r1, #100	@ 0x64
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 ffff 	bl	8006680 <u8g2_DrawXBM>
		u8g2_DrawStr(u8g2, 96, 38, "220.0V");
 8005682:	4b12      	ldr	r3, [pc, #72]	@ (80056cc <_ZN2UI5powerEP11u8g2_struct+0xf0>)
 8005684:	2226      	movs	r2, #38	@ 0x26
 8005686:	2160      	movs	r1, #96	@ 0x60
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f001 fdf1 	bl	8007270 <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 96, 46, "020.6A");
 800568e:	4b10      	ldr	r3, [pc, #64]	@ (80056d0 <_ZN2UI5powerEP11u8g2_struct+0xf4>)
 8005690:	222e      	movs	r2, #46	@ 0x2e
 8005692:	2160      	movs	r1, #96	@ 0x60
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f001 fdeb 	bl	8007270 <u8g2_DrawStr>

		u8g2_SendBuffer(u8g2);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f001 f8dc 	bl	8006858 <u8g2_SendBuffer>

		btncodes = button::get_eventTimed(1000);
 80056a0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80056a4:	f000 fdf8 	bl	8006298 <_ZN6button14get_eventTimedEm>
 80056a8:	60f8      	str	r0, [r7, #12]

	} while (btncodes == button::btncodes::cNONE);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d09c      	beq.n	80055ea <_ZN2UI5powerEP11u8g2_struct+0xe>

	if(btncodes == button::btncodes::cEnter_BT)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2b0a      	cmp	r3, #10
 80056b4:	d102      	bne.n	80056bc <_ZN2UI5powerEP11u8g2_struct+0xe0>
	{
		UI::UI_helper::set_UIcode(MenuNo::Settings);
 80056b6:	2006      	movs	r0, #6
 80056b8:	f000 fcde 	bl	8006078 <_ZN2UI9UI_helper10set_UIcodeE6MenuNo>
	}

}
 80056bc:	bf00      	nop
 80056be:	3710      	adds	r7, #16
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	08015344 	.word	0x08015344
 80056c8:	08014f10 	.word	0x08014f10
 80056cc:	08014654 	.word	0x08014654
 80056d0:	0801465c 	.word	0x0801465c

080056d4 <_ZN2UI4loopEP11u8g2_struct>:

void loop(u8g2_t *u8g2) {
 80056d4:	b590      	push	{r4, r7, lr}
 80056d6:	b085      	sub	sp, #20
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
	uint16_t index;
	if (CurrMenu == MenuNo::None) {
 80056dc:	4b81      	ldr	r3, [pc, #516]	@ (80058e4 <_ZN2UI4loopEP11u8g2_struct+0x210>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2b09      	cmp	r3, #9
 80056e2:	d102      	bne.n	80056ea <_ZN2UI4loopEP11u8g2_struct+0x16>
		CurrMenu = MenuNo::Power;
 80056e4:	4b7f      	ldr	r3, [pc, #508]	@ (80058e4 <_ZN2UI4loopEP11u8g2_struct+0x210>)
 80056e6:	2200      	movs	r2, #0
 80056e8:	601a      	str	r2, [r3, #0]
	}

	for (index = 0; index < (sizeof(MenuArray) / sizeof(MenuArray[0]));
 80056ea:	2300      	movs	r3, #0
 80056ec:	81fb      	strh	r3, [r7, #14]
 80056ee:	e00e      	b.n	800570e <_ZN2UI4loopEP11u8g2_struct+0x3a>
			index++) {
		if (CurrMenu == MenuArray[index].MenuNo) // check if this menu is found ?
 80056f0:	89fa      	ldrh	r2, [r7, #14]
 80056f2:	497d      	ldr	r1, [pc, #500]	@ (80058e8 <_ZN2UI4loopEP11u8g2_struct+0x214>)
 80056f4:	4613      	mov	r3, r2
 80056f6:	011b      	lsls	r3, r3, #4
 80056f8:	4413      	add	r3, r2
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	440b      	add	r3, r1
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	4b78      	ldr	r3, [pc, #480]	@ (80058e4 <_ZN2UI4loopEP11u8g2_struct+0x210>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	429a      	cmp	r2, r3
 8005706:	d006      	beq.n	8005716 <_ZN2UI4loopEP11u8g2_struct+0x42>
	for (index = 0; index < (sizeof(MenuArray) / sizeof(MenuArray[0]));
 8005708:	89fb      	ldrh	r3, [r7, #14]
 800570a:	3301      	adds	r3, #1
 800570c:	81fb      	strh	r3, [r7, #14]
 800570e:	89fb      	ldrh	r3, [r7, #14]
 8005710:	2b08      	cmp	r3, #8
 8005712:	d9ed      	bls.n	80056f0 <_ZN2UI4loopEP11u8g2_struct+0x1c>
 8005714:	e000      	b.n	8005718 <_ZN2UI4loopEP11u8g2_struct+0x44>
				{
			break;
 8005716:	bf00      	nop
		}
	}

	if (index < (sizeof(MenuArray) / sizeof(MenuArray[0]))) {
 8005718:	89fb      	ldrh	r3, [r7, #14]
 800571a:	2b08      	cmp	r3, #8
 800571c:	f200 80d9 	bhi.w	80058d2 <_ZN2UI4loopEP11u8g2_struct+0x1fe>
		std::memset(UI::display_buffer, 0, sizeof(UI::display_buffer));
 8005720:	22ff      	movs	r2, #255	@ 0xff
 8005722:	2100      	movs	r1, #0
 8005724:	4871      	ldr	r0, [pc, #452]	@ (80058ec <_ZN2UI4loopEP11u8g2_struct+0x218>)
 8005726:	f00c fa54 	bl	8011bd2 <memset>
		MenuArray[index].function(u8g2);
 800572a:	89fa      	ldrh	r2, [r7, #14]
 800572c:	496e      	ldr	r1, [pc, #440]	@ (80058e8 <_ZN2UI4loopEP11u8g2_struct+0x214>)
 800572e:	4613      	mov	r3, r2
 8005730:	011b      	lsls	r3, r3, #4
 8005732:	4413      	add	r3, r2
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	440b      	add	r3, r1
 8005738:	3304      	adds	r3, #4
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	4798      	blx	r3

		/*Add buttons related logic*/

		switch (button::get_code()) {
 8005740:	f000 fdbc 	bl	80062bc <_ZN6button8get_codeEv>
 8005744:	4603      	mov	r3, r0
 8005746:	2b0a      	cmp	r3, #10
 8005748:	d04e      	beq.n	80057e8 <_ZN2UI4loopEP11u8g2_struct+0x114>
 800574a:	2b0a      	cmp	r3, #10
 800574c:	f2c0 80c5 	blt.w	80058da <_ZN2UI4loopEP11u8g2_struct+0x206>
 8005750:	2b3c      	cmp	r3, #60	@ 0x3c
 8005752:	f300 80c2 	bgt.w	80058da <_ZN2UI4loopEP11u8g2_struct+0x206>
 8005756:	2b1e      	cmp	r3, #30
 8005758:	f2c0 80bf 	blt.w	80058da <_ZN2UI4loopEP11u8g2_struct+0x206>
 800575c:	3b1e      	subs	r3, #30
 800575e:	2b1e      	cmp	r3, #30
 8005760:	f200 80bb 	bhi.w	80058da <_ZN2UI4loopEP11u8g2_struct+0x206>
 8005764:	a201      	add	r2, pc, #4	@ (adr r2, 800576c <_ZN2UI4loopEP11u8g2_struct+0x98>)
 8005766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800576a:	bf00      	nop
 800576c:	08005873 	.word	0x08005873
 8005770:	080058db 	.word	0x080058db
 8005774:	080058db 	.word	0x080058db
 8005778:	080058db 	.word	0x080058db
 800577c:	080058db 	.word	0x080058db
 8005780:	080058db 	.word	0x080058db
 8005784:	080058db 	.word	0x080058db
 8005788:	080058db 	.word	0x080058db
 800578c:	080058db 	.word	0x080058db
 8005790:	080058db 	.word	0x080058db
 8005794:	0800588b 	.word	0x0800588b
 8005798:	080058db 	.word	0x080058db
 800579c:	080058db 	.word	0x080058db
 80057a0:	080058db 	.word	0x080058db
 80057a4:	080058db 	.word	0x080058db
 80057a8:	080058db 	.word	0x080058db
 80057ac:	080058db 	.word	0x080058db
 80057b0:	080058db 	.word	0x080058db
 80057b4:	080058db 	.word	0x080058db
 80057b8:	080058db 	.word	0x080058db
 80057bc:	080058a3 	.word	0x080058a3
 80057c0:	080058db 	.word	0x080058db
 80057c4:	080058db 	.word	0x080058db
 80057c8:	080058db 	.word	0x080058db
 80057cc:	080058db 	.word	0x080058db
 80057d0:	080058db 	.word	0x080058db
 80057d4:	080058db 	.word	0x080058db
 80057d8:	080058db 	.word	0x080058db
 80057dc:	080058db 	.word	0x080058db
 80057e0:	080058db 	.word	0x080058db
 80057e4:	080058bb 	.word	0x080058bb
		case button::btncodes::cEnter_BT: {
			int i = 0;
 80057e8:	2300      	movs	r3, #0
 80057ea:	60bb      	str	r3, [r7, #8]
			for (i = 0; i < TotalEnterIndexes; i++) {
 80057ec:	2300      	movs	r3, #0
 80057ee:	60bb      	str	r3, [r7, #8]
 80057f0:	e03a      	b.n	8005868 <_ZN2UI4loopEP11u8g2_struct+0x194>

				if (MenuArray[index].Enter[i] == MenuNo::None) {
 80057f2:	89fa      	ldrh	r2, [r7, #14]
 80057f4:	493c      	ldr	r1, [pc, #240]	@ (80058e8 <_ZN2UI4loopEP11u8g2_struct+0x214>)
 80057f6:	4613      	mov	r3, r2
 80057f8:	011b      	lsls	r3, r3, #4
 80057fa:	4413      	add	r3, r2
 80057fc:	68ba      	ldr	r2, [r7, #8]
 80057fe:	4413      	add	r3, r2
 8005800:	3302      	adds	r3, #2
 8005802:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005806:	2b09      	cmp	r3, #9
 8005808:	d10a      	bne.n	8005820 <_ZN2UI4loopEP11u8g2_struct+0x14c>
					CurrMenu = MenuArray[index].MenuNo; //stay in our own menu
 800580a:	89fa      	ldrh	r2, [r7, #14]
 800580c:	4936      	ldr	r1, [pc, #216]	@ (80058e8 <_ZN2UI4loopEP11u8g2_struct+0x214>)
 800580e:	4613      	mov	r3, r2
 8005810:	011b      	lsls	r3, r3, #4
 8005812:	4413      	add	r3, r2
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	440b      	add	r3, r1
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a32      	ldr	r2, [pc, #200]	@ (80058e4 <_ZN2UI4loopEP11u8g2_struct+0x210>)
 800581c:	6013      	str	r3, [r2, #0]
					break;
 800581e:	e027      	b.n	8005870 <_ZN2UI4loopEP11u8g2_struct+0x19c>
				}

				if (MenuArray[index].Enter[i] == UI::UI_helper::get_UIcode())
 8005820:	89fa      	ldrh	r2, [r7, #14]
 8005822:	4931      	ldr	r1, [pc, #196]	@ (80058e8 <_ZN2UI4loopEP11u8g2_struct+0x214>)
 8005824:	4613      	mov	r3, r2
 8005826:	011b      	lsls	r3, r3, #4
 8005828:	4413      	add	r3, r2
 800582a:	68ba      	ldr	r2, [r7, #8]
 800582c:	4413      	add	r3, r2
 800582e:	3302      	adds	r3, #2
 8005830:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8005834:	f000 fc30 	bl	8006098 <_ZN2UI9UI_helper10get_UIcodeEv>
 8005838:	4603      	mov	r3, r0
 800583a:	429c      	cmp	r4, r3
 800583c:	bf0c      	ite	eq
 800583e:	2301      	moveq	r3, #1
 8005840:	2300      	movne	r3, #0
 8005842:	b2db      	uxtb	r3, r3
 8005844:	2b00      	cmp	r3, #0
 8005846:	d00c      	beq.n	8005862 <_ZN2UI4loopEP11u8g2_struct+0x18e>
				{
					CurrMenu = MenuArray[index].Enter[i];
 8005848:	89fa      	ldrh	r2, [r7, #14]
 800584a:	4927      	ldr	r1, [pc, #156]	@ (80058e8 <_ZN2UI4loopEP11u8g2_struct+0x214>)
 800584c:	4613      	mov	r3, r2
 800584e:	011b      	lsls	r3, r3, #4
 8005850:	4413      	add	r3, r2
 8005852:	68ba      	ldr	r2, [r7, #8]
 8005854:	4413      	add	r3, r2
 8005856:	3302      	adds	r3, #2
 8005858:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800585c:	4a21      	ldr	r2, [pc, #132]	@ (80058e4 <_ZN2UI4loopEP11u8g2_struct+0x210>)
 800585e:	6013      	str	r3, [r2, #0]
					break;
 8005860:	e006      	b.n	8005870 <_ZN2UI4loopEP11u8g2_struct+0x19c>
			for (i = 0; i < TotalEnterIndexes; i++) {
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	3301      	adds	r3, #1
 8005866:	60bb      	str	r3, [r7, #8]
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	2b09      	cmp	r3, #9
 800586c:	ddc1      	ble.n	80057f2 <_ZN2UI4loopEP11u8g2_struct+0x11e>
				}

			}

			break;
 800586e:	e035      	b.n	80058dc <_ZN2UI4loopEP11u8g2_struct+0x208>
 8005870:	e034      	b.n	80058dc <_ZN2UI4loopEP11u8g2_struct+0x208>
		}
		case button::btncodes::cUP_BT: {
			CurrMenu = MenuArray[index].UP;
 8005872:	89fa      	ldrh	r2, [r7, #14]
 8005874:	491c      	ldr	r1, [pc, #112]	@ (80058e8 <_ZN2UI4loopEP11u8g2_struct+0x214>)
 8005876:	4613      	mov	r3, r2
 8005878:	011b      	lsls	r3, r3, #4
 800587a:	4413      	add	r3, r2
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	440b      	add	r3, r1
 8005880:	3338      	adds	r3, #56	@ 0x38
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a17      	ldr	r2, [pc, #92]	@ (80058e4 <_ZN2UI4loopEP11u8g2_struct+0x210>)
 8005886:	6013      	str	r3, [r2, #0]
			break;
 8005888:	e028      	b.n	80058dc <_ZN2UI4loopEP11u8g2_struct+0x208>
		}
		case button::btncodes::cDWN_BT: {
			CurrMenu = MenuArray[index].DN;
 800588a:	89fa      	ldrh	r2, [r7, #14]
 800588c:	4916      	ldr	r1, [pc, #88]	@ (80058e8 <_ZN2UI4loopEP11u8g2_struct+0x214>)
 800588e:	4613      	mov	r3, r2
 8005890:	011b      	lsls	r3, r3, #4
 8005892:	4413      	add	r3, r2
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	440b      	add	r3, r1
 8005898:	3334      	adds	r3, #52	@ 0x34
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a11      	ldr	r2, [pc, #68]	@ (80058e4 <_ZN2UI4loopEP11u8g2_struct+0x210>)
 800589e:	6013      	str	r3, [r2, #0]
			break;
 80058a0:	e01c      	b.n	80058dc <_ZN2UI4loopEP11u8g2_struct+0x208>
		}
		case button::btncodes::cRGHT_BT: {
			CurrMenu = MenuArray[index].RGT;
 80058a2:	89fa      	ldrh	r2, [r7, #14]
 80058a4:	4910      	ldr	r1, [pc, #64]	@ (80058e8 <_ZN2UI4loopEP11u8g2_struct+0x214>)
 80058a6:	4613      	mov	r3, r2
 80058a8:	011b      	lsls	r3, r3, #4
 80058aa:	4413      	add	r3, r2
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	440b      	add	r3, r1
 80058b0:	3340      	adds	r3, #64	@ 0x40
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a0b      	ldr	r2, [pc, #44]	@ (80058e4 <_ZN2UI4loopEP11u8g2_struct+0x210>)
 80058b6:	6013      	str	r3, [r2, #0]
			break;
 80058b8:	e010      	b.n	80058dc <_ZN2UI4loopEP11u8g2_struct+0x208>
		}
		case button::btncodes::cLFT_BT: {
			CurrMenu = MenuArray[index].LFT;
 80058ba:	89fa      	ldrh	r2, [r7, #14]
 80058bc:	490a      	ldr	r1, [pc, #40]	@ (80058e8 <_ZN2UI4loopEP11u8g2_struct+0x214>)
 80058be:	4613      	mov	r3, r2
 80058c0:	011b      	lsls	r3, r3, #4
 80058c2:	4413      	add	r3, r2
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	440b      	add	r3, r1
 80058c8:	333c      	adds	r3, #60	@ 0x3c
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a05      	ldr	r2, [pc, #20]	@ (80058e4 <_ZN2UI4loopEP11u8g2_struct+0x210>)
 80058ce:	6013      	str	r3, [r2, #0]
			break;
 80058d0:	e004      	b.n	80058dc <_ZN2UI4loopEP11u8g2_struct+0x208>
			break;

		}

	} else {
		CurrMenu = MenuNo::None;
 80058d2:	4b04      	ldr	r3, [pc, #16]	@ (80058e4 <_ZN2UI4loopEP11u8g2_struct+0x210>)
 80058d4:	2209      	movs	r2, #9
 80058d6:	601a      	str	r2, [r3, #0]
	}

}
 80058d8:	e000      	b.n	80058dc <_ZN2UI4loopEP11u8g2_struct+0x208>
			break;
 80058da:	bf00      	nop
}
 80058dc:	bf00      	nop
 80058de:	3714      	adds	r7, #20
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd90      	pop	{r4, r7, pc}
 80058e4:	20000008 	.word	0x20000008
 80058e8:	2000000c 	.word	0x2000000c
 80058ec:	20001974 	.word	0x20001974

080058f0 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct>:
		10.0,
		01.0,
		0.1,
};

void UI::UI_Subs::SetTimeDate(u8g2_t *u8g2) {
 80058f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058f2:	b0a1      	sub	sp, #132	@ 0x84
 80058f4:	af06      	add	r7, sp, #24
 80058f6:	6078      	str	r0, [r7, #4]
	uint32_t epochTime;
	RTC_DateTypeDef DDate;
	RTC_TimeTypeDef DTime;

	int8_t timezone;
	stmRTC.getTime(&DDate, &DTime, &epochTime, &timezone);
 80058f8:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80058fc:	f107 0210 	add.w	r2, r7, #16
 8005900:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8005904:	f107 030f 	add.w	r3, r7, #15
 8005908:	9300      	str	r3, [sp, #0]
 800590a:	4603      	mov	r3, r0
 800590c:	48ba      	ldr	r0, [pc, #744]	@ (8005bf8 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x308>)
 800590e:	f7fe fe9a 	bl	8004646 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPmPa>

	int8_t selEpochPos = 0;
 8005912:	2300      	movs	r3, #0
 8005914:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	int8_t prevselPos = 0;
 8005918:	2300      	movs	r3, #0
 800591a:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66

	do {
		button::resetCode(button::btncodes::cNONE);
 800591e:	2000      	movs	r0, #0
 8005920:	f000 fcd8 	bl	80062d4 <_ZN6button9resetCodeENS_8btncodesE>

		do {
			u8g2_ClearBuffer(u8g2);
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f000 ff24 	bl	8006772 <u8g2_ClearBuffer>
			u8g2_SetFontMode(u8g2, 1);
 800592a:	2101      	movs	r1, #1
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f001 fbe0 	bl	80070f2 <u8g2_SetFontMode>
			u8g2_SetDrawColor(u8g2, 2);
 8005932:	2102      	movs	r1, #2
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f001 fe6a 	bl	800760e <u8g2_SetDrawColor>
			u8g2_SetFont(u8g2, u8g2_font_5x8_mf);
 800593a:	49b0      	ldr	r1, [pc, #704]	@ (8005bfc <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x30c>)
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f001 fd39 	bl	80073b4 <u8g2_SetFont>

			u8g2_DrawStr(u8g2, 3, 10, "Set Time 24hr Format");
 8005942:	4baf      	ldr	r3, [pc, #700]	@ (8005c00 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x310>)
 8005944:	220a      	movs	r2, #10
 8005946:	2103      	movs	r1, #3
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f001 fc91 	bl	8007270 <u8g2_DrawStr>

			std::sprintf(epochtimeStr, "%02d:%02d:%02d|%02d/%02d/%02d %02d",
					DTime.Hours, DTime.Minutes, DTime.Seconds, DDate.Date,
 800594e:	7c3b      	ldrb	r3, [r7, #16]
			std::sprintf(epochtimeStr, "%02d:%02d:%02d|%02d/%02d/%02d %02d",
 8005950:	461e      	mov	r6, r3
					DTime.Hours, DTime.Minutes, DTime.Seconds, DDate.Date,
 8005952:	7c7b      	ldrb	r3, [r7, #17]
			std::sprintf(epochtimeStr, "%02d:%02d:%02d|%02d/%02d/%02d %02d",
 8005954:	469c      	mov	ip, r3
					DTime.Hours, DTime.Minutes, DTime.Seconds, DDate.Date,
 8005956:	7cbb      	ldrb	r3, [r7, #18]
 8005958:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
					DDate.Month, DDate.Year, timezone);
 800595c:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8005960:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
			std::sprintf(epochtimeStr, "%02d:%02d:%02d|%02d/%02d/%02d %02d",
 8005964:	4604      	mov	r4, r0
 8005966:	f997 000f 	ldrsb.w	r0, [r7, #15]
 800596a:	4605      	mov	r5, r0
 800596c:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8005970:	9504      	str	r5, [sp, #16]
 8005972:	9403      	str	r4, [sp, #12]
 8005974:	9102      	str	r1, [sp, #8]
 8005976:	9201      	str	r2, [sp, #4]
 8005978:	9300      	str	r3, [sp, #0]
 800597a:	4663      	mov	r3, ip
 800597c:	4632      	mov	r2, r6
 800597e:	49a1      	ldr	r1, [pc, #644]	@ (8005c04 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x314>)
 8005980:	f00c f8c4 	bl	8011b0c <siprintf>

			u8g2_DrawStr(u8g2, 5, 20, epochtimeStr);
 8005984:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005988:	2214      	movs	r2, #20
 800598a:	2105      	movs	r1, #5
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f001 fc6f 	bl	8007270 <u8g2_DrawStr>

			if (timezone < -9 && selEpochPos >= 12) {
 8005992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005996:	f113 0f09 	cmn.w	r3, #9
 800599a:	da13      	bge.n	80059c4 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0xd4>
 800599c:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80059a0:	2b0b      	cmp	r3, #11
 80059a2:	dd0f      	ble.n	80059c4 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0xd4>
				u8g2_DrawBox(u8g2, 5 + (5 * (prevselPos + 1)), 12, 5, 9);
 80059a4:	f997 3066 	ldrsb.w	r3, [r7, #102]	@ 0x66
 80059a8:	3302      	adds	r3, #2
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	461a      	mov	r2, r3
 80059ae:	0092      	lsls	r2, r2, #2
 80059b0:	4413      	add	r3, r2
 80059b2:	b2d9      	uxtb	r1, r3
 80059b4:	2309      	movs	r3, #9
 80059b6:	9300      	str	r3, [sp, #0]
 80059b8:	2305      	movs	r3, #5
 80059ba:	220c      	movs	r2, #12
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 fea2 	bl	8006706 <u8g2_DrawBox>
 80059c2:	e00e      	b.n	80059e2 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0xf2>
			} else {
				u8g2_DrawBox(u8g2, 5 + (5 * prevselPos), 12, 5, 9);
 80059c4:	f997 3066 	ldrsb.w	r3, [r7, #102]	@ 0x66
 80059c8:	3301      	adds	r3, #1
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	461a      	mov	r2, r3
 80059ce:	0092      	lsls	r2, r2, #2
 80059d0:	4413      	add	r3, r2
 80059d2:	b2d9      	uxtb	r1, r3
 80059d4:	2309      	movs	r3, #9
 80059d6:	9300      	str	r3, [sp, #0]
 80059d8:	2305      	movs	r3, #5
 80059da:	220c      	movs	r2, #12
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 fe92 	bl	8006706 <u8g2_DrawBox>
			}

			UI::UI_helper::SubMenuControlInfo(u8g2);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 fbc6 	bl	8006174 <_ZN2UI9UI_helper18SubMenuControlInfoEP11u8g2_struct>

			u8g2_SendBuffer(u8g2);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 ff35 	bl	8006858 <u8g2_SendBuffer>
			btncodes = button::get_event();
 80059ee:	f000 fc45 	bl	800627c <_ZN6button9get_eventEv>
 80059f2:	6638      	str	r0, [r7, #96]	@ 0x60
		} while (btncodes == button::btncodes::cNONE);
 80059f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d094      	beq.n	8005924 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x34>

		switch (btncodes) {
 80059fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80059fc:	2b32      	cmp	r3, #50	@ 0x32
 80059fe:	d013      	beq.n	8005a28 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x138>
 8005a00:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a02:	2b32      	cmp	r3, #50	@ 0x32
 8005a04:	f300 815f 	bgt.w	8005cc6 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3d6>
 8005a08:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a0a:	2b28      	cmp	r3, #40	@ 0x28
 8005a0c:	d05b      	beq.n	8005ac6 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x1d6>
 8005a0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a10:	2b28      	cmp	r3, #40	@ 0x28
 8005a12:	f300 8158 	bgt.w	8005cc6 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3d6>
 8005a16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a18:	2b0a      	cmp	r3, #10
 8005a1a:	f000 8147 	beq.w	8005cac <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3bc>
 8005a1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a20:	2b1e      	cmp	r3, #30
 8005a22:	f000 80c5 	beq.w	8005bb0 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x2c0>
 8005a26:	e14e      	b.n	8005cc6 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3d6>

		case button::btncodes::cRGHT_BT: {
			selEpochPos++;
 8005a28:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	3301      	adds	r3, #1
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

			if (selEpochPos < 6) {
 8005a36:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8005a3a:	2b05      	cmp	r3, #5
 8005a3c:	dc25      	bgt.n	8005a8a <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x19a>
				if (selEpochPos > 2) {
 8005a3e:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	dd11      	ble.n	8005a6a <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x17a>
					if (selEpochPos >= 4) {
 8005a46:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8005a4a:	2b03      	cmp	r3, #3
 8005a4c:	dd06      	ble.n	8005a5c <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x16c>
						prevselPos = selEpochPos + 2;
 8005a4e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005a52:	3302      	adds	r3, #2
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
				} else {
					prevselPos = prevselPos + 1;
				}
			}

			break;
 8005a5a:	e134      	b.n	8005cc6 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3d6>
						prevselPos = selEpochPos + 1;
 8005a5c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005a60:	3301      	adds	r3, #1
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
			break;
 8005a68:	e12d      	b.n	8005cc6 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3d6>
					if (selEpochPos == 2) {
 8005a6a:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8005a6e:	2b02      	cmp	r3, #2
 8005a70:	d106      	bne.n	8005a80 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x190>
						prevselPos = prevselPos + 2;
 8005a72:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8005a76:	3302      	adds	r3, #2
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
			break;
 8005a7e:	e122      	b.n	8005cc6 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3d6>
						prevselPos = selEpochPos;
 8005a80:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005a84:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
			break;
 8005a88:	e11d      	b.n	8005cc6 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3d6>
				if (selEpochPos == 6 || selEpochPos == 8 || selEpochPos == 10
 8005a8a:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8005a8e:	2b06      	cmp	r3, #6
 8005a90:	d00b      	beq.n	8005aaa <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x1ba>
 8005a92:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8005a96:	2b08      	cmp	r3, #8
 8005a98:	d007      	beq.n	8005aaa <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x1ba>
 8005a9a:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8005a9e:	2b0a      	cmp	r3, #10
 8005aa0:	d003      	beq.n	8005aaa <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x1ba>
						|| selEpochPos == 12) {
 8005aa2:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8005aa6:	2b0c      	cmp	r3, #12
 8005aa8:	d106      	bne.n	8005ab8 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x1c8>
					prevselPos = prevselPos + 2;
 8005aaa:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8005aae:	3302      	adds	r3, #2
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
			break;
 8005ab6:	e106      	b.n	8005cc6 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3d6>
					prevselPos = prevselPos + 1;
 8005ab8:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8005abc:	3301      	adds	r3, #1
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
			break;
 8005ac4:	e0ff      	b.n	8005cc6 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3d6>
		}

		case button::btncodes::cDWN_BT: {

			switch (selEpochPos) {
 8005ac6:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8005aca:	2b0d      	cmp	r3, #13
 8005acc:	f200 80f8 	bhi.w	8005cc0 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3d0>
 8005ad0:	a201      	add	r2, pc, #4	@ (adr r2, 8005ad8 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x1e8>)
 8005ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad6:	bf00      	nop
 8005ad8:	08005b11 	.word	0x08005b11
 8005adc:	08005b11 	.word	0x08005b11
 8005ae0:	08005b25 	.word	0x08005b25
 8005ae4:	08005b25 	.word	0x08005b25
 8005ae8:	08005b39 	.word	0x08005b39
 8005aec:	08005b39 	.word	0x08005b39
 8005af0:	08005b4d 	.word	0x08005b4d
 8005af4:	08005b4d 	.word	0x08005b4d
 8005af8:	08005b65 	.word	0x08005b65
 8005afc:	08005b65 	.word	0x08005b65
 8005b00:	08005b7d 	.word	0x08005b7d
 8005b04:	08005b7d 	.word	0x08005b7d
 8005b08:	08005b95 	.word	0x08005b95
 8005b0c:	08005b95 	.word	0x08005b95
			case 0:
			case 1: {
				DTime.Hours = DTime.Hours - datetime[selEpochPos];
 8005b10:	7c3a      	ldrb	r2, [r7, #16]
 8005b12:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8005b16:	493c      	ldr	r1, [pc, #240]	@ (8005c08 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x318>)
 8005b18:	56cb      	ldrsb	r3, [r1, r3]
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	743b      	strb	r3, [r7, #16]
				break;
 8005b22:	e044      	b.n	8005bae <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x2be>
			}
			case 2:
			case 3: {
				DTime.Minutes = DTime.Minutes - datetime[selEpochPos];
 8005b24:	7c7a      	ldrb	r2, [r7, #17]
 8005b26:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8005b2a:	4937      	ldr	r1, [pc, #220]	@ (8005c08 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x318>)
 8005b2c:	56cb      	ldrsb	r3, [r1, r3]
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	747b      	strb	r3, [r7, #17]
				break;
 8005b36:	e03a      	b.n	8005bae <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x2be>
			}
			case 4:
			case 5: {
				DTime.Seconds = DTime.Seconds - datetime[selEpochPos];
 8005b38:	7cba      	ldrb	r2, [r7, #18]
 8005b3a:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8005b3e:	4932      	ldr	r1, [pc, #200]	@ (8005c08 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x318>)
 8005b40:	56cb      	ldrsb	r3, [r1, r3]
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	74bb      	strb	r3, [r7, #18]
				break;
 8005b4a:	e030      	b.n	8005bae <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x2be>
			}
			case 6:
			case 7: {
				DDate.Date = DDate.Date - datetime[selEpochPos];
 8005b4c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8005b50:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8005b54:	492c      	ldr	r1, [pc, #176]	@ (8005c08 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x318>)
 8005b56:	56cb      	ldrsb	r3, [r1, r3]
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	1ad3      	subs	r3, r2, r3
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				break;
 8005b62:	e024      	b.n	8005bae <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x2be>
			}
			case 8:
			case 9: {
				DDate.Month = DDate.Month - datetime[selEpochPos];
 8005b64:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8005b68:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8005b6c:	4926      	ldr	r1, [pc, #152]	@ (8005c08 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x318>)
 8005b6e:	56cb      	ldrsb	r3, [r1, r3]
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	1ad3      	subs	r3, r2, r3
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
				break;
 8005b7a:	e018      	b.n	8005bae <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x2be>
			}
			case 10:
			case 11: {
				DDate.Year = DDate.Year - datetime[selEpochPos];
 8005b7c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8005b80:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8005b84:	4920      	ldr	r1, [pc, #128]	@ (8005c08 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x318>)
 8005b86:	56cb      	ldrsb	r3, [r1, r3]
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	1ad3      	subs	r3, r2, r3
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				break;
 8005b92:	e00c      	b.n	8005bae <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x2be>
			}
			case 12:
			case 13: {
				timezone = timezone - datetime[selEpochPos];
 8005b94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b98:	b2da      	uxtb	r2, r3
 8005b9a:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8005b9e:	491a      	ldr	r1, [pc, #104]	@ (8005c08 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x318>)
 8005ba0:	56cb      	ldrsb	r3, [r1, r3]
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	b25b      	sxtb	r3, r3
 8005baa:	73fb      	strb	r3, [r7, #15]
				break;
 8005bac:	bf00      	nop

			}

			}

			break;
 8005bae:	e087      	b.n	8005cc0 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3d0>
		}

		case button::btncodes::cUP_BT: {
			switch (selEpochPos) {
 8005bb0:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8005bb4:	2b0d      	cmp	r3, #13
 8005bb6:	f200 8085 	bhi.w	8005cc4 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3d4>
 8005bba:	a201      	add	r2, pc, #4	@ (adr r2, 8005bc0 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x2d0>)
 8005bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc0:	08005c0d 	.word	0x08005c0d
 8005bc4:	08005c0d 	.word	0x08005c0d
 8005bc8:	08005c21 	.word	0x08005c21
 8005bcc:	08005c21 	.word	0x08005c21
 8005bd0:	08005c35 	.word	0x08005c35
 8005bd4:	08005c35 	.word	0x08005c35
 8005bd8:	08005c49 	.word	0x08005c49
 8005bdc:	08005c49 	.word	0x08005c49
 8005be0:	08005c61 	.word	0x08005c61
 8005be4:	08005c61 	.word	0x08005c61
 8005be8:	08005c79 	.word	0x08005c79
 8005bec:	08005c79 	.word	0x08005c79
 8005bf0:	08005c91 	.word	0x08005c91
 8005bf4:	08005c91 	.word	0x08005c91
 8005bf8:	200018dc 	.word	0x200018dc
 8005bfc:	08015344 	.word	0x08015344
 8005c00:	08014664 	.word	0x08014664
 8005c04:	0801467c 	.word	0x0801467c
 8005c08:	20000270 	.word	0x20000270
			case 0:
			case 1: {
				DTime.Hours = DTime.Hours + datetime[selEpochPos];
 8005c0c:	7c3a      	ldrb	r2, [r7, #16]
 8005c0e:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8005c12:	495a      	ldr	r1, [pc, #360]	@ (8005d7c <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x48c>)
 8005c14:	56cb      	ldrsb	r3, [r1, r3]
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	4413      	add	r3, r2
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	743b      	strb	r3, [r7, #16]
				break;
 8005c1e:	e044      	b.n	8005caa <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3ba>
			}
			case 2:
			case 3: {
				DTime.Minutes = DTime.Minutes + datetime[selEpochPos];
 8005c20:	7c7a      	ldrb	r2, [r7, #17]
 8005c22:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8005c26:	4955      	ldr	r1, [pc, #340]	@ (8005d7c <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x48c>)
 8005c28:	56cb      	ldrsb	r3, [r1, r3]
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	4413      	add	r3, r2
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	747b      	strb	r3, [r7, #17]
				break;
 8005c32:	e03a      	b.n	8005caa <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3ba>
			}
			case 4:
			case 5: {
				DTime.Seconds = DTime.Seconds + datetime[selEpochPos];
 8005c34:	7cba      	ldrb	r2, [r7, #18]
 8005c36:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8005c3a:	4950      	ldr	r1, [pc, #320]	@ (8005d7c <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x48c>)
 8005c3c:	56cb      	ldrsb	r3, [r1, r3]
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	4413      	add	r3, r2
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	74bb      	strb	r3, [r7, #18]
				break;
 8005c46:	e030      	b.n	8005caa <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3ba>
			}
			case 6:
			case 7: {
				DDate.Date = DDate.Date + datetime[selEpochPos];
 8005c48:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8005c4c:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8005c50:	494a      	ldr	r1, [pc, #296]	@ (8005d7c <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x48c>)
 8005c52:	56cb      	ldrsb	r3, [r1, r3]
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	4413      	add	r3, r2
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				break;
 8005c5e:	e024      	b.n	8005caa <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3ba>
			}
			case 8:
			case 9: {
				DDate.Month = DDate.Month + datetime[selEpochPos];
 8005c60:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8005c64:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8005c68:	4944      	ldr	r1, [pc, #272]	@ (8005d7c <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x48c>)
 8005c6a:	56cb      	ldrsb	r3, [r1, r3]
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	4413      	add	r3, r2
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
				break;
 8005c76:	e018      	b.n	8005caa <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3ba>
			}
			case 10:
			case 11: {
				DDate.Year = DDate.Year + datetime[selEpochPos];
 8005c78:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8005c7c:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8005c80:	493e      	ldr	r1, [pc, #248]	@ (8005d7c <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x48c>)
 8005c82:	56cb      	ldrsb	r3, [r1, r3]
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	4413      	add	r3, r2
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				break;
 8005c8e:	e00c      	b.n	8005caa <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3ba>
			}
			case 12:
			case 13: {
				timezone = timezone + datetime[selEpochPos];
 8005c90:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8005c94:	4a39      	ldr	r2, [pc, #228]	@ (8005d7c <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x48c>)
 8005c96:	56d3      	ldrsb	r3, [r2, r3]
 8005c98:	b2da      	uxtb	r2, r3
 8005c9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	4413      	add	r3, r2
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	b25b      	sxtb	r3, r3
 8005ca6:	73fb      	strb	r3, [r7, #15]
				break;
 8005ca8:	bf00      	nop
			}

			}

			break;
 8005caa:	e00b      	b.n	8005cc4 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3d4>
		}

		case button::btncodes::cEnter_BT: {

			stmRTC.setTime(&DDate, &DTime, timezone);
 8005cac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cb0:	f107 0210 	add.w	r2, r7, #16
 8005cb4:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8005cb8:	4831      	ldr	r0, [pc, #196]	@ (8005d80 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x490>)
 8005cba:	f7fe fd3f 	bl	800473c <_ZN10System_rtc6stmRTC7setTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefa>

			break;
 8005cbe:	e002      	b.n	8005cc6 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3d6>
			break;
 8005cc0:	bf00      	nop
 8005cc2:	e000      	b.n	8005cc6 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3d6>
			break;
 8005cc4:	bf00      	nop
		}

		}

		selEpochPos = selEpochPos % 14;
 8005cc6:	f997 2067 	ldrsb.w	r2, [r7, #103]	@ 0x67
 8005cca:	4b2e      	ldr	r3, [pc, #184]	@ (8005d84 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x494>)
 8005ccc:	fb83 1302 	smull	r1, r3, r3, r2
 8005cd0:	4413      	add	r3, r2
 8005cd2:	10d9      	asrs	r1, r3, #3
 8005cd4:	17d3      	asrs	r3, r2, #31
 8005cd6:	1ac9      	subs	r1, r1, r3
 8005cd8:	460b      	mov	r3, r1
 8005cda:	00db      	lsls	r3, r3, #3
 8005cdc:	1a5b      	subs	r3, r3, r1
 8005cde:	005b      	lsls	r3, r3, #1
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		prevselPos = prevselPos % 20;
 8005ce6:	f997 2066 	ldrsb.w	r2, [r7, #102]	@ 0x66
 8005cea:	4b27      	ldr	r3, [pc, #156]	@ (8005d88 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x498>)
 8005cec:	fb83 1302 	smull	r1, r3, r3, r2
 8005cf0:	10d9      	asrs	r1, r3, #3
 8005cf2:	17d3      	asrs	r3, r2, #31
 8005cf4:	1ac9      	subs	r1, r1, r3
 8005cf6:	460b      	mov	r3, r1
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	440b      	add	r3, r1
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	1ad3      	subs	r3, r2, r3
 8005d00:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66

		if (DTime.Hours > 24) {
 8005d04:	7c3b      	ldrb	r3, [r7, #16]
 8005d06:	2b18      	cmp	r3, #24
 8005d08:	d901      	bls.n	8005d0e <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x41e>
			DTime.Hours = 24;
 8005d0a:	2318      	movs	r3, #24
 8005d0c:	743b      	strb	r3, [r7, #16]
		}
		if (DTime.Minutes > 59) {
 8005d0e:	7c7b      	ldrb	r3, [r7, #17]
 8005d10:	2b3b      	cmp	r3, #59	@ 0x3b
 8005d12:	d901      	bls.n	8005d18 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x428>
			DTime.Minutes = 59;
 8005d14:	233b      	movs	r3, #59	@ 0x3b
 8005d16:	747b      	strb	r3, [r7, #17]
		}
		if (DTime.Seconds > 59) {
 8005d18:	7cbb      	ldrb	r3, [r7, #18]
 8005d1a:	2b3b      	cmp	r3, #59	@ 0x3b
 8005d1c:	d901      	bls.n	8005d22 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x432>
			DTime.Seconds = 59;
 8005d1e:	233b      	movs	r3, #59	@ 0x3b
 8005d20:	74bb      	strb	r3, [r7, #18]
		}

		if (DDate.Date > 31) {
 8005d22:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005d26:	2b1f      	cmp	r3, #31
 8005d28:	d902      	bls.n	8005d30 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x440>
			DDate.Date = 31;
 8005d2a:	231f      	movs	r3, #31
 8005d2c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		}

		if (DDate.Month > 12) {
 8005d30:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005d34:	2b0c      	cmp	r3, #12
 8005d36:	d902      	bls.n	8005d3e <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x44e>
			DDate.Month = 12;
 8005d38:	230c      	movs	r3, #12
 8005d3a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		}

		if (DDate.Year > 99) {
 8005d3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005d42:	2b63      	cmp	r3, #99	@ 0x63
 8005d44:	d902      	bls.n	8005d4c <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x45c>
			DDate.Year = 99;
 8005d46:	2363      	movs	r3, #99	@ 0x63
 8005d48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		}

		if (timezone > 13) {
 8005d4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d50:	2b0d      	cmp	r3, #13
 8005d52:	dd01      	ble.n	8005d58 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x468>
			timezone = 13;
 8005d54:	230d      	movs	r3, #13
 8005d56:	73fb      	strb	r3, [r7, #15]
		}
		if (timezone < -11) {
 8005d58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d5c:	f113 0f0b 	cmn.w	r3, #11
 8005d60:	da01      	bge.n	8005d66 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x476>
			timezone = -11;
 8005d62:	23f5      	movs	r3, #245	@ 0xf5
 8005d64:	73fb      	strb	r3, [r7, #15]

		}

	} while (btncodes != button::btncodes::cEnter_BT
			&& btncodes != button::btncodes::cLFT_BT);
 8005d66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d68:	2b0a      	cmp	r3, #10
 8005d6a:	d003      	beq.n	8005d74 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x484>
 8005d6c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d6e:	2b3c      	cmp	r3, #60	@ 0x3c
 8005d70:	f47f add5 	bne.w	800591e <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x2e>

}
 8005d74:	bf00      	nop
 8005d76:	376c      	adds	r7, #108	@ 0x6c
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d7c:	20000270 	.word	0x20000270
 8005d80:	200018dc 	.word	0x200018dc
 8005d84:	92492493 	.word	0x92492493
 8005d88:	66666667 	.word	0x66666667

08005d8c <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct>:

void UI::UI_Subs::SetFuelMeas(u8g2_t *u8g2) {
 8005d8c:	b5b0      	push	{r4, r5, r7, lr}
 8005d8e:	b0a2      	sub	sp, #136	@ 0x88
 8005d90:	af02      	add	r7, sp, #8
 8005d92:	6078      	str	r0, [r7, #4]
	enum button::btncodes btncodes;
	float zeroSpan = 00.0;
 8005d94:	f04f 0300 	mov.w	r3, #0
 8005d98:	677b      	str	r3, [r7, #116]	@ 0x74
	float fullSpan = 00.0;
 8005d9a:	f04f 0300 	mov.w	r3, #0
 8005d9e:	673b      	str	r3, [r7, #112]	@ 0x70
	liquidSensor.getParameters(&zeroSpan, &fullSpan);
 8005da0:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8005da4:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8005da8:	4619      	mov	r1, r3
 8005daa:	48aa      	ldr	r0, [pc, #680]	@ (8006054 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x2c8>)
 8005dac:	f7fe f9f7 	bl	800419e <_ZN17sensor_liquidMeas12liquidSensor13getParametersEPfS1_>

	char headings[50];
	char buffer[50];

	uint8_t cursor = 0;
 8005db0:	2300      	movs	r3, #0
 8005db2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	uint8_t cursorPos = 0;
 8005db6:	2300      	movs	r3, #0
 8005db8:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
	do {
		button::resetCode(button::btncodes::cNONE);
 8005dbc:	2000      	movs	r0, #0
 8005dbe:	f000 fa89 	bl	80062d4 <_ZN6button9resetCodeENS_8btncodesE>
		do {
			u8g2_ClearBuffer(u8g2);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 fcd5 	bl	8006772 <u8g2_ClearBuffer>
			u8g2_SetFontMode(u8g2, 1);
 8005dc8:	2101      	movs	r1, #1
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f001 f991 	bl	80070f2 <u8g2_SetFontMode>
			u8g2_SetDrawColor(u8g2, 2);
 8005dd0:	2102      	movs	r1, #2
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f001 fc1b 	bl	800760e <u8g2_SetDrawColor>
			u8g2_SetFont(u8g2, u8g2_font_5x8_mf);
 8005dd8:	499f      	ldr	r1, [pc, #636]	@ (8006058 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x2cc>)
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f001 faea 	bl	80073b4 <u8g2_SetFont>

			u8g2_DrawXBM(u8g2, 104, 0, imgcont::SettingsFuelTank.w,
 8005de0:	4b9e      	ldr	r3, [pc, #632]	@ (800605c <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x2d0>)
 8005de2:	7919      	ldrb	r1, [r3, #4]
					imgcont::SettingsFuelTank.h, imgcont::SettingsFuelTank.img);
 8005de4:	4b9d      	ldr	r3, [pc, #628]	@ (800605c <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x2d0>)
 8005de6:	795b      	ldrb	r3, [r3, #5]
 8005de8:	4a9c      	ldr	r2, [pc, #624]	@ (800605c <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x2d0>)
 8005dea:	6812      	ldr	r2, [r2, #0]
			u8g2_DrawXBM(u8g2, 104, 0, imgcont::SettingsFuelTank.w,
 8005dec:	9201      	str	r2, [sp, #4]
 8005dee:	9300      	str	r3, [sp, #0]
 8005df0:	460b      	mov	r3, r1
 8005df2:	2200      	movs	r2, #0
 8005df4:	2168      	movs	r1, #104	@ 0x68
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 fc42 	bl	8006680 <u8g2_DrawXBM>

			std::sprintf(headings, "ZeroSpan | FullSpan");
 8005dfc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8005e00:	4997      	ldr	r1, [pc, #604]	@ (8006060 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x2d4>)
 8005e02:	4618      	mov	r0, r3
 8005e04:	f00b fe82 	bl	8011b0c <siprintf>
			u8g2_DrawStr(u8g2, 5, 10, headings);
 8005e08:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8005e0c:	220a      	movs	r2, #10
 8005e0e:	2105      	movs	r1, #5
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f001 fa2d 	bl	8007270 <u8g2_DrawStr>
			std::sprintf(buffer, "%04.1f | %04.1f", zeroSpan, fullSpan);
 8005e16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f7fa fb95 	bl	8000548 <__aeabi_f2d>
 8005e1e:	4604      	mov	r4, r0
 8005e20:	460d      	mov	r5, r1
 8005e22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005e24:	4618      	mov	r0, r3
 8005e26:	f7fa fb8f 	bl	8000548 <__aeabi_f2d>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	f107 0008 	add.w	r0, r7, #8
 8005e32:	e9cd 2300 	strd	r2, r3, [sp]
 8005e36:	4622      	mov	r2, r4
 8005e38:	462b      	mov	r3, r5
 8005e3a:	498a      	ldr	r1, [pc, #552]	@ (8006064 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x2d8>)
 8005e3c:	f00b fe66 	bl	8011b0c <siprintf>
			u8g2_DrawStr(u8g2, 25, 20, buffer);
 8005e40:	f107 0308 	add.w	r3, r7, #8
 8005e44:	2214      	movs	r2, #20
 8005e46:	2119      	movs	r1, #25
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f001 fa11 	bl	8007270 <u8g2_DrawStr>

			u8g2_DrawBox(u8g2, 25 + (5 * (cursorPos)), 12, 5, 9);
 8005e4e:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8005e52:	461a      	mov	r2, r3
 8005e54:	0092      	lsls	r2, r2, #2
 8005e56:	4413      	add	r3, r2
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	3319      	adds	r3, #25
 8005e5c:	b2d9      	uxtb	r1, r3
 8005e5e:	2309      	movs	r3, #9
 8005e60:	9300      	str	r3, [sp, #0]
 8005e62:	2305      	movs	r3, #5
 8005e64:	220c      	movs	r2, #12
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 fc4d 	bl	8006706 <u8g2_DrawBox>



			UI::UI_helper::SubMenuControlInfo(u8g2);
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 f981 	bl	8006174 <_ZN2UI9UI_helper18SubMenuControlInfoEP11u8g2_struct>
			u8g2_SendBuffer(u8g2);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 fcf0 	bl	8006858 <u8g2_SendBuffer>
			btncodes = button::get_event();
 8005e78:	f000 fa00 	bl	800627c <_ZN6button9get_eventEv>
 8005e7c:	67b8      	str	r0, [r7, #120]	@ 0x78
		} while (btncodes == button::btncodes::cNONE);
 8005e7e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d09e      	beq.n	8005dc2 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x36>

		switch (btncodes) {
 8005e84:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e86:	2b32      	cmp	r3, #50	@ 0x32
 8005e88:	d012      	beq.n	8005eb0 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x124>
 8005e8a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e8c:	2b32      	cmp	r3, #50	@ 0x32
 8005e8e:	f300 80c2 	bgt.w	8006016 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x28a>
 8005e92:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e94:	2b28      	cmp	r3, #40	@ 0x28
 8005e96:	d039      	beq.n	8005f0c <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x180>
 8005e98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e9a:	2b28      	cmp	r3, #40	@ 0x28
 8005e9c:	f300 80bb 	bgt.w	8006016 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x28a>
 8005ea0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ea2:	2b0a      	cmp	r3, #10
 8005ea4:	f000 80a8 	beq.w	8005ff8 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x26c>
 8005ea8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005eaa:	2b1e      	cmp	r3, #30
 8005eac:	d068      	beq.n	8005f80 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x1f4>
 8005eae:	e0b2      	b.n	8006016 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x28a>

		case button::btncodes::cRGHT_BT: {
			cursor++;
 8005eb0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if(cursor == 2)
 8005eba:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	d103      	bne.n	8005eca <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x13e>
			{
				cursorPos = 3;
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
			else {

				cursorPos = cursor;
			}

			break;
 8005ec8:	e0a5      	b.n	8006016 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x28a>
			else if(cursor == 3)
 8005eca:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8005ece:	2b03      	cmp	r3, #3
 8005ed0:	d103      	bne.n	8005eda <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x14e>
				cursorPos = 7;
 8005ed2:	2307      	movs	r3, #7
 8005ed4:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
			break;
 8005ed8:	e09d      	b.n	8006016 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x28a>
			else if(cursor > 3)
 8005eda:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8005ede:	2b03      	cmp	r3, #3
 8005ee0:	d90f      	bls.n	8005f02 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x176>
				if(cursor > 4)
 8005ee2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8005ee6:	2b04      	cmp	r3, #4
 8005ee8:	d905      	bls.n	8005ef6 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x16a>
					cursorPos = cursorPos + 2;
 8005eea:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8005eee:	3302      	adds	r3, #2
 8005ef0:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
			break;
 8005ef4:	e08f      	b.n	8006016 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x28a>
					cursorPos = cursorPos + 1;
 8005ef6:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8005efa:	3301      	adds	r3, #1
 8005efc:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
			break;
 8005f00:	e089      	b.n	8006016 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x28a>
				cursorPos = cursor;
 8005f02:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8005f06:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
			break;
 8005f0a:	e084      	b.n	8006016 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x28a>
		}

		case button::btncodes::cDWN_BT: {
			if(cursor < 3)
 8005f0c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8005f10:	2b02      	cmp	r3, #2
 8005f12:	d818      	bhi.n	8005f46 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x1ba>
			{
				zeroSpan = zeroSpan - SpanSetting[cursor];
 8005f14:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8005f18:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8005f1c:	4a52      	ldr	r2, [pc, #328]	@ (8006068 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x2dc>)
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	4413      	add	r3, r2
 8005f22:	edd3 7a00 	vldr	s15, [r3]
 8005f26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f2a:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
				if(zeroSpan < 0)
 8005f2e:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8005f32:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f3a:	d400      	bmi.n	8005f3e <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x1b2>
				{
					fullSpan = 0.0;
				}
			}

			break;
 8005f3c:	e068      	b.n	8006010 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x284>
					zeroSpan = 0.0;
 8005f3e:	f04f 0300 	mov.w	r3, #0
 8005f42:	677b      	str	r3, [r7, #116]	@ 0x74
			break;
 8005f44:	e064      	b.n	8006010 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x284>
			else if(cursor >=3 )
 8005f46:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8005f4a:	2b02      	cmp	r3, #2
 8005f4c:	d960      	bls.n	8006010 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x284>
				fullSpan = fullSpan - SpanSetting[cursor];
 8005f4e:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8005f52:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8005f56:	4a44      	ldr	r2, [pc, #272]	@ (8006068 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x2dc>)
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	4413      	add	r3, r2
 8005f5c:	edd3 7a00 	vldr	s15, [r3]
 8005f60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f64:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
				if(fullSpan < 0)
 8005f68:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8005f6c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f74:	d400      	bmi.n	8005f78 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x1ec>
			break;
 8005f76:	e04b      	b.n	8006010 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x284>
					fullSpan = 0.0;
 8005f78:	f04f 0300 	mov.w	r3, #0
 8005f7c:	673b      	str	r3, [r7, #112]	@ 0x70
			break;
 8005f7e:	e047      	b.n	8006010 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x284>
		}

		case button::btncodes::cUP_BT: {
			if(cursor < 3)
 8005f80:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8005f84:	2b02      	cmp	r3, #2
 8005f86:	d819      	bhi.n	8005fbc <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x230>
			{
				zeroSpan = zeroSpan + SpanSetting[cursor];
 8005f88:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8005f8c:	4a36      	ldr	r2, [pc, #216]	@ (8006068 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x2dc>)
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	4413      	add	r3, r2
 8005f92:	ed93 7a00 	vldr	s14, [r3]
 8005f96:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8005f9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f9e:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74

				if(zeroSpan > 99)
 8005fa2:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8005fa6:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800606c <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x2e0>
 8005faa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fb2:	dc00      	bgt.n	8005fb6 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x22a>
				{
					fullSpan = 99.0;
				}
			}

			break;
 8005fb4:	e02e      	b.n	8006014 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x288>
					zeroSpan = 99.0;
 8005fb6:	4b2e      	ldr	r3, [pc, #184]	@ (8006070 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x2e4>)
 8005fb8:	677b      	str	r3, [r7, #116]	@ 0x74
			break;
 8005fba:	e02b      	b.n	8006014 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x288>
			else if(cursor >=3 )
 8005fbc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8005fc0:	2b02      	cmp	r3, #2
 8005fc2:	d927      	bls.n	8006014 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x288>
				fullSpan = fullSpan + SpanSetting[cursor];
 8005fc4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8005fc8:	4a27      	ldr	r2, [pc, #156]	@ (8006068 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x2dc>)
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	4413      	add	r3, r2
 8005fce:	ed93 7a00 	vldr	s14, [r3]
 8005fd2:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8005fd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005fda:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
				if(fullSpan > 99)
 8005fde:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8005fe2:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800606c <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x2e0>
 8005fe6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fee:	dc00      	bgt.n	8005ff2 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x266>
			break;
 8005ff0:	e010      	b.n	8006014 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x288>
					fullSpan = 99.0;
 8005ff2:	4b1f      	ldr	r3, [pc, #124]	@ (8006070 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x2e4>)
 8005ff4:	673b      	str	r3, [r7, #112]	@ 0x70
			break;
 8005ff6:	e00d      	b.n	8006014 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x288>
		}

		case button::btncodes::cEnter_BT: {

			liquidSensor.setParameters(zeroSpan, fullSpan);
 8005ff8:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8005ffc:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8006000:	eef0 0a47 	vmov.f32	s1, s14
 8006004:	eeb0 0a67 	vmov.f32	s0, s15
 8006008:	4812      	ldr	r0, [pc, #72]	@ (8006054 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x2c8>)
 800600a:	f7fe f8a2 	bl	8004152 <_ZN17sensor_liquidMeas12liquidSensor13setParametersEff>

			break;
 800600e:	e002      	b.n	8006016 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x28a>
			break;
 8006010:	bf00      	nop
 8006012:	e000      	b.n	8006016 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x28a>
			break;
 8006014:	bf00      	nop
		}

		}

		cursor = cursor % 6;
 8006016:	f897 207f 	ldrb.w	r2, [r7, #127]	@ 0x7f
 800601a:	4b16      	ldr	r3, [pc, #88]	@ (8006074 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x2e8>)
 800601c:	fba3 1302 	umull	r1, r3, r3, r2
 8006020:	0899      	lsrs	r1, r3, #2
 8006022:	460b      	mov	r3, r1
 8006024:	005b      	lsls	r3, r3, #1
 8006026:	440b      	add	r3, r1
 8006028:	005b      	lsls	r3, r3, #1
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if(cursorPos > 10)
 8006030:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8006034:	2b0a      	cmp	r3, #10
 8006036:	d902      	bls.n	800603e <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x2b2>
		{
			cursorPos = 0;
 8006038:	2300      	movs	r3, #0
 800603a:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
		}
	} while (btncodes != button::btncodes::cEnter_BT
			&& btncodes != button::btncodes::cLFT_BT);
 800603e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006040:	2b0a      	cmp	r3, #10
 8006042:	d003      	beq.n	800604c <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x2c0>
 8006044:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006046:	2b3c      	cmp	r3, #60	@ 0x3c
 8006048:	f47f aeb8 	bne.w	8005dbc <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x30>

}
 800604c:	bf00      	nop
 800604e:	3780      	adds	r7, #128	@ 0x80
 8006050:	46bd      	mov	sp, r7
 8006052:	bdb0      	pop	{r4, r5, r7, pc}
 8006054:	200018ec 	.word	0x200018ec
 8006058:	08015344 	.word	0x08015344
 800605c:	08014f48 	.word	0x08014f48
 8006060:	080146a0 	.word	0x080146a0
 8006064:	080146b4 	.word	0x080146b4
 8006068:	20000280 	.word	0x20000280
 800606c:	42c60000 	.word	0x42c60000
 8006070:	42c60000 	.word	0x42c60000
 8006074:	aaaaaaab 	.word	0xaaaaaaab

08006078 <_ZN2UI9UI_helper10set_UIcodeE6MenuNo>:

enum MenuNo UIcodeStorage;


void UI::UI_helper::set_UIcode(enum MenuNo UIcode)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]

	UIcodeStorage = UIcode;
 8006080:	4a04      	ldr	r2, [pc, #16]	@ (8006094 <_ZN2UI9UI_helper10set_UIcodeE6MenuNo+0x1c>)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6013      	str	r3, [r2, #0]

}
 8006086:	bf00      	nop
 8006088:	370c      	adds	r7, #12
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop
 8006094:	20001a74 	.word	0x20001a74

08006098 <_ZN2UI9UI_helper10get_UIcodeEv>:
enum MenuNo UI::UI_helper::get_UIcode()
{
 8006098:	b480      	push	{r7}
 800609a:	af00      	add	r7, sp, #0
  return UIcodeStorage;
 800609c:	4b03      	ldr	r3, [pc, #12]	@ (80060ac <_ZN2UI9UI_helper10get_UIcodeEv+0x14>)
 800609e:	681b      	ldr	r3, [r3, #0]
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr
 80060aa:	bf00      	nop
 80060ac:	20001a74 	.word	0x20001a74

080060b0 <_ZN2UI9UI_helper16common_iconsMainEP11u8g2_struct>:


void UI::UI_helper::common_iconsMain(u8g2_t *u8g2)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b0a4      	sub	sp, #144	@ 0x90
 80060b4:	af02      	add	r7, sp, #8
 80060b6:	6078      	str	r0, [r7, #4]
	char time[50];
	char date[50];
	RTC_DateTypeDef DDate;
	RTC_TimeTypeDef DTime;
	stmRTC.getTime(&DDate, &DTime, nullptr);
 80060b8:	f107 0208 	add.w	r2, r7, #8
 80060bc:	f107 011c 	add.w	r1, r7, #28
 80060c0:	2300      	movs	r3, #0
 80060c2:	4826      	ldr	r0, [pc, #152]	@ (800615c <_ZN2UI9UI_helper16common_iconsMainEP11u8g2_struct+0xac>)
 80060c4:	f7fe fa49 	bl	800455a <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPm>
	std::sprintf(time, "%02d:%02d:%02d", DTime.Hours, DTime.Minutes,DTime.Seconds);
 80060c8:	7a3b      	ldrb	r3, [r7, #8]
 80060ca:	461a      	mov	r2, r3
 80060cc:	7a7b      	ldrb	r3, [r7, #9]
 80060ce:	4619      	mov	r1, r3
 80060d0:	7abb      	ldrb	r3, [r7, #10]
 80060d2:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 80060d6:	9300      	str	r3, [sp, #0]
 80060d8:	460b      	mov	r3, r1
 80060da:	4921      	ldr	r1, [pc, #132]	@ (8006160 <_ZN2UI9UI_helper16common_iconsMainEP11u8g2_struct+0xb0>)
 80060dc:	f00b fd16 	bl	8011b0c <siprintf>
	std::sprintf(date, "%02d/%02d/%02d", DDate.Date,DDate.Month,DDate.Year);
 80060e0:	7fbb      	ldrb	r3, [r7, #30]
 80060e2:	461a      	mov	r2, r3
 80060e4:	7f7b      	ldrb	r3, [r7, #29]
 80060e6:	4619      	mov	r1, r3
 80060e8:	7ffb      	ldrb	r3, [r7, #31]
 80060ea:	f107 0020 	add.w	r0, r7, #32
 80060ee:	9300      	str	r3, [sp, #0]
 80060f0:	460b      	mov	r3, r1
 80060f2:	491c      	ldr	r1, [pc, #112]	@ (8006164 <_ZN2UI9UI_helper16common_iconsMainEP11u8g2_struct+0xb4>)
 80060f4:	f00b fd0a 	bl	8011b0c <siprintf>
	u8g2_SetFont(u8g2, u8g2_font_5x8_mf);
 80060f8:	491b      	ldr	r1, [pc, #108]	@ (8006168 <_ZN2UI9UI_helper16common_iconsMainEP11u8g2_struct+0xb8>)
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f001 f95a 	bl	80073b4 <u8g2_SetFont>
	u8g2_DrawStr(u8g2, 0, 10, time);
 8006100:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8006104:	220a      	movs	r2, #10
 8006106:	2100      	movs	r1, #0
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f001 f8b1 	bl	8007270 <u8g2_DrawStr>
	u8g2_DrawStr(u8g2, 88, 10, date);
 800610e:	f107 0320 	add.w	r3, r7, #32
 8006112:	220a      	movs	r2, #10
 8006114:	2158      	movs	r1, #88	@ 0x58
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f001 f8aa 	bl	8007270 <u8g2_DrawStr>
	u8g2_DrawXBM(u8g2,55,48,imgcont::setting.w,imgcont::setting.h,imgcont::setting.img);
 800611c:	4b13      	ldr	r3, [pc, #76]	@ (800616c <_ZN2UI9UI_helper16common_iconsMainEP11u8g2_struct+0xbc>)
 800611e:	7919      	ldrb	r1, [r3, #4]
 8006120:	4b12      	ldr	r3, [pc, #72]	@ (800616c <_ZN2UI9UI_helper16common_iconsMainEP11u8g2_struct+0xbc>)
 8006122:	795b      	ldrb	r3, [r3, #5]
 8006124:	4a11      	ldr	r2, [pc, #68]	@ (800616c <_ZN2UI9UI_helper16common_iconsMainEP11u8g2_struct+0xbc>)
 8006126:	6812      	ldr	r2, [r2, #0]
 8006128:	9201      	str	r2, [sp, #4]
 800612a:	9300      	str	r3, [sp, #0]
 800612c:	460b      	mov	r3, r1
 800612e:	2230      	movs	r2, #48	@ 0x30
 8006130:	2137      	movs	r1, #55	@ 0x37
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 faa4 	bl	8006680 <u8g2_DrawXBM>
	u8g2_DrawXBM(u8g2,112,48,imgcont::leftrightArrow.w,imgcont::leftrightArrow.h,imgcont::leftrightArrow.img);
 8006138:	4b0d      	ldr	r3, [pc, #52]	@ (8006170 <_ZN2UI9UI_helper16common_iconsMainEP11u8g2_struct+0xc0>)
 800613a:	7919      	ldrb	r1, [r3, #4]
 800613c:	4b0c      	ldr	r3, [pc, #48]	@ (8006170 <_ZN2UI9UI_helper16common_iconsMainEP11u8g2_struct+0xc0>)
 800613e:	795b      	ldrb	r3, [r3, #5]
 8006140:	4a0b      	ldr	r2, [pc, #44]	@ (8006170 <_ZN2UI9UI_helper16common_iconsMainEP11u8g2_struct+0xc0>)
 8006142:	6812      	ldr	r2, [r2, #0]
 8006144:	9201      	str	r2, [sp, #4]
 8006146:	9300      	str	r3, [sp, #0]
 8006148:	460b      	mov	r3, r1
 800614a:	2230      	movs	r2, #48	@ 0x30
 800614c:	2170      	movs	r1, #112	@ 0x70
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 fa96 	bl	8006680 <u8g2_DrawXBM>

}
 8006154:	bf00      	nop
 8006156:	3788      	adds	r7, #136	@ 0x88
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}
 800615c:	200018dc 	.word	0x200018dc
 8006160:	080146c4 	.word	0x080146c4
 8006164:	080146d4 	.word	0x080146d4
 8006168:	08015344 	.word	0x08015344
 800616c:	08014f00 	.word	0x08014f00
 8006170:	08014f08 	.word	0x08014f08

08006174 <_ZN2UI9UI_helper18SubMenuControlInfoEP11u8g2_struct>:


void UI::UI_helper::SubMenuControlInfo(u8g2_t *u8g2)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b082      	sub	sp, #8
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
	u8g2_SetFont(u8g2, u8g2_font_5x8_mf);
 800617c:	490f      	ldr	r1, [pc, #60]	@ (80061bc <_ZN2UI9UI_helper18SubMenuControlInfoEP11u8g2_struct+0x48>)
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f001 f918 	bl	80073b4 <u8g2_SetFont>
	u8g2_DrawStr(u8g2, 5, 40, "Up/Dn btn -> Edit");
 8006184:	4b0e      	ldr	r3, [pc, #56]	@ (80061c0 <_ZN2UI9UI_helper18SubMenuControlInfoEP11u8g2_struct+0x4c>)
 8006186:	2228      	movs	r2, #40	@ 0x28
 8006188:	2105      	movs	r1, #5
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f001 f870 	bl	8007270 <u8g2_DrawStr>
	u8g2_DrawStr(u8g2, 5, 48, "Rgt btn   -> Cursor");
 8006190:	4b0c      	ldr	r3, [pc, #48]	@ (80061c4 <_ZN2UI9UI_helper18SubMenuControlInfoEP11u8g2_struct+0x50>)
 8006192:	2230      	movs	r2, #48	@ 0x30
 8006194:	2105      	movs	r1, #5
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f001 f86a 	bl	8007270 <u8g2_DrawStr>
	u8g2_DrawStr(u8g2, 5, 56, "Lft btn   -> Exit");
 800619c:	4b0a      	ldr	r3, [pc, #40]	@ (80061c8 <_ZN2UI9UI_helper18SubMenuControlInfoEP11u8g2_struct+0x54>)
 800619e:	2238      	movs	r2, #56	@ 0x38
 80061a0:	2105      	movs	r1, #5
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f001 f864 	bl	8007270 <u8g2_DrawStr>
	u8g2_DrawStr(u8g2, 5, 64, "Entr btn  -> Save");
 80061a8:	4b08      	ldr	r3, [pc, #32]	@ (80061cc <_ZN2UI9UI_helper18SubMenuControlInfoEP11u8g2_struct+0x58>)
 80061aa:	2240      	movs	r2, #64	@ 0x40
 80061ac:	2105      	movs	r1, #5
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f001 f85e 	bl	8007270 <u8g2_DrawStr>
}
 80061b4:	bf00      	nop
 80061b6:	3708      	adds	r7, #8
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}
 80061bc:	08015344 	.word	0x08015344
 80061c0:	080146e4 	.word	0x080146e4
 80061c4:	080146f8 	.word	0x080146f8
 80061c8:	0801470c 	.word	0x0801470c
 80061cc:	08014720 	.word	0x08014720

080061d0 <My_Button_IRQHandlerC>:
#include "System_Rtos.hpp"

extern "C"
{
    void My_Button_IRQHandlerC()
    {
 80061d0:	b580      	push	{r7, lr}
 80061d2:	af00      	add	r7, sp, #0
    	button::btn_irq();
 80061d4:	f000 f88e 	bl	80062f4 <_ZN6button7btn_irqEv>
    }
 80061d8:	bf00      	nop
 80061da:	bd80      	pop	{r7, pc}

080061dc <_ZN6buttonL8setTimerEPm>:

struct Button_t Button_;


static void setTimer(uint32_t* timer)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b082      	sub	sp, #8
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
	*timer = HAL_GetTick();
 80061e4:	f002 fea4 	bl	8008f30 <HAL_GetTick>
 80061e8:	4602      	mov	r2, r0
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	601a      	str	r2, [r3, #0]
}
 80061ee:	bf00      	nop
 80061f0:	3708      	adds	r7, #8
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}

080061f6 <_ZN6buttonL10checkTimerEPmm>:

static uint8_t checkTimer(uint32_t* timer, uint32_t msTime)
{
 80061f6:	b580      	push	{r7, lr}
 80061f8:	b084      	sub	sp, #16
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
 80061fe:	6039      	str	r1, [r7, #0]
	uint8_t ret = RESET;
 8006200:	2300      	movs	r3, #0
 8006202:	73fb      	strb	r3, [r7, #15]
	ret = ((HAL_GetTick() - *timer) > msTime)  ? ENABLE : DISABLE;
 8006204:	f002 fe94 	bl	8008f30 <HAL_GetTick>
 8006208:	4602      	mov	r2, r0
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	1ad3      	subs	r3, r2, r3
 8006210:	683a      	ldr	r2, [r7, #0]
 8006212:	429a      	cmp	r2, r3
 8006214:	d201      	bcs.n	800621a <_ZN6buttonL10checkTimerEPmm+0x24>
 8006216:	2301      	movs	r3, #1
 8006218:	e000      	b.n	800621c <_ZN6buttonL10checkTimerEPmm+0x26>
 800621a:	2300      	movs	r3, #0
 800621c:	73fb      	strb	r3, [r7, #15]
	return ret;
 800621e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006220:	4618      	mov	r0, r3
 8006222:	3710      	adds	r7, #16
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <_ZN6button8btn_initEv>:


void btn_init()
{
 8006228:	b580      	push	{r7, lr}
 800622a:	af00      	add	r7, sp, #0
	eventsRTOS.eventCreate();
 800622c:	4808      	ldr	r0, [pc, #32]	@ (8006250 <_ZN6button8btn_initEv+0x28>)
 800622e:	f7fe f8fe 	bl	800442e <_ZN11System_Rtos15freertos_events11eventCreateEv>

	Button_.btn_code = button::btncodes::cNONE;
 8006232:	4b08      	ldr	r3, [pc, #32]	@ (8006254 <_ZN6button8btn_initEv+0x2c>)
 8006234:	2200      	movs	r2, #0
 8006236:	60da      	str	r2, [r3, #12]
	Button_.buttonFlag = 1;
 8006238:	4b06      	ldr	r3, [pc, #24]	@ (8006254 <_ZN6button8btn_initEv+0x2c>)
 800623a:	2201      	movs	r2, #1
 800623c:	715a      	strb	r2, [r3, #5]
	Button_.buttonTimer = 0;
 800623e:	4b05      	ldr	r3, [pc, #20]	@ (8006254 <_ZN6button8btn_initEv+0x2c>)
 8006240:	2200      	movs	r2, #0
 8006242:	601a      	str	r2, [r3, #0]
	Button_.Sel_BT =button_identification::iNONE;
 8006244:	4b03      	ldr	r3, [pc, #12]	@ (8006254 <_ZN6button8btn_initEv+0x2c>)
 8006246:	2200      	movs	r2, #0
 8006248:	609a      	str	r2, [r3, #8]
}
 800624a:	bf00      	nop
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	20001a78 	.word	0x20001a78
 8006254:	20001a84 	.word	0x20001a84

08006258 <_ZN6button9gen_eventENS_8btncodesE>:
void gen_event(enum btncodes btnCode)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
	Button_.btn_code = btnCode;
 8006260:	4a04      	ldr	r2, [pc, #16]	@ (8006274 <_ZN6button9gen_eventENS_8btncodesE+0x1c>)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	60d3      	str	r3, [r2, #12]
	eventsRTOS.eventGive();
 8006266:	4804      	ldr	r0, [pc, #16]	@ (8006278 <_ZN6button9gen_eventENS_8btncodesE+0x20>)
 8006268:	f7fe f8ee 	bl	8004448 <_ZN11System_Rtos15freertos_events9eventGiveEv>
}
 800626c:	bf00      	nop
 800626e:	3708      	adds	r7, #8
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}
 8006274:	20001a84 	.word	0x20001a84
 8006278:	20001a78 	.word	0x20001a78

0800627c <_ZN6button9get_eventEv>:
enum btncodes get_event()
{
 800627c:	b580      	push	{r7, lr}
 800627e:	af00      	add	r7, sp, #0

	eventsRTOS.eventTake();
 8006280:	4803      	ldr	r0, [pc, #12]	@ (8006290 <_ZN6button9get_eventEv+0x14>)
 8006282:	f7fe f91b 	bl	80044bc <_ZN11System_Rtos15freertos_events9eventTakeEv>
	return Button_.btn_code;
 8006286:	4b03      	ldr	r3, [pc, #12]	@ (8006294 <_ZN6button9get_eventEv+0x18>)
 8006288:	68db      	ldr	r3, [r3, #12]

}
 800628a:	4618      	mov	r0, r3
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	20001a78 	.word	0x20001a78
 8006294:	20001a84 	.word	0x20001a84

08006298 <_ZN6button14get_eventTimedEm>:
enum btncodes get_eventTimed(uint32_t time)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
	eventsRTOS.eventTakeTimed(time);
 80062a0:	6879      	ldr	r1, [r7, #4]
 80062a2:	4804      	ldr	r0, [pc, #16]	@ (80062b4 <_ZN6button14get_eventTimedEm+0x1c>)
 80062a4:	f7fe f91c 	bl	80044e0 <_ZN11System_Rtos15freertos_events14eventTakeTimedEm>
	return Button_.btn_code;
 80062a8:	4b03      	ldr	r3, [pc, #12]	@ (80062b8 <_ZN6button14get_eventTimedEm+0x20>)
 80062aa:	68db      	ldr	r3, [r3, #12]
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3708      	adds	r7, #8
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}
 80062b4:	20001a78 	.word	0x20001a78
 80062b8:	20001a84 	.word	0x20001a84

080062bc <_ZN6button8get_codeEv>:

enum btncodes get_code()
{
 80062bc:	b480      	push	{r7}
 80062be:	af00      	add	r7, sp, #0
	return Button_.btn_code;
 80062c0:	4b03      	ldr	r3, [pc, #12]	@ (80062d0 <_ZN6button8get_codeEv+0x14>)
 80062c2:	68db      	ldr	r3, [r3, #12]
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr
 80062ce:	bf00      	nop
 80062d0:	20001a84 	.word	0x20001a84

080062d4 <_ZN6button9resetCodeENS_8btncodesE>:

void resetCode(enum btncodes btnCode)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
	Button_.btn_code = btnCode;
 80062dc:	4a04      	ldr	r2, [pc, #16]	@ (80062f0 <_ZN6button9resetCodeENS_8btncodesE+0x1c>)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	60d3      	str	r3, [r2, #12]
}
 80062e2:	bf00      	nop
 80062e4:	370c      	adds	r7, #12
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr
 80062ee:	bf00      	nop
 80062f0:	20001a84 	.word	0x20001a84

080062f4 <_ZN6button7btn_irqEv>:


void btn_irq()
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	af00      	add	r7, sp, #0
	if (Button_.buttonFlag) {
 80062f8:	4b99      	ldr	r3, [pc, #612]	@ (8006560 <_ZN6button7btn_irqEv+0x26c>)
 80062fa:	795b      	ldrb	r3, [r3, #5]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d06e      	beq.n	80063de <_ZN6button7btn_irqEv+0xea>

         if (!pEnter_BT) {
 8006300:	2104      	movs	r1, #4
 8006302:	4898      	ldr	r0, [pc, #608]	@ (8006564 <_ZN6button7btn_irqEv+0x270>)
 8006304:	f003 fe1c 	bl	8009f40 <HAL_GPIO_ReadPin>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	bf0c      	ite	eq
 800630e:	2301      	moveq	r3, #1
 8006310:	2300      	movne	r3, #0
 8006312:	b2db      	uxtb	r3, r3
 8006314:	2b00      	cmp	r3, #0
 8006316:	d009      	beq.n	800632c <_ZN6button7btn_irqEv+0x38>
				setTimer(&Button_.buttonTimer); //to set debounce
 8006318:	4891      	ldr	r0, [pc, #580]	@ (8006560 <_ZN6button7btn_irqEv+0x26c>)
 800631a:	f7ff ff5f 	bl	80061dc <_ZN6buttonL8setTimerEPm>
				Button_.buttonFlag = RESET;
 800631e:	4b90      	ldr	r3, [pc, #576]	@ (8006560 <_ZN6button7btn_irqEv+0x26c>)
 8006320:	2200      	movs	r2, #0
 8006322:	715a      	strb	r2, [r3, #5]
				Button_.Sel_BT = button_identification::iEnter_BT;
 8006324:	4b8e      	ldr	r3, [pc, #568]	@ (8006560 <_ZN6button7btn_irqEv+0x26c>)
 8006326:	2201      	movs	r2, #1
 8006328:	609a      	str	r2, [r3, #8]
				Button_.Sel_BT = button_identification::iNONE;
				break;
			}
			}
		}
}
 800632a:	e117      	b.n	800655c <_ZN6button7btn_irqEv+0x268>
			}  else if (!pUP_BT) {
 800632c:	2102      	movs	r1, #2
 800632e:	488d      	ldr	r0, [pc, #564]	@ (8006564 <_ZN6button7btn_irqEv+0x270>)
 8006330:	f003 fe06 	bl	8009f40 <HAL_GPIO_ReadPin>
 8006334:	4603      	mov	r3, r0
 8006336:	2b00      	cmp	r3, #0
 8006338:	bf0c      	ite	eq
 800633a:	2301      	moveq	r3, #1
 800633c:	2300      	movne	r3, #0
 800633e:	b2db      	uxtb	r3, r3
 8006340:	2b00      	cmp	r3, #0
 8006342:	d009      	beq.n	8006358 <_ZN6button7btn_irqEv+0x64>
				setTimer(&Button_.buttonTimer); //to set debounce
 8006344:	4886      	ldr	r0, [pc, #536]	@ (8006560 <_ZN6button7btn_irqEv+0x26c>)
 8006346:	f7ff ff49 	bl	80061dc <_ZN6buttonL8setTimerEPm>
				Button_.buttonFlag = RESET;
 800634a:	4b85      	ldr	r3, [pc, #532]	@ (8006560 <_ZN6button7btn_irqEv+0x26c>)
 800634c:	2200      	movs	r2, #0
 800634e:	715a      	strb	r2, [r3, #5]
				Button_.Sel_BT = button_identification::iUP_BT;
 8006350:	4b83      	ldr	r3, [pc, #524]	@ (8006560 <_ZN6button7btn_irqEv+0x26c>)
 8006352:	2203      	movs	r2, #3
 8006354:	609a      	str	r2, [r3, #8]
}
 8006356:	e101      	b.n	800655c <_ZN6button7btn_irqEv+0x268>
			} else if (!pDWN_BT) {
 8006358:	2108      	movs	r1, #8
 800635a:	4882      	ldr	r0, [pc, #520]	@ (8006564 <_ZN6button7btn_irqEv+0x270>)
 800635c:	f003 fdf0 	bl	8009f40 <HAL_GPIO_ReadPin>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	bf0c      	ite	eq
 8006366:	2301      	moveq	r3, #1
 8006368:	2300      	movne	r3, #0
 800636a:	b2db      	uxtb	r3, r3
 800636c:	2b00      	cmp	r3, #0
 800636e:	d009      	beq.n	8006384 <_ZN6button7btn_irqEv+0x90>
				setTimer(&Button_.buttonTimer); //to set debounce
 8006370:	487b      	ldr	r0, [pc, #492]	@ (8006560 <_ZN6button7btn_irqEv+0x26c>)
 8006372:	f7ff ff33 	bl	80061dc <_ZN6buttonL8setTimerEPm>
				Button_.buttonFlag = RESET;
 8006376:	4b7a      	ldr	r3, [pc, #488]	@ (8006560 <_ZN6button7btn_irqEv+0x26c>)
 8006378:	2200      	movs	r2, #0
 800637a:	715a      	strb	r2, [r3, #5]
				Button_.Sel_BT = button_identification::iDWN_BT;
 800637c:	4b78      	ldr	r3, [pc, #480]	@ (8006560 <_ZN6button7btn_irqEv+0x26c>)
 800637e:	2204      	movs	r2, #4
 8006380:	609a      	str	r2, [r3, #8]
}
 8006382:	e0eb      	b.n	800655c <_ZN6button7btn_irqEv+0x268>
			} else if (!pRGHT_BT) {
 8006384:	2110      	movs	r1, #16
 8006386:	4877      	ldr	r0, [pc, #476]	@ (8006564 <_ZN6button7btn_irqEv+0x270>)
 8006388:	f003 fdda 	bl	8009f40 <HAL_GPIO_ReadPin>
 800638c:	4603      	mov	r3, r0
 800638e:	2b00      	cmp	r3, #0
 8006390:	bf0c      	ite	eq
 8006392:	2301      	moveq	r3, #1
 8006394:	2300      	movne	r3, #0
 8006396:	b2db      	uxtb	r3, r3
 8006398:	2b00      	cmp	r3, #0
 800639a:	d009      	beq.n	80063b0 <_ZN6button7btn_irqEv+0xbc>
				setTimer(&Button_.buttonTimer); //to set debounce
 800639c:	4870      	ldr	r0, [pc, #448]	@ (8006560 <_ZN6button7btn_irqEv+0x26c>)
 800639e:	f7ff ff1d 	bl	80061dc <_ZN6buttonL8setTimerEPm>
				Button_.buttonFlag = RESET;
 80063a2:	4b6f      	ldr	r3, [pc, #444]	@ (8006560 <_ZN6button7btn_irqEv+0x26c>)
 80063a4:	2200      	movs	r2, #0
 80063a6:	715a      	strb	r2, [r3, #5]
				Button_.Sel_BT = button_identification::iRGHT_BT;
 80063a8:	4b6d      	ldr	r3, [pc, #436]	@ (8006560 <_ZN6button7btn_irqEv+0x26c>)
 80063aa:	2205      	movs	r2, #5
 80063ac:	609a      	str	r2, [r3, #8]
}
 80063ae:	e0d5      	b.n	800655c <_ZN6button7btn_irqEv+0x268>
			} else if (!pLFT_BT) {
 80063b0:	2120      	movs	r1, #32
 80063b2:	486c      	ldr	r0, [pc, #432]	@ (8006564 <_ZN6button7btn_irqEv+0x270>)
 80063b4:	f003 fdc4 	bl	8009f40 <HAL_GPIO_ReadPin>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	bf0c      	ite	eq
 80063be:	2301      	moveq	r3, #1
 80063c0:	2300      	movne	r3, #0
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	f000 80c9 	beq.w	800655c <_ZN6button7btn_irqEv+0x268>
				setTimer(&Button_.buttonTimer); //to set debounce
 80063ca:	4865      	ldr	r0, [pc, #404]	@ (8006560 <_ZN6button7btn_irqEv+0x26c>)
 80063cc:	f7ff ff06 	bl	80061dc <_ZN6buttonL8setTimerEPm>
				Button_.buttonFlag = RESET;
 80063d0:	4b63      	ldr	r3, [pc, #396]	@ (8006560 <_ZN6button7btn_irqEv+0x26c>)
 80063d2:	2200      	movs	r2, #0
 80063d4:	715a      	strb	r2, [r3, #5]
				Button_.Sel_BT = button_identification::iLFT_BT;
 80063d6:	4b62      	ldr	r3, [pc, #392]	@ (8006560 <_ZN6button7btn_irqEv+0x26c>)
 80063d8:	2206      	movs	r2, #6
 80063da:	609a      	str	r2, [r3, #8]
}
 80063dc:	e0be      	b.n	800655c <_ZN6button7btn_irqEv+0x268>
		} else if ((!Button_.buttonFlag)
 80063de:	4b60      	ldr	r3, [pc, #384]	@ (8006560 <_ZN6button7btn_irqEv+0x26c>)
 80063e0:	795b      	ldrb	r3, [r3, #5]
				&& (checkTimer(&Button_.buttonTimer, 120))) //check debounce
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d108      	bne.n	80063f8 <_ZN6button7btn_irqEv+0x104>
 80063e6:	2178      	movs	r1, #120	@ 0x78
 80063e8:	485d      	ldr	r0, [pc, #372]	@ (8006560 <_ZN6button7btn_irqEv+0x26c>)
 80063ea:	f7ff ff04 	bl	80061f6 <_ZN6buttonL10checkTimerEPmm>
 80063ee:	4603      	mov	r3, r0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d001      	beq.n	80063f8 <_ZN6button7btn_irqEv+0x104>
 80063f4:	2301      	movs	r3, #1
 80063f6:	e000      	b.n	80063fa <_ZN6button7btn_irqEv+0x106>
 80063f8:	2300      	movs	r3, #0
		} else if ((!Button_.buttonFlag)
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	f000 80ae 	beq.w	800655c <_ZN6button7btn_irqEv+0x268>
			switch (Button_.Sel_BT) {
 8006400:	4b57      	ldr	r3, [pc, #348]	@ (8006560 <_ZN6button7btn_irqEv+0x26c>)
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	3b01      	subs	r3, #1
 8006406:	2b05      	cmp	r3, #5
 8006408:	f200 80a1 	bhi.w	800654e <_ZN6button7btn_irqEv+0x25a>
 800640c:	a201      	add	r2, pc, #4	@ (adr r2, 8006414 <_ZN6button7btn_irqEv+0x120>)
 800640e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006412:	bf00      	nop
 8006414:	0800642d 	.word	0x0800642d
 8006418:	0800654f 	.word	0x0800654f
 800641c:	08006467 	.word	0x08006467
 8006420:	080064a1 	.word	0x080064a1
 8006424:	080064db 	.word	0x080064db
 8006428:	08006515 	.word	0x08006515
				if (!pEnter_BT) {
 800642c:	2104      	movs	r1, #4
 800642e:	484d      	ldr	r0, [pc, #308]	@ (8006564 <_ZN6button7btn_irqEv+0x270>)
 8006430:	f003 fd86 	bl	8009f40 <HAL_GPIO_ReadPin>
 8006434:	4603      	mov	r3, r0
 8006436:	2b00      	cmp	r3, #0
 8006438:	bf0c      	ite	eq
 800643a:	2301      	moveq	r3, #1
 800643c:	2300      	movne	r3, #0
 800643e:	b2db      	uxtb	r3, r3
 8006440:	2b00      	cmp	r3, #0
 8006442:	d009      	beq.n	8006458 <_ZN6button7btn_irqEv+0x164>
					Button_.buttonFlag = SET;
 8006444:	4b46      	ldr	r3, [pc, #280]	@ (8006560 <_ZN6button7btn_irqEv+0x26c>)
 8006446:	2201      	movs	r2, #1
 8006448:	715a      	strb	r2, [r3, #5]
					Button_.Sel_BT = button_identification::iNONE;
 800644a:	4b45      	ldr	r3, [pc, #276]	@ (8006560 <_ZN6button7btn_irqEv+0x26c>)
 800644c:	2200      	movs	r2, #0
 800644e:	609a      	str	r2, [r3, #8]
					gen_event(btncodes::cEnter_BT);
 8006450:	200a      	movs	r0, #10
 8006452:	f7ff ff01 	bl	8006258 <_ZN6button9gen_eventENS_8btncodesE>
				break;
 8006456:	e081      	b.n	800655c <_ZN6button7btn_irqEv+0x268>
					Button_.buttonFlag = SET;
 8006458:	4b41      	ldr	r3, [pc, #260]	@ (8006560 <_ZN6button7btn_irqEv+0x26c>)
 800645a:	2201      	movs	r2, #1
 800645c:	715a      	strb	r2, [r3, #5]
					Button_.Sel_BT = button_identification::iNONE;
 800645e:	4b40      	ldr	r3, [pc, #256]	@ (8006560 <_ZN6button7btn_irqEv+0x26c>)
 8006460:	2200      	movs	r2, #0
 8006462:	609a      	str	r2, [r3, #8]
				break;
 8006464:	e07a      	b.n	800655c <_ZN6button7btn_irqEv+0x268>
				if (!pUP_BT) {
 8006466:	2102      	movs	r1, #2
 8006468:	483e      	ldr	r0, [pc, #248]	@ (8006564 <_ZN6button7btn_irqEv+0x270>)
 800646a:	f003 fd69 	bl	8009f40 <HAL_GPIO_ReadPin>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	bf0c      	ite	eq
 8006474:	2301      	moveq	r3, #1
 8006476:	2300      	movne	r3, #0
 8006478:	b2db      	uxtb	r3, r3
 800647a:	2b00      	cmp	r3, #0
 800647c:	d009      	beq.n	8006492 <_ZN6button7btn_irqEv+0x19e>
					Button_.buttonFlag = SET;
 800647e:	4b38      	ldr	r3, [pc, #224]	@ (8006560 <_ZN6button7btn_irqEv+0x26c>)
 8006480:	2201      	movs	r2, #1
 8006482:	715a      	strb	r2, [r3, #5]
					Button_.Sel_BT = button_identification::iNONE;
 8006484:	4b36      	ldr	r3, [pc, #216]	@ (8006560 <_ZN6button7btn_irqEv+0x26c>)
 8006486:	2200      	movs	r2, #0
 8006488:	609a      	str	r2, [r3, #8]
					gen_event(btncodes::cUP_BT);
 800648a:	201e      	movs	r0, #30
 800648c:	f7ff fee4 	bl	8006258 <_ZN6button9gen_eventENS_8btncodesE>
				break;
 8006490:	e064      	b.n	800655c <_ZN6button7btn_irqEv+0x268>
					Button_.buttonFlag = SET;
 8006492:	4b33      	ldr	r3, [pc, #204]	@ (8006560 <_ZN6button7btn_irqEv+0x26c>)
 8006494:	2201      	movs	r2, #1
 8006496:	715a      	strb	r2, [r3, #5]
					Button_.Sel_BT = button_identification::iNONE;
 8006498:	4b31      	ldr	r3, [pc, #196]	@ (8006560 <_ZN6button7btn_irqEv+0x26c>)
 800649a:	2200      	movs	r2, #0
 800649c:	609a      	str	r2, [r3, #8]
				break;
 800649e:	e05d      	b.n	800655c <_ZN6button7btn_irqEv+0x268>
				if (!pDWN_BT) {
 80064a0:	2108      	movs	r1, #8
 80064a2:	4830      	ldr	r0, [pc, #192]	@ (8006564 <_ZN6button7btn_irqEv+0x270>)
 80064a4:	f003 fd4c 	bl	8009f40 <HAL_GPIO_ReadPin>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	bf0c      	ite	eq
 80064ae:	2301      	moveq	r3, #1
 80064b0:	2300      	movne	r3, #0
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d009      	beq.n	80064cc <_ZN6button7btn_irqEv+0x1d8>
					Button_.buttonFlag = SET;
 80064b8:	4b29      	ldr	r3, [pc, #164]	@ (8006560 <_ZN6button7btn_irqEv+0x26c>)
 80064ba:	2201      	movs	r2, #1
 80064bc:	715a      	strb	r2, [r3, #5]
					Button_.Sel_BT = button_identification::iNONE;
 80064be:	4b28      	ldr	r3, [pc, #160]	@ (8006560 <_ZN6button7btn_irqEv+0x26c>)
 80064c0:	2200      	movs	r2, #0
 80064c2:	609a      	str	r2, [r3, #8]
					gen_event(btncodes::cDWN_BT);
 80064c4:	2028      	movs	r0, #40	@ 0x28
 80064c6:	f7ff fec7 	bl	8006258 <_ZN6button9gen_eventENS_8btncodesE>
				break;
 80064ca:	e047      	b.n	800655c <_ZN6button7btn_irqEv+0x268>
					Button_.buttonFlag = SET;
 80064cc:	4b24      	ldr	r3, [pc, #144]	@ (8006560 <_ZN6button7btn_irqEv+0x26c>)
 80064ce:	2201      	movs	r2, #1
 80064d0:	715a      	strb	r2, [r3, #5]
					Button_.Sel_BT = button_identification::iNONE;
 80064d2:	4b23      	ldr	r3, [pc, #140]	@ (8006560 <_ZN6button7btn_irqEv+0x26c>)
 80064d4:	2200      	movs	r2, #0
 80064d6:	609a      	str	r2, [r3, #8]
				break;
 80064d8:	e040      	b.n	800655c <_ZN6button7btn_irqEv+0x268>
				if (!pRGHT_BT) {
 80064da:	2110      	movs	r1, #16
 80064dc:	4821      	ldr	r0, [pc, #132]	@ (8006564 <_ZN6button7btn_irqEv+0x270>)
 80064de:	f003 fd2f 	bl	8009f40 <HAL_GPIO_ReadPin>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	bf0c      	ite	eq
 80064e8:	2301      	moveq	r3, #1
 80064ea:	2300      	movne	r3, #0
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d009      	beq.n	8006506 <_ZN6button7btn_irqEv+0x212>
					Button_.buttonFlag = SET;
 80064f2:	4b1b      	ldr	r3, [pc, #108]	@ (8006560 <_ZN6button7btn_irqEv+0x26c>)
 80064f4:	2201      	movs	r2, #1
 80064f6:	715a      	strb	r2, [r3, #5]
					Button_.Sel_BT = button_identification::iNONE;
 80064f8:	4b19      	ldr	r3, [pc, #100]	@ (8006560 <_ZN6button7btn_irqEv+0x26c>)
 80064fa:	2200      	movs	r2, #0
 80064fc:	609a      	str	r2, [r3, #8]
					gen_event(btncodes::cRGHT_BT);
 80064fe:	2032      	movs	r0, #50	@ 0x32
 8006500:	f7ff feaa 	bl	8006258 <_ZN6button9gen_eventENS_8btncodesE>
				break;
 8006504:	e02a      	b.n	800655c <_ZN6button7btn_irqEv+0x268>
					Button_.buttonFlag = SET;
 8006506:	4b16      	ldr	r3, [pc, #88]	@ (8006560 <_ZN6button7btn_irqEv+0x26c>)
 8006508:	2201      	movs	r2, #1
 800650a:	715a      	strb	r2, [r3, #5]
					Button_.Sel_BT = button_identification::iNONE;
 800650c:	4b14      	ldr	r3, [pc, #80]	@ (8006560 <_ZN6button7btn_irqEv+0x26c>)
 800650e:	2200      	movs	r2, #0
 8006510:	609a      	str	r2, [r3, #8]
				break;
 8006512:	e023      	b.n	800655c <_ZN6button7btn_irqEv+0x268>
				if (!pLFT_BT) {
 8006514:	2120      	movs	r1, #32
 8006516:	4813      	ldr	r0, [pc, #76]	@ (8006564 <_ZN6button7btn_irqEv+0x270>)
 8006518:	f003 fd12 	bl	8009f40 <HAL_GPIO_ReadPin>
 800651c:	4603      	mov	r3, r0
 800651e:	2b00      	cmp	r3, #0
 8006520:	bf0c      	ite	eq
 8006522:	2301      	moveq	r3, #1
 8006524:	2300      	movne	r3, #0
 8006526:	b2db      	uxtb	r3, r3
 8006528:	2b00      	cmp	r3, #0
 800652a:	d009      	beq.n	8006540 <_ZN6button7btn_irqEv+0x24c>
					Button_.buttonFlag = SET;
 800652c:	4b0c      	ldr	r3, [pc, #48]	@ (8006560 <_ZN6button7btn_irqEv+0x26c>)
 800652e:	2201      	movs	r2, #1
 8006530:	715a      	strb	r2, [r3, #5]
					Button_.Sel_BT = button_identification::iNONE;
 8006532:	4b0b      	ldr	r3, [pc, #44]	@ (8006560 <_ZN6button7btn_irqEv+0x26c>)
 8006534:	2200      	movs	r2, #0
 8006536:	609a      	str	r2, [r3, #8]
					gen_event(btncodes::cLFT_BT);
 8006538:	203c      	movs	r0, #60	@ 0x3c
 800653a:	f7ff fe8d 	bl	8006258 <_ZN6button9gen_eventENS_8btncodesE>
				break;
 800653e:	e00d      	b.n	800655c <_ZN6button7btn_irqEv+0x268>
					Button_.buttonFlag = SET;
 8006540:	4b07      	ldr	r3, [pc, #28]	@ (8006560 <_ZN6button7btn_irqEv+0x26c>)
 8006542:	2201      	movs	r2, #1
 8006544:	715a      	strb	r2, [r3, #5]
					Button_.Sel_BT = button_identification::iNONE;
 8006546:	4b06      	ldr	r3, [pc, #24]	@ (8006560 <_ZN6button7btn_irqEv+0x26c>)
 8006548:	2200      	movs	r2, #0
 800654a:	609a      	str	r2, [r3, #8]
				break;
 800654c:	e006      	b.n	800655c <_ZN6button7btn_irqEv+0x268>
				Button_.buttonFlag = SET;
 800654e:	4b04      	ldr	r3, [pc, #16]	@ (8006560 <_ZN6button7btn_irqEv+0x26c>)
 8006550:	2201      	movs	r2, #1
 8006552:	715a      	strb	r2, [r3, #5]
				Button_.Sel_BT = button_identification::iNONE;
 8006554:	4b02      	ldr	r3, [pc, #8]	@ (8006560 <_ZN6button7btn_irqEv+0x26c>)
 8006556:	2200      	movs	r2, #0
 8006558:	609a      	str	r2, [r3, #8]
				break;
 800655a:	bf00      	nop
}
 800655c:	bf00      	nop
 800655e:	bd80      	pop	{r7, pc}
 8006560:	20001a84 	.word	0x20001a84
 8006564:	40020c00 	.word	0x40020c00

08006568 <_Z41__static_initialization_and_destruction_0ii>:

}
 8006568:	b580      	push	{r7, lr}
 800656a:	b082      	sub	sp, #8
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2b01      	cmp	r3, #1
 8006576:	d107      	bne.n	8006588 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800657e:	4293      	cmp	r3, r2
 8006580:	d102      	bne.n	8006588 <_Z41__static_initialization_and_destruction_0ii+0x20>
System_Rtos::freertos_events eventsRTOS;
 8006582:	4803      	ldr	r0, [pc, #12]	@ (8006590 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8006584:	f7fd ff48 	bl	8004418 <_ZN11System_Rtos15freertos_eventsC1Ev>
}
 8006588:	bf00      	nop
 800658a:	3708      	adds	r7, #8
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}
 8006590:	20001a78 	.word	0x20001a78

08006594 <_GLOBAL__sub_I_My_Button_IRQHandlerC>:
 8006594:	b580      	push	{r7, lr}
 8006596:	af00      	add	r7, sp, #0
 8006598:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800659c:	2001      	movs	r0, #1
 800659e:	f7ff ffe3 	bl	8006568 <_Z41__static_initialization_and_destruction_0ii>
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <u8g2_DrawHXBM>:
}



void u8g2_DrawHXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b086      	sub	sp, #24
 80065a8:	af02      	add	r7, sp, #8
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	4608      	mov	r0, r1
 80065ae:	4611      	mov	r1, r2
 80065b0:	461a      	mov	r2, r3
 80065b2:	4603      	mov	r3, r0
 80065b4:	70fb      	strb	r3, [r7, #3]
 80065b6:	460b      	mov	r3, r1
 80065b8:	70bb      	strb	r3, [r7, #2]
 80065ba:	4613      	mov	r3, r2
 80065bc:	707b      	strb	r3, [r7, #1]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80065c4:	73bb      	strb	r3, [r7, #14]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 80065c6:	7bbb      	ldrb	r3, [r7, #14]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	bf0c      	ite	eq
 80065cc:	2301      	moveq	r3, #1
 80065ce:	2300      	movne	r3, #0
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	737b      	strb	r3, [r7, #13]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 80065d4:	78fa      	ldrb	r2, [r7, #3]
 80065d6:	787b      	ldrb	r3, [r7, #1]
 80065d8:	4413      	add	r3, r2
 80065da:	b2d8      	uxtb	r0, r3
 80065dc:	78bb      	ldrb	r3, [r7, #2]
 80065de:	3301      	adds	r3, #1
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	78ba      	ldrb	r2, [r7, #2]
 80065e4:	78f9      	ldrb	r1, [r7, #3]
 80065e6:	9300      	str	r3, [sp, #0]
 80065e8:	4603      	mov	r3, r0
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f001 f859 	bl	80076a2 <u8g2_IsIntersection>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d040      	beq.n	8006678 <u8g2_DrawHXBM+0xd4>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
 80065f6:	2301      	movs	r3, #1
 80065f8:	73fb      	strb	r3, [r7, #15]
  while(len > 0) {
 80065fa:	e035      	b.n	8006668 <u8g2_DrawHXBM+0xc4>
    if ( *b & mask ) {
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	781a      	ldrb	r2, [r3, #0]
 8006600:	7bfb      	ldrb	r3, [r7, #15]
 8006602:	4013      	ands	r3, r2
 8006604:	b2db      	uxtb	r3, r3
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00c      	beq.n	8006624 <u8g2_DrawHXBM+0x80>
      u8g2->draw_color = color;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	7bba      	ldrb	r2, [r7, #14]
 800660e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8006612:	78ba      	ldrb	r2, [r7, #2]
 8006614:	78f9      	ldrb	r1, [r7, #3]
 8006616:	2300      	movs	r3, #0
 8006618:	9300      	str	r3, [sp, #0]
 800661a:	2301      	movs	r3, #1
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 ffd7 	bl	80075d0 <u8g2_DrawHVLine>
 8006622:	e010      	b.n	8006646 <u8g2_DrawHXBM+0xa2>
    } else if ( u8g2->bitmap_transparency == 0 ) {
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800662a:	2b00      	cmp	r3, #0
 800662c:	d10b      	bne.n	8006646 <u8g2_DrawHXBM+0xa2>
      u8g2->draw_color = ncolor;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	7b7a      	ldrb	r2, [r7, #13]
 8006632:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8006636:	78ba      	ldrb	r2, [r7, #2]
 8006638:	78f9      	ldrb	r1, [r7, #3]
 800663a:	2300      	movs	r3, #0
 800663c:	9300      	str	r3, [sp, #0]
 800663e:	2301      	movs	r3, #1
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 ffc5 	bl	80075d0 <u8g2_DrawHVLine>
    }
    x++;
 8006646:	78fb      	ldrb	r3, [r7, #3]
 8006648:	3301      	adds	r3, #1
 800664a:	70fb      	strb	r3, [r7, #3]
    mask <<= 1;
 800664c:	7bfb      	ldrb	r3, [r7, #15]
 800664e:	005b      	lsls	r3, r3, #1
 8006650:	73fb      	strb	r3, [r7, #15]
    if ( mask == 0 )
 8006652:	7bfb      	ldrb	r3, [r7, #15]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d104      	bne.n	8006662 <u8g2_DrawHXBM+0xbe>
    {
      mask = 1;
 8006658:	2301      	movs	r3, #1
 800665a:	73fb      	strb	r3, [r7, #15]
      b++;
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	3301      	adds	r3, #1
 8006660:	61bb      	str	r3, [r7, #24]
    }
    len--;
 8006662:	787b      	ldrb	r3, [r7, #1]
 8006664:	3b01      	subs	r3, #1
 8006666:	707b      	strb	r3, [r7, #1]
  while(len > 0) {
 8006668:	787b      	ldrb	r3, [r7, #1]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d1c6      	bne.n	80065fc <u8g2_DrawHXBM+0x58>
  }
  u8g2->draw_color = color;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	7bba      	ldrb	r2, [r7, #14]
 8006672:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
 8006676:	e000      	b.n	800667a <u8g2_DrawHXBM+0xd6>
    return;
 8006678:	bf00      	nop
}
 800667a:	3710      	adds	r7, #16
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <u8g2_DrawXBM>:


void u8g2_DrawXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b086      	sub	sp, #24
 8006684:	af02      	add	r7, sp, #8
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	4608      	mov	r0, r1
 800668a:	4611      	mov	r1, r2
 800668c:	461a      	mov	r2, r3
 800668e:	4603      	mov	r3, r0
 8006690:	70fb      	strb	r3, [r7, #3]
 8006692:	460b      	mov	r3, r1
 8006694:	70bb      	strb	r3, [r7, #2]
 8006696:	4613      	mov	r3, r2
 8006698:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t blen;
  blen = w;
 800669a:	787b      	ldrb	r3, [r7, #1]
 800669c:	73fb      	strb	r3, [r7, #15]
  blen += 7;
 800669e:	7bfb      	ldrb	r3, [r7, #15]
 80066a0:	3307      	adds	r3, #7
 80066a2:	73fb      	strb	r3, [r7, #15]
  blen >>= 3;
 80066a4:	7bfb      	ldrb	r3, [r7, #15]
 80066a6:	08db      	lsrs	r3, r3, #3
 80066a8:	73fb      	strb	r3, [r7, #15]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 80066aa:	78fa      	ldrb	r2, [r7, #3]
 80066ac:	787b      	ldrb	r3, [r7, #1]
 80066ae:	4413      	add	r3, r2
 80066b0:	b2d8      	uxtb	r0, r3
 80066b2:	78ba      	ldrb	r2, [r7, #2]
 80066b4:	7e3b      	ldrb	r3, [r7, #24]
 80066b6:	4413      	add	r3, r2
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	78ba      	ldrb	r2, [r7, #2]
 80066bc:	78f9      	ldrb	r1, [r7, #3]
 80066be:	9300      	str	r3, [sp, #0]
 80066c0:	4603      	mov	r3, r0
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 ffed 	bl	80076a2 <u8g2_IsIntersection>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d017      	beq.n	80066fe <u8g2_DrawXBM+0x7e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 80066ce:	e012      	b.n	80066f6 <u8g2_DrawXBM+0x76>
  {
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 80066d0:	7878      	ldrb	r0, [r7, #1]
 80066d2:	78ba      	ldrb	r2, [r7, #2]
 80066d4:	78f9      	ldrb	r1, [r7, #3]
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	9300      	str	r3, [sp, #0]
 80066da:	4603      	mov	r3, r0
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f7ff ff61 	bl	80065a4 <u8g2_DrawHXBM>
    bitmap += blen;
 80066e2:	7bfb      	ldrb	r3, [r7, #15]
 80066e4:	69fa      	ldr	r2, [r7, #28]
 80066e6:	4413      	add	r3, r2
 80066e8:	61fb      	str	r3, [r7, #28]
    y++;
 80066ea:	78bb      	ldrb	r3, [r7, #2]
 80066ec:	3301      	adds	r3, #1
 80066ee:	70bb      	strb	r3, [r7, #2]
    h--;
 80066f0:	7e3b      	ldrb	r3, [r7, #24]
 80066f2:	3b01      	subs	r3, #1
 80066f4:	763b      	strb	r3, [r7, #24]
  while( h > 0 )
 80066f6:	7e3b      	ldrb	r3, [r7, #24]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d1e9      	bne.n	80066d0 <u8g2_DrawXBM+0x50>
 80066fc:	e000      	b.n	8006700 <u8g2_DrawXBM+0x80>
    return;
 80066fe:	bf00      	nop
  }
}
 8006700:	3710      	adds	r7, #16
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}

08006706 <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8006706:	b580      	push	{r7, lr}
 8006708:	b084      	sub	sp, #16
 800670a:	af02      	add	r7, sp, #8
 800670c:	6078      	str	r0, [r7, #4]
 800670e:	4608      	mov	r0, r1
 8006710:	4611      	mov	r1, r2
 8006712:	461a      	mov	r2, r3
 8006714:	4603      	mov	r3, r0
 8006716:	70fb      	strb	r3, [r7, #3]
 8006718:	460b      	mov	r3, r1
 800671a:	70bb      	strb	r3, [r7, #2]
 800671c:	4613      	mov	r3, r2
 800671e:	707b      	strb	r3, [r7, #1]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8006720:	78fa      	ldrb	r2, [r7, #3]
 8006722:	787b      	ldrb	r3, [r7, #1]
 8006724:	4413      	add	r3, r2
 8006726:	b2d8      	uxtb	r0, r3
 8006728:	78ba      	ldrb	r2, [r7, #2]
 800672a:	7c3b      	ldrb	r3, [r7, #16]
 800672c:	4413      	add	r3, r2
 800672e:	b2db      	uxtb	r3, r3
 8006730:	78ba      	ldrb	r2, [r7, #2]
 8006732:	78f9      	ldrb	r1, [r7, #3]
 8006734:	9300      	str	r3, [sp, #0]
 8006736:	4603      	mov	r3, r0
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f000 ffb2 	bl	80076a2 <u8g2_IsIntersection>
 800673e:	4603      	mov	r3, r0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d012      	beq.n	800676a <u8g2_DrawBox+0x64>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 8006744:	e00d      	b.n	8006762 <u8g2_DrawBox+0x5c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8006746:	787b      	ldrb	r3, [r7, #1]
 8006748:	78ba      	ldrb	r2, [r7, #2]
 800674a:	78f9      	ldrb	r1, [r7, #3]
 800674c:	2000      	movs	r0, #0
 800674e:	9000      	str	r0, [sp, #0]
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 ff3d 	bl	80075d0 <u8g2_DrawHVLine>
    y++;    
 8006756:	78bb      	ldrb	r3, [r7, #2]
 8006758:	3301      	adds	r3, #1
 800675a:	70bb      	strb	r3, [r7, #2]
    h--;
 800675c:	7c3b      	ldrb	r3, [r7, #16]
 800675e:	3b01      	subs	r3, #1
 8006760:	743b      	strb	r3, [r7, #16]
  while( h != 0 )
 8006762:	7c3b      	ldrb	r3, [r7, #16]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d1ee      	bne.n	8006746 <u8g2_DrawBox+0x40>
 8006768:	e000      	b.n	800676c <u8g2_DrawBox+0x66>
    return;
 800676a:	bf00      	nop
  }
}
 800676c:	3708      	adds	r7, #8
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}

08006772 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8006772:	b580      	push	{r7, lr}
 8006774:	b084      	sub	sp, #16
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	7c1b      	ldrb	r3, [r3, #16]
 8006780:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006788:	461a      	mov	r2, r3
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	fb02 f303 	mul.w	r3, r2, r3
 8006790:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	00db      	lsls	r3, r3, #3
 8006796:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	2100      	movs	r1, #0
 80067a0:	4618      	mov	r0, r3
 80067a2:	f00b fa16 	bl	8011bd2 <memset>
}
 80067a6:	bf00      	nop
 80067a8:	3710      	adds	r7, #16
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}

080067ae <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 80067ae:	b580      	push	{r7, lr}
 80067b0:	b086      	sub	sp, #24
 80067b2:	af02      	add	r7, sp, #8
 80067b4:	6078      	str	r0, [r7, #4]
 80067b6:	460b      	mov	r3, r1
 80067b8:	70fb      	strb	r3, [r7, #3]
 80067ba:	4613      	mov	r3, r2
 80067bc:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	7c1b      	ldrb	r3, [r3, #16]
 80067c4:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 80067c6:	78fb      	ldrb	r3, [r7, #3]
 80067c8:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067ce:	60bb      	str	r3, [r7, #8]
  offset *= w;
 80067d0:	7bfb      	ldrb	r3, [r7, #15]
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	89ba      	ldrh	r2, [r7, #12]
 80067d6:	fb12 f303 	smulbb	r3, r2, r3
 80067da:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 80067dc:	89bb      	ldrh	r3, [r7, #12]
 80067de:	00db      	lsls	r3, r3, #3
 80067e0:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 80067e2:	89bb      	ldrh	r3, [r7, #12]
 80067e4:	68ba      	ldr	r2, [r7, #8]
 80067e6:	4413      	add	r3, r2
 80067e8:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 80067ea:	7bf9      	ldrb	r1, [r7, #15]
 80067ec:	78ba      	ldrb	r2, [r7, #2]
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	9300      	str	r3, [sp, #0]
 80067f2:	460b      	mov	r3, r1
 80067f4:	2100      	movs	r1, #0
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f001 fb72 	bl	8007ee0 <u8x8_DrawTile>
}
 80067fc:	bf00      	nop
 80067fe:	3710      	adds	r7, #16
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 800680c:	2300      	movs	r3, #0
 800680e:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006816:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800681e:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	7c5b      	ldrb	r3, [r3, #17]
 8006826:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8006828:	7bba      	ldrb	r2, [r7, #14]
 800682a:	7bfb      	ldrb	r3, [r7, #15]
 800682c:	4619      	mov	r1, r3
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f7ff ffbd 	bl	80067ae <u8g2_send_tile_row>
    src_row++;
 8006834:	7bfb      	ldrb	r3, [r7, #15]
 8006836:	3301      	adds	r3, #1
 8006838:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 800683a:	7bbb      	ldrb	r3, [r7, #14]
 800683c:	3301      	adds	r3, #1
 800683e:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8006840:	7bfa      	ldrb	r2, [r7, #15]
 8006842:	7b7b      	ldrb	r3, [r7, #13]
 8006844:	429a      	cmp	r2, r3
 8006846:	d203      	bcs.n	8006850 <u8g2_send_buffer+0x4c>
 8006848:	7bba      	ldrb	r2, [r7, #14]
 800684a:	7b3b      	ldrb	r3, [r7, #12]
 800684c:	429a      	cmp	r2, r3
 800684e:	d3eb      	bcc.n	8006828 <u8g2_send_buffer+0x24>
}
 8006850:	bf00      	nop
 8006852:	3710      	adds	r7, #16
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f7ff ffcf 	bl	8006804 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f001 fb8b 	bl	8007f82 <u8x8_RefreshDisplay>
}
 800686c:	bf00      	nop
 800686e:	3708      	adds	r7, #8
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <u8g2_m_16_8_f>:
  static uint8_t buf[256];
  *page_cnt = 2;
  return buf;
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  static uint8_t buf[1024];
  *page_cnt = 8;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2208      	movs	r2, #8
 8006880:	701a      	strb	r2, [r3, #0]
  return buf;
 8006882:	4b03      	ldr	r3, [pc, #12]	@ (8006890 <u8g2_m_16_8_f+0x1c>)
}
 8006884:	4618      	mov	r0, r3
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr
 8006890:	20001a94 	.word	0x20001a94

08006894 <u8g2_Setup_ssd1309_128x64_noname0_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1309 f */
void u8g2_Setup_ssd1309_128x64_noname0_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b088      	sub	sp, #32
 8006898:	af02      	add	r7, sp, #8
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	60b9      	str	r1, [r7, #8]
 800689e:	607a      	str	r2, [r7, #4]
 80068a0:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1309_128x64_noname0, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	9300      	str	r3, [sp, #0]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4a0b      	ldr	r2, [pc, #44]	@ (80068d8 <u8g2_Setup_ssd1309_128x64_noname0_f+0x44>)
 80068aa:	490c      	ldr	r1, [pc, #48]	@ (80068dc <u8g2_Setup_ssd1309_128x64_noname0_f+0x48>)
 80068ac:	68f8      	ldr	r0, [r7, #12]
 80068ae:	f001 fbc9 	bl	8008044 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 80068b2:	f107 0313 	add.w	r3, r7, #19
 80068b6:	4618      	mov	r0, r3
 80068b8:	f7ff ffdc 	bl	8006874 <u8g2_m_16_8_f>
 80068bc:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 80068be:	7cfa      	ldrb	r2, [r7, #19]
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	9300      	str	r3, [sp, #0]
 80068c4:	4b06      	ldr	r3, [pc, #24]	@ (80068e0 <u8g2_Setup_ssd1309_128x64_noname0_f+0x4c>)
 80068c6:	6979      	ldr	r1, [r7, #20]
 80068c8:	68f8      	ldr	r0, [r7, #12]
 80068ca:	f000 ffb6 	bl	800783a <u8g2_SetupBuffer>
}
 80068ce:	bf00      	nop
 80068d0:	3718      	adds	r7, #24
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	08007c1d 	.word	0x08007c1d
 80068dc:	08007d9d 	.word	0x08007d9d
 80068e0:	080076f9 	.word	0x080076f9

080068e4 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	460b      	mov	r3, r1
 80068ee:	70fb      	strb	r3, [r7, #3]
  font += offset;
 80068f0:	78fb      	ldrb	r3, [r7, #3]
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	4413      	add	r3, r2
 80068f6:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	781b      	ldrb	r3, [r3, #0]
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	370c      	adds	r7, #12
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8006908:	b480      	push	{r7}
 800690a:	b085      	sub	sp, #20
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	460b      	mov	r3, r1
 8006912:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8006914:	78fb      	ldrb	r3, [r7, #3]
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	4413      	add	r3, r2
 800691a:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	81fb      	strh	r3, [r7, #14]
    font++;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	3301      	adds	r3, #1
 8006926:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8006928:	89fb      	ldrh	r3, [r7, #14]
 800692a:	021b      	lsls	r3, r3, #8
 800692c:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	461a      	mov	r2, r3
 8006934:	89fb      	ldrh	r3, [r7, #14]
 8006936:	4413      	add	r3, r2
 8006938:	81fb      	strh	r3, [r7, #14]
    return pos;
 800693a:	89fb      	ldrh	r3, [r7, #14]
}
 800693c:	4618      	mov	r0, r3
 800693e:	3714      	adds	r7, #20
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr

08006948 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b082      	sub	sp, #8
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8006952:	2100      	movs	r1, #0
 8006954:	6838      	ldr	r0, [r7, #0]
 8006956:	f7ff ffc5 	bl	80068e4 <u8g2_font_get_byte>
 800695a:	4603      	mov	r3, r0
 800695c:	461a      	mov	r2, r3
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8006962:	2101      	movs	r1, #1
 8006964:	6838      	ldr	r0, [r7, #0]
 8006966:	f7ff ffbd 	bl	80068e4 <u8g2_font_get_byte>
 800696a:	4603      	mov	r3, r0
 800696c:	461a      	mov	r2, r3
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8006972:	2102      	movs	r1, #2
 8006974:	6838      	ldr	r0, [r7, #0]
 8006976:	f7ff ffb5 	bl	80068e4 <u8g2_font_get_byte>
 800697a:	4603      	mov	r3, r0
 800697c:	461a      	mov	r2, r3
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8006982:	2103      	movs	r1, #3
 8006984:	6838      	ldr	r0, [r7, #0]
 8006986:	f7ff ffad 	bl	80068e4 <u8g2_font_get_byte>
 800698a:	4603      	mov	r3, r0
 800698c:	461a      	mov	r2, r3
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8006992:	2104      	movs	r1, #4
 8006994:	6838      	ldr	r0, [r7, #0]
 8006996:	f7ff ffa5 	bl	80068e4 <u8g2_font_get_byte>
 800699a:	4603      	mov	r3, r0
 800699c:	461a      	mov	r2, r3
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 80069a2:	2105      	movs	r1, #5
 80069a4:	6838      	ldr	r0, [r7, #0]
 80069a6:	f7ff ff9d 	bl	80068e4 <u8g2_font_get_byte>
 80069aa:	4603      	mov	r3, r0
 80069ac:	461a      	mov	r2, r3
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 80069b2:	2106      	movs	r1, #6
 80069b4:	6838      	ldr	r0, [r7, #0]
 80069b6:	f7ff ff95 	bl	80068e4 <u8g2_font_get_byte>
 80069ba:	4603      	mov	r3, r0
 80069bc:	461a      	mov	r2, r3
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 80069c2:	2107      	movs	r1, #7
 80069c4:	6838      	ldr	r0, [r7, #0]
 80069c6:	f7ff ff8d 	bl	80068e4 <u8g2_font_get_byte>
 80069ca:	4603      	mov	r3, r0
 80069cc:	461a      	mov	r2, r3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 80069d2:	2108      	movs	r1, #8
 80069d4:	6838      	ldr	r0, [r7, #0]
 80069d6:	f7ff ff85 	bl	80068e4 <u8g2_font_get_byte>
 80069da:	4603      	mov	r3, r0
 80069dc:	461a      	mov	r2, r3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 80069e2:	2109      	movs	r1, #9
 80069e4:	6838      	ldr	r0, [r7, #0]
 80069e6:	f7ff ff7d 	bl	80068e4 <u8g2_font_get_byte>
 80069ea:	4603      	mov	r3, r0
 80069ec:	b25a      	sxtb	r2, r3
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 80069f2:	210a      	movs	r1, #10
 80069f4:	6838      	ldr	r0, [r7, #0]
 80069f6:	f7ff ff75 	bl	80068e4 <u8g2_font_get_byte>
 80069fa:	4603      	mov	r3, r0
 80069fc:	b25a      	sxtb	r2, r3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8006a02:	210b      	movs	r1, #11
 8006a04:	6838      	ldr	r0, [r7, #0]
 8006a06:	f7ff ff6d 	bl	80068e4 <u8g2_font_get_byte>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	b25a      	sxtb	r2, r3
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8006a12:	210c      	movs	r1, #12
 8006a14:	6838      	ldr	r0, [r7, #0]
 8006a16:	f7ff ff65 	bl	80068e4 <u8g2_font_get_byte>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	b25a      	sxtb	r2, r3
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8006a22:	210d      	movs	r1, #13
 8006a24:	6838      	ldr	r0, [r7, #0]
 8006a26:	f7ff ff5d 	bl	80068e4 <u8g2_font_get_byte>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	b25a      	sxtb	r2, r3
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8006a32:	210e      	movs	r1, #14
 8006a34:	6838      	ldr	r0, [r7, #0]
 8006a36:	f7ff ff55 	bl	80068e4 <u8g2_font_get_byte>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	b25a      	sxtb	r2, r3
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8006a42:	210f      	movs	r1, #15
 8006a44:	6838      	ldr	r0, [r7, #0]
 8006a46:	f7ff ff4d 	bl	80068e4 <u8g2_font_get_byte>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	b25a      	sxtb	r2, r3
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8006a52:	2110      	movs	r1, #16
 8006a54:	6838      	ldr	r0, [r7, #0]
 8006a56:	f7ff ff45 	bl	80068e4 <u8g2_font_get_byte>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	b25a      	sxtb	r2, r3
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8006a62:	2111      	movs	r1, #17
 8006a64:	6838      	ldr	r0, [r7, #0]
 8006a66:	f7ff ff4f 	bl	8006908 <u8g2_font_get_word>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8006a72:	2113      	movs	r1, #19
 8006a74:	6838      	ldr	r0, [r7, #0]
 8006a76:	f7ff ff47 	bl	8006908 <u8g2_font_get_word>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8006a82:	2115      	movs	r1, #21
 8006a84:	6838      	ldr	r0, [r7, #0]
 8006a86:	f7ff ff3f 	bl	8006908 <u8g2_font_get_word>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	82da      	strh	r2, [r3, #22]
#endif
}
 8006a92:	bf00      	nop
 8006a94:	3708      	adds	r7, #8
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}

08006a9a <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8006a9a:	b480      	push	{r7}
 8006a9c:	b085      	sub	sp, #20
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	7a9b      	ldrb	r3, [r3, #10]
 8006aaa:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8006ab4:	7bfa      	ldrb	r2, [r7, #15]
 8006ab6:	7b7b      	ldrb	r3, [r7, #13]
 8006ab8:	fa42 f303 	asr.w	r3, r2, r3
 8006abc:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8006abe:	7b7b      	ldrb	r3, [r7, #13]
 8006ac0:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8006ac2:	7bba      	ldrb	r2, [r7, #14]
 8006ac4:	78fb      	ldrb	r3, [r7, #3]
 8006ac6:	4413      	add	r3, r2
 8006ac8:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8006aca:	7bbb      	ldrb	r3, [r7, #14]
 8006acc:	2b07      	cmp	r3, #7
 8006ace:	d91a      	bls.n	8006b06 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8006ad0:	2308      	movs	r3, #8
 8006ad2:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8006ad4:	7b3a      	ldrb	r2, [r7, #12]
 8006ad6:	7b7b      	ldrb	r3, [r7, #13]
 8006ad8:	1ad3      	subs	r3, r2, r3
 8006ada:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	1c5a      	adds	r2, r3, #1
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	461a      	mov	r2, r3
 8006aee:	7b3b      	ldrb	r3, [r7, #12]
 8006af0:	fa02 f303 	lsl.w	r3, r2, r3
 8006af4:	b25a      	sxtb	r2, r3
 8006af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006afa:	4313      	orrs	r3, r2
 8006afc:	b25b      	sxtb	r3, r3
 8006afe:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8006b00:	7bbb      	ldrb	r3, [r7, #14]
 8006b02:	3b08      	subs	r3, #8
 8006b04:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8006b06:	78fb      	ldrb	r3, [r7, #3]
 8006b08:	f04f 32ff 	mov.w	r2, #4294967295
 8006b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	43db      	mvns	r3, r3
 8006b14:	b2da      	uxtb	r2, r3
 8006b16:	7bfb      	ldrb	r3, [r7, #15]
 8006b18:	4013      	ands	r3, r2
 8006b1a:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	7bba      	ldrb	r2, [r7, #14]
 8006b20:	729a      	strb	r2, [r3, #10]
  return val;
 8006b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3714      	adds	r7, #20
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	460b      	mov	r3, r1
 8006b3a:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8006b3c:	78fb      	ldrb	r3, [r7, #3]
 8006b3e:	4619      	mov	r1, r3
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f7ff ffaa 	bl	8006a9a <u8g2_font_decode_get_unsigned_bits>
 8006b46:	4603      	mov	r3, r0
 8006b48:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8006b4e:	78fb      	ldrb	r3, [r7, #3]
 8006b50:	3b01      	subs	r3, #1
 8006b52:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8006b54:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8006b58:	78fb      	ldrb	r3, [r7, #3]
 8006b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b5e:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8006b60:	7bfa      	ldrb	r2, [r7, #15]
 8006b62:	7bbb      	ldrb	r3, [r7, #14]
 8006b64:	1ad3      	subs	r3, r2, r3
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	73fb      	strb	r3, [r7, #15]
  return v;
 8006b6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3710      	adds	r7, #16
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}

08006b76 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8006b76:	b490      	push	{r4, r7}
 8006b78:	b082      	sub	sp, #8
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	4604      	mov	r4, r0
 8006b7e:	4608      	mov	r0, r1
 8006b80:	4611      	mov	r1, r2
 8006b82:	461a      	mov	r2, r3
 8006b84:	4623      	mov	r3, r4
 8006b86:	71fb      	strb	r3, [r7, #7]
 8006b88:	4603      	mov	r3, r0
 8006b8a:	71bb      	strb	r3, [r7, #6]
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	717b      	strb	r3, [r7, #5]
 8006b90:	4613      	mov	r3, r2
 8006b92:	713b      	strb	r3, [r7, #4]
  switch(dir)
 8006b94:	793b      	ldrb	r3, [r7, #4]
 8006b96:	2b02      	cmp	r3, #2
 8006b98:	d010      	beq.n	8006bbc <u8g2_add_vector_y+0x46>
 8006b9a:	2b02      	cmp	r3, #2
 8006b9c:	dc13      	bgt.n	8006bc6 <u8g2_add_vector_y+0x50>
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d002      	beq.n	8006ba8 <u8g2_add_vector_y+0x32>
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d005      	beq.n	8006bb2 <u8g2_add_vector_y+0x3c>
 8006ba6:	e00e      	b.n	8006bc6 <u8g2_add_vector_y+0x50>
  {
    case 0:
      dy += y;
 8006ba8:	797a      	ldrb	r2, [r7, #5]
 8006baa:	79fb      	ldrb	r3, [r7, #7]
 8006bac:	4413      	add	r3, r2
 8006bae:	71fb      	strb	r3, [r7, #7]
      break;
 8006bb0:	e00e      	b.n	8006bd0 <u8g2_add_vector_y+0x5a>
    case 1:
      dy += x;
 8006bb2:	79ba      	ldrb	r2, [r7, #6]
 8006bb4:	79fb      	ldrb	r3, [r7, #7]
 8006bb6:	4413      	add	r3, r2
 8006bb8:	71fb      	strb	r3, [r7, #7]
      break;
 8006bba:	e009      	b.n	8006bd0 <u8g2_add_vector_y+0x5a>
    case 2:
      dy -= y;
 8006bbc:	797b      	ldrb	r3, [r7, #5]
 8006bbe:	79fa      	ldrb	r2, [r7, #7]
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	71fb      	strb	r3, [r7, #7]
      break;
 8006bc4:	e004      	b.n	8006bd0 <u8g2_add_vector_y+0x5a>
    default:
      dy -= x;
 8006bc6:	79bb      	ldrb	r3, [r7, #6]
 8006bc8:	79fa      	ldrb	r2, [r7, #7]
 8006bca:	1ad3      	subs	r3, r2, r3
 8006bcc:	71fb      	strb	r3, [r7, #7]
      break;      
 8006bce:	bf00      	nop
  }
  return dy;
 8006bd0:	79fb      	ldrb	r3, [r7, #7]
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3708      	adds	r7, #8
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bc90      	pop	{r4, r7}
 8006bda:	4770      	bx	lr

08006bdc <u8g2_add_vector_x>:

static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8006bdc:	b490      	push	{r4, r7}
 8006bde:	b082      	sub	sp, #8
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	4604      	mov	r4, r0
 8006be4:	4608      	mov	r0, r1
 8006be6:	4611      	mov	r1, r2
 8006be8:	461a      	mov	r2, r3
 8006bea:	4623      	mov	r3, r4
 8006bec:	71fb      	strb	r3, [r7, #7]
 8006bee:	4603      	mov	r3, r0
 8006bf0:	71bb      	strb	r3, [r7, #6]
 8006bf2:	460b      	mov	r3, r1
 8006bf4:	717b      	strb	r3, [r7, #5]
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	713b      	strb	r3, [r7, #4]
  switch(dir)
 8006bfa:	793b      	ldrb	r3, [r7, #4]
 8006bfc:	2b02      	cmp	r3, #2
 8006bfe:	d010      	beq.n	8006c22 <u8g2_add_vector_x+0x46>
 8006c00:	2b02      	cmp	r3, #2
 8006c02:	dc13      	bgt.n	8006c2c <u8g2_add_vector_x+0x50>
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d002      	beq.n	8006c0e <u8g2_add_vector_x+0x32>
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d005      	beq.n	8006c18 <u8g2_add_vector_x+0x3c>
 8006c0c:	e00e      	b.n	8006c2c <u8g2_add_vector_x+0x50>
  {
    case 0:
      dx += x;
 8006c0e:	79ba      	ldrb	r2, [r7, #6]
 8006c10:	79fb      	ldrb	r3, [r7, #7]
 8006c12:	4413      	add	r3, r2
 8006c14:	71fb      	strb	r3, [r7, #7]
      break;
 8006c16:	e00e      	b.n	8006c36 <u8g2_add_vector_x+0x5a>
    case 1:
      dx -= y;
 8006c18:	797b      	ldrb	r3, [r7, #5]
 8006c1a:	79fa      	ldrb	r2, [r7, #7]
 8006c1c:	1ad3      	subs	r3, r2, r3
 8006c1e:	71fb      	strb	r3, [r7, #7]
      break;
 8006c20:	e009      	b.n	8006c36 <u8g2_add_vector_x+0x5a>
    case 2:
      dx -= x;
 8006c22:	79bb      	ldrb	r3, [r7, #6]
 8006c24:	79fa      	ldrb	r2, [r7, #7]
 8006c26:	1ad3      	subs	r3, r2, r3
 8006c28:	71fb      	strb	r3, [r7, #7]
      break;
 8006c2a:	e004      	b.n	8006c36 <u8g2_add_vector_x+0x5a>
    default:
      dx += y;
 8006c2c:	797a      	ldrb	r2, [r7, #5]
 8006c2e:	79fb      	ldrb	r3, [r7, #7]
 8006c30:	4413      	add	r3, r2
 8006c32:	71fb      	strb	r3, [r7, #7]
      break;      
 8006c34:	bf00      	nop
  }
  return dx;
 8006c36:	79fb      	ldrb	r3, [r7, #7]
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3708      	adds	r7, #8
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bc90      	pop	{r4, r7}
 8006c40:	4770      	bx	lr

08006c42 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8006c42:	b580      	push	{r7, lr}
 8006c44:	b088      	sub	sp, #32
 8006c46:	af02      	add	r7, sp, #8
 8006c48:	6078      	str	r0, [r7, #4]
 8006c4a:	460b      	mov	r3, r1
 8006c4c:	70fb      	strb	r3, [r7, #3]
 8006c4e:	4613      	mov	r3, r2
 8006c50:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	3350      	adds	r3, #80	@ 0x50
 8006c56:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8006c58:	78fb      	ldrb	r3, [r7, #3]
 8006c5a:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8006c62:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8006c6a:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006c72:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8006c74:	7bfa      	ldrb	r2, [r7, #15]
 8006c76:	7d7b      	ldrb	r3, [r7, #21]
 8006c78:	1ad3      	subs	r3, r2, r3
 8006c7a:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8006c7c:	7bfb      	ldrb	r3, [r7, #15]
 8006c7e:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8006c80:	7dfa      	ldrb	r2, [r7, #23]
 8006c82:	7bfb      	ldrb	r3, [r7, #15]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d201      	bcs.n	8006c8c <u8g2_font_decode_len+0x4a>
      current = cnt;
 8006c88:	7dfb      	ldrb	r3, [r7, #23]
 8006c8a:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	791b      	ldrb	r3, [r3, #4]
 8006c90:	73bb      	strb	r3, [r7, #14]
    y = decode->target_y;
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	795b      	ldrb	r3, [r3, #5]
 8006c96:	737b      	strb	r3, [r7, #13]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8006c98:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8006c9c:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	7b9b      	ldrb	r3, [r3, #14]
 8006ca4:	7bb8      	ldrb	r0, [r7, #14]
 8006ca6:	f7ff ff99 	bl	8006bdc <u8g2_add_vector_x>
 8006caa:	4603      	mov	r3, r0
 8006cac:	73bb      	strb	r3, [r7, #14]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8006cae:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8006cb2:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	7b9b      	ldrb	r3, [r3, #14]
 8006cba:	7b78      	ldrb	r0, [r7, #13]
 8006cbc:	f7ff ff5b 	bl	8006b76 <u8g2_add_vector_y>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	737b      	strb	r3, [r7, #13]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8006cc4:	78bb      	ldrb	r3, [r7, #2]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d00f      	beq.n	8006cea <u8g2_font_decode_len+0xa8>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	7b1a      	ldrb	r2, [r3, #12]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
      u8g2_DrawHVLine(u8g2, 
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	7b9b      	ldrb	r3, [r3, #14]
 8006cd8:	7db8      	ldrb	r0, [r7, #22]
 8006cda:	7b7a      	ldrb	r2, [r7, #13]
 8006cdc:	7bb9      	ldrb	r1, [r7, #14]
 8006cde:	9300      	str	r3, [sp, #0]
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 fc74 	bl	80075d0 <u8g2_DrawHVLine>
 8006ce8:	e012      	b.n	8006d10 <u8g2_font_decode_len+0xce>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	7adb      	ldrb	r3, [r3, #11]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d10e      	bne.n	8006d10 <u8g2_font_decode_len+0xce>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	7b5a      	ldrb	r2, [r3, #13]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
      u8g2_DrawHVLine(u8g2, 
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	7b9b      	ldrb	r3, [r3, #14]
 8006d00:	7db8      	ldrb	r0, [r7, #22]
 8006d02:	7b7a      	ldrb	r2, [r7, #13]
 8006d04:	7bb9      	ldrb	r1, [r7, #14]
 8006d06:	9300      	str	r3, [sp, #0]
 8006d08:	4603      	mov	r3, r0
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 fc60 	bl	80075d0 <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8006d10:	7dfa      	ldrb	r2, [r7, #23]
 8006d12:	7bfb      	ldrb	r3, [r7, #15]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d309      	bcc.n	8006d2c <u8g2_font_decode_len+0xea>
      break;
    cnt -= rem;
 8006d18:	7dfa      	ldrb	r2, [r7, #23]
 8006d1a:	7bfb      	ldrb	r3, [r7, #15]
 8006d1c:	1ad3      	subs	r3, r2, r3
 8006d1e:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8006d20:	2300      	movs	r3, #0
 8006d22:	757b      	strb	r3, [r7, #21]
    ly++;
 8006d24:	7d3b      	ldrb	r3, [r7, #20]
 8006d26:	3301      	adds	r3, #1
 8006d28:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8006d2a:	e79f      	b.n	8006c6c <u8g2_font_decode_len+0x2a>
      break;
 8006d2c:	bf00      	nop
  }
  lx += cnt;
 8006d2e:	7d7a      	ldrb	r2, [r7, #21]
 8006d30:	7dfb      	ldrb	r3, [r7, #23]
 8006d32:	4413      	add	r3, r2
 8006d34:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8006d36:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	719a      	strb	r2, [r3, #6]
  decode->y = ly;
 8006d3e:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	71da      	strb	r2, [r3, #7]
  
}
 8006d46:	bf00      	nop
 8006d48:	3718      	adds	r7, #24
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}

08006d4e <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8006d4e:	b580      	push	{r7, lr}
 8006d50:	b084      	sub	sp, #16
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
 8006d56:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	3350      	adds	r3, #80	@ 0x50
 8006d5c:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	683a      	ldr	r2, [r7, #0]
 8006d62:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2200      	movs	r2, #0
 8006d68:	729a      	strb	r2, [r3, #10]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8006d70:	4619      	mov	r1, r3
 8006d72:	68f8      	ldr	r0, [r7, #12]
 8006d74:	f7ff fe91 	bl	8006a9a <u8g2_font_decode_get_unsigned_bits>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	b25a      	sxtb	r2, r3
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	721a      	strb	r2, [r3, #8]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f893 3065 	ldrb.w	r3, [r3, #101]	@ 0x65
 8006d86:	4619      	mov	r1, r3
 8006d88:	68f8      	ldr	r0, [r7, #12]
 8006d8a:	f7ff fe86 	bl	8006a9a <u8g2_font_decode_get_unsigned_bits>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	b25a      	sxtb	r2, r3
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	725a      	strb	r2, [r3, #9]
  
  decode->fg_color = u8g2->draw_color;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	731a      	strb	r2, [r3, #12]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	7b1b      	ldrb	r3, [r3, #12]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	bf0c      	ite	eq
 8006da8:	2301      	moveq	r3, #1
 8006daa:	2300      	movne	r3, #0
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	461a      	mov	r2, r3
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	735a      	strb	r2, [r3, #13]
}
 8006db4:	bf00      	nop
 8006db6:	3710      	adds	r7, #16
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b088      	sub	sp, #32
 8006dc0:	af02      	add	r7, sp, #8
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	3350      	adds	r3, #80	@ 0x50
 8006dca:	613b      	str	r3, [r7, #16]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 8006dcc:	6839      	ldr	r1, [r7, #0]
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f7ff ffbd 	bl	8006d4e <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006dda:	73fb      	strb	r3, [r7, #15]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
 8006de2:	4619      	mov	r1, r3
 8006de4:	6938      	ldr	r0, [r7, #16]
 8006de6:	f7ff fea3 	bl	8006b30 <u8g2_font_decode_get_signed_bits>
 8006dea:	4603      	mov	r3, r0
 8006dec:	73bb      	strb	r3, [r7, #14]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f893 3067 	ldrb.w	r3, [r3, #103]	@ 0x67
 8006df4:	4619      	mov	r1, r3
 8006df6:	6938      	ldr	r0, [r7, #16]
 8006df8:	f7ff fe9a 	bl	8006b30 <u8g2_font_decode_get_signed_bits>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	737b      	strb	r3, [r7, #13]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8006e06:	4619      	mov	r1, r3
 8006e08:	6938      	ldr	r0, [r7, #16]
 8006e0a:	f7ff fe91 	bl	8006b30 <u8g2_font_decode_get_signed_bits>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	733b      	strb	r3, [r7, #12]
  
  if ( decode->glyph_width > 0 )
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	f340 80cf 	ble.w	8006fbc <u8g2_font_decode_glyph+0x200>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	7918      	ldrb	r0, [r3, #4]
 8006e22:	7bfa      	ldrb	r2, [r7, #15]
 8006e24:	7b7b      	ldrb	r3, [r7, #13]
 8006e26:	4413      	add	r3, r2
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	425b      	negs	r3, r3
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	b25a      	sxtb	r2, r3
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	7b9b      	ldrb	r3, [r3, #14]
 8006e34:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8006e38:	f7ff fed0 	bl	8006bdc <u8g2_add_vector_x>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	461a      	mov	r2, r3
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	711a      	strb	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	7958      	ldrb	r0, [r3, #5]
 8006e48:	7bfa      	ldrb	r2, [r7, #15]
 8006e4a:	7b7b      	ldrb	r3, [r7, #13]
 8006e4c:	4413      	add	r3, r2
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	425b      	negs	r3, r3
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	b25a      	sxtb	r2, r3
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	7b9b      	ldrb	r3, [r3, #14]
 8006e5a:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8006e5e:	f7ff fe8a 	bl	8006b76 <u8g2_add_vector_y>
 8006e62:	4603      	mov	r3, r0
 8006e64:	461a      	mov	r2, r3
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	715a      	strb	r2, [r3, #5]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	791b      	ldrb	r3, [r3, #4]
 8006e6e:	75fb      	strb	r3, [r7, #23]
      y0 = decode->target_y;
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	795b      	ldrb	r3, [r3, #5]
 8006e74:	757b      	strb	r3, [r7, #21]
      x1 = x0;
 8006e76:	7dfb      	ldrb	r3, [r7, #23]
 8006e78:	75bb      	strb	r3, [r7, #22]
      y1 = y0;
 8006e7a:	7d7b      	ldrb	r3, [r7, #21]
 8006e7c:	753b      	strb	r3, [r7, #20]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	7b9b      	ldrb	r3, [r3, #14]
 8006e82:	2b03      	cmp	r3, #3
 8006e84:	d852      	bhi.n	8006f2c <u8g2_font_decode_glyph+0x170>
 8006e86:	a201      	add	r2, pc, #4	@ (adr r2, 8006e8c <u8g2_font_decode_glyph+0xd0>)
 8006e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e8c:	08006e9d 	.word	0x08006e9d
 8006e90:	08006eb5 	.word	0x08006eb5
 8006e94:	08006ed9 	.word	0x08006ed9
 8006e98:	08006f09 	.word	0x08006f09
      {
	case 0:
	    x1 += decode->glyph_width;
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006ea2:	b2da      	uxtb	r2, r3
 8006ea4:	7dbb      	ldrb	r3, [r7, #22]
 8006ea6:	4413      	add	r3, r2
 8006ea8:	75bb      	strb	r3, [r7, #22]
	    y1 += h;
 8006eaa:	7bfa      	ldrb	r2, [r7, #15]
 8006eac:	7d3b      	ldrb	r3, [r7, #20]
 8006eae:	4413      	add	r3, r2
 8006eb0:	753b      	strb	r3, [r7, #20]
	    break;
 8006eb2:	e03b      	b.n	8006f2c <u8g2_font_decode_glyph+0x170>
	case 1:
	    x0 -= h;
 8006eb4:	7bfb      	ldrb	r3, [r7, #15]
 8006eb6:	7dfa      	ldrb	r2, [r7, #23]
 8006eb8:	1ad3      	subs	r3, r2, r3
 8006eba:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8006ebc:	7dfb      	ldrb	r3, [r7, #23]
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8006ec2:	7dbb      	ldrb	r3, [r7, #22]
 8006ec4:	3301      	adds	r3, #1
 8006ec6:	75bb      	strb	r3, [r7, #22]
	    y1 += decode->glyph_width;
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006ece:	b2da      	uxtb	r2, r3
 8006ed0:	7d3b      	ldrb	r3, [r7, #20]
 8006ed2:	4413      	add	r3, r2
 8006ed4:	753b      	strb	r3, [r7, #20]
	    break;
 8006ed6:	e029      	b.n	8006f2c <u8g2_font_decode_glyph+0x170>
	case 2:
	    x0 -= decode->glyph_width;
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	7dfa      	ldrb	r2, [r7, #23]
 8006ee2:	1ad3      	subs	r3, r2, r3
 8006ee4:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8006ee6:	7dfb      	ldrb	r3, [r7, #23]
 8006ee8:	3301      	adds	r3, #1
 8006eea:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8006eec:	7dbb      	ldrb	r3, [r7, #22]
 8006eee:	3301      	adds	r3, #1
 8006ef0:	75bb      	strb	r3, [r7, #22]
	    y0 -= h;
 8006ef2:	7bfb      	ldrb	r3, [r7, #15]
 8006ef4:	7d7a      	ldrb	r2, [r7, #21]
 8006ef6:	1ad3      	subs	r3, r2, r3
 8006ef8:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8006efa:	7d7b      	ldrb	r3, [r7, #21]
 8006efc:	3301      	adds	r3, #1
 8006efe:	757b      	strb	r3, [r7, #21]
	    y1++;
 8006f00:	7d3b      	ldrb	r3, [r7, #20]
 8006f02:	3301      	adds	r3, #1
 8006f04:	753b      	strb	r3, [r7, #20]
	    break;	  
 8006f06:	e011      	b.n	8006f2c <u8g2_font_decode_glyph+0x170>
	case 3:
	    x1 += h;
 8006f08:	7bfa      	ldrb	r2, [r7, #15]
 8006f0a:	7dbb      	ldrb	r3, [r7, #22]
 8006f0c:	4413      	add	r3, r2
 8006f0e:	75bb      	strb	r3, [r7, #22]
	    y0 -= decode->glyph_width;
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	7d7a      	ldrb	r2, [r7, #21]
 8006f1a:	1ad3      	subs	r3, r2, r3
 8006f1c:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8006f1e:	7d7b      	ldrb	r3, [r7, #21]
 8006f20:	3301      	adds	r3, #1
 8006f22:	757b      	strb	r3, [r7, #21]
	    y1++;
 8006f24:	7d3b      	ldrb	r3, [r7, #20]
 8006f26:	3301      	adds	r3, #1
 8006f28:	753b      	strb	r3, [r7, #20]
	    break;	  
 8006f2a:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8006f2c:	7db8      	ldrb	r0, [r7, #22]
 8006f2e:	7d7a      	ldrb	r2, [r7, #21]
 8006f30:	7df9      	ldrb	r1, [r7, #23]
 8006f32:	7d3b      	ldrb	r3, [r7, #20]
 8006f34:	9300      	str	r3, [sp, #0]
 8006f36:	4603      	mov	r3, r0
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 fbb2 	bl	80076a2 <u8g2_IsIntersection>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d102      	bne.n	8006f4a <u8g2_font_decode_glyph+0x18e>
	return d;
 8006f44:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8006f48:	e03a      	b.n	8006fc0 <u8g2_font_decode_glyph+0x204>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	719a      	strb	r2, [r3, #6]
    decode->y = 0;
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	2200      	movs	r2, #0
 8006f54:	71da      	strb	r2, [r3, #7]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	6938      	ldr	r0, [r7, #16]
 8006f60:	f7ff fd9b 	bl	8006a9a <u8g2_font_decode_get_unsigned_bits>
 8006f64:	4603      	mov	r3, r0
 8006f66:	72fb      	strb	r3, [r7, #11]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f893 3063 	ldrb.w	r3, [r3, #99]	@ 0x63
 8006f6e:	4619      	mov	r1, r3
 8006f70:	6938      	ldr	r0, [r7, #16]
 8006f72:	f7ff fd92 	bl	8006a9a <u8g2_font_decode_get_unsigned_bits>
 8006f76:	4603      	mov	r3, r0
 8006f78:	72bb      	strb	r3, [r7, #10]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8006f7a:	7afb      	ldrb	r3, [r7, #11]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	4619      	mov	r1, r3
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f7ff fe5e 	bl	8006c42 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8006f86:	7abb      	ldrb	r3, [r7, #10]
 8006f88:	2201      	movs	r2, #1
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f7ff fe58 	bl	8006c42 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8006f92:	2101      	movs	r1, #1
 8006f94:	6938      	ldr	r0, [r7, #16]
 8006f96:	f7ff fd80 	bl	8006a9a <u8g2_font_decode_get_unsigned_bits>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d1ec      	bne.n	8006f7a <u8g2_font_decode_glyph+0x1be>

      if ( decode->y >= h )
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8006fa6:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8006faa:	429a      	cmp	r2, r3
 8006fac:	dd00      	ble.n	8006fb0 <u8g2_font_decode_glyph+0x1f4>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8006fae:	e7d2      	b.n	8006f56 <u8g2_font_decode_glyph+0x19a>
	break;
 8006fb0:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	7b1a      	ldrb	r2, [r3, #12]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
  return d;
 8006fbc:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3718      	adds	r7, #24
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b085      	sub	sp, #20
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	460b      	mov	r3, r1
 8006fd2:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006fd8:	60fb      	str	r3, [r7, #12]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	3317      	adds	r3, #23
 8006fde:	60fb      	str	r3, [r7, #12]

  
  if ( encoding <= 255 )
 8006fe0:	887b      	ldrh	r3, [r7, #2]
 8006fe2:	2bff      	cmp	r3, #255	@ 0xff
 8006fe4:	d82a      	bhi.n	800703c <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8006fe6:	887b      	ldrh	r3, [r7, #2]
 8006fe8:	2b60      	cmp	r3, #96	@ 0x60
 8006fea:	d907      	bls.n	8006ffc <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	60fb      	str	r3, [r7, #12]
 8006ffa:	e009      	b.n	8007010 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8006ffc:	887b      	ldrh	r3, [r7, #2]
 8006ffe:	2b40      	cmp	r3, #64	@ 0x40
 8007000:	d906      	bls.n	8007010 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007008:	461a      	mov	r2, r3
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	4413      	add	r3, r2
 800700e:	60fb      	str	r3, [r7, #12]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	3301      	adds	r3, #1
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d036      	beq.n	8007088 <u8g2_font_get_glyph_data+0xc0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	461a      	mov	r2, r3
 8007020:	887b      	ldrh	r3, [r7, #2]
 8007022:	4293      	cmp	r3, r2
 8007024:	d102      	bne.n	800702c <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	3302      	adds	r3, #2
 800702a:	e031      	b.n	8007090 <u8g2_font_get_glyph_data+0xc8>
      }
      font += u8x8_pgm_read( font + 1 );
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	3301      	adds	r3, #1
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	461a      	mov	r2, r3
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	4413      	add	r3, r2
 8007038:	60fb      	str	r3, [r7, #12]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 800703a:	e7e9      	b.n	8007010 <u8g2_font_get_glyph_data+0x48>
	font = u8g2->last_font_data;
    }
    else
#endif 

    font += u8g2->font_info.start_pos_unicode;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 8007042:	461a      	mov	r2, r3
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	4413      	add	r3, r2
 8007048:	60fb      	str	r3, [r7, #12]
    
    
    for(;;)
    {
      e = u8x8_pgm_read( font );
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	817b      	strh	r3, [r7, #10]
      e <<= 8;
 8007050:	897b      	ldrh	r3, [r7, #10]
 8007052:	021b      	lsls	r3, r3, #8
 8007054:	817b      	strh	r3, [r7, #10]
      e |= u8x8_pgm_read( font + 1 );
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	3301      	adds	r3, #1
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	461a      	mov	r2, r3
 800705e:	897b      	ldrh	r3, [r7, #10]
 8007060:	4313      	orrs	r3, r2
 8007062:	817b      	strh	r3, [r7, #10]
#ifdef  __unix__
      if ( encoding < e )
        break;
#endif 

      if ( e == 0 )
 8007064:	897b      	ldrh	r3, [r7, #10]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d010      	beq.n	800708c <u8g2_font_get_glyph_data+0xc4>
	break;
  
      if ( e == encoding )
 800706a:	897a      	ldrh	r2, [r7, #10]
 800706c:	887b      	ldrh	r3, [r7, #2]
 800706e:	429a      	cmp	r2, r3
 8007070:	d102      	bne.n	8007078 <u8g2_font_get_glyph_data+0xb0>
      {
#ifdef  __unix__
	u8g2->last_font_data = font;
	u8g2->last_unicode = encoding;
#endif 
	return font+3;	/* skip encoding and glyph size */
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	3303      	adds	r3, #3
 8007076:	e00b      	b.n	8007090 <u8g2_font_get_glyph_data+0xc8>
      }
      font += u8x8_pgm_read( font + 2 );
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	3302      	adds	r3, #2
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	461a      	mov	r2, r3
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	4413      	add	r3, r2
 8007084:	60fb      	str	r3, [r7, #12]
      e = u8x8_pgm_read( font );
 8007086:	e7e0      	b.n	800704a <u8g2_font_get_glyph_data+0x82>
	break;
 8007088:	bf00      	nop
 800708a:	e000      	b.n	800708e <u8g2_font_get_glyph_data+0xc6>
	break;
 800708c:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 800708e:	2300      	movs	r3, #0
}
 8007090:	4618      	mov	r0, r3
 8007092:	3714      	adds	r7, #20
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	4608      	mov	r0, r1
 80070a6:	4611      	mov	r1, r2
 80070a8:	461a      	mov	r2, r3
 80070aa:	4603      	mov	r3, r0
 80070ac:	70fb      	strb	r3, [r7, #3]
 80070ae:	460b      	mov	r3, r1
 80070b0:	70bb      	strb	r3, [r7, #2]
 80070b2:	4613      	mov	r3, r2
 80070b4:	803b      	strh	r3, [r7, #0]
  u8g2_uint_t dx = 0;
 80070b6:	2300      	movs	r3, #0
 80070b8:	73fb      	strb	r3, [r7, #15]
  u8g2->font_decode.target_x = x;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	78fa      	ldrb	r2, [r7, #3]
 80070be:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  u8g2->font_decode.target_y = y;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	78ba      	ldrb	r2, [r7, #2]
 80070c6:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 80070ca:	883b      	ldrh	r3, [r7, #0]
 80070cc:	4619      	mov	r1, r3
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f7ff ff7a 	bl	8006fc8 <u8g2_font_get_glyph_data>
 80070d4:	60b8      	str	r0, [r7, #8]
  if ( glyph_data != NULL )
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d005      	beq.n	80070e8 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 80070dc:	68b9      	ldr	r1, [r7, #8]
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f7ff fe6c 	bl	8006dbc <u8g2_font_decode_glyph>
 80070e4:	4603      	mov	r3, r0
 80070e6:	73fb      	strb	r3, [r7, #15]
  }
  return dx;
 80070e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3710      	adds	r7, #16
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}

080070f2 <u8g2_SetFontMode>:
    U8G2_FONT_MODE_SOLID
    U8G2_FONT_MODE_NONE
  This has been changed for the new font procedures  
*/
void u8g2_SetFontMode(u8g2_t *u8g2, uint8_t is_transparent)
{
 80070f2:	b480      	push	{r7}
 80070f4:	b083      	sub	sp, #12
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
 80070fa:	460b      	mov	r3, r1
 80070fc:	70fb      	strb	r3, [r7, #3]
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	78fa      	ldrb	r2, [r7, #3]
 8007102:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
}
 8007106:	bf00      	nop
 8007108:	370c      	adds	r7, #12
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr
	...

08007114 <u8g2_DrawGlyph>:

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b082      	sub	sp, #8
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	4608      	mov	r0, r1
 800711e:	4611      	mov	r1, r2
 8007120:	461a      	mov	r2, r3
 8007122:	4603      	mov	r3, r0
 8007124:	70fb      	strb	r3, [r7, #3]
 8007126:	460b      	mov	r3, r1
 8007128:	70bb      	strb	r3, [r7, #2]
 800712a:	4613      	mov	r3, r2
 800712c:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 8007134:	2b03      	cmp	r3, #3
 8007136:	d833      	bhi.n	80071a0 <u8g2_DrawGlyph+0x8c>
 8007138:	a201      	add	r2, pc, #4	@ (adr r2, 8007140 <u8g2_DrawGlyph+0x2c>)
 800713a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800713e:	bf00      	nop
 8007140:	08007151 	.word	0x08007151
 8007144:	08007165 	.word	0x08007165
 8007148:	08007179 	.word	0x08007179
 800714c:	0800718d 	.word	0x0800718d
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	4798      	blx	r3
 8007158:	4603      	mov	r3, r0
 800715a:	461a      	mov	r2, r3
 800715c:	78bb      	ldrb	r3, [r7, #2]
 800715e:	4413      	add	r3, r2
 8007160:	70bb      	strb	r3, [r7, #2]
      break;
 8007162:	e01d      	b.n	80071a0 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	4798      	blx	r3
 800716c:	4603      	mov	r3, r0
 800716e:	461a      	mov	r2, r3
 8007170:	78fb      	ldrb	r3, [r7, #3]
 8007172:	1a9b      	subs	r3, r3, r2
 8007174:	70fb      	strb	r3, [r7, #3]
      break;
 8007176:	e013      	b.n	80071a0 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	4798      	blx	r3
 8007180:	4603      	mov	r3, r0
 8007182:	461a      	mov	r2, r3
 8007184:	78bb      	ldrb	r3, [r7, #2]
 8007186:	1a9b      	subs	r3, r3, r2
 8007188:	70bb      	strb	r3, [r7, #2]
      break;
 800718a:	e009      	b.n	80071a0 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	4798      	blx	r3
 8007194:	4603      	mov	r3, r0
 8007196:	461a      	mov	r2, r3
 8007198:	78fb      	ldrb	r3, [r7, #3]
 800719a:	4413      	add	r3, r2
 800719c:	70fb      	strb	r3, [r7, #3]
      break;
 800719e:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 80071a0:	883b      	ldrh	r3, [r7, #0]
 80071a2:	78ba      	ldrb	r2, [r7, #2]
 80071a4:	78f9      	ldrb	r1, [r7, #3]
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f7ff ff78 	bl	800709c <u8g2_font_draw_glyph>
 80071ac:	4603      	mov	r3, r0
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3708      	adds	r7, #8
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	bf00      	nop

080071b8 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b086      	sub	sp, #24
 80071bc:	af00      	add	r7, sp, #0
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	607b      	str	r3, [r7, #4]
 80071c2:	460b      	mov	r3, r1
 80071c4:	72fb      	strb	r3, [r7, #11]
 80071c6:	4613      	mov	r3, r2
 80071c8:	72bb      	strb	r3, [r7, #10]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 80071ca:	68f8      	ldr	r0, [r7, #12]
 80071cc:	f000 fc21 	bl	8007a12 <u8x8_utf8_init>
  sum = 0;
 80071d0:	2300      	movs	r3, #0
 80071d2:	75fb      	strb	r3, [r7, #23]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	7812      	ldrb	r2, [r2, #0]
 80071dc:	4611      	mov	r1, r2
 80071de:	68f8      	ldr	r0, [r7, #12]
 80071e0:	4798      	blx	r3
 80071e2:	4603      	mov	r3, r0
 80071e4:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 80071e6:	8abb      	ldrh	r3, [r7, #20]
 80071e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d038      	beq.n	8007262 <u8g2_draw_string+0xaa>
      break;
    str++;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	3301      	adds	r3, #1
 80071f4:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 80071f6:	8abb      	ldrh	r3, [r7, #20]
 80071f8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d0e9      	beq.n	80071d4 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8007200:	8abb      	ldrh	r3, [r7, #20]
 8007202:	7aba      	ldrb	r2, [r7, #10]
 8007204:	7af9      	ldrb	r1, [r7, #11]
 8007206:	68f8      	ldr	r0, [r7, #12]
 8007208:	f7ff ff84 	bl	8007114 <u8g2_DrawGlyph>
 800720c:	4603      	mov	r3, r0
 800720e:	74fb      	strb	r3, [r7, #19]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 8007216:	2b03      	cmp	r3, #3
 8007218:	d81e      	bhi.n	8007258 <u8g2_draw_string+0xa0>
 800721a:	a201      	add	r2, pc, #4	@ (adr r2, 8007220 <u8g2_draw_string+0x68>)
 800721c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007220:	08007231 	.word	0x08007231
 8007224:	0800723b 	.word	0x0800723b
 8007228:	08007245 	.word	0x08007245
 800722c:	0800724f 	.word	0x0800724f
      {
	case 0:
	  x += delta;
 8007230:	7afa      	ldrb	r2, [r7, #11]
 8007232:	7cfb      	ldrb	r3, [r7, #19]
 8007234:	4413      	add	r3, r2
 8007236:	72fb      	strb	r3, [r7, #11]
	  break;
 8007238:	e00e      	b.n	8007258 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 800723a:	7aba      	ldrb	r2, [r7, #10]
 800723c:	7cfb      	ldrb	r3, [r7, #19]
 800723e:	4413      	add	r3, r2
 8007240:	72bb      	strb	r3, [r7, #10]
	  break;
 8007242:	e009      	b.n	8007258 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8007244:	7afa      	ldrb	r2, [r7, #11]
 8007246:	7cfb      	ldrb	r3, [r7, #19]
 8007248:	1ad3      	subs	r3, r2, r3
 800724a:	72fb      	strb	r3, [r7, #11]
	  break;
 800724c:	e004      	b.n	8007258 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 800724e:	7aba      	ldrb	r2, [r7, #10]
 8007250:	7cfb      	ldrb	r3, [r7, #19]
 8007252:	1ad3      	subs	r3, r2, r3
 8007254:	72bb      	strb	r3, [r7, #10]
	  break;
 8007256:	bf00      	nop
      }
#else
      x += delta;
#endif

      sum += delta;    
 8007258:	7dfa      	ldrb	r2, [r7, #23]
 800725a:	7cfb      	ldrb	r3, [r7, #19]
 800725c:	4413      	add	r3, r2
 800725e:	75fb      	strb	r3, [r7, #23]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8007260:	e7b8      	b.n	80071d4 <u8g2_draw_string+0x1c>
      break;
 8007262:	bf00      	nop
    }
  }
  return sum;
 8007264:	7dfb      	ldrb	r3, [r7, #23]
}
 8007266:	4618      	mov	r0, r3
 8007268:	3718      	adds	r7, #24
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
 800726e:	bf00      	nop

08007270 <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	607b      	str	r3, [r7, #4]
 800727a:	460b      	mov	r3, r1
 800727c:	72fb      	strb	r3, [r7, #11]
 800727e:	4613      	mov	r3, r2
 8007280:	72bb      	strb	r3, [r7, #10]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	4a06      	ldr	r2, [pc, #24]	@ (80072a0 <u8g2_DrawStr+0x30>)
 8007286:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8007288:	7aba      	ldrb	r2, [r7, #10]
 800728a:	7af9      	ldrb	r1, [r7, #11]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	68f8      	ldr	r0, [r7, #12]
 8007290:	f7ff ff92 	bl	80071b8 <u8g2_draw_string>
 8007294:	4603      	mov	r3, r0
}
 8007296:	4618      	mov	r0, r3
 8007298:	3710      	adds	r7, #16
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	08007a2f 	.word	0x08007a2f

080072a4 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d05d      	beq.n	8007370 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f993 206d 	ldrsb.w	r2, [r3, #109]	@ 0x6d
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f993 206e 	ldrsb.w	r2, [r3, #110]	@ 0x6e
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d04d      	beq.n	8007372 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d11c      	bne.n	800731a <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f993 2079 	ldrsb.w	r2, [r3, #121]	@ 0x79
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f993 306f 	ldrsb.w	r3, [r3, #111]	@ 0x6f
 80072ec:	429a      	cmp	r2, r3
 80072ee:	da05      	bge.n	80072fc <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f993 206f 	ldrsb.w	r2, [r3, #111]	@ 0x6f
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f993 207a 	ldrsb.w	r2, [r3, #122]	@ 0x7a
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f993 3070 	ldrsb.w	r3, [r3, #112]	@ 0x70
 8007308:	429a      	cmp	r2, r3
 800730a:	dd32      	ble.n	8007372 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f993 2070 	ldrsb.w	r2, [r3, #112]	@ 0x70
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
 8007318:	e02b      	b.n	8007372 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f993 3079 	ldrsb.w	r3, [r3, #121]	@ 0x79
 8007320:	461a      	mov	r2, r3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f993 306a 	ldrsb.w	r3, [r3, #106]	@ 0x6a
 8007328:	4619      	mov	r1, r3
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f993 306c 	ldrsb.w	r3, [r3, #108]	@ 0x6c
 8007330:	440b      	add	r3, r1
 8007332:	429a      	cmp	r2, r3
 8007334:	da0d      	bge.n	8007352 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f993 306a 	ldrsb.w	r3, [r3, #106]	@ 0x6a
 800733c:	b2da      	uxtb	r2, r3
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f993 306c 	ldrsb.w	r3, [r3, #108]	@ 0x6c
 8007344:	b2db      	uxtb	r3, r3
 8007346:	4413      	add	r3, r2
 8007348:	b2db      	uxtb	r3, r3
 800734a:	b25a      	sxtb	r2, r3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f993 207a 	ldrsb.w	r2, [r3, #122]	@ 0x7a
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f993 306c 	ldrsb.w	r3, [r3, #108]	@ 0x6c
 800735e:	429a      	cmp	r2, r3
 8007360:	dd07      	ble.n	8007372 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f993 206c 	ldrsb.w	r2, [r3, #108]	@ 0x6c
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
 800736e:	e000      	b.n	8007372 <u8g2_UpdateRefHeight+0xce>
    return;
 8007370:	bf00      	nop
  }  
}
 8007372:	370c      	adds	r7, #12
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr

0800737c <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 800737c:	b480      	push	{r7}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  return 0;
 8007384:	2300      	movs	r3, #0
}
 8007386:	4618      	mov	r0, r3
 8007388:	370c      	adds	r7, #12
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr
	...

08007394 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	4a04      	ldr	r2, [pc, #16]	@ (80073b0 <u8g2_SetFontPosBaseline+0x1c>)
 80073a0:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 80073a2:	bf00      	nop
 80073a4:	370c      	adds	r7, #12
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr
 80073ae:	bf00      	nop
 80073b0:	0800737d 	.word	0x0800737d

080073b4 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b082      	sub	sp, #8
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073c2:	683a      	ldr	r2, [r7, #0]
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d00b      	beq.n	80073e0 <u8g2_SetFont+0x2c>
  {
#ifdef  __unix__
	u8g2->last_font_data = NULL;
	u8g2->last_unicode = 0x0ffff;
#endif 
    u8g2->font = font;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	683a      	ldr	r2, [r7, #0]
 80073cc:	649a      	str	r2, [r3, #72]	@ 0x48
    u8g2_read_font_info(&(u8g2->font_info), font);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	3360      	adds	r3, #96	@ 0x60
 80073d2:	6839      	ldr	r1, [r7, #0]
 80073d4:	4618      	mov	r0, r3
 80073d6:	f7ff fab7 	bl	8006948 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f7ff ff62 	bl	80072a4 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 80073e0:	bf00      	nop
 80073e2:	3708      	adds	r7, #8
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <u8g2_clip_intersection>:

  optimized clipping: c is set to 0
*/
//static uint8_t u8g2_clip_intersection(u8g2_uint_t *ap, u8g2_uint_t *bp, u8g2_uint_t c, u8g2_uint_t d)
static uint8_t u8g2_clip_intersection(u8g2_uint_t *ap, u8g2_uint_t *bp, u8g2_uint_t d)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b087      	sub	sp, #28
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	4613      	mov	r3, r2
 80073f4:	71fb      	strb	r3, [r7, #7]
  u8g2_uint_t a = *ap;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	75fb      	strb	r3, [r7, #23]
  u8g2_uint_t b = *bp;
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	75bb      	strb	r3, [r7, #22]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8007402:	7dfa      	ldrb	r2, [r7, #23]
 8007404:	7dbb      	ldrb	r3, [r7, #22]
 8007406:	429a      	cmp	r2, r3
 8007408:	d911      	bls.n	800742e <u8g2_clip_intersection+0x46>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 800740a:	7dfa      	ldrb	r2, [r7, #23]
 800740c:	79fb      	ldrb	r3, [r7, #7]
 800740e:	429a      	cmp	r2, r3
 8007410:	d208      	bcs.n	8007424 <u8g2_clip_intersection+0x3c>
    {
      b = d;
 8007412:	79fb      	ldrb	r3, [r7, #7]
 8007414:	75bb      	strb	r3, [r7, #22]
      b--;
 8007416:	7dbb      	ldrb	r3, [r7, #22]
 8007418:	3b01      	subs	r3, #1
 800741a:	75bb      	strb	r3, [r7, #22]
      *bp = b;
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	7dba      	ldrb	r2, [r7, #22]
 8007420:	701a      	strb	r2, [r3, #0]
 8007422:	e004      	b.n	800742e <u8g2_clip_intersection+0x46>
    }
    else
    {
      a = 0;
 8007424:	2300      	movs	r3, #0
 8007426:	75fb      	strb	r3, [r7, #23]
      *ap = a;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	7dfa      	ldrb	r2, [r7, #23]
 800742c:	701a      	strb	r2, [r3, #0]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 800742e:	7dfa      	ldrb	r2, [r7, #23]
 8007430:	79fb      	ldrb	r3, [r7, #7]
 8007432:	429a      	cmp	r2, r3
 8007434:	d301      	bcc.n	800743a <u8g2_clip_intersection+0x52>
    return 0;
 8007436:	2300      	movs	r3, #0
 8007438:	e00c      	b.n	8007454 <u8g2_clip_intersection+0x6c>
  if ( b <= 0 )		// was b <= c, could be replaced with b == 0
 800743a:	7dbb      	ldrb	r3, [r7, #22]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d101      	bne.n	8007444 <u8g2_clip_intersection+0x5c>
    return 0;
 8007440:	2300      	movs	r3, #0
 8007442:	e007      	b.n	8007454 <u8g2_clip_intersection+0x6c>
  //if ( a < c )		// never true with c == 0
  //  *ap = c;
  if ( b > d )
 8007444:	7dba      	ldrb	r2, [r7, #22]
 8007446:	79fb      	ldrb	r3, [r7, #7]
 8007448:	429a      	cmp	r2, r3
 800744a:	d902      	bls.n	8007452 <u8g2_clip_intersection+0x6a>
    *bp = d;
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	79fa      	ldrb	r2, [r7, #7]
 8007450:	701a      	strb	r2, [r3, #0]
    
  return 1;
 8007452:	2301      	movs	r3, #1
}
 8007454:	4618      	mov	r0, r3
 8007456:	371c      	adds	r7, #28
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr

08007460 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
static void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8007460:	b5b0      	push	{r4, r5, r7, lr}
 8007462:	b086      	sub	sp, #24
 8007464:	af02      	add	r7, sp, #8
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	4608      	mov	r0, r1
 800746a:	4611      	mov	r1, r2
 800746c:	461a      	mov	r2, r3
 800746e:	4603      	mov	r3, r0
 8007470:	70fb      	strb	r3, [r7, #3]
 8007472:	460b      	mov	r3, r1
 8007474:	70bb      	strb	r3, [r7, #2]
 8007476:	4613      	mov	r3, r2
 8007478:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t a;
  register u8g2_uint_t w, h;

  h = u8g2->pixel_buf_height;		// this must be the real buffer height
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f893 403b 	ldrb.w	r4, [r3, #59]	@ 0x3b
  w = u8g2->pixel_buf_width;		// this could be replaced by u8g2->u8x8.display_info->pixel_width
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f893 503a 	ldrb.w	r5, [r3, #58]	@ 0x3a


  if ( dir == 0 )
 8007486:	f897 3020 	ldrb.w	r3, [r7, #32]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d11a      	bne.n	80074c4 <u8g2_draw_hv_line_2dir+0x64>
  {
    if ( y >= h )
 800748e:	78bb      	ldrb	r3, [r7, #2]
 8007490:	429c      	cmp	r4, r3
 8007492:	d93d      	bls.n	8007510 <u8g2_draw_hv_line_2dir+0xb0>
      return;
    a = x;
 8007494:	78fb      	ldrb	r3, [r7, #3]
 8007496:	73fb      	strb	r3, [r7, #15]
    a += len;
 8007498:	7bfa      	ldrb	r2, [r7, #15]
 800749a:	787b      	ldrb	r3, [r7, #1]
 800749c:	4413      	add	r3, r2
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	73fb      	strb	r3, [r7, #15]
    if ( u8g2_clip_intersection(&x, &a, w) == 0 )
 80074a2:	f107 010f 	add.w	r1, r7, #15
 80074a6:	1cfb      	adds	r3, r7, #3
 80074a8:	462a      	mov	r2, r5
 80074aa:	4618      	mov	r0, r3
 80074ac:	f7ff ff9c 	bl	80073e8 <u8g2_clip_intersection>
 80074b0:	4603      	mov	r3, r0
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d02e      	beq.n	8007514 <u8g2_draw_hv_line_2dir+0xb4>
      return;
    len = a;
 80074b6:	7bfb      	ldrb	r3, [r7, #15]
 80074b8:	707b      	strb	r3, [r7, #1]
    len -= x;
 80074ba:	78fb      	ldrb	r3, [r7, #3]
 80074bc:	787a      	ldrb	r2, [r7, #1]
 80074be:	1ad3      	subs	r3, r2, r3
 80074c0:	707b      	strb	r3, [r7, #1]
 80074c2:	e019      	b.n	80074f8 <u8g2_draw_hv_line_2dir+0x98>
  }
  else
  {
    if ( x >= w )
 80074c4:	78fb      	ldrb	r3, [r7, #3]
 80074c6:	429d      	cmp	r5, r3
 80074c8:	d926      	bls.n	8007518 <u8g2_draw_hv_line_2dir+0xb8>
      return;
    a = y;
 80074ca:	78bb      	ldrb	r3, [r7, #2]
 80074cc:	73fb      	strb	r3, [r7, #15]
    a += len;
 80074ce:	7bfa      	ldrb	r2, [r7, #15]
 80074d0:	787b      	ldrb	r3, [r7, #1]
 80074d2:	4413      	add	r3, r2
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	73fb      	strb	r3, [r7, #15]
    if ( u8g2_clip_intersection(&y, &a, h) == 0 )
 80074d8:	f107 010f 	add.w	r1, r7, #15
 80074dc:	1cbb      	adds	r3, r7, #2
 80074de:	4622      	mov	r2, r4
 80074e0:	4618      	mov	r0, r3
 80074e2:	f7ff ff81 	bl	80073e8 <u8g2_clip_intersection>
 80074e6:	4603      	mov	r3, r0
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d017      	beq.n	800751c <u8g2_draw_hv_line_2dir+0xbc>
      return;
    len = a;
 80074ec:	7bfb      	ldrb	r3, [r7, #15]
 80074ee:	707b      	strb	r3, [r7, #1]
    len -= y;
 80074f0:	78bb      	ldrb	r3, [r7, #2]
 80074f2:	787a      	ldrb	r2, [r7, #1]
 80074f4:	1ad3      	subs	r3, r2, r3
 80074f6:	707b      	strb	r3, [r7, #1]
  }
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 80074fc:	78f9      	ldrb	r1, [r7, #3]
 80074fe:	78ba      	ldrb	r2, [r7, #2]
 8007500:	7878      	ldrb	r0, [r7, #1]
 8007502:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007506:	9300      	str	r3, [sp, #0]
 8007508:	4603      	mov	r3, r0
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	47a0      	blx	r4
 800750e:	e006      	b.n	800751e <u8g2_draw_hv_line_2dir+0xbe>
      return;
 8007510:	bf00      	nop
 8007512:	e004      	b.n	800751e <u8g2_draw_hv_line_2dir+0xbe>
      return;
 8007514:	bf00      	nop
 8007516:	e002      	b.n	800751e <u8g2_draw_hv_line_2dir+0xbe>
      return;
 8007518:	bf00      	nop
 800751a:	e000      	b.n	800751e <u8g2_draw_hv_line_2dir+0xbe>
      return;
 800751c:	bf00      	nop
}
 800751e:	3710      	adds	r7, #16
 8007520:	46bd      	mov	sp, r7
 8007522:	bdb0      	pop	{r4, r5, r7, pc}

08007524 <u8g2_draw_hv_line_4dir>:

  This function will remove directions 2 and 3. Instead 0 and 1 are used.

*/
void u8g2_draw_hv_line_4dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8007524:	b590      	push	{r4, r7, lr}
 8007526:	b085      	sub	sp, #20
 8007528:	af02      	add	r7, sp, #8
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	4608      	mov	r0, r1
 800752e:	4611      	mov	r1, r2
 8007530:	461a      	mov	r2, r3
 8007532:	4603      	mov	r3, r0
 8007534:	70fb      	strb	r3, [r7, #3]
 8007536:	460b      	mov	r3, r1
 8007538:	70bb      	strb	r3, [r7, #2]
 800753a:	4613      	mov	r3, r2
 800753c:	707b      	strb	r3, [r7, #1]
#ifdef U8G2_WITH_HVLINE_COUNT
  u8g2->hv_cnt++;
#endif /* U8G2_WITH_HVLINE_COUNT */   

  /* transform to pixel buffer coordinates */
   y -= u8g2->tile_curr_row*8;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8007544:	00db      	lsls	r3, r3, #3
 8007546:	b2db      	uxtb	r3, r3
 8007548:	78ba      	ldrb	r2, [r7, #2]
 800754a:	1ad3      	subs	r3, r2, r3
 800754c:	70bb      	strb	r3, [r7, #2]

  /* additional optimization for one pixel draw */
  /* requires about 60 bytes on the ATMega flash memory */
  /* 20% improvement for single pixel draw test in FPS.ino */
#ifdef U8G2_WITH_ONE_PIXEL_OPTIMIZATION
  if ( len == 1 )
 800754e:	787b      	ldrb	r3, [r7, #1]
 8007550:	2b01      	cmp	r3, #1
 8007552:	d116      	bne.n	8007582 <u8g2_draw_hv_line_4dir+0x5e>
  {
    if ( x < u8g2->pixel_buf_width && y < u8g2->pixel_buf_height )
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800755a:	78fa      	ldrb	r2, [r7, #3]
 800755c:	429a      	cmp	r2, r3
 800755e:	d233      	bcs.n	80075c8 <u8g2_draw_hv_line_4dir+0xa4>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8007566:	78ba      	ldrb	r2, [r7, #2]
 8007568:	429a      	cmp	r2, r3
 800756a:	d22d      	bcs.n	80075c8 <u8g2_draw_hv_line_4dir+0xa4>
      u8g2->ll_hvline(u8g2, x, y, len, dir);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8007570:	7878      	ldrb	r0, [r7, #1]
 8007572:	78ba      	ldrb	r2, [r7, #2]
 8007574:	78f9      	ldrb	r1, [r7, #3]
 8007576:	7e3b      	ldrb	r3, [r7, #24]
 8007578:	9300      	str	r3, [sp, #0]
 800757a:	4603      	mov	r3, r0
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	47a0      	blx	r4
    return;
 8007580:	e022      	b.n	80075c8 <u8g2_draw_hv_line_4dir+0xa4>
  }
#endif
  
  if ( dir == 2 )
 8007582:	7e3b      	ldrb	r3, [r7, #24]
 8007584:	2b02      	cmp	r3, #2
 8007586:	d107      	bne.n	8007598 <u8g2_draw_hv_line_4dir+0x74>
  {
    x -= len;
 8007588:	78fa      	ldrb	r2, [r7, #3]
 800758a:	787b      	ldrb	r3, [r7, #1]
 800758c:	1ad3      	subs	r3, r2, r3
 800758e:	70fb      	strb	r3, [r7, #3]
    x++;
 8007590:	78fb      	ldrb	r3, [r7, #3]
 8007592:	3301      	adds	r3, #1
 8007594:	70fb      	strb	r3, [r7, #3]
 8007596:	e009      	b.n	80075ac <u8g2_draw_hv_line_4dir+0x88>
  }
  else if ( dir == 3 )
 8007598:	7e3b      	ldrb	r3, [r7, #24]
 800759a:	2b03      	cmp	r3, #3
 800759c:	d106      	bne.n	80075ac <u8g2_draw_hv_line_4dir+0x88>
  {
    y -= len;
 800759e:	78ba      	ldrb	r2, [r7, #2]
 80075a0:	787b      	ldrb	r3, [r7, #1]
 80075a2:	1ad3      	subs	r3, r2, r3
 80075a4:	70bb      	strb	r3, [r7, #2]
    y++;
 80075a6:	78bb      	ldrb	r3, [r7, #2]
 80075a8:	3301      	adds	r3, #1
 80075aa:	70bb      	strb	r3, [r7, #2]
  }
  dir &= 1;  
 80075ac:	7e3b      	ldrb	r3, [r7, #24]
 80075ae:	f003 0301 	and.w	r3, r3, #1
 80075b2:	763b      	strb	r3, [r7, #24]
#ifdef U8G2_WITH_CLIPPING
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 80075b4:	7878      	ldrb	r0, [r7, #1]
 80075b6:	78ba      	ldrb	r2, [r7, #2]
 80075b8:	78f9      	ldrb	r1, [r7, #3]
 80075ba:	7e3b      	ldrb	r3, [r7, #24]
 80075bc:	9300      	str	r3, [sp, #0]
 80075be:	4603      	mov	r3, r0
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f7ff ff4d 	bl	8007460 <u8g2_draw_hv_line_2dir>
 80075c6:	e000      	b.n	80075ca <u8g2_draw_hv_line_4dir+0xa6>
    return;
 80075c8:	bf00      	nop
#else
  u8g2->ll_hvline(u8g2, x, y, len, dir);
#endif
}
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd90      	pop	{r4, r7, pc}

080075d0 <u8g2_DrawHVLine>:
/*
  This is the toplevel function for the hv line draw procedures.
  This function should be called by the user.
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80075d0:	b590      	push	{r4, r7, lr}
 80075d2:	b085      	sub	sp, #20
 80075d4:	af02      	add	r7, sp, #8
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	4608      	mov	r0, r1
 80075da:	4611      	mov	r1, r2
 80075dc:	461a      	mov	r2, r3
 80075de:	4603      	mov	r3, r0
 80075e0:	70fb      	strb	r3, [r7, #3]
 80075e2:	460b      	mov	r3, r1
 80075e4:	70bb      	strb	r3, [r7, #2]
 80075e6:	4613      	mov	r3, r2
 80075e8:	707b      	strb	r3, [r7, #1]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  if ( len != 0 )
 80075ea:	787b      	ldrb	r3, [r7, #1]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d00a      	beq.n	8007606 <u8g2_DrawHVLine+0x36>
    u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075f4:	685c      	ldr	r4, [r3, #4]
 80075f6:	7878      	ldrb	r0, [r7, #1]
 80075f8:	78ba      	ldrb	r2, [r7, #2]
 80075fa:	78f9      	ldrb	r1, [r7, #3]
 80075fc:	7e3b      	ldrb	r3, [r7, #24]
 80075fe:	9300      	str	r3, [sp, #0]
 8007600:	4603      	mov	r3, r0
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	47a0      	blx	r4
}
 8007606:	bf00      	nop
 8007608:	370c      	adds	r7, #12
 800760a:	46bd      	mov	sp, r7
 800760c:	bd90      	pop	{r4, r7, pc}

0800760e <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 800760e:	b480      	push	{r7}
 8007610:	b083      	sub	sp, #12
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
 8007616:	460b      	mov	r3, r1
 8007618:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	78fa      	ldrb	r2, [r7, #3]
 800761e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  if ( color >= 3 )
 8007622:	78fb      	ldrb	r3, [r7, #3]
 8007624:	2b02      	cmp	r3, #2
 8007626:	d903      	bls.n	8007630 <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2201      	movs	r2, #1
 800762c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
}
 8007630:	bf00      	nop
 8007632:	370c      	adds	r7, #12
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr

0800763c <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 800763c:	b490      	push	{r4, r7}
 800763e:	b082      	sub	sp, #8
 8007640:	af00      	add	r7, sp, #0
 8007642:	4604      	mov	r4, r0
 8007644:	4608      	mov	r0, r1
 8007646:	4611      	mov	r1, r2
 8007648:	461a      	mov	r2, r3
 800764a:	4623      	mov	r3, r4
 800764c:	71fb      	strb	r3, [r7, #7]
 800764e:	4603      	mov	r3, r0
 8007650:	71bb      	strb	r3, [r7, #6]
 8007652:	460b      	mov	r3, r1
 8007654:	717b      	strb	r3, [r7, #5]
 8007656:	4613      	mov	r3, r2
 8007658:	713b      	strb	r3, [r7, #4]
  if ( v0 < a1 )		// v0 <= a1
 800765a:	797a      	ldrb	r2, [r7, #5]
 800765c:	79bb      	ldrb	r3, [r7, #6]
 800765e:	429a      	cmp	r2, r3
 8007660:	d20d      	bcs.n	800767e <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8007662:	793a      	ldrb	r2, [r7, #4]
 8007664:	79fb      	ldrb	r3, [r7, #7]
 8007666:	429a      	cmp	r2, r3
 8007668:	d901      	bls.n	800766e <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 800766a:	2301      	movs	r3, #1
 800766c:	e014      	b.n	8007698 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 800766e:	797a      	ldrb	r2, [r7, #5]
 8007670:	793b      	ldrb	r3, [r7, #4]
 8007672:	429a      	cmp	r2, r3
 8007674:	d901      	bls.n	800767a <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8007676:	2301      	movs	r3, #1
 8007678:	e00e      	b.n	8007698 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 800767a:	2300      	movs	r3, #0
 800767c:	e00c      	b.n	8007698 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 800767e:	793a      	ldrb	r2, [r7, #4]
 8007680:	79fb      	ldrb	r3, [r7, #7]
 8007682:	429a      	cmp	r2, r3
 8007684:	d907      	bls.n	8007696 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8007686:	797a      	ldrb	r2, [r7, #5]
 8007688:	793b      	ldrb	r3, [r7, #4]
 800768a:	429a      	cmp	r2, r3
 800768c:	d901      	bls.n	8007692 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 800768e:	2301      	movs	r3, #1
 8007690:	e002      	b.n	8007698 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8007692:	2300      	movs	r3, #0
 8007694:	e000      	b.n	8007698 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8007696:	2300      	movs	r3, #0
    }
  }
}
 8007698:	4618      	mov	r0, r3
 800769a:	3708      	adds	r7, #8
 800769c:	46bd      	mov	sp, r7
 800769e:	bc90      	pop	{r4, r7}
 80076a0:	4770      	bx	lr

080076a2 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 80076a2:	b580      	push	{r7, lr}
 80076a4:	b082      	sub	sp, #8
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
 80076aa:	4608      	mov	r0, r1
 80076ac:	4611      	mov	r1, r2
 80076ae:	461a      	mov	r2, r3
 80076b0:	4603      	mov	r3, r0
 80076b2:	70fb      	strb	r3, [r7, #3]
 80076b4:	460b      	mov	r3, r1
 80076b6:	70bb      	strb	r3, [r7, #2]
 80076b8:	4613      	mov	r3, r2
 80076ba:	707b      	strb	r3, [r7, #1]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f893 0043 	ldrb.w	r0, [r3, #67]	@ 0x43
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f893 1044 	ldrb.w	r1, [r3, #68]	@ 0x44
 80076c8:	7c3b      	ldrb	r3, [r7, #16]
 80076ca:	78ba      	ldrb	r2, [r7, #2]
 80076cc:	f7ff ffb6 	bl	800763c <u8g2_is_intersection_decision_tree>
 80076d0:	4603      	mov	r3, r0
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d101      	bne.n	80076da <u8g2_IsIntersection+0x38>
    return 0; 
 80076d6:	2300      	movs	r3, #0
 80076d8:	e00a      	b.n	80076f0 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f893 0041 	ldrb.w	r0, [r3, #65]	@ 0x41
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f893 1042 	ldrb.w	r1, [r3, #66]	@ 0x42
 80076e6:	787b      	ldrb	r3, [r7, #1]
 80076e8:	78fa      	ldrb	r2, [r7, #3]
 80076ea:	f7ff ffa7 	bl	800763c <u8g2_is_intersection_decision_tree>
 80076ee:	4603      	mov	r3, r0
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3708      	adds	r7, #8
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b087      	sub	sp, #28
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	4608      	mov	r0, r1
 8007702:	4611      	mov	r1, r2
 8007704:	461a      	mov	r2, r3
 8007706:	4603      	mov	r3, r0
 8007708:	70fb      	strb	r3, [r7, #3]
 800770a:	460b      	mov	r3, r1
 800770c:	70bb      	strb	r3, [r7, #2]
 800770e:	4613      	mov	r3, r2
 8007710:	707b      	strb	r3, [r7, #1]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8007712:	78bb      	ldrb	r3, [r7, #2]
 8007714:	74fb      	strb	r3, [r7, #19]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8007716:	7cfb      	ldrb	r3, [r7, #19]
 8007718:	f003 0307 	and.w	r3, r3, #7
 800771c:	74fb      	strb	r3, [r7, #19]
  mask = 1;
 800771e:	2301      	movs	r3, #1
 8007720:	743b      	strb	r3, [r7, #16]
  mask <<= bit_pos;
 8007722:	7c3a      	ldrb	r2, [r7, #16]
 8007724:	7cfb      	ldrb	r3, [r7, #19]
 8007726:	fa02 f303 	lsl.w	r3, r2, r3
 800772a:	743b      	strb	r3, [r7, #16]

  or_mask = 0;
 800772c:	2300      	movs	r3, #0
 800772e:	74bb      	strb	r3, [r7, #18]
  xor_mask = 0;
 8007730:	2300      	movs	r3, #0
 8007732:	747b      	strb	r3, [r7, #17]
  if ( u8g2->draw_color <= 1 )
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800773a:	2b01      	cmp	r3, #1
 800773c:	d801      	bhi.n	8007742 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 800773e:	7c3b      	ldrb	r3, [r7, #16]
 8007740:	74bb      	strb	r3, [r7, #18]
  if ( u8g2->draw_color != 1 )
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007748:	2b01      	cmp	r3, #1
 800774a:	d001      	beq.n	8007750 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 800774c:	7c3b      	ldrb	r3, [r7, #16]
 800774e:	747b      	strb	r3, [r7, #17]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8007750:	78bb      	ldrb	r3, [r7, #2]
 8007752:	81fb      	strh	r3, [r7, #14]
  offset &= ~7;
 8007754:	89fb      	ldrh	r3, [r7, #14]
 8007756:	f023 0307 	bic.w	r3, r3, #7
 800775a:	81fb      	strh	r3, [r7, #14]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	7c1b      	ldrb	r3, [r3, #16]
 8007762:	461a      	mov	r2, r3
 8007764:	89fb      	ldrh	r3, [r7, #14]
 8007766:	fb13 f302 	smulbb	r3, r3, r2
 800776a:	81fb      	strh	r3, [r7, #14]
  ptr = u8g2->tile_buf_ptr;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007770:	617b      	str	r3, [r7, #20]
  ptr += offset;
 8007772:	89fb      	ldrh	r3, [r7, #14]
 8007774:	697a      	ldr	r2, [r7, #20]
 8007776:	4413      	add	r3, r2
 8007778:	617b      	str	r3, [r7, #20]
  ptr += x;
 800777a:	78fb      	ldrb	r3, [r7, #3]
 800777c:	697a      	ldr	r2, [r7, #20]
 800777e:	4413      	add	r3, r2
 8007780:	617b      	str	r3, [r7, #20]
  
  if ( dir == 0 )
 8007782:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d117      	bne.n	80077ba <u8g2_ll_hvline_vertical_top_lsb+0xc2>
  {
      do
      {
	*ptr |= or_mask;
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	781a      	ldrb	r2, [r3, #0]
 800778e:	7cbb      	ldrb	r3, [r7, #18]
 8007790:	4313      	orrs	r3, r2
 8007792:	b2da      	uxtb	r2, r3
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	781a      	ldrb	r2, [r3, #0]
 800779c:	7c7b      	ldrb	r3, [r7, #17]
 800779e:	4053      	eors	r3, r2
 80077a0:	b2da      	uxtb	r2, r3
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	701a      	strb	r2, [r3, #0]
	ptr++;
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	3301      	adds	r3, #1
 80077aa:	617b      	str	r3, [r7, #20]
	len--;
 80077ac:	787b      	ldrb	r3, [r7, #1]
 80077ae:	3b01      	subs	r3, #1
 80077b0:	707b      	strb	r3, [r7, #1]
      } while( len != 0 );
 80077b2:	787b      	ldrb	r3, [r7, #1]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d1e8      	bne.n	800778a <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 80077b8:	e039      	b.n	800782e <u8g2_ll_hvline_vertical_top_lsb+0x136>
      *ptr |= or_mask;
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	781a      	ldrb	r2, [r3, #0]
 80077be:	7cbb      	ldrb	r3, [r7, #18]
 80077c0:	4313      	orrs	r3, r2
 80077c2:	b2da      	uxtb	r2, r3
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	781a      	ldrb	r2, [r3, #0]
 80077cc:	7c7b      	ldrb	r3, [r7, #17]
 80077ce:	4053      	eors	r3, r2
 80077d0:	b2da      	uxtb	r2, r3
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 80077d6:	7cfb      	ldrb	r3, [r7, #19]
 80077d8:	3301      	adds	r3, #1
 80077da:	74fb      	strb	r3, [r7, #19]
      bit_pos &= 7;
 80077dc:	7cfb      	ldrb	r3, [r7, #19]
 80077de:	f003 0307 	and.w	r3, r3, #7
 80077e2:	74fb      	strb	r3, [r7, #19]
      len--;
 80077e4:	787b      	ldrb	r3, [r7, #1]
 80077e6:	3b01      	subs	r3, #1
 80077e8:	707b      	strb	r3, [r7, #1]
      if ( bit_pos == 0 )
 80077ea:	7cfb      	ldrb	r3, [r7, #19]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d115      	bne.n	800781c <u8g2_ll_hvline_vertical_top_lsb+0x124>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80077f6:	461a      	mov	r2, r3
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	4413      	add	r3, r2
 80077fc:	617b      	str	r3, [r7, #20]
	if ( u8g2->draw_color <= 1 )
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007804:	2b01      	cmp	r3, #1
 8007806:	d801      	bhi.n	800780c <u8g2_ll_hvline_vertical_top_lsb+0x114>
	  or_mask  = 1;
 8007808:	2301      	movs	r3, #1
 800780a:	74bb      	strb	r3, [r7, #18]
	if ( u8g2->draw_color != 1 )
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007812:	2b01      	cmp	r3, #1
 8007814:	d008      	beq.n	8007828 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	  xor_mask = 1;
 8007816:	2301      	movs	r3, #1
 8007818:	747b      	strb	r3, [r7, #17]
 800781a:	e005      	b.n	8007828 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	or_mask <<= 1;
 800781c:	7cbb      	ldrb	r3, [r7, #18]
 800781e:	005b      	lsls	r3, r3, #1
 8007820:	74bb      	strb	r3, [r7, #18]
	xor_mask <<= 1;
 8007822:	7c7b      	ldrb	r3, [r7, #17]
 8007824:	005b      	lsls	r3, r3, #1
 8007826:	747b      	strb	r3, [r7, #17]
    } while( len != 0 );
 8007828:	787b      	ldrb	r3, [r7, #1]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d1c5      	bne.n	80077ba <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 800782e:	bf00      	nop
 8007830:	371c      	adds	r7, #28
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr

0800783a <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 800783a:	b580      	push	{r7, lr}
 800783c:	b084      	sub	sp, #16
 800783e:	af00      	add	r7, sp, #0
 8007840:	60f8      	str	r0, [r7, #12]
 8007842:	60b9      	str	r1, [r7, #8]
 8007844:	603b      	str	r3, [r7, #0]
 8007846:	4613      	mov	r3, r2
 8007848:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2200      	movs	r2, #0
 800784e:	649a      	str	r2, [r3, #72]	@ 0x48
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	683a      	ldr	r2, [r7, #0]
 8007854:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	68ba      	ldr	r2, [r7, #8]
 800785a:	635a      	str	r2, [r3, #52]	@ 0x34
  u8g2->tile_buf_height = tile_buf_height;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	79fa      	ldrb	r2, [r7, #7]
 8007860:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  
  u8g2->tile_curr_row = 0;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2200      	movs	r2, #0
 8007868:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2200      	movs	r2, #0
 8007870:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
  u8g2->bitmap_transparency = 0;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2200      	movs	r2, #0
 8007878:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
  
  u8g2->draw_color = 1;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2201      	movs	r2, #1
 8007880:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  u8g2->is_auto_page_clear = 1;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2201      	movs	r2, #1
 8007888:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
  
  u8g2->cb = u8g2_cb;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	69ba      	ldr	r2, [r7, #24]
 8007890:	631a      	str	r2, [r3, #48]	@ 0x30
  u8g2->cb->update(u8g2);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	68f8      	ldr	r0, [r7, #12]
 800789a:	4798      	blx	r3

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 800789c:	68f8      	ldr	r0, [r7, #12]
 800789e:	f7ff fd79 	bl	8007394 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2200      	movs	r2, #0
 80078a6:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
#endif
}
 80078aa:	bf00      	nop
 80078ac:	3710      	adds	r7, #16
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}

080078b2 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 80078b2:	b480      	push	{r7}
 80078b4:	b085      	sub	sp, #20
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80078c0:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 80078c2:	7bfb      	ldrb	r3, [r7, #15]
 80078c4:	00db      	lsls	r3, r3, #3
 80078c6:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_height = t;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	7bfa      	ldrb	r2, [r7, #15]
 80078cc:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
  
  t = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	7c1b      	ldrb	r3, [r3, #16]
 80078d6:	73fb      	strb	r3, [r7, #15]
#ifndef U8G2_16BIT
  if ( t >= 32 )
 80078d8:	7bfb      	ldrb	r3, [r7, #15]
 80078da:	2b1f      	cmp	r3, #31
 80078dc:	d901      	bls.n	80078e2 <u8g2_update_dimension_common+0x30>
    t = 31;
 80078de:	231f      	movs	r3, #31
 80078e0:	73fb      	strb	r3, [r7, #15]
#endif
  t *= 8;
 80078e2:	7bfb      	ldrb	r3, [r7, #15]
 80078e4:	00db      	lsls	r3, r3, #3
 80078e6:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_width = t;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	7bfa      	ldrb	r2, [r7, #15]
 80078ec:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
  
  t = u8g2->tile_curr_row;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80078f6:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 80078f8:	7bfb      	ldrb	r3, [r7, #15]
 80078fa:	00db      	lsls	r3, r3, #3
 80078fc:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_curr_row = t;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	7bfa      	ldrb	r2, [r7, #15]
 8007902:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  t = u8g2->tile_buf_height;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800790c:	73fb      	strb	r3, [r7, #15]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > u8g2_GetU8x8(u8g2)->display_info->tile_height )
 800790e:	7bfb      	ldrb	r3, [r7, #15]
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	f892 2039 	ldrb.w	r2, [r2, #57]	@ 0x39
 8007916:	4413      	add	r3, r2
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	6812      	ldr	r2, [r2, #0]
 800791c:	7c52      	ldrb	r2, [r2, #17]
 800791e:	4293      	cmp	r3, r2
 8007920:	dd07      	ble.n	8007932 <u8g2_update_dimension_common+0x80>
    t = u8g2_GetU8x8(u8g2)->display_info->tile_height - u8g2->tile_curr_row;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	7c5a      	ldrb	r2, [r3, #17]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800792e:	1ad3      	subs	r3, r2, r3
 8007930:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8007932:	7bfb      	ldrb	r3, [r7, #15]
 8007934:	00db      	lsls	r3, r3, #3
 8007936:	73fb      	strb	r3, [r7, #15]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  u8g2->buf_y1 = u8g2->buf_y0;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f893 203d 	ldrb.w	r2, [r3, #61]	@ 0x3d
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  u8g2->buf_y1 += t;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f893 203e 	ldrb.w	r2, [r3, #62]	@ 0x3e
 8007956:	7bfb      	ldrb	r3, [r7, #15]
 8007958:	4413      	add	r3, r2
 800795a:	b2da      	uxtb	r2, r3
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  
#ifdef U8G2_16BIT
  u8g2->width = u8g2_GetU8x8(u8g2)->display_info->pixel_width;
  u8g2->height = u8g2_GetU8x8(u8g2)->display_info->pixel_height;
#else
  u8g2->width = 240;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	22f0      	movs	r2, #240	@ 0xf0
 8007966:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  if ( u8g2_GetU8x8(u8g2)->display_info->pixel_width <= 240 )
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	8a9b      	ldrh	r3, [r3, #20]
 8007970:	2bf0      	cmp	r3, #240	@ 0xf0
 8007972:	d806      	bhi.n	8007982 <u8g2_update_dimension_common+0xd0>
    u8g2->width = u8g2_GetU8x8(u8g2)->display_info->pixel_width;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	8a9b      	ldrh	r3, [r3, #20]
 800797a:	b2da      	uxtb	r2, r3
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  u8g2->height = u8g2_GetU8x8(u8g2)->display_info->pixel_height;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	8adb      	ldrh	r3, [r3, #22]
 8007988:	b2da      	uxtb	r2, r3
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
#endif

}
 8007990:	bf00      	nop
 8007992:	3714      	adds	r7, #20
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr

0800799c <u8g2_update_dimension_r0>:

void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b082      	sub	sp, #8
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f7ff ff84 	bl	80078b2 <u8g2_update_dimension_common>

  u8g2->user_x0 = 0;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  u8g2->user_x1 = u8g2->pixel_buf_width;	/* pixel_buf_width replaced with width */
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f893 203a 	ldrb.w	r2, [r3, #58]	@ 0x3a
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  
  u8g2->user_y0 = u8g2->buf_y0;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f893 203d 	ldrb.w	r2, [r3, #61]	@ 0x3d
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  u8g2->user_y1 = u8g2->buf_y1;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f893 203e 	ldrb.w	r2, [r3, #62]	@ 0x3e
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
//  printf("x0=%d x1=%d y0=%d y1=%d\n", 
//      u8g2->user_x0, u8g2->user_x1, u8g2->user_y0, u8g2->user_y1);
}
 80079d6:	bf00      	nop
 80079d8:	3708      	adds	r7, #8
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}

080079de <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_4dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80079de:	b580      	push	{r7, lr}
 80079e0:	b084      	sub	sp, #16
 80079e2:	af02      	add	r7, sp, #8
 80079e4:	6078      	str	r0, [r7, #4]
 80079e6:	4608      	mov	r0, r1
 80079e8:	4611      	mov	r1, r2
 80079ea:	461a      	mov	r2, r3
 80079ec:	4603      	mov	r3, r0
 80079ee:	70fb      	strb	r3, [r7, #3]
 80079f0:	460b      	mov	r3, r1
 80079f2:	70bb      	strb	r3, [r7, #2]
 80079f4:	4613      	mov	r3, r2
 80079f6:	707b      	strb	r3, [r7, #1]
  u8g2_draw_hv_line_4dir(u8g2, x, y, len, dir);
 80079f8:	7878      	ldrb	r0, [r7, #1]
 80079fa:	78ba      	ldrb	r2, [r7, #2]
 80079fc:	78f9      	ldrb	r1, [r7, #3]
 80079fe:	7c3b      	ldrb	r3, [r7, #16]
 8007a00:	9300      	str	r3, [sp, #0]
 8007a02:	4603      	mov	r3, r0
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f7ff fd8d 	bl	8007524 <u8g2_draw_hv_line_4dir>
}
 8007a0a:	bf00      	nop
 8007a0c:	3708      	adds	r7, #8
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}

08007a12 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8007a12:	b480      	push	{r7}
 8007a14:	b083      	sub	sp, #12
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
}
 8007a22:	bf00      	nop
 8007a24:	370c      	adds	r7, #12
 8007a26:	46bd      	mov	sp, r7
 8007a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2c:	4770      	bx	lr

08007a2e <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8007a2e:	b480      	push	{r7}
 8007a30:	b083      	sub	sp, #12
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	6078      	str	r0, [r7, #4]
 8007a36:	460b      	mov	r3, r1
 8007a38:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8007a3a:	78fb      	ldrb	r3, [r7, #3]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d002      	beq.n	8007a46 <u8x8_ascii_next+0x18>
 8007a40:	78fb      	ldrb	r3, [r7, #3]
 8007a42:	2b0a      	cmp	r3, #10
 8007a44:	d102      	bne.n	8007a4c <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8007a46:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007a4a:	e001      	b.n	8007a50 <u8x8_ascii_next+0x22>
  return b;
 8007a4c:	78fb      	ldrb	r3, [r7, #3]
 8007a4e:	b29b      	uxth	r3, r3
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	370c      	adds	r7, #12
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr

08007a5c <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8007a5c:	b590      	push	{r4, r7, lr}
 8007a5e:	b083      	sub	sp, #12
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	460b      	mov	r3, r1
 8007a66:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	691c      	ldr	r4, [r3, #16]
 8007a6c:	78fa      	ldrb	r2, [r7, #3]
 8007a6e:	2300      	movs	r3, #0
 8007a70:	2120      	movs	r1, #32
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	47a0      	blx	r4
 8007a76:	4603      	mov	r3, r0
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	370c      	adds	r7, #12
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd90      	pop	{r4, r7, pc}

08007a80 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8007a80:	b590      	push	{r4, r7, lr}
 8007a82:	b085      	sub	sp, #20
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	460b      	mov	r3, r1
 8007a8a:	607a      	str	r2, [r7, #4]
 8007a8c:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	691c      	ldr	r4, [r3, #16]
 8007a92:	7afa      	ldrb	r2, [r7, #11]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2117      	movs	r1, #23
 8007a98:	68f8      	ldr	r0, [r7, #12]
 8007a9a:	47a0      	blx	r4
 8007a9c:	4603      	mov	r3, r0
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3714      	adds	r7, #20
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd90      	pop	{r4, r7, pc}

08007aa6 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8007aa6:	b580      	push	{r7, lr}
 8007aa8:	b082      	sub	sp, #8
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
 8007aae:	460b      	mov	r3, r1
 8007ab0:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8007ab2:	1cfb      	adds	r3, r7, #3
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	2101      	movs	r1, #1
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f7ff ffe1 	bl	8007a80 <u8x8_byte_SendBytes>
 8007abe:	4603      	mov	r3, r0
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3708      	adds	r7, #8
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8007ac8:	b590      	push	{r4, r7, lr}
 8007aca:	b083      	sub	sp, #12
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	460b      	mov	r3, r1
 8007ad2:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	68dc      	ldr	r4, [r3, #12]
 8007ad8:	78fa      	ldrb	r2, [r7, #3]
 8007ada:	2300      	movs	r3, #0
 8007adc:	2115      	movs	r1, #21
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	47a0      	blx	r4
 8007ae2:	4603      	mov	r3, r0
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	370c      	adds	r7, #12
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd90      	pop	{r4, r7, pc}

08007aec <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8007aec:	b590      	push	{r4, r7, lr}
 8007aee:	b083      	sub	sp, #12
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	460b      	mov	r3, r1
 8007af6:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	68dc      	ldr	r4, [r3, #12]
 8007afc:	78fa      	ldrb	r2, [r7, #3]
 8007afe:	2300      	movs	r3, #0
 8007b00:	2116      	movs	r1, #22
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	47a0      	blx	r4
 8007b06:	4603      	mov	r3, r0
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	370c      	adds	r7, #12
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd90      	pop	{r4, r7, pc}

08007b10 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8007b10:	b590      	push	{r4, r7, lr}
 8007b12:	b085      	sub	sp, #20
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	60f8      	str	r0, [r7, #12]
 8007b18:	460b      	mov	r3, r1
 8007b1a:	607a      	str	r2, [r7, #4]
 8007b1c:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	68dc      	ldr	r4, [r3, #12]
 8007b22:	7afa      	ldrb	r2, [r7, #11]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2117      	movs	r1, #23
 8007b28:	68f8      	ldr	r0, [r7, #12]
 8007b2a:	47a0      	blx	r4
 8007b2c:	4603      	mov	r3, r0
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3714      	adds	r7, #20
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd90      	pop	{r4, r7, pc}

08007b36 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8007b36:	b590      	push	{r4, r7, lr}
 8007b38:	b083      	sub	sp, #12
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	68dc      	ldr	r4, [r3, #12]
 8007b42:	2300      	movs	r3, #0
 8007b44:	2200      	movs	r2, #0
 8007b46:	2118      	movs	r1, #24
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	47a0      	blx	r4
 8007b4c:	4603      	mov	r3, r0
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	370c      	adds	r7, #12
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd90      	pop	{r4, r7, pc}

08007b56 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8007b56:	b590      	push	{r4, r7, lr}
 8007b58:	b083      	sub	sp, #12
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	68dc      	ldr	r4, [r3, #12]
 8007b62:	2300      	movs	r3, #0
 8007b64:	2200      	movs	r2, #0
 8007b66:	2119      	movs	r1, #25
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	47a0      	blx	r4
 8007b6c:	4603      	mov	r3, r0
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	370c      	adds	r7, #12
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd90      	pop	{r4, r7, pc}

08007b76 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8007b76:	b590      	push	{r4, r7, lr}
 8007b78:	b085      	sub	sp, #20
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
 8007b7e:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	781b      	ldrb	r3, [r3, #0]
 8007b84:	73fb      	strb	r3, [r7, #15]
    data++;
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	3301      	adds	r3, #1
 8007b8a:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8007b8c:	7bfb      	ldrb	r3, [r7, #15]
 8007b8e:	2bfe      	cmp	r3, #254	@ 0xfe
 8007b90:	d031      	beq.n	8007bf6 <u8x8_cad_SendSequence+0x80>
 8007b92:	2bfe      	cmp	r3, #254	@ 0xfe
 8007b94:	dc3d      	bgt.n	8007c12 <u8x8_cad_SendSequence+0x9c>
 8007b96:	2b19      	cmp	r3, #25
 8007b98:	dc3b      	bgt.n	8007c12 <u8x8_cad_SendSequence+0x9c>
 8007b9a:	2b18      	cmp	r3, #24
 8007b9c:	da23      	bge.n	8007be6 <u8x8_cad_SendSequence+0x70>
 8007b9e:	2b16      	cmp	r3, #22
 8007ba0:	dc02      	bgt.n	8007ba8 <u8x8_cad_SendSequence+0x32>
 8007ba2:	2b15      	cmp	r3, #21
 8007ba4:	da03      	bge.n	8007bae <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8007ba6:	e034      	b.n	8007c12 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8007ba8:	2b17      	cmp	r3, #23
 8007baa:	d00e      	beq.n	8007bca <u8x8_cad_SendSequence+0x54>
	return;
 8007bac:	e031      	b.n	8007c12 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	68dc      	ldr	r4, [r3, #12]
 8007bb8:	7bba      	ldrb	r2, [r7, #14]
 8007bba:	7bf9      	ldrb	r1, [r7, #15]
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	47a0      	blx	r4
	  data++;
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	3301      	adds	r3, #1
 8007bc6:	603b      	str	r3, [r7, #0]
	  break;
 8007bc8:	e022      	b.n	8007c10 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	781b      	ldrb	r3, [r3, #0]
 8007bce:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8007bd0:	f107 030e 	add.w	r3, r7, #14
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	2101      	movs	r1, #1
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f7ff ff99 	bl	8007b10 <u8x8_cad_SendData>
	  data++;
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	3301      	adds	r3, #1
 8007be2:	603b      	str	r3, [r7, #0]
	  break;
 8007be4:	e014      	b.n	8007c10 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	68dc      	ldr	r4, [r3, #12]
 8007bea:	7bf9      	ldrb	r1, [r7, #15]
 8007bec:	2300      	movs	r3, #0
 8007bee:	2200      	movs	r2, #0
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	47a0      	blx	r4
	  break;
 8007bf4:	e00c      	b.n	8007c10 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	781b      	ldrb	r3, [r3, #0]
 8007bfa:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8007bfc:	7bbb      	ldrb	r3, [r7, #14]
 8007bfe:	461a      	mov	r2, r3
 8007c00:	2129      	movs	r1, #41	@ 0x29
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 f9cc 	bl	8007fa0 <u8x8_gpio_call>
	  data++;
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	3301      	adds	r3, #1
 8007c0c:	603b      	str	r3, [r7, #0]
	  break;
 8007c0e:	bf00      	nop
    cmd = *data;
 8007c10:	e7b6      	b.n	8007b80 <u8x8_cad_SendSequence+0xa>
	return;
 8007c12:	bf00      	nop
    }
  }
}
 8007c14:	3714      	adds	r7, #20
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd90      	pop	{r4, r7, pc}
	...

08007c1c <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8007c1c:	b590      	push	{r4, r7, lr}
 8007c1e:	b085      	sub	sp, #20
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	60f8      	str	r0, [r7, #12]
 8007c24:	607b      	str	r3, [r7, #4]
 8007c26:	460b      	mov	r3, r1
 8007c28:	72fb      	strb	r3, [r7, #11]
 8007c2a:	4613      	mov	r3, r2
 8007c2c:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8007c2e:	7afb      	ldrb	r3, [r7, #11]
 8007c30:	3b14      	subs	r3, #20
 8007c32:	2b05      	cmp	r3, #5
 8007c34:	d82f      	bhi.n	8007c96 <u8x8_cad_001+0x7a>
 8007c36:	a201      	add	r2, pc, #4	@ (adr r2, 8007c3c <u8x8_cad_001+0x20>)
 8007c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c3c:	08007c85 	.word	0x08007c85
 8007c40:	08007c55 	.word	0x08007c55
 8007c44:	08007c69 	.word	0x08007c69
 8007c48:	08007c7d 	.word	0x08007c7d
 8007c4c:	08007c85 	.word	0x08007c85
 8007c50:	08007c85 	.word	0x08007c85
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8007c54:	2100      	movs	r1, #0
 8007c56:	68f8      	ldr	r0, [r7, #12]
 8007c58:	f7ff ff00 	bl	8007a5c <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8007c5c:	7abb      	ldrb	r3, [r7, #10]
 8007c5e:	4619      	mov	r1, r3
 8007c60:	68f8      	ldr	r0, [r7, #12]
 8007c62:	f7ff ff20 	bl	8007aa6 <u8x8_byte_SendByte>
      break;
 8007c66:	e018      	b.n	8007c9a <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 8007c68:	2100      	movs	r1, #0
 8007c6a:	68f8      	ldr	r0, [r7, #12]
 8007c6c:	f7ff fef6 	bl	8007a5c <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8007c70:	7abb      	ldrb	r3, [r7, #10]
 8007c72:	4619      	mov	r1, r3
 8007c74:	68f8      	ldr	r0, [r7, #12]
 8007c76:	f7ff ff16 	bl	8007aa6 <u8x8_byte_SendByte>
      break;
 8007c7a:	e00e      	b.n	8007c9a <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8007c7c:	2101      	movs	r1, #1
 8007c7e:	68f8      	ldr	r0, [r7, #12]
 8007c80:	f7ff feec 	bl	8007a5c <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	691c      	ldr	r4, [r3, #16]
 8007c88:	7aba      	ldrb	r2, [r7, #10]
 8007c8a:	7af9      	ldrb	r1, [r7, #11]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	68f8      	ldr	r0, [r7, #12]
 8007c90:	47a0      	blx	r4
 8007c92:	4603      	mov	r3, r0
 8007c94:	e002      	b.n	8007c9c <u8x8_cad_001+0x80>
    default:
      return 0;
 8007c96:	2300      	movs	r3, #0
 8007c98:	e000      	b.n	8007c9c <u8x8_cad_001+0x80>
  }
  return 1;
 8007c9a:	2301      	movs	r3, #1
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3714      	adds	r7, #20
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd90      	pop	{r4, r7, pc}

08007ca4 <u8x8_d_ssd1309_generic>:
};



static uint8_t u8x8_d_ssd1309_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b086      	sub	sp, #24
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	607b      	str	r3, [r7, #4]
 8007cae:	460b      	mov	r3, r1
 8007cb0:	72fb      	strb	r3, [r7, #11]
 8007cb2:	4613      	mov	r3, r2
 8007cb4:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8007cb6:	7afb      	ldrb	r3, [r7, #11]
 8007cb8:	2b0f      	cmp	r3, #15
 8007cba:	d006      	beq.n	8007cca <u8x8_d_ssd1309_generic+0x26>
 8007cbc:	2b0f      	cmp	r3, #15
 8007cbe:	dc62      	bgt.n	8007d86 <u8x8_d_ssd1309_generic+0xe2>
 8007cc0:	2b0b      	cmp	r3, #11
 8007cc2:	d043      	beq.n	8007d4c <u8x8_d_ssd1309_generic+0xa8>
 8007cc4:	2b0e      	cmp	r3, #14
 8007cc6:	d04e      	beq.n	8007d66 <u8x8_d_ssd1309_generic+0xc2>
 8007cc8:	e05d      	b.n	8007d86 <u8x8_d_ssd1309_generic+0xe2>
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8007cca:	68f8      	ldr	r0, [r7, #12]
 8007ccc:	f7ff ff33 	bl	8007b36 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	795b      	ldrb	r3, [r3, #5]
 8007cd4:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 8007cd6:	7dfb      	ldrb	r3, [r7, #23]
 8007cd8:	00db      	lsls	r3, r3, #3
 8007cda:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	7f9a      	ldrb	r2, [r3, #30]
 8007ce0:	7dfb      	ldrb	r3, [r7, #23]
 8007ce2:	4413      	add	r3, r2
 8007ce4:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8007ce6:	7dfb      	ldrb	r3, [r7, #23]
 8007ce8:	091b      	lsrs	r3, r3, #4
 8007cea:	b2db      	uxtb	r3, r3
 8007cec:	f043 0310 	orr.w	r3, r3, #16
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	68f8      	ldr	r0, [r7, #12]
 8007cf6:	f7ff fee7 	bl	8007ac8 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));
 8007cfa:	7dfb      	ldrb	r3, [r7, #23]
 8007cfc:	f003 030f 	and.w	r3, r3, #15
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	4619      	mov	r1, r3
 8007d04:	68f8      	ldr	r0, [r7, #12]
 8007d06:	f7ff fef1 	bl	8007aec <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos)   );
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	799b      	ldrb	r3, [r3, #6]
 8007d0e:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	4619      	mov	r1, r3
 8007d16:	68f8      	ldr	r0, [r7, #12]
 8007d18:	f7ff fee8 	bl	8007aec <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	791b      	ldrb	r3, [r3, #4]
 8007d20:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8007d28:	7dbb      	ldrb	r3, [r7, #22]
 8007d2a:	00db      	lsls	r3, r3, #3
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	693a      	ldr	r2, [r7, #16]
 8007d30:	4619      	mov	r1, r3
 8007d32:	68f8      	ldr	r0, [r7, #12]
 8007d34:	f7ff feec 	bl	8007b10 <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 8007d38:	7abb      	ldrb	r3, [r7, #10]
 8007d3a:	3b01      	subs	r3, #1
 8007d3c:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8007d3e:	7abb      	ldrb	r3, [r7, #10]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d1eb      	bne.n	8007d1c <u8x8_d_ssd1309_generic+0x78>
      
      u8x8_cad_EndTransfer(u8x8);
 8007d44:	68f8      	ldr	r0, [r7, #12]
 8007d46:	f7ff ff06 	bl	8007b56 <u8x8_cad_EndTransfer>
      break;
 8007d4a:	e01e      	b.n	8007d8a <u8x8_d_ssd1309_generic+0xe6>
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8007d4c:	7abb      	ldrb	r3, [r7, #10]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d104      	bne.n	8007d5c <u8x8_d_ssd1309_generic+0xb8>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_powersave0_seq);
 8007d52:	4910      	ldr	r1, [pc, #64]	@ (8007d94 <u8x8_d_ssd1309_generic+0xf0>)
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	f7ff ff0e 	bl	8007b76 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_powersave1_seq);
      break;
 8007d5a:	e016      	b.n	8007d8a <u8x8_d_ssd1309_generic+0xe6>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_powersave1_seq);
 8007d5c:	490e      	ldr	r1, [pc, #56]	@ (8007d98 <u8x8_d_ssd1309_generic+0xf4>)
 8007d5e:	68f8      	ldr	r0, [r7, #12]
 8007d60:	f7ff ff09 	bl	8007b76 <u8x8_cad_SendSequence>
      break;
 8007d64:	e011      	b.n	8007d8a <u8x8_d_ssd1309_generic+0xe6>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8007d66:	68f8      	ldr	r0, [r7, #12]
 8007d68:	f7ff fee5 	bl	8007b36 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8007d6c:	2181      	movs	r1, #129	@ 0x81
 8007d6e:	68f8      	ldr	r0, [r7, #12]
 8007d70:	f7ff feaa 	bl	8007ac8 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1309 has range from 0 to 255 */
 8007d74:	7abb      	ldrb	r3, [r7, #10]
 8007d76:	4619      	mov	r1, r3
 8007d78:	68f8      	ldr	r0, [r7, #12]
 8007d7a:	f7ff feb7 	bl	8007aec <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8007d7e:	68f8      	ldr	r0, [r7, #12]
 8007d80:	f7ff fee9 	bl	8007b56 <u8x8_cad_EndTransfer>
      break;
 8007d84:	e001      	b.n	8007d8a <u8x8_d_ssd1309_generic+0xe6>
#endif
    default:
      return 0;
 8007d86:	2300      	movs	r3, #0
 8007d88:	e000      	b.n	8007d8c <u8x8_d_ssd1309_generic+0xe8>
  }
  return 1;
 8007d8a:	2301      	movs	r3, #1
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3718      	adds	r7, #24
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}
 8007d94:	08014f58 	.word	0x08014f58
 8007d98:	08014f60 	.word	0x08014f60

08007d9c <u8x8_d_ssd1309_128x64_noname0>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1309_128x64_noname0(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	607b      	str	r3, [r7, #4]
 8007da6:	460b      	mov	r3, r1
 8007da8:	72fb      	strb	r3, [r7, #11]
 8007daa:	4613      	mov	r3, r2
 8007dac:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1309_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 8007dae:	7aba      	ldrb	r2, [r7, #10]
 8007db0:	7af9      	ldrb	r1, [r7, #11]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	68f8      	ldr	r0, [r7, #12]
 8007db6:	f7ff ff75 	bl	8007ca4 <u8x8_d_ssd1309_generic>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d001      	beq.n	8007dc4 <u8x8_d_ssd1309_128x64_noname0+0x28>
    return 1;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	e030      	b.n	8007e26 <u8x8_d_ssd1309_128x64_noname0+0x8a>
  
  switch(msg)
 8007dc4:	7afb      	ldrb	r3, [r7, #11]
 8007dc6:	2b0d      	cmp	r3, #13
 8007dc8:	d006      	beq.n	8007dd8 <u8x8_d_ssd1309_128x64_noname0+0x3c>
 8007dca:	2b0d      	cmp	r3, #13
 8007dcc:	dc28      	bgt.n	8007e20 <u8x8_d_ssd1309_128x64_noname0+0x84>
 8007dce:	2b09      	cmp	r3, #9
 8007dd0:	d021      	beq.n	8007e16 <u8x8_d_ssd1309_128x64_noname0+0x7a>
 8007dd2:	2b0a      	cmp	r3, #10
 8007dd4:	d017      	beq.n	8007e06 <u8x8_d_ssd1309_128x64_noname0+0x6a>
 8007dd6:	e023      	b.n	8007e20 <u8x8_d_ssd1309_128x64_noname0+0x84>
  {
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8007dd8:	7abb      	ldrb	r3, [r7, #10]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d109      	bne.n	8007df2 <u8x8_d_ssd1309_128x64_noname0+0x56>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_128x64_flip0_seq);
 8007dde:	4914      	ldr	r1, [pc, #80]	@ (8007e30 <u8x8_d_ssd1309_128x64_noname0+0x94>)
 8007de0:	68f8      	ldr	r0, [r7, #12]
 8007de2:	f7ff fec8 	bl	8007b76 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	7c9a      	ldrb	r2, [r3, #18]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	779a      	strb	r2, [r3, #30]
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_128x64_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 8007df0:	e018      	b.n	8007e24 <u8x8_d_ssd1309_128x64_noname0+0x88>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_128x64_flip1_seq);
 8007df2:	4910      	ldr	r1, [pc, #64]	@ (8007e34 <u8x8_d_ssd1309_128x64_noname0+0x98>)
 8007df4:	68f8      	ldr	r0, [r7, #12]
 8007df6:	f7ff febe 	bl	8007b76 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	7cda      	ldrb	r2, [r3, #19]
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	779a      	strb	r2, [r3, #30]
      break;
 8007e04:	e00e      	b.n	8007e24 <u8x8_d_ssd1309_128x64_noname0+0x88>
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8007e06:	68f8      	ldr	r0, [r7, #12]
 8007e08:	f000 f82d 	bl	8007e66 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_128x64_noname_init_seq);    
 8007e0c:	490a      	ldr	r1, [pc, #40]	@ (8007e38 <u8x8_d_ssd1309_128x64_noname0+0x9c>)
 8007e0e:	68f8      	ldr	r0, [r7, #12]
 8007e10:	f7ff feb1 	bl	8007b76 <u8x8_cad_SendSequence>
      break;
 8007e14:	e006      	b.n	8007e24 <u8x8_d_ssd1309_128x64_noname0+0x88>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1309_128x64_noname0_display_info);
 8007e16:	4909      	ldr	r1, [pc, #36]	@ (8007e3c <u8x8_d_ssd1309_128x64_noname0+0xa0>)
 8007e18:	68f8      	ldr	r0, [r7, #12]
 8007e1a:	f000 f811 	bl	8007e40 <u8x8_d_helper_display_setup_memory>
      break;
 8007e1e:	e001      	b.n	8007e24 <u8x8_d_ssd1309_128x64_noname0+0x88>
    default:
      return 0;
 8007e20:	2300      	movs	r3, #0
 8007e22:	e000      	b.n	8007e26 <u8x8_d_ssd1309_128x64_noname0+0x8a>
  }
  return 1;
 8007e24:	2301      	movs	r3, #1
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3710      	adds	r7, #16
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	08014f68 	.word	0x08014f68
 8007e34:	08014f70 	.word	0x08014f70
 8007e38:	08014f78 	.word	0x08014f78
 8007e3c:	08014fa4 	.word	0x08014fa4

08007e40 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b083      	sub	sp, #12
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	683a      	ldr	r2, [r7, #0]
 8007e4e:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	7c9a      	ldrb	r2, [r3, #18]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	779a      	strb	r2, [r3, #30]
}
 8007e5a:	bf00      	nop
 8007e5c:	370c      	adds	r7, #12
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e64:	4770      	bx	lr

08007e66 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8007e66:	b590      	push	{r4, r7, lr}
 8007e68:	b083      	sub	sp, #12
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	695c      	ldr	r4, [r3, #20]
 8007e72:	2300      	movs	r3, #0
 8007e74:	2200      	movs	r2, #0
 8007e76:	2128      	movs	r1, #40	@ 0x28
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	68dc      	ldr	r4, [r3, #12]
 8007e80:	2300      	movs	r3, #0
 8007e82:	2200      	movs	r2, #0
 8007e84:	2114      	movs	r1, #20
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	214b      	movs	r1, #75	@ 0x4b
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 f886 	bl	8007fa0 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	791b      	ldrb	r3, [r3, #4]
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	2129      	movs	r1, #41	@ 0x29
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 f87e 	bl	8007fa0 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	214b      	movs	r1, #75	@ 0x4b
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 f879 	bl	8007fa0 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	791b      	ldrb	r3, [r3, #4]
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	2129      	movs	r1, #41	@ 0x29
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 f871 	bl	8007fa0 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	214b      	movs	r1, #75	@ 0x4b
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 f86c 	bl	8007fa0 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	795b      	ldrb	r3, [r3, #5]
 8007ece:	461a      	mov	r2, r3
 8007ed0:	2129      	movs	r1, #41	@ 0x29
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 f864 	bl	8007fa0 <u8x8_gpio_call>
}    
 8007ed8:	bf00      	nop
 8007eda:	370c      	adds	r7, #12
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd90      	pop	{r4, r7, pc}

08007ee0 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8007ee0:	b590      	push	{r4, r7, lr}
 8007ee2:	b085      	sub	sp, #20
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	4608      	mov	r0, r1
 8007eea:	4611      	mov	r1, r2
 8007eec:	461a      	mov	r2, r3
 8007eee:	4603      	mov	r3, r0
 8007ef0:	70fb      	strb	r3, [r7, #3]
 8007ef2:	460b      	mov	r3, r1
 8007ef4:	70bb      	strb	r3, [r7, #2]
 8007ef6:	4613      	mov	r3, r2
 8007ef8:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8007efa:	78fb      	ldrb	r3, [r7, #3]
 8007efc:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8007efe:	78bb      	ldrb	r3, [r7, #2]
 8007f00:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8007f02:	787b      	ldrb	r3, [r7, #1]
 8007f04:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8007f06:	6a3b      	ldr	r3, [r7, #32]
 8007f08:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	689c      	ldr	r4, [r3, #8]
 8007f0e:	f107 0308 	add.w	r3, r7, #8
 8007f12:	2201      	movs	r2, #1
 8007f14:	210f      	movs	r1, #15
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	47a0      	blx	r4
 8007f1a:	4603      	mov	r3, r0
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3714      	adds	r7, #20
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd90      	pop	{r4, r7, pc}

08007f24 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8007f24:	b590      	push	{r4, r7, lr}
 8007f26:	b083      	sub	sp, #12
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	689c      	ldr	r4, [r3, #8]
 8007f30:	2300      	movs	r3, #0
 8007f32:	2200      	movs	r2, #0
 8007f34:	2109      	movs	r1, #9
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	47a0      	blx	r4
}
 8007f3a:	bf00      	nop
 8007f3c:	370c      	adds	r7, #12
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd90      	pop	{r4, r7, pc}

08007f42 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8007f42:	b590      	push	{r4, r7, lr}
 8007f44:	b083      	sub	sp, #12
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	689c      	ldr	r4, [r3, #8]
 8007f4e:	2300      	movs	r3, #0
 8007f50:	2200      	movs	r2, #0
 8007f52:	210a      	movs	r1, #10
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	47a0      	blx	r4
}
 8007f58:	bf00      	nop
 8007f5a:	370c      	adds	r7, #12
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd90      	pop	{r4, r7, pc}

08007f60 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8007f60:	b590      	push	{r4, r7, lr}
 8007f62:	b083      	sub	sp, #12
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	460b      	mov	r3, r1
 8007f6a:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	689c      	ldr	r4, [r3, #8]
 8007f70:	78fa      	ldrb	r2, [r7, #3]
 8007f72:	2300      	movs	r3, #0
 8007f74:	210b      	movs	r1, #11
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	47a0      	blx	r4
}
 8007f7a:	bf00      	nop
 8007f7c:	370c      	adds	r7, #12
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd90      	pop	{r4, r7, pc}

08007f82 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8007f82:	b590      	push	{r4, r7, lr}
 8007f84:	b083      	sub	sp, #12
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	689c      	ldr	r4, [r3, #8]
 8007f8e:	2300      	movs	r3, #0
 8007f90:	2200      	movs	r2, #0
 8007f92:	2110      	movs	r1, #16
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	47a0      	blx	r4
}
 8007f98:	bf00      	nop
 8007f9a:	370c      	adds	r7, #12
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd90      	pop	{r4, r7, pc}

08007fa0 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8007fa0:	b590      	push	{r4, r7, lr}
 8007fa2:	b083      	sub	sp, #12
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	460b      	mov	r3, r1
 8007faa:	70fb      	strb	r3, [r7, #3]
 8007fac:	4613      	mov	r3, r2
 8007fae:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	695c      	ldr	r4, [r3, #20]
 8007fb4:	78ba      	ldrb	r2, [r7, #2]
 8007fb6:	78f9      	ldrb	r1, [r7, #3]
 8007fb8:	2300      	movs	r3, #0
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	47a0      	blx	r4
}
 8007fbe:	bf00      	nop
 8007fc0:	370c      	adds	r7, #12
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd90      	pop	{r4, r7, pc}

08007fc6 <u8x8_dummy_cb>:


#include "u8x8.h"

uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8007fc6:	b480      	push	{r7}
 8007fc8:	b085      	sub	sp, #20
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	60f8      	str	r0, [r7, #12]
 8007fce:	607b      	str	r3, [r7, #4]
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	72fb      	strb	r3, [r7, #11]
 8007fd4:	4613      	mov	r3, r2
 8007fd6:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8007fd8:	2300      	movs	r3, #0
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3714      	adds	r7, #20
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr
	...

08007fe8 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b083      	sub	sp, #12
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	4a11      	ldr	r2, [pc, #68]	@ (8008040 <u8x8_SetupDefaults+0x58>)
 8007ffa:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	4a10      	ldr	r2, [pc, #64]	@ (8008040 <u8x8_SetupDefaults+0x58>)
 8008000:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	4a0e      	ldr	r2, [pc, #56]	@ (8008040 <u8x8_SetupDefaults+0x58>)
 8008006:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	4a0d      	ldr	r2, [pc, #52]	@ (8008040 <u8x8_SetupDefaults+0x58>)
 800800c:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2200      	movs	r2, #0
 8008012:	77da      	strb	r2, [r3, #31]
    u8x8->device_address = 0;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2200      	movs	r2, #0
 8008018:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2200      	movs	r2, #0
 8008020:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    u8x8->i2c_address = 255;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	22ff      	movs	r2, #255	@ 0xff
 8008028:	f883 2020 	strb.w	r2, [r3, #32]
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	22ff      	movs	r2, #255	@ 0xff
 8008030:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8008034:	bf00      	nop
 8008036:	370c      	adds	r7, #12
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr
 8008040:	08007fc7 	.word	0x08007fc7

08008044 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
 800804a:	60f8      	str	r0, [r7, #12]
 800804c:	60b9      	str	r1, [r7, #8]
 800804e:	607a      	str	r2, [r7, #4]
 8008050:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8008052:	68f8      	ldr	r0, [r7, #12]
 8008054:	f7ff ffc8 	bl	8007fe8 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	68ba      	ldr	r2, [r7, #8]
 800805c:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	683a      	ldr	r2, [r7, #0]
 8008068:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	69ba      	ldr	r2, [r7, #24]
 800806e:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8008070:	68f8      	ldr	r0, [r7, #12]
 8008072:	f7ff ff57 	bl	8007f24 <u8x8_SetupMemory>
}
 8008076:	bf00      	nop
 8008078:	3710      	adds	r7, #16
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}
	...

08008080 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b084      	sub	sp, #16
 8008084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8008086:	463b      	mov	r3, r7
 8008088:	2200      	movs	r2, #0
 800808a:	601a      	str	r2, [r3, #0]
 800808c:	605a      	str	r2, [r3, #4]
 800808e:	609a      	str	r2, [r3, #8]
 8008090:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8008092:	4b21      	ldr	r3, [pc, #132]	@ (8008118 <MX_ADC1_Init+0x98>)
 8008094:	4a21      	ldr	r2, [pc, #132]	@ (800811c <MX_ADC1_Init+0x9c>)
 8008096:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8008098:	4b1f      	ldr	r3, [pc, #124]	@ (8008118 <MX_ADC1_Init+0x98>)
 800809a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800809e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80080a0:	4b1d      	ldr	r3, [pc, #116]	@ (8008118 <MX_ADC1_Init+0x98>)
 80080a2:	2200      	movs	r2, #0
 80080a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80080a6:	4b1c      	ldr	r3, [pc, #112]	@ (8008118 <MX_ADC1_Init+0x98>)
 80080a8:	2200      	movs	r2, #0
 80080aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80080ac:	4b1a      	ldr	r3, [pc, #104]	@ (8008118 <MX_ADC1_Init+0x98>)
 80080ae:	2200      	movs	r2, #0
 80080b0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80080b2:	4b19      	ldr	r3, [pc, #100]	@ (8008118 <MX_ADC1_Init+0x98>)
 80080b4:	2200      	movs	r2, #0
 80080b6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80080ba:	4b17      	ldr	r3, [pc, #92]	@ (8008118 <MX_ADC1_Init+0x98>)
 80080bc:	2200      	movs	r2, #0
 80080be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80080c0:	4b15      	ldr	r3, [pc, #84]	@ (8008118 <MX_ADC1_Init+0x98>)
 80080c2:	4a17      	ldr	r2, [pc, #92]	@ (8008120 <MX_ADC1_Init+0xa0>)
 80080c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80080c6:	4b14      	ldr	r3, [pc, #80]	@ (8008118 <MX_ADC1_Init+0x98>)
 80080c8:	2200      	movs	r2, #0
 80080ca:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80080cc:	4b12      	ldr	r3, [pc, #72]	@ (8008118 <MX_ADC1_Init+0x98>)
 80080ce:	2201      	movs	r2, #1
 80080d0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80080d2:	4b11      	ldr	r3, [pc, #68]	@ (8008118 <MX_ADC1_Init+0x98>)
 80080d4:	2200      	movs	r2, #0
 80080d6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80080da:	4b0f      	ldr	r3, [pc, #60]	@ (8008118 <MX_ADC1_Init+0x98>)
 80080dc:	2201      	movs	r2, #1
 80080de:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80080e0:	480d      	ldr	r0, [pc, #52]	@ (8008118 <MX_ADC1_Init+0x98>)
 80080e2:	f000 ff55 	bl	8008f90 <HAL_ADC_Init>
 80080e6:	4603      	mov	r3, r0
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d001      	beq.n	80080f0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80080ec:	f000 fa26 	bl	800853c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80080f0:	2300      	movs	r3, #0
 80080f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80080f4:	2301      	movs	r3, #1
 80080f6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80080f8:	2307      	movs	r3, #7
 80080fa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80080fc:	463b      	mov	r3, r7
 80080fe:	4619      	mov	r1, r3
 8008100:	4805      	ldr	r0, [pc, #20]	@ (8008118 <MX_ADC1_Init+0x98>)
 8008102:	f001 fa55 	bl	80095b0 <HAL_ADC_ConfigChannel>
 8008106:	4603      	mov	r3, r0
 8008108:	2b00      	cmp	r3, #0
 800810a:	d001      	beq.n	8008110 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800810c:	f000 fa16 	bl	800853c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8008110:	bf00      	nop
 8008112:	3710      	adds	r7, #16
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}
 8008118:	20001e94 	.word	0x20001e94
 800811c:	40012000 	.word	0x40012000
 8008120:	0f000001 	.word	0x0f000001

08008124 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b08a      	sub	sp, #40	@ 0x28
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800812c:	f107 0314 	add.w	r3, r7, #20
 8008130:	2200      	movs	r2, #0
 8008132:	601a      	str	r2, [r3, #0]
 8008134:	605a      	str	r2, [r3, #4]
 8008136:	609a      	str	r2, [r3, #8]
 8008138:	60da      	str	r2, [r3, #12]
 800813a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a1b      	ldr	r2, [pc, #108]	@ (80081b0 <HAL_ADC_MspInit+0x8c>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d12f      	bne.n	80081a6 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8008146:	2300      	movs	r3, #0
 8008148:	613b      	str	r3, [r7, #16]
 800814a:	4b1a      	ldr	r3, [pc, #104]	@ (80081b4 <HAL_ADC_MspInit+0x90>)
 800814c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800814e:	4a19      	ldr	r2, [pc, #100]	@ (80081b4 <HAL_ADC_MspInit+0x90>)
 8008150:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008154:	6453      	str	r3, [r2, #68]	@ 0x44
 8008156:	4b17      	ldr	r3, [pc, #92]	@ (80081b4 <HAL_ADC_MspInit+0x90>)
 8008158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800815a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800815e:	613b      	str	r3, [r7, #16]
 8008160:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008162:	2300      	movs	r3, #0
 8008164:	60fb      	str	r3, [r7, #12]
 8008166:	4b13      	ldr	r3, [pc, #76]	@ (80081b4 <HAL_ADC_MspInit+0x90>)
 8008168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800816a:	4a12      	ldr	r2, [pc, #72]	@ (80081b4 <HAL_ADC_MspInit+0x90>)
 800816c:	f043 0301 	orr.w	r3, r3, #1
 8008170:	6313      	str	r3, [r2, #48]	@ 0x30
 8008172:	4b10      	ldr	r3, [pc, #64]	@ (80081b4 <HAL_ADC_MspInit+0x90>)
 8008174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008176:	f003 0301 	and.w	r3, r3, #1
 800817a:	60fb      	str	r3, [r7, #12]
 800817c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = ADC1_0_LevelSensor_Pin;
 800817e:	2301      	movs	r3, #1
 8008180:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008182:	2303      	movs	r3, #3
 8008184:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008186:	2300      	movs	r3, #0
 8008188:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_0_LevelSensor_GPIO_Port, &GPIO_InitStruct);
 800818a:	f107 0314 	add.w	r3, r7, #20
 800818e:	4619      	mov	r1, r3
 8008190:	4809      	ldr	r0, [pc, #36]	@ (80081b8 <HAL_ADC_MspInit+0x94>)
 8008192:	f001 fd39 	bl	8009c08 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8008196:	2200      	movs	r2, #0
 8008198:	2105      	movs	r1, #5
 800819a:	2012      	movs	r0, #18
 800819c:	f001 fce8 	bl	8009b70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80081a0:	2012      	movs	r0, #18
 80081a2:	f001 fd01 	bl	8009ba8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80081a6:	bf00      	nop
 80081a8:	3728      	adds	r7, #40	@ 0x28
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
 80081ae:	bf00      	nop
 80081b0:	40012000 	.word	0x40012000
 80081b4:	40023800 	.word	0x40023800
 80081b8:	40020000 	.word	0x40020000

080081bc <MX_FREERTOS_Init>:
#include "main.h"
#include "app_main.hpp"

void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

void MX_FREERTOS_Init(void) {
 80081bc:	b580      	push	{r7, lr}
 80081be:	af00      	add	r7, sp, #0


	app_mainC();
 80081c0:	f7f9 fc72 	bl	8001aa8 <app_mainC>
    vTaskStartScheduler();
 80081c4:	f007 f848 	bl	800f258 <vTaskStartScheduler>
}
 80081c8:	bf00      	nop
 80081ca:	bd80      	pop	{r7, pc}

080081cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b08a      	sub	sp, #40	@ 0x28
 80081d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081d2:	f107 0314 	add.w	r3, r7, #20
 80081d6:	2200      	movs	r2, #0
 80081d8:	601a      	str	r2, [r3, #0]
 80081da:	605a      	str	r2, [r3, #4]
 80081dc:	609a      	str	r2, [r3, #8]
 80081de:	60da      	str	r2, [r3, #12]
 80081e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80081e2:	2300      	movs	r3, #0
 80081e4:	613b      	str	r3, [r7, #16]
 80081e6:	4b48      	ldr	r3, [pc, #288]	@ (8008308 <MX_GPIO_Init+0x13c>)
 80081e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081ea:	4a47      	ldr	r2, [pc, #284]	@ (8008308 <MX_GPIO_Init+0x13c>)
 80081ec:	f043 0304 	orr.w	r3, r3, #4
 80081f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80081f2:	4b45      	ldr	r3, [pc, #276]	@ (8008308 <MX_GPIO_Init+0x13c>)
 80081f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081f6:	f003 0304 	and.w	r3, r3, #4
 80081fa:	613b      	str	r3, [r7, #16]
 80081fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80081fe:	2300      	movs	r3, #0
 8008200:	60fb      	str	r3, [r7, #12]
 8008202:	4b41      	ldr	r3, [pc, #260]	@ (8008308 <MX_GPIO_Init+0x13c>)
 8008204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008206:	4a40      	ldr	r2, [pc, #256]	@ (8008308 <MX_GPIO_Init+0x13c>)
 8008208:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800820c:	6313      	str	r3, [r2, #48]	@ 0x30
 800820e:	4b3e      	ldr	r3, [pc, #248]	@ (8008308 <MX_GPIO_Init+0x13c>)
 8008210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008212:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008216:	60fb      	str	r3, [r7, #12]
 8008218:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800821a:	2300      	movs	r3, #0
 800821c:	60bb      	str	r3, [r7, #8]
 800821e:	4b3a      	ldr	r3, [pc, #232]	@ (8008308 <MX_GPIO_Init+0x13c>)
 8008220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008222:	4a39      	ldr	r2, [pc, #228]	@ (8008308 <MX_GPIO_Init+0x13c>)
 8008224:	f043 0301 	orr.w	r3, r3, #1
 8008228:	6313      	str	r3, [r2, #48]	@ 0x30
 800822a:	4b37      	ldr	r3, [pc, #220]	@ (8008308 <MX_GPIO_Init+0x13c>)
 800822c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800822e:	f003 0301 	and.w	r3, r3, #1
 8008232:	60bb      	str	r3, [r7, #8]
 8008234:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008236:	2300      	movs	r3, #0
 8008238:	607b      	str	r3, [r7, #4]
 800823a:	4b33      	ldr	r3, [pc, #204]	@ (8008308 <MX_GPIO_Init+0x13c>)
 800823c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800823e:	4a32      	ldr	r2, [pc, #200]	@ (8008308 <MX_GPIO_Init+0x13c>)
 8008240:	f043 0302 	orr.w	r3, r3, #2
 8008244:	6313      	str	r3, [r2, #48]	@ 0x30
 8008246:	4b30      	ldr	r3, [pc, #192]	@ (8008308 <MX_GPIO_Init+0x13c>)
 8008248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800824a:	f003 0302 	and.w	r3, r3, #2
 800824e:	607b      	str	r3, [r7, #4]
 8008250:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008252:	2300      	movs	r3, #0
 8008254:	603b      	str	r3, [r7, #0]
 8008256:	4b2c      	ldr	r3, [pc, #176]	@ (8008308 <MX_GPIO_Init+0x13c>)
 8008258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800825a:	4a2b      	ldr	r2, [pc, #172]	@ (8008308 <MX_GPIO_Init+0x13c>)
 800825c:	f043 0308 	orr.w	r3, r3, #8
 8008260:	6313      	str	r3, [r2, #48]	@ 0x30
 8008262:	4b29      	ldr	r3, [pc, #164]	@ (8008308 <MX_GPIO_Init+0x13c>)
 8008264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008266:	f003 0308 	and.w	r3, r3, #8
 800826a:	603b      	str	r3, [r7, #0]
 800826c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(alive_led_GPIO_Port, alive_led_Pin, GPIO_PIN_RESET);
 800826e:	2200      	movs	r2, #0
 8008270:	2102      	movs	r1, #2
 8008272:	4826      	ldr	r0, [pc, #152]	@ (800830c <MX_GPIO_Init+0x140>)
 8008274:	f001 fe7c 	bl	8009f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DISPLAY_DC_Pin|DISPLAY_RES_Pin, GPIO_PIN_RESET);
 8008278:	2200      	movs	r2, #0
 800827a:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 800827e:	4824      	ldr	r0, [pc, #144]	@ (8008310 <MX_GPIO_Init+0x144>)
 8008280:	f001 fe76 	bl	8009f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Relay_cont_Pin|DISPLAY_CS_Pin, GPIO_PIN_RESET);
 8008284:	2200      	movs	r2, #0
 8008286:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800828a:	4822      	ldr	r0, [pc, #136]	@ (8008314 <MX_GPIO_Init+0x148>)
 800828c:	f001 fe70 	bl	8009f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = alive_led_Pin;
 8008290:	2302      	movs	r3, #2
 8008292:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008294:	2301      	movs	r3, #1
 8008296:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008298:	2300      	movs	r3, #0
 800829a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800829c:	2300      	movs	r3, #0
 800829e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(alive_led_GPIO_Port, &GPIO_InitStruct);
 80082a0:	f107 0314 	add.w	r3, r7, #20
 80082a4:	4619      	mov	r1, r3
 80082a6:	4819      	ldr	r0, [pc, #100]	@ (800830c <MX_GPIO_Init+0x140>)
 80082a8:	f001 fcae 	bl	8009c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DISPLAY_DC_Pin|DISPLAY_RES_Pin;
 80082ac:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 80082b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80082b2:	2301      	movs	r3, #1
 80082b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082b6:	2300      	movs	r3, #0
 80082b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082ba:	2300      	movs	r3, #0
 80082bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80082be:	f107 0314 	add.w	r3, r7, #20
 80082c2:	4619      	mov	r1, r3
 80082c4:	4812      	ldr	r0, [pc, #72]	@ (8008310 <MX_GPIO_Init+0x144>)
 80082c6:	f001 fc9f 	bl	8009c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = Relay_cont_Pin|DISPLAY_CS_Pin;
 80082ca:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80082ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80082d0:	2301      	movs	r3, #1
 80082d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082d4:	2300      	movs	r3, #0
 80082d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082d8:	2300      	movs	r3, #0
 80082da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80082dc:	f107 0314 	add.w	r3, r7, #20
 80082e0:	4619      	mov	r1, r3
 80082e2:	480c      	ldr	r0, [pc, #48]	@ (8008314 <MX_GPIO_Init+0x148>)
 80082e4:	f001 fc90 	bl	8009c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = BTN_UP_Pin|BTN_ENTR_Pin|BTN_DWN_Pin|BTN_RGT_Pin
 80082e8:	233e      	movs	r3, #62	@ 0x3e
 80082ea:	617b      	str	r3, [r7, #20]
                          |BTN_LFT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80082ec:	2300      	movs	r3, #0
 80082ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80082f0:	2301      	movs	r3, #1
 80082f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80082f4:	f107 0314 	add.w	r3, r7, #20
 80082f8:	4619      	mov	r1, r3
 80082fa:	4806      	ldr	r0, [pc, #24]	@ (8008314 <MX_GPIO_Init+0x148>)
 80082fc:	f001 fc84 	bl	8009c08 <HAL_GPIO_Init>

}
 8008300:	bf00      	nop
 8008302:	3728      	adds	r7, #40	@ 0x28
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}
 8008308:	40023800 	.word	0x40023800
 800830c:	40020000 	.word	0x40020000
 8008310:	40020400 	.word	0x40020400
 8008314:	40020c00 	.word	0x40020c00

08008318 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800831c:	4b12      	ldr	r3, [pc, #72]	@ (8008368 <MX_I2C1_Init+0x50>)
 800831e:	4a13      	ldr	r2, [pc, #76]	@ (800836c <MX_I2C1_Init+0x54>)
 8008320:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8008322:	4b11      	ldr	r3, [pc, #68]	@ (8008368 <MX_I2C1_Init+0x50>)
 8008324:	4a12      	ldr	r2, [pc, #72]	@ (8008370 <MX_I2C1_Init+0x58>)
 8008326:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008328:	4b0f      	ldr	r3, [pc, #60]	@ (8008368 <MX_I2C1_Init+0x50>)
 800832a:	2200      	movs	r2, #0
 800832c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800832e:	4b0e      	ldr	r3, [pc, #56]	@ (8008368 <MX_I2C1_Init+0x50>)
 8008330:	2200      	movs	r2, #0
 8008332:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008334:	4b0c      	ldr	r3, [pc, #48]	@ (8008368 <MX_I2C1_Init+0x50>)
 8008336:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800833a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800833c:	4b0a      	ldr	r3, [pc, #40]	@ (8008368 <MX_I2C1_Init+0x50>)
 800833e:	2200      	movs	r2, #0
 8008340:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8008342:	4b09      	ldr	r3, [pc, #36]	@ (8008368 <MX_I2C1_Init+0x50>)
 8008344:	2200      	movs	r2, #0
 8008346:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008348:	4b07      	ldr	r3, [pc, #28]	@ (8008368 <MX_I2C1_Init+0x50>)
 800834a:	2200      	movs	r2, #0
 800834c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800834e:	4b06      	ldr	r3, [pc, #24]	@ (8008368 <MX_I2C1_Init+0x50>)
 8008350:	2200      	movs	r2, #0
 8008352:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008354:	4804      	ldr	r0, [pc, #16]	@ (8008368 <MX_I2C1_Init+0x50>)
 8008356:	f001 fe3f 	bl	8009fd8 <HAL_I2C_Init>
 800835a:	4603      	mov	r3, r0
 800835c:	2b00      	cmp	r3, #0
 800835e:	d001      	beq.n	8008364 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8008360:	f000 f8ec 	bl	800853c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8008364:	bf00      	nop
 8008366:	bd80      	pop	{r7, pc}
 8008368:	20001edc 	.word	0x20001edc
 800836c:	40005400 	.word	0x40005400
 8008370:	000186a0 	.word	0x000186a0

08008374 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b08a      	sub	sp, #40	@ 0x28
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800837c:	f107 0314 	add.w	r3, r7, #20
 8008380:	2200      	movs	r2, #0
 8008382:	601a      	str	r2, [r3, #0]
 8008384:	605a      	str	r2, [r3, #4]
 8008386:	609a      	str	r2, [r3, #8]
 8008388:	60da      	str	r2, [r3, #12]
 800838a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a19      	ldr	r2, [pc, #100]	@ (80083f8 <HAL_I2C_MspInit+0x84>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d12c      	bne.n	80083f0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008396:	2300      	movs	r3, #0
 8008398:	613b      	str	r3, [r7, #16]
 800839a:	4b18      	ldr	r3, [pc, #96]	@ (80083fc <HAL_I2C_MspInit+0x88>)
 800839c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800839e:	4a17      	ldr	r2, [pc, #92]	@ (80083fc <HAL_I2C_MspInit+0x88>)
 80083a0:	f043 0302 	orr.w	r3, r3, #2
 80083a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80083a6:	4b15      	ldr	r3, [pc, #84]	@ (80083fc <HAL_I2C_MspInit+0x88>)
 80083a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083aa:	f003 0302 	and.w	r3, r3, #2
 80083ae:	613b      	str	r3, [r7, #16]
 80083b0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80083b2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80083b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80083b8:	2312      	movs	r3, #18
 80083ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083bc:	2300      	movs	r3, #0
 80083be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80083c0:	2303      	movs	r3, #3
 80083c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80083c4:	2304      	movs	r3, #4
 80083c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80083c8:	f107 0314 	add.w	r3, r7, #20
 80083cc:	4619      	mov	r1, r3
 80083ce:	480c      	ldr	r0, [pc, #48]	@ (8008400 <HAL_I2C_MspInit+0x8c>)
 80083d0:	f001 fc1a 	bl	8009c08 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80083d4:	2300      	movs	r3, #0
 80083d6:	60fb      	str	r3, [r7, #12]
 80083d8:	4b08      	ldr	r3, [pc, #32]	@ (80083fc <HAL_I2C_MspInit+0x88>)
 80083da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083dc:	4a07      	ldr	r2, [pc, #28]	@ (80083fc <HAL_I2C_MspInit+0x88>)
 80083de:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80083e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80083e4:	4b05      	ldr	r3, [pc, #20]	@ (80083fc <HAL_I2C_MspInit+0x88>)
 80083e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80083ec:	60fb      	str	r3, [r7, #12]
 80083ee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80083f0:	bf00      	nop
 80083f2:	3728      	adds	r7, #40	@ 0x28
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}
 80083f8:	40005400 	.word	0x40005400
 80083fc:	40023800 	.word	0x40023800
 8008400:	40020400 	.word	0x40020400

08008404 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008408:	f000 fd5c 	bl	8008ec4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800840c:	f000 f818 	bl	8008440 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008410:	f7ff fedc 	bl	80081cc <MX_GPIO_Init>
  MX_ADC1_Init();
 8008414:	f7ff fe34 	bl	8008080 <MX_ADC1_Init>
  MX_I2C1_Init();
 8008418:	f7ff ff7e 	bl	8008318 <MX_I2C1_Init>
  MX_RTC_Init();
 800841c:	f000 f894 	bl	8008548 <MX_RTC_Init>
  MX_UART4_Init();
 8008420:	f000 fb8e 	bl	8008b40 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8008424:	f000 fbb6 	bl	8008b94 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8008428:	f000 fbde 	bl	8008be8 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 800842c:	f000 fc06 	bl	8008c3c <MX_USART6_UART_Init>
  MX_TIM8_Init();
 8008430:	f000 fb14 	bl	8008a5c <MX_TIM8_Init>
  MX_SPI2_Init();
 8008434:	f000 f8d8 	bl	80085e8 <MX_SPI2_Init>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
#endif
  MX_FREERTOS_Init();
 8008438:	f7ff fec0 	bl	80081bc <MX_FREERTOS_Init>
  while (1)
 800843c:	bf00      	nop
 800843e:	e7fd      	b.n	800843c <main+0x38>

08008440 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b094      	sub	sp, #80	@ 0x50
 8008444:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008446:	f107 0320 	add.w	r3, r7, #32
 800844a:	2230      	movs	r2, #48	@ 0x30
 800844c:	2100      	movs	r1, #0
 800844e:	4618      	mov	r0, r3
 8008450:	f009 fbbf 	bl	8011bd2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008454:	f107 030c 	add.w	r3, r7, #12
 8008458:	2200      	movs	r2, #0
 800845a:	601a      	str	r2, [r3, #0]
 800845c:	605a      	str	r2, [r3, #4]
 800845e:	609a      	str	r2, [r3, #8]
 8008460:	60da      	str	r2, [r3, #12]
 8008462:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008464:	2300      	movs	r3, #0
 8008466:	60bb      	str	r3, [r7, #8]
 8008468:	4b29      	ldr	r3, [pc, #164]	@ (8008510 <SystemClock_Config+0xd0>)
 800846a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800846c:	4a28      	ldr	r2, [pc, #160]	@ (8008510 <SystemClock_Config+0xd0>)
 800846e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008472:	6413      	str	r3, [r2, #64]	@ 0x40
 8008474:	4b26      	ldr	r3, [pc, #152]	@ (8008510 <SystemClock_Config+0xd0>)
 8008476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008478:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800847c:	60bb      	str	r3, [r7, #8]
 800847e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008480:	2300      	movs	r3, #0
 8008482:	607b      	str	r3, [r7, #4]
 8008484:	4b23      	ldr	r3, [pc, #140]	@ (8008514 <SystemClock_Config+0xd4>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a22      	ldr	r2, [pc, #136]	@ (8008514 <SystemClock_Config+0xd4>)
 800848a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800848e:	6013      	str	r3, [r2, #0]
 8008490:	4b20      	ldr	r3, [pc, #128]	@ (8008514 <SystemClock_Config+0xd4>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008498:	607b      	str	r3, [r7, #4]
 800849a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800849c:	2306      	movs	r3, #6
 800849e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80084a0:	2301      	movs	r3, #1
 80084a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80084a4:	2301      	movs	r3, #1
 80084a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80084a8:	2310      	movs	r3, #16
 80084aa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80084ac:	2302      	movs	r3, #2
 80084ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80084b0:	2300      	movs	r3, #0
 80084b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80084b4:	2308      	movs	r3, #8
 80084b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80084b8:	23a8      	movs	r3, #168	@ 0xa8
 80084ba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80084bc:	2302      	movs	r3, #2
 80084be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80084c0:	2304      	movs	r3, #4
 80084c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80084c4:	f107 0320 	add.w	r3, r7, #32
 80084c8:	4618      	mov	r0, r3
 80084ca:	f002 fead 	bl	800b228 <HAL_RCC_OscConfig>
 80084ce:	4603      	mov	r3, r0
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d001      	beq.n	80084d8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80084d4:	f000 f832 	bl	800853c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80084d8:	230f      	movs	r3, #15
 80084da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80084dc:	2302      	movs	r3, #2
 80084de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80084e0:	2300      	movs	r3, #0
 80084e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80084e4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80084e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80084ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80084ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80084f0:	f107 030c 	add.w	r3, r7, #12
 80084f4:	2105      	movs	r1, #5
 80084f6:	4618      	mov	r0, r3
 80084f8:	f003 f90e 	bl	800b718 <HAL_RCC_ClockConfig>
 80084fc:	4603      	mov	r3, r0
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d001      	beq.n	8008506 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8008502:	f000 f81b 	bl	800853c <Error_Handler>
  }
}
 8008506:	bf00      	nop
 8008508:	3750      	adds	r7, #80	@ 0x50
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop
 8008510:	40023800 	.word	0x40023800
 8008514:	40007000 	.word	0x40007000

08008518 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b082      	sub	sp, #8
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a04      	ldr	r2, [pc, #16]	@ (8008538 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d101      	bne.n	800852e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800852a:	f000 fced 	bl	8008f08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800852e:	bf00      	nop
 8008530:	3708      	adds	r7, #8
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
 8008536:	bf00      	nop
 8008538:	40000400 	.word	0x40000400

0800853c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800853c:	b480      	push	{r7}
 800853e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8008540:	b672      	cpsid	i
}
 8008542:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008544:	bf00      	nop
 8008546:	e7fd      	b.n	8008544 <Error_Handler+0x8>

08008548 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800854c:	4b0f      	ldr	r3, [pc, #60]	@ (800858c <MX_RTC_Init+0x44>)
 800854e:	4a10      	ldr	r2, [pc, #64]	@ (8008590 <MX_RTC_Init+0x48>)
 8008550:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8008552:	4b0e      	ldr	r3, [pc, #56]	@ (800858c <MX_RTC_Init+0x44>)
 8008554:	2200      	movs	r2, #0
 8008556:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8008558:	4b0c      	ldr	r3, [pc, #48]	@ (800858c <MX_RTC_Init+0x44>)
 800855a:	227f      	movs	r2, #127	@ 0x7f
 800855c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800855e:	4b0b      	ldr	r3, [pc, #44]	@ (800858c <MX_RTC_Init+0x44>)
 8008560:	22ff      	movs	r2, #255	@ 0xff
 8008562:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8008564:	4b09      	ldr	r3, [pc, #36]	@ (800858c <MX_RTC_Init+0x44>)
 8008566:	2200      	movs	r2, #0
 8008568:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800856a:	4b08      	ldr	r3, [pc, #32]	@ (800858c <MX_RTC_Init+0x44>)
 800856c:	2200      	movs	r2, #0
 800856e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8008570:	4b06      	ldr	r3, [pc, #24]	@ (800858c <MX_RTC_Init+0x44>)
 8008572:	2200      	movs	r2, #0
 8008574:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8008576:	4805      	ldr	r0, [pc, #20]	@ (800858c <MX_RTC_Init+0x44>)
 8008578:	f003 fbc2 	bl	800bd00 <HAL_RTC_Init>
 800857c:	4603      	mov	r3, r0
 800857e:	2b00      	cmp	r3, #0
 8008580:	d001      	beq.n	8008586 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8008582:	f7ff ffdb 	bl	800853c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8008586:	bf00      	nop
 8008588:	bd80      	pop	{r7, pc}
 800858a:	bf00      	nop
 800858c:	20001f30 	.word	0x20001f30
 8008590:	40002800 	.word	0x40002800

08008594 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b086      	sub	sp, #24
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800859c:	f107 0308 	add.w	r3, r7, #8
 80085a0:	2200      	movs	r2, #0
 80085a2:	601a      	str	r2, [r3, #0]
 80085a4:	605a      	str	r2, [r3, #4]
 80085a6:	609a      	str	r2, [r3, #8]
 80085a8:	60da      	str	r2, [r3, #12]
  if(rtcHandle->Instance==RTC)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a0c      	ldr	r2, [pc, #48]	@ (80085e0 <HAL_RTC_MspInit+0x4c>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d111      	bne.n	80085d8 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80085b4:	2302      	movs	r3, #2
 80085b6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80085b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80085bc:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80085be:	f107 0308 	add.w	r3, r7, #8
 80085c2:	4618      	mov	r0, r3
 80085c4:	f003 faba 	bl	800bb3c <HAL_RCCEx_PeriphCLKConfig>
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d001      	beq.n	80085d2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80085ce:	f7ff ffb5 	bl	800853c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80085d2:	4b04      	ldr	r3, [pc, #16]	@ (80085e4 <HAL_RTC_MspInit+0x50>)
 80085d4:	2201      	movs	r2, #1
 80085d6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80085d8:	bf00      	nop
 80085da:	3718      	adds	r7, #24
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}
 80085e0:	40002800 	.word	0x40002800
 80085e4:	42470e3c 	.word	0x42470e3c

080085e8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80085ec:	4b17      	ldr	r3, [pc, #92]	@ (800864c <MX_SPI2_Init+0x64>)
 80085ee:	4a18      	ldr	r2, [pc, #96]	@ (8008650 <MX_SPI2_Init+0x68>)
 80085f0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80085f2:	4b16      	ldr	r3, [pc, #88]	@ (800864c <MX_SPI2_Init+0x64>)
 80085f4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80085f8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80085fa:	4b14      	ldr	r3, [pc, #80]	@ (800864c <MX_SPI2_Init+0x64>)
 80085fc:	2200      	movs	r2, #0
 80085fe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8008600:	4b12      	ldr	r3, [pc, #72]	@ (800864c <MX_SPI2_Init+0x64>)
 8008602:	2200      	movs	r2, #0
 8008604:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8008606:	4b11      	ldr	r3, [pc, #68]	@ (800864c <MX_SPI2_Init+0x64>)
 8008608:	2202      	movs	r2, #2
 800860a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800860c:	4b0f      	ldr	r3, [pc, #60]	@ (800864c <MX_SPI2_Init+0x64>)
 800860e:	2201      	movs	r2, #1
 8008610:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8008612:	4b0e      	ldr	r3, [pc, #56]	@ (800864c <MX_SPI2_Init+0x64>)
 8008614:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008618:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800861a:	4b0c      	ldr	r3, [pc, #48]	@ (800864c <MX_SPI2_Init+0x64>)
 800861c:	2218      	movs	r2, #24
 800861e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008620:	4b0a      	ldr	r3, [pc, #40]	@ (800864c <MX_SPI2_Init+0x64>)
 8008622:	2200      	movs	r2, #0
 8008624:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8008626:	4b09      	ldr	r3, [pc, #36]	@ (800864c <MX_SPI2_Init+0x64>)
 8008628:	2200      	movs	r2, #0
 800862a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800862c:	4b07      	ldr	r3, [pc, #28]	@ (800864c <MX_SPI2_Init+0x64>)
 800862e:	2200      	movs	r2, #0
 8008630:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8008632:	4b06      	ldr	r3, [pc, #24]	@ (800864c <MX_SPI2_Init+0x64>)
 8008634:	220a      	movs	r2, #10
 8008636:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8008638:	4804      	ldr	r0, [pc, #16]	@ (800864c <MX_SPI2_Init+0x64>)
 800863a:	f003 fe6d 	bl	800c318 <HAL_SPI_Init>
 800863e:	4603      	mov	r3, r0
 8008640:	2b00      	cmp	r3, #0
 8008642:	d001      	beq.n	8008648 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8008644:	f7ff ff7a 	bl	800853c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8008648:	bf00      	nop
 800864a:	bd80      	pop	{r7, pc}
 800864c:	20001f50 	.word	0x20001f50
 8008650:	40003800 	.word	0x40003800

08008654 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b08a      	sub	sp, #40	@ 0x28
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800865c:	f107 0314 	add.w	r3, r7, #20
 8008660:	2200      	movs	r2, #0
 8008662:	601a      	str	r2, [r3, #0]
 8008664:	605a      	str	r2, [r3, #4]
 8008666:	609a      	str	r2, [r3, #8]
 8008668:	60da      	str	r2, [r3, #12]
 800866a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a19      	ldr	r2, [pc, #100]	@ (80086d8 <HAL_SPI_MspInit+0x84>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d12c      	bne.n	80086d0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8008676:	2300      	movs	r3, #0
 8008678:	613b      	str	r3, [r7, #16]
 800867a:	4b18      	ldr	r3, [pc, #96]	@ (80086dc <HAL_SPI_MspInit+0x88>)
 800867c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800867e:	4a17      	ldr	r2, [pc, #92]	@ (80086dc <HAL_SPI_MspInit+0x88>)
 8008680:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008684:	6413      	str	r3, [r2, #64]	@ 0x40
 8008686:	4b15      	ldr	r3, [pc, #84]	@ (80086dc <HAL_SPI_MspInit+0x88>)
 8008688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800868a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800868e:	613b      	str	r3, [r7, #16]
 8008690:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008692:	2300      	movs	r3, #0
 8008694:	60fb      	str	r3, [r7, #12]
 8008696:	4b11      	ldr	r3, [pc, #68]	@ (80086dc <HAL_SPI_MspInit+0x88>)
 8008698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800869a:	4a10      	ldr	r2, [pc, #64]	@ (80086dc <HAL_SPI_MspInit+0x88>)
 800869c:	f043 0302 	orr.w	r3, r3, #2
 80086a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80086a2:	4b0e      	ldr	r3, [pc, #56]	@ (80086dc <HAL_SPI_MspInit+0x88>)
 80086a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086a6:	f003 0302 	and.w	r3, r3, #2
 80086aa:	60fb      	str	r3, [r7, #12]
 80086ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80086ae:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80086b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086b4:	2302      	movs	r3, #2
 80086b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086b8:	2300      	movs	r3, #0
 80086ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80086bc:	2303      	movs	r3, #3
 80086be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80086c0:	2305      	movs	r3, #5
 80086c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80086c4:	f107 0314 	add.w	r3, r7, #20
 80086c8:	4619      	mov	r1, r3
 80086ca:	4805      	ldr	r0, [pc, #20]	@ (80086e0 <HAL_SPI_MspInit+0x8c>)
 80086cc:	f001 fa9c 	bl	8009c08 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80086d0:	bf00      	nop
 80086d2:	3728      	adds	r7, #40	@ 0x28
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}
 80086d8:	40003800 	.word	0x40003800
 80086dc:	40023800 	.word	0x40023800
 80086e0:	40020400 	.word	0x40020400

080086e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b082      	sub	sp, #8
 80086e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80086ea:	2300      	movs	r3, #0
 80086ec:	607b      	str	r3, [r7, #4]
 80086ee:	4b12      	ldr	r3, [pc, #72]	@ (8008738 <HAL_MspInit+0x54>)
 80086f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086f2:	4a11      	ldr	r2, [pc, #68]	@ (8008738 <HAL_MspInit+0x54>)
 80086f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80086f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80086fa:	4b0f      	ldr	r3, [pc, #60]	@ (8008738 <HAL_MspInit+0x54>)
 80086fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008702:	607b      	str	r3, [r7, #4]
 8008704:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008706:	2300      	movs	r3, #0
 8008708:	603b      	str	r3, [r7, #0]
 800870a:	4b0b      	ldr	r3, [pc, #44]	@ (8008738 <HAL_MspInit+0x54>)
 800870c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800870e:	4a0a      	ldr	r2, [pc, #40]	@ (8008738 <HAL_MspInit+0x54>)
 8008710:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008714:	6413      	str	r3, [r2, #64]	@ 0x40
 8008716:	4b08      	ldr	r3, [pc, #32]	@ (8008738 <HAL_MspInit+0x54>)
 8008718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800871a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800871e:	603b      	str	r3, [r7, #0]
 8008720:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8008722:	2200      	movs	r2, #0
 8008724:	210f      	movs	r1, #15
 8008726:	f06f 0001 	mvn.w	r0, #1
 800872a:	f001 fa21 	bl	8009b70 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800872e:	bf00      	nop
 8008730:	3708      	adds	r7, #8
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}
 8008736:	bf00      	nop
 8008738:	40023800 	.word	0x40023800

0800873c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b08e      	sub	sp, #56	@ 0x38
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8008744:	2300      	movs	r3, #0
 8008746:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8008748:	2300      	movs	r3, #0
 800874a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 800874c:	2300      	movs	r3, #0
 800874e:	60fb      	str	r3, [r7, #12]
 8008750:	4b33      	ldr	r3, [pc, #204]	@ (8008820 <HAL_InitTick+0xe4>)
 8008752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008754:	4a32      	ldr	r2, [pc, #200]	@ (8008820 <HAL_InitTick+0xe4>)
 8008756:	f043 0302 	orr.w	r3, r3, #2
 800875a:	6413      	str	r3, [r2, #64]	@ 0x40
 800875c:	4b30      	ldr	r3, [pc, #192]	@ (8008820 <HAL_InitTick+0xe4>)
 800875e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008760:	f003 0302 	and.w	r3, r3, #2
 8008764:	60fb      	str	r3, [r7, #12]
 8008766:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8008768:	f107 0210 	add.w	r2, r7, #16
 800876c:	f107 0314 	add.w	r3, r7, #20
 8008770:	4611      	mov	r1, r2
 8008772:	4618      	mov	r0, r3
 8008774:	f003 f9b0 	bl	800bad8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8008778:	6a3b      	ldr	r3, [r7, #32]
 800877a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800877c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800877e:	2b00      	cmp	r3, #0
 8008780:	d103      	bne.n	800878a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8008782:	f003 f981 	bl	800ba88 <HAL_RCC_GetPCLK1Freq>
 8008786:	6378      	str	r0, [r7, #52]	@ 0x34
 8008788:	e004      	b.n	8008794 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800878a:	f003 f97d 	bl	800ba88 <HAL_RCC_GetPCLK1Freq>
 800878e:	4603      	mov	r3, r0
 8008790:	005b      	lsls	r3, r3, #1
 8008792:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8008794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008796:	4a23      	ldr	r2, [pc, #140]	@ (8008824 <HAL_InitTick+0xe8>)
 8008798:	fba2 2303 	umull	r2, r3, r2, r3
 800879c:	0c9b      	lsrs	r3, r3, #18
 800879e:	3b01      	subs	r3, #1
 80087a0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80087a2:	4b21      	ldr	r3, [pc, #132]	@ (8008828 <HAL_InitTick+0xec>)
 80087a4:	4a21      	ldr	r2, [pc, #132]	@ (800882c <HAL_InitTick+0xf0>)
 80087a6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 80087a8:	4b1f      	ldr	r3, [pc, #124]	@ (8008828 <HAL_InitTick+0xec>)
 80087aa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80087ae:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80087b0:	4a1d      	ldr	r2, [pc, #116]	@ (8008828 <HAL_InitTick+0xec>)
 80087b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087b4:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80087b6:	4b1c      	ldr	r3, [pc, #112]	@ (8008828 <HAL_InitTick+0xec>)
 80087b8:	2200      	movs	r2, #0
 80087ba:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80087bc:	4b1a      	ldr	r3, [pc, #104]	@ (8008828 <HAL_InitTick+0xec>)
 80087be:	2200      	movs	r2, #0
 80087c0:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80087c2:	4b19      	ldr	r3, [pc, #100]	@ (8008828 <HAL_InitTick+0xec>)
 80087c4:	2200      	movs	r2, #0
 80087c6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 80087c8:	4817      	ldr	r0, [pc, #92]	@ (8008828 <HAL_InitTick+0xec>)
 80087ca:	f004 f84f 	bl	800c86c <HAL_TIM_Base_Init>
 80087ce:	4603      	mov	r3, r0
 80087d0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80087d4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d11b      	bne.n	8008814 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 80087dc:	4812      	ldr	r0, [pc, #72]	@ (8008828 <HAL_InitTick+0xec>)
 80087de:	f004 f895 	bl	800c90c <HAL_TIM_Base_Start_IT>
 80087e2:	4603      	mov	r3, r0
 80087e4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80087e8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d111      	bne.n	8008814 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80087f0:	201d      	movs	r0, #29
 80087f2:	f001 f9d9 	bl	8009ba8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2b0f      	cmp	r3, #15
 80087fa:	d808      	bhi.n	800880e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 80087fc:	2200      	movs	r2, #0
 80087fe:	6879      	ldr	r1, [r7, #4]
 8008800:	201d      	movs	r0, #29
 8008802:	f001 f9b5 	bl	8009b70 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008806:	4a0a      	ldr	r2, [pc, #40]	@ (8008830 <HAL_InitTick+0xf4>)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6013      	str	r3, [r2, #0]
 800880c:	e002      	b.n	8008814 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800880e:	2301      	movs	r3, #1
 8008810:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8008814:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8008818:	4618      	mov	r0, r3
 800881a:	3738      	adds	r7, #56	@ 0x38
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}
 8008820:	40023800 	.word	0x40023800
 8008824:	431bde83 	.word	0x431bde83
 8008828:	20001fa8 	.word	0x20001fa8
 800882c:	40000400 	.word	0x40000400
 8008830:	2000029c 	.word	0x2000029c

08008834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008834:	b480      	push	{r7}
 8008836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008838:	bf00      	nop
 800883a:	e7fd      	b.n	8008838 <NMI_Handler+0x4>

0800883c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800883c:	b480      	push	{r7}
 800883e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008840:	bf00      	nop
 8008842:	e7fd      	b.n	8008840 <HardFault_Handler+0x4>

08008844 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008844:	b480      	push	{r7}
 8008846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008848:	bf00      	nop
 800884a:	e7fd      	b.n	8008848 <MemManage_Handler+0x4>

0800884c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800884c:	b480      	push	{r7}
 800884e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008850:	bf00      	nop
 8008852:	e7fd      	b.n	8008850 <BusFault_Handler+0x4>

08008854 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008854:	b480      	push	{r7}
 8008856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008858:	bf00      	nop
 800885a:	e7fd      	b.n	8008858 <UsageFault_Handler+0x4>

0800885c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800885c:	b480      	push	{r7}
 800885e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008860:	bf00      	nop
 8008862:	46bd      	mov	sp, r7
 8008864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008868:	4770      	bx	lr
	...

0800886c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8008870:	4802      	ldr	r0, [pc, #8]	@ (800887c <ADC_IRQHandler+0x10>)
 8008872:	f000 fd61 	bl	8009338 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8008876:	bf00      	nop
 8008878:	bd80      	pop	{r7, pc}
 800887a:	bf00      	nop
 800887c:	20001e94 	.word	0x20001e94

08008880 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8008884:	4803      	ldr	r0, [pc, #12]	@ (8008894 <TIM3_IRQHandler+0x14>)
 8008886:	f004 f8b1 	bl	800c9ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  My_Button_IRQHandlerC();
 800888a:	f7fd fca1 	bl	80061d0 <My_Button_IRQHandlerC>
  /* USER CODE END TIM3_IRQn 1 */
}
 800888e:	bf00      	nop
 8008890:	bd80      	pop	{r7, pc}
 8008892:	bf00      	nop
 8008894:	20001fa8 	.word	0x20001fa8

08008898 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */
#endif

  My_UART_IRQHandlerC(&huart2);
 800889c:	4802      	ldr	r0, [pc, #8]	@ (80088a8 <USART2_IRQHandler+0x10>)
 800889e:	f7fc f8bd 	bl	8004a1c <My_UART_IRQHandlerC>
  /* USER CODE END USART2_IRQn 1 */
}
 80088a2:	bf00      	nop
 80088a4:	bd80      	pop	{r7, pc}
 80088a6:	bf00      	nop
 80088a8:	200020cc 	.word	0x200020cc

080088ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80088ac:	b480      	push	{r7}
 80088ae:	af00      	add	r7, sp, #0
  return 1;
 80088b0:	2301      	movs	r3, #1
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr

080088bc <_kill>:

int _kill(int pid, int sig)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b082      	sub	sp, #8
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80088c6:	f009 fa63 	bl	8011d90 <__errno>
 80088ca:	4603      	mov	r3, r0
 80088cc:	2216      	movs	r2, #22
 80088ce:	601a      	str	r2, [r3, #0]
  return -1;
 80088d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	3708      	adds	r7, #8
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <_exit>:

void _exit (int status)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80088e4:	f04f 31ff 	mov.w	r1, #4294967295
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f7ff ffe7 	bl	80088bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80088ee:	bf00      	nop
 80088f0:	e7fd      	b.n	80088ee <_exit+0x12>

080088f2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80088f2:	b580      	push	{r7, lr}
 80088f4:	b086      	sub	sp, #24
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	60f8      	str	r0, [r7, #12]
 80088fa:	60b9      	str	r1, [r7, #8]
 80088fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80088fe:	2300      	movs	r3, #0
 8008900:	617b      	str	r3, [r7, #20]
 8008902:	e00a      	b.n	800891a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008904:	f3af 8000 	nop.w
 8008908:	4601      	mov	r1, r0
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	1c5a      	adds	r2, r3, #1
 800890e:	60ba      	str	r2, [r7, #8]
 8008910:	b2ca      	uxtb	r2, r1
 8008912:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	3301      	adds	r3, #1
 8008918:	617b      	str	r3, [r7, #20]
 800891a:	697a      	ldr	r2, [r7, #20]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	429a      	cmp	r2, r3
 8008920:	dbf0      	blt.n	8008904 <_read+0x12>
  }

  return len;
 8008922:	687b      	ldr	r3, [r7, #4]
}
 8008924:	4618      	mov	r0, r3
 8008926:	3718      	adds	r7, #24
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}

0800892c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b086      	sub	sp, #24
 8008930:	af00      	add	r7, sp, #0
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	60b9      	str	r1, [r7, #8]
 8008936:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008938:	2300      	movs	r3, #0
 800893a:	617b      	str	r3, [r7, #20]
 800893c:	e009      	b.n	8008952 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	1c5a      	adds	r2, r3, #1
 8008942:	60ba      	str	r2, [r7, #8]
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	4618      	mov	r0, r3
 8008948:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	3301      	adds	r3, #1
 8008950:	617b      	str	r3, [r7, #20]
 8008952:	697a      	ldr	r2, [r7, #20]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	429a      	cmp	r2, r3
 8008958:	dbf1      	blt.n	800893e <_write+0x12>
  }
  return len;
 800895a:	687b      	ldr	r3, [r7, #4]
}
 800895c:	4618      	mov	r0, r3
 800895e:	3718      	adds	r7, #24
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <_close>:

int _close(int file)
{
 8008964:	b480      	push	{r7}
 8008966:	b083      	sub	sp, #12
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800896c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008970:	4618      	mov	r0, r3
 8008972:	370c      	adds	r7, #12
 8008974:	46bd      	mov	sp, r7
 8008976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897a:	4770      	bx	lr

0800897c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800897c:	b480      	push	{r7}
 800897e:	b083      	sub	sp, #12
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
 8008984:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800898c:	605a      	str	r2, [r3, #4]
  return 0;
 800898e:	2300      	movs	r3, #0
}
 8008990:	4618      	mov	r0, r3
 8008992:	370c      	adds	r7, #12
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr

0800899c <_isatty>:

int _isatty(int file)
{
 800899c:	b480      	push	{r7}
 800899e:	b083      	sub	sp, #12
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80089a4:	2301      	movs	r3, #1
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	370c      	adds	r7, #12
 80089aa:	46bd      	mov	sp, r7
 80089ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b0:	4770      	bx	lr

080089b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80089b2:	b480      	push	{r7}
 80089b4:	b085      	sub	sp, #20
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	60f8      	str	r0, [r7, #12]
 80089ba:	60b9      	str	r1, [r7, #8]
 80089bc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80089be:	2300      	movs	r3, #0
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3714      	adds	r7, #20
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr

080089cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b086      	sub	sp, #24
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80089d4:	4a14      	ldr	r2, [pc, #80]	@ (8008a28 <_sbrk+0x5c>)
 80089d6:	4b15      	ldr	r3, [pc, #84]	@ (8008a2c <_sbrk+0x60>)
 80089d8:	1ad3      	subs	r3, r2, r3
 80089da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80089e0:	4b13      	ldr	r3, [pc, #76]	@ (8008a30 <_sbrk+0x64>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d102      	bne.n	80089ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80089e8:	4b11      	ldr	r3, [pc, #68]	@ (8008a30 <_sbrk+0x64>)
 80089ea:	4a12      	ldr	r2, [pc, #72]	@ (8008a34 <_sbrk+0x68>)
 80089ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80089ee:	4b10      	ldr	r3, [pc, #64]	@ (8008a30 <_sbrk+0x64>)
 80089f0:	681a      	ldr	r2, [r3, #0]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	4413      	add	r3, r2
 80089f6:	693a      	ldr	r2, [r7, #16]
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d207      	bcs.n	8008a0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80089fc:	f009 f9c8 	bl	8011d90 <__errno>
 8008a00:	4603      	mov	r3, r0
 8008a02:	220c      	movs	r2, #12
 8008a04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008a06:	f04f 33ff 	mov.w	r3, #4294967295
 8008a0a:	e009      	b.n	8008a20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008a0c:	4b08      	ldr	r3, [pc, #32]	@ (8008a30 <_sbrk+0x64>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008a12:	4b07      	ldr	r3, [pc, #28]	@ (8008a30 <_sbrk+0x64>)
 8008a14:	681a      	ldr	r2, [r3, #0]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	4413      	add	r3, r2
 8008a1a:	4a05      	ldr	r2, [pc, #20]	@ (8008a30 <_sbrk+0x64>)
 8008a1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3718      	adds	r7, #24
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}
 8008a28:	20020000 	.word	0x20020000
 8008a2c:	00000400 	.word	0x00000400
 8008a30:	20001ff0 	.word	0x20001ff0
 8008a34:	2000ccd0 	.word	0x2000ccd0

08008a38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008a3c:	4b06      	ldr	r3, [pc, #24]	@ (8008a58 <SystemInit+0x20>)
 8008a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a42:	4a05      	ldr	r2, [pc, #20]	@ (8008a58 <SystemInit+0x20>)
 8008a44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008a48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008a4c:	bf00      	nop
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a54:	4770      	bx	lr
 8008a56:	bf00      	nop
 8008a58:	e000ed00 	.word	0xe000ed00

08008a5c <MX_TIM8_Init>:

TIM_HandleTypeDef htim8;

/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b086      	sub	sp, #24
 8008a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008a62:	f107 0308 	add.w	r3, r7, #8
 8008a66:	2200      	movs	r2, #0
 8008a68:	601a      	str	r2, [r3, #0]
 8008a6a:	605a      	str	r2, [r3, #4]
 8008a6c:	609a      	str	r2, [r3, #8]
 8008a6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008a70:	463b      	mov	r3, r7
 8008a72:	2200      	movs	r2, #0
 8008a74:	601a      	str	r2, [r3, #0]
 8008a76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8008a78:	4b1e      	ldr	r3, [pc, #120]	@ (8008af4 <MX_TIM8_Init+0x98>)
 8008a7a:	4a1f      	ldr	r2, [pc, #124]	@ (8008af8 <MX_TIM8_Init+0x9c>)
 8008a7c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 168-1;
 8008a7e:	4b1d      	ldr	r3, [pc, #116]	@ (8008af4 <MX_TIM8_Init+0x98>)
 8008a80:	22a7      	movs	r2, #167	@ 0xa7
 8008a82:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008a84:	4b1b      	ldr	r3, [pc, #108]	@ (8008af4 <MX_TIM8_Init+0x98>)
 8008a86:	2200      	movs	r2, #0
 8008a88:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 2000-1;
 8008a8a:	4b1a      	ldr	r3, [pc, #104]	@ (8008af4 <MX_TIM8_Init+0x98>)
 8008a8c:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8008a90:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008a92:	4b18      	ldr	r3, [pc, #96]	@ (8008af4 <MX_TIM8_Init+0x98>)
 8008a94:	2200      	movs	r2, #0
 8008a96:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8008a98:	4b16      	ldr	r3, [pc, #88]	@ (8008af4 <MX_TIM8_Init+0x98>)
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008a9e:	4b15      	ldr	r3, [pc, #84]	@ (8008af4 <MX_TIM8_Init+0x98>)
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8008aa4:	4813      	ldr	r0, [pc, #76]	@ (8008af4 <MX_TIM8_Init+0x98>)
 8008aa6:	f003 fee1 	bl	800c86c <HAL_TIM_Base_Init>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d001      	beq.n	8008ab4 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8008ab0:	f7ff fd44 	bl	800853c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008ab4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008ab8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8008aba:	f107 0308 	add.w	r3, r7, #8
 8008abe:	4619      	mov	r1, r3
 8008ac0:	480c      	ldr	r0, [pc, #48]	@ (8008af4 <MX_TIM8_Init+0x98>)
 8008ac2:	f004 f883 	bl	800cbcc <HAL_TIM_ConfigClockSource>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d001      	beq.n	8008ad0 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8008acc:	f7ff fd36 	bl	800853c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8008ad0:	2320      	movs	r3, #32
 8008ad2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8008ad8:	463b      	mov	r3, r7
 8008ada:	4619      	mov	r1, r3
 8008adc:	4805      	ldr	r0, [pc, #20]	@ (8008af4 <MX_TIM8_Init+0x98>)
 8008ade:	f004 faab 	bl	800d038 <HAL_TIMEx_MasterConfigSynchronization>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d001      	beq.n	8008aec <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8008ae8:	f7ff fd28 	bl	800853c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8008aec:	bf00      	nop
 8008aee:	3718      	adds	r7, #24
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}
 8008af4:	20001ff4 	.word	0x20001ff4
 8008af8:	40010400 	.word	0x40010400

08008afc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b085      	sub	sp, #20
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a0b      	ldr	r2, [pc, #44]	@ (8008b38 <HAL_TIM_Base_MspInit+0x3c>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d10d      	bne.n	8008b2a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8008b0e:	2300      	movs	r3, #0
 8008b10:	60fb      	str	r3, [r7, #12]
 8008b12:	4b0a      	ldr	r3, [pc, #40]	@ (8008b3c <HAL_TIM_Base_MspInit+0x40>)
 8008b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b16:	4a09      	ldr	r2, [pc, #36]	@ (8008b3c <HAL_TIM_Base_MspInit+0x40>)
 8008b18:	f043 0302 	orr.w	r3, r3, #2
 8008b1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8008b1e:	4b07      	ldr	r3, [pc, #28]	@ (8008b3c <HAL_TIM_Base_MspInit+0x40>)
 8008b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b22:	f003 0302 	and.w	r3, r3, #2
 8008b26:	60fb      	str	r3, [r7, #12]
 8008b28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8008b2a:	bf00      	nop
 8008b2c:	3714      	adds	r7, #20
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b34:	4770      	bx	lr
 8008b36:	bf00      	nop
 8008b38:	40010400 	.word	0x40010400
 8008b3c:	40023800 	.word	0x40023800

08008b40 <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart6;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8008b44:	4b11      	ldr	r3, [pc, #68]	@ (8008b8c <MX_UART4_Init+0x4c>)
 8008b46:	4a12      	ldr	r2, [pc, #72]	@ (8008b90 <MX_UART4_Init+0x50>)
 8008b48:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8008b4a:	4b10      	ldr	r3, [pc, #64]	@ (8008b8c <MX_UART4_Init+0x4c>)
 8008b4c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8008b50:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8008b52:	4b0e      	ldr	r3, [pc, #56]	@ (8008b8c <MX_UART4_Init+0x4c>)
 8008b54:	2200      	movs	r2, #0
 8008b56:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8008b58:	4b0c      	ldr	r3, [pc, #48]	@ (8008b8c <MX_UART4_Init+0x4c>)
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8008b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8008b8c <MX_UART4_Init+0x4c>)
 8008b60:	2200      	movs	r2, #0
 8008b62:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8008b64:	4b09      	ldr	r3, [pc, #36]	@ (8008b8c <MX_UART4_Init+0x4c>)
 8008b66:	220c      	movs	r2, #12
 8008b68:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008b6a:	4b08      	ldr	r3, [pc, #32]	@ (8008b8c <MX_UART4_Init+0x4c>)
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8008b70:	4b06      	ldr	r3, [pc, #24]	@ (8008b8c <MX_UART4_Init+0x4c>)
 8008b72:	2200      	movs	r2, #0
 8008b74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8008b76:	4805      	ldr	r0, [pc, #20]	@ (8008b8c <MX_UART4_Init+0x4c>)
 8008b78:	f004 faee 	bl	800d158 <HAL_UART_Init>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d001      	beq.n	8008b86 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8008b82:	f7ff fcdb 	bl	800853c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8008b86:	bf00      	nop
 8008b88:	bd80      	pop	{r7, pc}
 8008b8a:	bf00      	nop
 8008b8c:	2000203c 	.word	0x2000203c
 8008b90:	40004c00 	.word	0x40004c00

08008b94 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008b98:	4b11      	ldr	r3, [pc, #68]	@ (8008be0 <MX_USART1_UART_Init+0x4c>)
 8008b9a:	4a12      	ldr	r2, [pc, #72]	@ (8008be4 <MX_USART1_UART_Init+0x50>)
 8008b9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8008b9e:	4b10      	ldr	r3, [pc, #64]	@ (8008be0 <MX_USART1_UART_Init+0x4c>)
 8008ba0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8008ba4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008ba6:	4b0e      	ldr	r3, [pc, #56]	@ (8008be0 <MX_USART1_UART_Init+0x4c>)
 8008ba8:	2200      	movs	r2, #0
 8008baa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008bac:	4b0c      	ldr	r3, [pc, #48]	@ (8008be0 <MX_USART1_UART_Init+0x4c>)
 8008bae:	2200      	movs	r2, #0
 8008bb0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8008be0 <MX_USART1_UART_Init+0x4c>)
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008bb8:	4b09      	ldr	r3, [pc, #36]	@ (8008be0 <MX_USART1_UART_Init+0x4c>)
 8008bba:	220c      	movs	r2, #12
 8008bbc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008bbe:	4b08      	ldr	r3, [pc, #32]	@ (8008be0 <MX_USART1_UART_Init+0x4c>)
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008bc4:	4b06      	ldr	r3, [pc, #24]	@ (8008be0 <MX_USART1_UART_Init+0x4c>)
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008bca:	4805      	ldr	r0, [pc, #20]	@ (8008be0 <MX_USART1_UART_Init+0x4c>)
 8008bcc:	f004 fac4 	bl	800d158 <HAL_UART_Init>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d001      	beq.n	8008bda <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008bd6:	f7ff fcb1 	bl	800853c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008bda:	bf00      	nop
 8008bdc:	bd80      	pop	{r7, pc}
 8008bde:	bf00      	nop
 8008be0:	20002084 	.word	0x20002084
 8008be4:	40011000 	.word	0x40011000

08008be8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8008bec:	4b11      	ldr	r3, [pc, #68]	@ (8008c34 <MX_USART2_UART_Init+0x4c>)
 8008bee:	4a12      	ldr	r2, [pc, #72]	@ (8008c38 <MX_USART2_UART_Init+0x50>)
 8008bf0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8008bf2:	4b10      	ldr	r3, [pc, #64]	@ (8008c34 <MX_USART2_UART_Init+0x4c>)
 8008bf4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8008bf8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008bfa:	4b0e      	ldr	r3, [pc, #56]	@ (8008c34 <MX_USART2_UART_Init+0x4c>)
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008c00:	4b0c      	ldr	r3, [pc, #48]	@ (8008c34 <MX_USART2_UART_Init+0x4c>)
 8008c02:	2200      	movs	r2, #0
 8008c04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8008c06:	4b0b      	ldr	r3, [pc, #44]	@ (8008c34 <MX_USART2_UART_Init+0x4c>)
 8008c08:	2200      	movs	r2, #0
 8008c0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008c0c:	4b09      	ldr	r3, [pc, #36]	@ (8008c34 <MX_USART2_UART_Init+0x4c>)
 8008c0e:	220c      	movs	r2, #12
 8008c10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008c12:	4b08      	ldr	r3, [pc, #32]	@ (8008c34 <MX_USART2_UART_Init+0x4c>)
 8008c14:	2200      	movs	r2, #0
 8008c16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008c18:	4b06      	ldr	r3, [pc, #24]	@ (8008c34 <MX_USART2_UART_Init+0x4c>)
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008c1e:	4805      	ldr	r0, [pc, #20]	@ (8008c34 <MX_USART2_UART_Init+0x4c>)
 8008c20:	f004 fa9a 	bl	800d158 <HAL_UART_Init>
 8008c24:	4603      	mov	r3, r0
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d001      	beq.n	8008c2e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8008c2a:	f7ff fc87 	bl	800853c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8008c2e:	bf00      	nop
 8008c30:	bd80      	pop	{r7, pc}
 8008c32:	bf00      	nop
 8008c34:	200020cc 	.word	0x200020cc
 8008c38:	40004400 	.word	0x40004400

08008c3c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8008c40:	4b11      	ldr	r3, [pc, #68]	@ (8008c88 <MX_USART6_UART_Init+0x4c>)
 8008c42:	4a12      	ldr	r2, [pc, #72]	@ (8008c8c <MX_USART6_UART_Init+0x50>)
 8008c44:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8008c46:	4b10      	ldr	r3, [pc, #64]	@ (8008c88 <MX_USART6_UART_Init+0x4c>)
 8008c48:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8008c4c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8008c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8008c88 <MX_USART6_UART_Init+0x4c>)
 8008c50:	2200      	movs	r2, #0
 8008c52:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8008c54:	4b0c      	ldr	r3, [pc, #48]	@ (8008c88 <MX_USART6_UART_Init+0x4c>)
 8008c56:	2200      	movs	r2, #0
 8008c58:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8008c5a:	4b0b      	ldr	r3, [pc, #44]	@ (8008c88 <MX_USART6_UART_Init+0x4c>)
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8008c60:	4b09      	ldr	r3, [pc, #36]	@ (8008c88 <MX_USART6_UART_Init+0x4c>)
 8008c62:	220c      	movs	r2, #12
 8008c64:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008c66:	4b08      	ldr	r3, [pc, #32]	@ (8008c88 <MX_USART6_UART_Init+0x4c>)
 8008c68:	2200      	movs	r2, #0
 8008c6a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8008c6c:	4b06      	ldr	r3, [pc, #24]	@ (8008c88 <MX_USART6_UART_Init+0x4c>)
 8008c6e:	2200      	movs	r2, #0
 8008c70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8008c72:	4805      	ldr	r0, [pc, #20]	@ (8008c88 <MX_USART6_UART_Init+0x4c>)
 8008c74:	f004 fa70 	bl	800d158 <HAL_UART_Init>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d001      	beq.n	8008c82 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8008c7e:	f7ff fc5d 	bl	800853c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8008c82:	bf00      	nop
 8008c84:	bd80      	pop	{r7, pc}
 8008c86:	bf00      	nop
 8008c88:	20002114 	.word	0x20002114
 8008c8c:	40011400 	.word	0x40011400

08008c90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b090      	sub	sp, #64	@ 0x40
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c98:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	601a      	str	r2, [r3, #0]
 8008ca0:	605a      	str	r2, [r3, #4]
 8008ca2:	609a      	str	r2, [r3, #8]
 8008ca4:	60da      	str	r2, [r3, #12]
 8008ca6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a69      	ldr	r2, [pc, #420]	@ (8008e54 <HAL_UART_MspInit+0x1c4>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d12d      	bne.n	8008d0e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008cb6:	4b68      	ldr	r3, [pc, #416]	@ (8008e58 <HAL_UART_MspInit+0x1c8>)
 8008cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cba:	4a67      	ldr	r2, [pc, #412]	@ (8008e58 <HAL_UART_MspInit+0x1c8>)
 8008cbc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008cc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8008cc2:	4b65      	ldr	r3, [pc, #404]	@ (8008e58 <HAL_UART_MspInit+0x1c8>)
 8008cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cc6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008cca:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008cce:	2300      	movs	r3, #0
 8008cd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8008cd2:	4b61      	ldr	r3, [pc, #388]	@ (8008e58 <HAL_UART_MspInit+0x1c8>)
 8008cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cd6:	4a60      	ldr	r2, [pc, #384]	@ (8008e58 <HAL_UART_MspInit+0x1c8>)
 8008cd8:	f043 0304 	orr.w	r3, r3, #4
 8008cdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8008cde:	4b5e      	ldr	r3, [pc, #376]	@ (8008e58 <HAL_UART_MspInit+0x1c8>)
 8008ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ce2:	f003 0304 	and.w	r3, r3, #4
 8008ce6:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = PZEM3_UART4_TX_Pin|PZEM3_UART4_RX_Pin;
 8008cea:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8008cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008cf0:	2302      	movs	r3, #2
 8008cf2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008cf8:	2303      	movs	r3, #3
 8008cfa:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8008cfc:	2308      	movs	r3, #8
 8008cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008d00:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008d04:	4619      	mov	r1, r3
 8008d06:	4855      	ldr	r0, [pc, #340]	@ (8008e5c <HAL_UART_MspInit+0x1cc>)
 8008d08:	f000 ff7e 	bl	8009c08 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8008d0c:	e09d      	b.n	8008e4a <HAL_UART_MspInit+0x1ba>
  else if(uartHandle->Instance==USART1)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a53      	ldr	r2, [pc, #332]	@ (8008e60 <HAL_UART_MspInit+0x1d0>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d12d      	bne.n	8008d74 <HAL_UART_MspInit+0xe4>
    __HAL_RCC_USART1_CLK_ENABLE();
 8008d18:	2300      	movs	r3, #0
 8008d1a:	623b      	str	r3, [r7, #32]
 8008d1c:	4b4e      	ldr	r3, [pc, #312]	@ (8008e58 <HAL_UART_MspInit+0x1c8>)
 8008d1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d20:	4a4d      	ldr	r2, [pc, #308]	@ (8008e58 <HAL_UART_MspInit+0x1c8>)
 8008d22:	f043 0310 	orr.w	r3, r3, #16
 8008d26:	6453      	str	r3, [r2, #68]	@ 0x44
 8008d28:	4b4b      	ldr	r3, [pc, #300]	@ (8008e58 <HAL_UART_MspInit+0x1c8>)
 8008d2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d2c:	f003 0310 	and.w	r3, r3, #16
 8008d30:	623b      	str	r3, [r7, #32]
 8008d32:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d34:	2300      	movs	r3, #0
 8008d36:	61fb      	str	r3, [r7, #28]
 8008d38:	4b47      	ldr	r3, [pc, #284]	@ (8008e58 <HAL_UART_MspInit+0x1c8>)
 8008d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d3c:	4a46      	ldr	r2, [pc, #280]	@ (8008e58 <HAL_UART_MspInit+0x1c8>)
 8008d3e:	f043 0301 	orr.w	r3, r3, #1
 8008d42:	6313      	str	r3, [r2, #48]	@ 0x30
 8008d44:	4b44      	ldr	r3, [pc, #272]	@ (8008e58 <HAL_UART_MspInit+0x1c8>)
 8008d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d48:	f003 0301 	and.w	r3, r3, #1
 8008d4c:	61fb      	str	r3, [r7, #28]
 8008d4e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = PZEM1_USART1_TX_Pin|PZEM1_USART1_RX_Pin;
 8008d50:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8008d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d56:	2302      	movs	r3, #2
 8008d58:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d5e:	2303      	movs	r3, #3
 8008d60:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008d62:	2307      	movs	r3, #7
 8008d64:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008d6a:	4619      	mov	r1, r3
 8008d6c:	483d      	ldr	r0, [pc, #244]	@ (8008e64 <HAL_UART_MspInit+0x1d4>)
 8008d6e:	f000 ff4b 	bl	8009c08 <HAL_GPIO_Init>
}
 8008d72:	e06a      	b.n	8008e4a <HAL_UART_MspInit+0x1ba>
  else if(uartHandle->Instance==USART2)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4a3b      	ldr	r2, [pc, #236]	@ (8008e68 <HAL_UART_MspInit+0x1d8>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d134      	bne.n	8008de8 <HAL_UART_MspInit+0x158>
    __HAL_RCC_USART2_CLK_ENABLE();
 8008d7e:	2300      	movs	r3, #0
 8008d80:	61bb      	str	r3, [r7, #24]
 8008d82:	4b35      	ldr	r3, [pc, #212]	@ (8008e58 <HAL_UART_MspInit+0x1c8>)
 8008d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d86:	4a34      	ldr	r2, [pc, #208]	@ (8008e58 <HAL_UART_MspInit+0x1c8>)
 8008d88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8008d8e:	4b32      	ldr	r3, [pc, #200]	@ (8008e58 <HAL_UART_MspInit+0x1c8>)
 8008d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d96:	61bb      	str	r3, [r7, #24]
 8008d98:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	617b      	str	r3, [r7, #20]
 8008d9e:	4b2e      	ldr	r3, [pc, #184]	@ (8008e58 <HAL_UART_MspInit+0x1c8>)
 8008da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008da2:	4a2d      	ldr	r2, [pc, #180]	@ (8008e58 <HAL_UART_MspInit+0x1c8>)
 8008da4:	f043 0301 	orr.w	r3, r3, #1
 8008da8:	6313      	str	r3, [r2, #48]	@ 0x30
 8008daa:	4b2b      	ldr	r3, [pc, #172]	@ (8008e58 <HAL_UART_MspInit+0x1c8>)
 8008dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dae:	f003 0301 	and.w	r3, r3, #1
 8008db2:	617b      	str	r3, [r7, #20]
 8008db4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GSM_USART2_TX_Pin|GSM_USART2_RX_Pin;
 8008db6:	230c      	movs	r3, #12
 8008db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008dba:	2302      	movs	r3, #2
 8008dbc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008dc2:	2303      	movs	r3, #3
 8008dc4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008dc6:	2307      	movs	r3, #7
 8008dc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008dca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008dce:	4619      	mov	r1, r3
 8008dd0:	4824      	ldr	r0, [pc, #144]	@ (8008e64 <HAL_UART_MspInit+0x1d4>)
 8008dd2:	f000 ff19 	bl	8009c08 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	2105      	movs	r1, #5
 8008dda:	2026      	movs	r0, #38	@ 0x26
 8008ddc:	f000 fec8 	bl	8009b70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8008de0:	2026      	movs	r0, #38	@ 0x26
 8008de2:	f000 fee1 	bl	8009ba8 <HAL_NVIC_EnableIRQ>
}
 8008de6:	e030      	b.n	8008e4a <HAL_UART_MspInit+0x1ba>
  else if(uartHandle->Instance==USART6)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a1f      	ldr	r2, [pc, #124]	@ (8008e6c <HAL_UART_MspInit+0x1dc>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d12b      	bne.n	8008e4a <HAL_UART_MspInit+0x1ba>
    __HAL_RCC_USART6_CLK_ENABLE();
 8008df2:	2300      	movs	r3, #0
 8008df4:	613b      	str	r3, [r7, #16]
 8008df6:	4b18      	ldr	r3, [pc, #96]	@ (8008e58 <HAL_UART_MspInit+0x1c8>)
 8008df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008dfa:	4a17      	ldr	r2, [pc, #92]	@ (8008e58 <HAL_UART_MspInit+0x1c8>)
 8008dfc:	f043 0320 	orr.w	r3, r3, #32
 8008e00:	6453      	str	r3, [r2, #68]	@ 0x44
 8008e02:	4b15      	ldr	r3, [pc, #84]	@ (8008e58 <HAL_UART_MspInit+0x1c8>)
 8008e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e06:	f003 0320 	and.w	r3, r3, #32
 8008e0a:	613b      	str	r3, [r7, #16]
 8008e0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008e0e:	2300      	movs	r3, #0
 8008e10:	60fb      	str	r3, [r7, #12]
 8008e12:	4b11      	ldr	r3, [pc, #68]	@ (8008e58 <HAL_UART_MspInit+0x1c8>)
 8008e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e16:	4a10      	ldr	r2, [pc, #64]	@ (8008e58 <HAL_UART_MspInit+0x1c8>)
 8008e18:	f043 0304 	orr.w	r3, r3, #4
 8008e1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8008e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8008e58 <HAL_UART_MspInit+0x1c8>)
 8008e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e22:	f003 0304 	and.w	r3, r3, #4
 8008e26:	60fb      	str	r3, [r7, #12]
 8008e28:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PZEM2_USART6_TX_Pin|PZEM2_USART6_RX_Pin;
 8008e2a:	23c0      	movs	r3, #192	@ 0xc0
 8008e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e2e:	2302      	movs	r3, #2
 8008e30:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e32:	2300      	movs	r3, #0
 8008e34:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e36:	2303      	movs	r3, #3
 8008e38:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8008e3a:	2308      	movs	r3, #8
 8008e3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008e3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008e42:	4619      	mov	r1, r3
 8008e44:	4805      	ldr	r0, [pc, #20]	@ (8008e5c <HAL_UART_MspInit+0x1cc>)
 8008e46:	f000 fedf 	bl	8009c08 <HAL_GPIO_Init>
}
 8008e4a:	bf00      	nop
 8008e4c:	3740      	adds	r7, #64	@ 0x40
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
 8008e52:	bf00      	nop
 8008e54:	40004c00 	.word	0x40004c00
 8008e58:	40023800 	.word	0x40023800
 8008e5c:	40020800 	.word	0x40020800
 8008e60:	40011000 	.word	0x40011000
 8008e64:	40020000 	.word	0x40020000
 8008e68:	40004400 	.word	0x40004400
 8008e6c:	40011400 	.word	0x40011400

08008e70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008e70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8008ea8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8008e74:	f7ff fde0 	bl	8008a38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008e78:	480c      	ldr	r0, [pc, #48]	@ (8008eac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008e7a:	490d      	ldr	r1, [pc, #52]	@ (8008eb0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008e7c:	4a0d      	ldr	r2, [pc, #52]	@ (8008eb4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008e7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008e80:	e002      	b.n	8008e88 <LoopCopyDataInit>

08008e82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008e82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008e84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008e86:	3304      	adds	r3, #4

08008e88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008e88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008e8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008e8c:	d3f9      	bcc.n	8008e82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008e8e:	4a0a      	ldr	r2, [pc, #40]	@ (8008eb8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008e90:	4c0a      	ldr	r4, [pc, #40]	@ (8008ebc <LoopFillZerobss+0x22>)
  movs r3, #0
 8008e92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008e94:	e001      	b.n	8008e9a <LoopFillZerobss>

08008e96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008e96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008e98:	3204      	adds	r2, #4

08008e9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008e9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008e9c:	d3fb      	bcc.n	8008e96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008e9e:	f008 ff7d 	bl	8011d9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008ea2:	f7ff faaf 	bl	8008404 <main>
  bx  lr    
 8008ea6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008ea8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008eac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008eb0:	20000470 	.word	0x20000470
  ldr r2, =_sidata
 8008eb4:	08015b40 	.word	0x08015b40
  ldr r2, =_sbss
 8008eb8:	20000470 	.word	0x20000470
  ldr r4, =_ebss
 8008ebc:	2000ccd0 	.word	0x2000ccd0

08008ec0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008ec0:	e7fe      	b.n	8008ec0 <CAN1_RX0_IRQHandler>
	...

08008ec4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008ec8:	4b0e      	ldr	r3, [pc, #56]	@ (8008f04 <HAL_Init+0x40>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a0d      	ldr	r2, [pc, #52]	@ (8008f04 <HAL_Init+0x40>)
 8008ece:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008ed2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8008f04 <HAL_Init+0x40>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4a0a      	ldr	r2, [pc, #40]	@ (8008f04 <HAL_Init+0x40>)
 8008eda:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008ede:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008ee0:	4b08      	ldr	r3, [pc, #32]	@ (8008f04 <HAL_Init+0x40>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a07      	ldr	r2, [pc, #28]	@ (8008f04 <HAL_Init+0x40>)
 8008ee6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008eea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008eec:	2003      	movs	r0, #3
 8008eee:	f000 fe34 	bl	8009b5a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008ef2:	200f      	movs	r0, #15
 8008ef4:	f7ff fc22 	bl	800873c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008ef8:	f7ff fbf4 	bl	80086e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008efc:	2300      	movs	r3, #0
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	bd80      	pop	{r7, pc}
 8008f02:	bf00      	nop
 8008f04:	40023c00 	.word	0x40023c00

08008f08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008f0c:	4b06      	ldr	r3, [pc, #24]	@ (8008f28 <HAL_IncTick+0x20>)
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	461a      	mov	r2, r3
 8008f12:	4b06      	ldr	r3, [pc, #24]	@ (8008f2c <HAL_IncTick+0x24>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4413      	add	r3, r2
 8008f18:	4a04      	ldr	r2, [pc, #16]	@ (8008f2c <HAL_IncTick+0x24>)
 8008f1a:	6013      	str	r3, [r2, #0]
}
 8008f1c:	bf00      	nop
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f24:	4770      	bx	lr
 8008f26:	bf00      	nop
 8008f28:	200002a0 	.word	0x200002a0
 8008f2c:	2000215c 	.word	0x2000215c

08008f30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008f30:	b480      	push	{r7}
 8008f32:	af00      	add	r7, sp, #0
  return uwTick;
 8008f34:	4b03      	ldr	r3, [pc, #12]	@ (8008f44 <HAL_GetTick+0x14>)
 8008f36:	681b      	ldr	r3, [r3, #0]
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f40:	4770      	bx	lr
 8008f42:	bf00      	nop
 8008f44:	2000215c 	.word	0x2000215c

08008f48 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8008f4c:	4b03      	ldr	r3, [pc, #12]	@ (8008f5c <HAL_GetUIDw0+0x14>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	46bd      	mov	sp, r7
 8008f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f58:	4770      	bx	lr
 8008f5a:	bf00      	nop
 8008f5c:	1fff7a10 	.word	0x1fff7a10

08008f60 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8008f60:	b480      	push	{r7}
 8008f62:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8008f64:	4b03      	ldr	r3, [pc, #12]	@ (8008f74 <HAL_GetUIDw1+0x14>)
 8008f66:	681b      	ldr	r3, [r3, #0]
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f70:	4770      	bx	lr
 8008f72:	bf00      	nop
 8008f74:	1fff7a14 	.word	0x1fff7a14

08008f78 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8008f7c:	4b03      	ldr	r3, [pc, #12]	@ (8008f8c <HAL_GetUIDw2+0x14>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	46bd      	mov	sp, r7
 8008f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f88:	4770      	bx	lr
 8008f8a:	bf00      	nop
 8008f8c:	1fff7a18 	.word	0x1fff7a18

08008f90 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b084      	sub	sp, #16
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d101      	bne.n	8008fa6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	e033      	b.n	800900e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d109      	bne.n	8008fc2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f7ff f8b8 	bl	8008124 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fc6:	f003 0310 	and.w	r3, r3, #16
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d118      	bne.n	8009000 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fd2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8008fd6:	f023 0302 	bic.w	r3, r3, #2
 8008fda:	f043 0202 	orr.w	r2, r3, #2
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f000 fc06 	bl	80097f4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2200      	movs	r2, #0
 8008fec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ff2:	f023 0303 	bic.w	r3, r3, #3
 8008ff6:	f043 0201 	orr.w	r2, r3, #1
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	641a      	str	r2, [r3, #64]	@ 0x40
 8008ffe:	e001      	b.n	8009004 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8009000:	2301      	movs	r3, #1
 8009002:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2200      	movs	r2, #0
 8009008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800900c:	7bfb      	ldrb	r3, [r7, #15]
}
 800900e:	4618      	mov	r0, r3
 8009010:	3710      	adds	r7, #16
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}
	...

08009018 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8009018:	b480      	push	{r7}
 800901a:	b085      	sub	sp, #20
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8009020:	2300      	movs	r3, #0
 8009022:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800902a:	2b01      	cmp	r3, #1
 800902c:	d101      	bne.n	8009032 <HAL_ADC_Start+0x1a>
 800902e:	2302      	movs	r3, #2
 8009030:	e0b2      	b.n	8009198 <HAL_ADC_Start+0x180>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2201      	movs	r2, #1
 8009036:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	689b      	ldr	r3, [r3, #8]
 8009040:	f003 0301 	and.w	r3, r3, #1
 8009044:	2b01      	cmp	r3, #1
 8009046:	d018      	beq.n	800907a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	689a      	ldr	r2, [r3, #8]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f042 0201 	orr.w	r2, r2, #1
 8009056:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8009058:	4b52      	ldr	r3, [pc, #328]	@ (80091a4 <HAL_ADC_Start+0x18c>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4a52      	ldr	r2, [pc, #328]	@ (80091a8 <HAL_ADC_Start+0x190>)
 800905e:	fba2 2303 	umull	r2, r3, r2, r3
 8009062:	0c9a      	lsrs	r2, r3, #18
 8009064:	4613      	mov	r3, r2
 8009066:	005b      	lsls	r3, r3, #1
 8009068:	4413      	add	r3, r2
 800906a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800906c:	e002      	b.n	8009074 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	3b01      	subs	r3, #1
 8009072:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d1f9      	bne.n	800906e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	689b      	ldr	r3, [r3, #8]
 8009080:	f003 0301 	and.w	r3, r3, #1
 8009084:	2b01      	cmp	r3, #1
 8009086:	d17a      	bne.n	800917e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800908c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8009090:	f023 0301 	bic.w	r3, r3, #1
 8009094:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d007      	beq.n	80090ba <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090ae:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80090b2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80090c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80090c6:	d106      	bne.n	80090d6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090cc:	f023 0206 	bic.w	r2, r3, #6
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	645a      	str	r2, [r3, #68]	@ 0x44
 80090d4:	e002      	b.n	80090dc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2200      	movs	r2, #0
 80090da:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2200      	movs	r2, #0
 80090e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80090e4:	4b31      	ldr	r3, [pc, #196]	@ (80091ac <HAL_ADC_Start+0x194>)
 80090e6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80090f0:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	685b      	ldr	r3, [r3, #4]
 80090f6:	f003 031f 	and.w	r3, r3, #31
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d12a      	bne.n	8009154 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	4a2b      	ldr	r2, [pc, #172]	@ (80091b0 <HAL_ADC_Start+0x198>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d015      	beq.n	8009134 <HAL_ADC_Start+0x11c>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4a29      	ldr	r2, [pc, #164]	@ (80091b4 <HAL_ADC_Start+0x19c>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d105      	bne.n	800911e <HAL_ADC_Start+0x106>
 8009112:	4b26      	ldr	r3, [pc, #152]	@ (80091ac <HAL_ADC_Start+0x194>)
 8009114:	685b      	ldr	r3, [r3, #4]
 8009116:	f003 031f 	and.w	r3, r3, #31
 800911a:	2b00      	cmp	r3, #0
 800911c:	d00a      	beq.n	8009134 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	4a25      	ldr	r2, [pc, #148]	@ (80091b8 <HAL_ADC_Start+0x1a0>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d136      	bne.n	8009196 <HAL_ADC_Start+0x17e>
 8009128:	4b20      	ldr	r3, [pc, #128]	@ (80091ac <HAL_ADC_Start+0x194>)
 800912a:	685b      	ldr	r3, [r3, #4]
 800912c:	f003 0310 	and.w	r3, r3, #16
 8009130:	2b00      	cmp	r3, #0
 8009132:	d130      	bne.n	8009196 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	689b      	ldr	r3, [r3, #8]
 800913a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800913e:	2b00      	cmp	r3, #0
 8009140:	d129      	bne.n	8009196 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	689a      	ldr	r2, [r3, #8]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8009150:	609a      	str	r2, [r3, #8]
 8009152:	e020      	b.n	8009196 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4a15      	ldr	r2, [pc, #84]	@ (80091b0 <HAL_ADC_Start+0x198>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d11b      	bne.n	8009196 <HAL_ADC_Start+0x17e>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	689b      	ldr	r3, [r3, #8]
 8009164:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009168:	2b00      	cmp	r3, #0
 800916a:	d114      	bne.n	8009196 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	689a      	ldr	r2, [r3, #8]
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800917a:	609a      	str	r2, [r3, #8]
 800917c:	e00b      	b.n	8009196 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009182:	f043 0210 	orr.w	r2, r3, #16
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800918e:	f043 0201 	orr.w	r2, r3, #1
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8009196:	2300      	movs	r3, #0
}
 8009198:	4618      	mov	r0, r3
 800919a:	3714      	adds	r7, #20
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr
 80091a4:	20000298 	.word	0x20000298
 80091a8:	431bde83 	.word	0x431bde83
 80091ac:	40012300 	.word	0x40012300
 80091b0:	40012000 	.word	0x40012000
 80091b4:	40012100 	.word	0x40012100
 80091b8:	40012200 	.word	0x40012200

080091bc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80091bc:	b480      	push	{r7}
 80091be:	b083      	sub	sp, #12
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80091ca:	2b01      	cmp	r3, #1
 80091cc:	d101      	bne.n	80091d2 <HAL_ADC_Stop+0x16>
 80091ce:	2302      	movs	r3, #2
 80091d0:	e021      	b.n	8009216 <HAL_ADC_Stop+0x5a>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2201      	movs	r2, #1
 80091d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	689a      	ldr	r2, [r3, #8]
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f022 0201 	bic.w	r2, r2, #1
 80091e8:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	689b      	ldr	r3, [r3, #8]
 80091f0:	f003 0301 	and.w	r3, r3, #1
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d109      	bne.n	800920c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091fc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8009200:	f023 0301 	bic.w	r3, r3, #1
 8009204:	f043 0201 	orr.w	r2, r3, #1
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2200      	movs	r2, #0
 8009210:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8009214:	2300      	movs	r3, #0
}
 8009216:	4618      	mov	r0, r3
 8009218:	370c      	adds	r7, #12
 800921a:	46bd      	mov	sp, r7
 800921c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009220:	4770      	bx	lr

08009222 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8009222:	b580      	push	{r7, lr}
 8009224:	b084      	sub	sp, #16
 8009226:	af00      	add	r7, sp, #0
 8009228:	6078      	str	r0, [r7, #4]
 800922a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800922c:	2300      	movs	r3, #0
 800922e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	689b      	ldr	r3, [r3, #8]
 8009236:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800923a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800923e:	d113      	bne.n	8009268 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	689b      	ldr	r3, [r3, #8]
 8009246:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800924a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800924e:	d10b      	bne.n	8009268 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009254:	f043 0220 	orr.w	r2, r3, #32
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2200      	movs	r2, #0
 8009260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8009264:	2301      	movs	r3, #1
 8009266:	e063      	b.n	8009330 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8009268:	f7ff fe62 	bl	8008f30 <HAL_GetTick>
 800926c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800926e:	e021      	b.n	80092b4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009276:	d01d      	beq.n	80092b4 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d007      	beq.n	800928e <HAL_ADC_PollForConversion+0x6c>
 800927e:	f7ff fe57 	bl	8008f30 <HAL_GetTick>
 8009282:	4602      	mov	r2, r0
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	1ad3      	subs	r3, r2, r3
 8009288:	683a      	ldr	r2, [r7, #0]
 800928a:	429a      	cmp	r2, r3
 800928c:	d212      	bcs.n	80092b4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f003 0302 	and.w	r3, r3, #2
 8009298:	2b02      	cmp	r3, #2
 800929a:	d00b      	beq.n	80092b4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092a0:	f043 0204 	orr.w	r2, r3, #4
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2200      	movs	r2, #0
 80092ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80092b0:	2303      	movs	r3, #3
 80092b2:	e03d      	b.n	8009330 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f003 0302 	and.w	r3, r3, #2
 80092be:	2b02      	cmp	r3, #2
 80092c0:	d1d6      	bne.n	8009270 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f06f 0212 	mvn.w	r2, #18
 80092ca:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092d0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	689b      	ldr	r3, [r3, #8]
 80092de:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d123      	bne.n	800932e <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d11f      	bne.n	800932e <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092f4:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d006      	beq.n	800930a <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	689b      	ldr	r3, [r3, #8]
 8009302:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8009306:	2b00      	cmp	r3, #0
 8009308:	d111      	bne.n	800932e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800930e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800931a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800931e:	2b00      	cmp	r3, #0
 8009320:	d105      	bne.n	800932e <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009326:	f043 0201 	orr.w	r2, r3, #1
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800932e:	2300      	movs	r3, #0
}
 8009330:	4618      	mov	r0, r3
 8009332:	3710      	adds	r7, #16
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}

08009338 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b086      	sub	sp, #24
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8009340:	2300      	movs	r3, #0
 8009342:	617b      	str	r3, [r7, #20]
 8009344:	2300      	movs	r3, #0
 8009346:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	685b      	ldr	r3, [r3, #4]
 8009356:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f003 0302 	and.w	r3, r3, #2
 800935e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	f003 0320 	and.w	r3, r3, #32
 8009366:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d049      	beq.n	8009402 <HAL_ADC_IRQHandler+0xca>
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d046      	beq.n	8009402 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009378:	f003 0310 	and.w	r3, r3, #16
 800937c:	2b00      	cmp	r3, #0
 800937e:	d105      	bne.n	800938c <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009384:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	689b      	ldr	r3, [r3, #8]
 8009392:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009396:	2b00      	cmp	r3, #0
 8009398:	d12b      	bne.n	80093f2 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d127      	bne.n	80093f2 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093a8:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d006      	beq.n	80093be <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	689b      	ldr	r3, [r3, #8]
 80093b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d119      	bne.n	80093f2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	685a      	ldr	r2, [r3, #4]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f022 0220 	bic.w	r2, r2, #32
 80093cc:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093d2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d105      	bne.n	80093f2 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093ea:	f043 0201 	orr.w	r2, r3, #1
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f000 f8bd 	bl	8009572 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f06f 0212 	mvn.w	r2, #18
 8009400:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	f003 0304 	and.w	r3, r3, #4
 8009408:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009410:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d057      	beq.n	80094c8 <HAL_ADC_IRQHandler+0x190>
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d054      	beq.n	80094c8 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009422:	f003 0310 	and.w	r3, r3, #16
 8009426:	2b00      	cmp	r3, #0
 8009428:	d105      	bne.n	8009436 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800942e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	689b      	ldr	r3, [r3, #8]
 800943c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8009440:	2b00      	cmp	r3, #0
 8009442:	d139      	bne.n	80094b8 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800944a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800944e:	2b00      	cmp	r3, #0
 8009450:	d006      	beq.n	8009460 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	689b      	ldr	r3, [r3, #8]
 8009458:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800945c:	2b00      	cmp	r3, #0
 800945e:	d12b      	bne.n	80094b8 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	685b      	ldr	r3, [r3, #4]
 8009466:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800946a:	2b00      	cmp	r3, #0
 800946c:	d124      	bne.n	80094b8 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	689b      	ldr	r3, [r3, #8]
 8009474:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8009478:	2b00      	cmp	r3, #0
 800947a:	d11d      	bne.n	80094b8 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8009480:	2b00      	cmp	r3, #0
 8009482:	d119      	bne.n	80094b8 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	685a      	ldr	r2, [r3, #4]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009492:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009498:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d105      	bne.n	80094b8 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094b0:	f043 0201 	orr.w	r2, r3, #1
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f000 fa97 	bl	80099ec <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f06f 020c 	mvn.w	r2, #12
 80094c6:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	f003 0301 	and.w	r3, r3, #1
 80094ce:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094d6:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d017      	beq.n	800950e <HAL_ADC_IRQHandler+0x1d6>
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d014      	beq.n	800950e <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f003 0301 	and.w	r3, r3, #1
 80094ee:	2b01      	cmp	r3, #1
 80094f0:	d10d      	bne.n	800950e <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094f6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f000 f841 	bl	8009586 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f06f 0201 	mvn.w	r2, #1
 800950c:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	f003 0320 	and.w	r3, r3, #32
 8009514:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800951c:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d015      	beq.n	8009550 <HAL_ADC_IRQHandler+0x218>
 8009524:	693b      	ldr	r3, [r7, #16]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d012      	beq.n	8009550 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800952e:	f043 0202 	orr.w	r2, r3, #2
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f06f 0220 	mvn.w	r2, #32
 800953e:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f000 f82a 	bl	800959a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f06f 0220 	mvn.w	r2, #32
 800954e:	601a      	str	r2, [r3, #0]
  }
}
 8009550:	bf00      	nop
 8009552:	3718      	adds	r7, #24
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8009558:	b480      	push	{r7}
 800955a:	b083      	sub	sp, #12
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8009566:	4618      	mov	r0, r3
 8009568:	370c      	adds	r7, #12
 800956a:	46bd      	mov	sp, r7
 800956c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009570:	4770      	bx	lr

08009572 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8009572:	b480      	push	{r7}
 8009574:	b083      	sub	sp, #12
 8009576:	af00      	add	r7, sp, #0
 8009578:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800957a:	bf00      	nop
 800957c:	370c      	adds	r7, #12
 800957e:	46bd      	mov	sp, r7
 8009580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009584:	4770      	bx	lr

08009586 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8009586:	b480      	push	{r7}
 8009588:	b083      	sub	sp, #12
 800958a:	af00      	add	r7, sp, #0
 800958c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800958e:	bf00      	nop
 8009590:	370c      	adds	r7, #12
 8009592:	46bd      	mov	sp, r7
 8009594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009598:	4770      	bx	lr

0800959a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800959a:	b480      	push	{r7}
 800959c:	b083      	sub	sp, #12
 800959e:	af00      	add	r7, sp, #0
 80095a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80095a2:	bf00      	nop
 80095a4:	370c      	adds	r7, #12
 80095a6:	46bd      	mov	sp, r7
 80095a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ac:	4770      	bx	lr
	...

080095b0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80095b0:	b480      	push	{r7}
 80095b2:	b085      	sub	sp, #20
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80095ba:	2300      	movs	r3, #0
 80095bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d101      	bne.n	80095cc <HAL_ADC_ConfigChannel+0x1c>
 80095c8:	2302      	movs	r3, #2
 80095ca:	e105      	b.n	80097d8 <HAL_ADC_ConfigChannel+0x228>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2201      	movs	r2, #1
 80095d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	2b09      	cmp	r3, #9
 80095da:	d925      	bls.n	8009628 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	68d9      	ldr	r1, [r3, #12]
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	b29b      	uxth	r3, r3
 80095e8:	461a      	mov	r2, r3
 80095ea:	4613      	mov	r3, r2
 80095ec:	005b      	lsls	r3, r3, #1
 80095ee:	4413      	add	r3, r2
 80095f0:	3b1e      	subs	r3, #30
 80095f2:	2207      	movs	r2, #7
 80095f4:	fa02 f303 	lsl.w	r3, r2, r3
 80095f8:	43da      	mvns	r2, r3
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	400a      	ands	r2, r1
 8009600:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	68d9      	ldr	r1, [r3, #12]
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	689a      	ldr	r2, [r3, #8]
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	b29b      	uxth	r3, r3
 8009612:	4618      	mov	r0, r3
 8009614:	4603      	mov	r3, r0
 8009616:	005b      	lsls	r3, r3, #1
 8009618:	4403      	add	r3, r0
 800961a:	3b1e      	subs	r3, #30
 800961c:	409a      	lsls	r2, r3
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	430a      	orrs	r2, r1
 8009624:	60da      	str	r2, [r3, #12]
 8009626:	e022      	b.n	800966e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	6919      	ldr	r1, [r3, #16]
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	b29b      	uxth	r3, r3
 8009634:	461a      	mov	r2, r3
 8009636:	4613      	mov	r3, r2
 8009638:	005b      	lsls	r3, r3, #1
 800963a:	4413      	add	r3, r2
 800963c:	2207      	movs	r2, #7
 800963e:	fa02 f303 	lsl.w	r3, r2, r3
 8009642:	43da      	mvns	r2, r3
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	400a      	ands	r2, r1
 800964a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	6919      	ldr	r1, [r3, #16]
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	689a      	ldr	r2, [r3, #8]
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	b29b      	uxth	r3, r3
 800965c:	4618      	mov	r0, r3
 800965e:	4603      	mov	r3, r0
 8009660:	005b      	lsls	r3, r3, #1
 8009662:	4403      	add	r3, r0
 8009664:	409a      	lsls	r2, r3
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	430a      	orrs	r2, r1
 800966c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	685b      	ldr	r3, [r3, #4]
 8009672:	2b06      	cmp	r3, #6
 8009674:	d824      	bhi.n	80096c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	685a      	ldr	r2, [r3, #4]
 8009680:	4613      	mov	r3, r2
 8009682:	009b      	lsls	r3, r3, #2
 8009684:	4413      	add	r3, r2
 8009686:	3b05      	subs	r3, #5
 8009688:	221f      	movs	r2, #31
 800968a:	fa02 f303 	lsl.w	r3, r2, r3
 800968e:	43da      	mvns	r2, r3
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	400a      	ands	r2, r1
 8009696:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	b29b      	uxth	r3, r3
 80096a4:	4618      	mov	r0, r3
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	685a      	ldr	r2, [r3, #4]
 80096aa:	4613      	mov	r3, r2
 80096ac:	009b      	lsls	r3, r3, #2
 80096ae:	4413      	add	r3, r2
 80096b0:	3b05      	subs	r3, #5
 80096b2:	fa00 f203 	lsl.w	r2, r0, r3
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	430a      	orrs	r2, r1
 80096bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80096be:	e04c      	b.n	800975a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	685b      	ldr	r3, [r3, #4]
 80096c4:	2b0c      	cmp	r3, #12
 80096c6:	d824      	bhi.n	8009712 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	685a      	ldr	r2, [r3, #4]
 80096d2:	4613      	mov	r3, r2
 80096d4:	009b      	lsls	r3, r3, #2
 80096d6:	4413      	add	r3, r2
 80096d8:	3b23      	subs	r3, #35	@ 0x23
 80096da:	221f      	movs	r2, #31
 80096dc:	fa02 f303 	lsl.w	r3, r2, r3
 80096e0:	43da      	mvns	r2, r3
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	400a      	ands	r2, r1
 80096e8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	b29b      	uxth	r3, r3
 80096f6:	4618      	mov	r0, r3
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	685a      	ldr	r2, [r3, #4]
 80096fc:	4613      	mov	r3, r2
 80096fe:	009b      	lsls	r3, r3, #2
 8009700:	4413      	add	r3, r2
 8009702:	3b23      	subs	r3, #35	@ 0x23
 8009704:	fa00 f203 	lsl.w	r2, r0, r3
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	430a      	orrs	r2, r1
 800970e:	631a      	str	r2, [r3, #48]	@ 0x30
 8009710:	e023      	b.n	800975a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	685a      	ldr	r2, [r3, #4]
 800971c:	4613      	mov	r3, r2
 800971e:	009b      	lsls	r3, r3, #2
 8009720:	4413      	add	r3, r2
 8009722:	3b41      	subs	r3, #65	@ 0x41
 8009724:	221f      	movs	r2, #31
 8009726:	fa02 f303 	lsl.w	r3, r2, r3
 800972a:	43da      	mvns	r2, r3
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	400a      	ands	r2, r1
 8009732:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	b29b      	uxth	r3, r3
 8009740:	4618      	mov	r0, r3
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	685a      	ldr	r2, [r3, #4]
 8009746:	4613      	mov	r3, r2
 8009748:	009b      	lsls	r3, r3, #2
 800974a:	4413      	add	r3, r2
 800974c:	3b41      	subs	r3, #65	@ 0x41
 800974e:	fa00 f203 	lsl.w	r2, r0, r3
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	430a      	orrs	r2, r1
 8009758:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800975a:	4b22      	ldr	r3, [pc, #136]	@ (80097e4 <HAL_ADC_ConfigChannel+0x234>)
 800975c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	4a21      	ldr	r2, [pc, #132]	@ (80097e8 <HAL_ADC_ConfigChannel+0x238>)
 8009764:	4293      	cmp	r3, r2
 8009766:	d109      	bne.n	800977c <HAL_ADC_ConfigChannel+0x1cc>
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	2b12      	cmp	r3, #18
 800976e:	d105      	bne.n	800977c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	685b      	ldr	r3, [r3, #4]
 8009774:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	4a19      	ldr	r2, [pc, #100]	@ (80097e8 <HAL_ADC_ConfigChannel+0x238>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d123      	bne.n	80097ce <HAL_ADC_ConfigChannel+0x21e>
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	2b10      	cmp	r3, #16
 800978c:	d003      	beq.n	8009796 <HAL_ADC_ConfigChannel+0x1e6>
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	2b11      	cmp	r3, #17
 8009794:	d11b      	bne.n	80097ce <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	685b      	ldr	r3, [r3, #4]
 800979a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	2b10      	cmp	r3, #16
 80097a8:	d111      	bne.n	80097ce <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80097aa:	4b10      	ldr	r3, [pc, #64]	@ (80097ec <HAL_ADC_ConfigChannel+0x23c>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	4a10      	ldr	r2, [pc, #64]	@ (80097f0 <HAL_ADC_ConfigChannel+0x240>)
 80097b0:	fba2 2303 	umull	r2, r3, r2, r3
 80097b4:	0c9a      	lsrs	r2, r3, #18
 80097b6:	4613      	mov	r3, r2
 80097b8:	009b      	lsls	r3, r3, #2
 80097ba:	4413      	add	r3, r2
 80097bc:	005b      	lsls	r3, r3, #1
 80097be:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80097c0:	e002      	b.n	80097c8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	3b01      	subs	r3, #1
 80097c6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d1f9      	bne.n	80097c2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2200      	movs	r2, #0
 80097d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80097d6:	2300      	movs	r3, #0
}
 80097d8:	4618      	mov	r0, r3
 80097da:	3714      	adds	r7, #20
 80097dc:	46bd      	mov	sp, r7
 80097de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e2:	4770      	bx	lr
 80097e4:	40012300 	.word	0x40012300
 80097e8:	40012000 	.word	0x40012000
 80097ec:	20000298 	.word	0x20000298
 80097f0:	431bde83 	.word	0x431bde83

080097f4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b085      	sub	sp, #20
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80097fc:	4b79      	ldr	r3, [pc, #484]	@ (80099e4 <ADC_Init+0x1f0>)
 80097fe:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	685b      	ldr	r3, [r3, #4]
 8009804:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	685a      	ldr	r2, [r3, #4]
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	431a      	orrs	r2, r3
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	685a      	ldr	r2, [r3, #4]
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009828:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	6859      	ldr	r1, [r3, #4]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	691b      	ldr	r3, [r3, #16]
 8009834:	021a      	lsls	r2, r3, #8
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	430a      	orrs	r2, r1
 800983c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	685a      	ldr	r2, [r3, #4]
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800984c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	6859      	ldr	r1, [r3, #4]
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	689a      	ldr	r2, [r3, #8]
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	430a      	orrs	r2, r1
 800985e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	689a      	ldr	r2, [r3, #8]
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800986e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	6899      	ldr	r1, [r3, #8]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	68da      	ldr	r2, [r3, #12]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	430a      	orrs	r2, r1
 8009880:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009886:	4a58      	ldr	r2, [pc, #352]	@ (80099e8 <ADC_Init+0x1f4>)
 8009888:	4293      	cmp	r3, r2
 800988a:	d022      	beq.n	80098d2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	689a      	ldr	r2, [r3, #8]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800989a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	6899      	ldr	r1, [r3, #8]
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	430a      	orrs	r2, r1
 80098ac:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	689a      	ldr	r2, [r3, #8]
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80098bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	6899      	ldr	r1, [r3, #8]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	430a      	orrs	r2, r1
 80098ce:	609a      	str	r2, [r3, #8]
 80098d0:	e00f      	b.n	80098f2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	689a      	ldr	r2, [r3, #8]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80098e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	689a      	ldr	r2, [r3, #8]
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80098f0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	689a      	ldr	r2, [r3, #8]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f022 0202 	bic.w	r2, r2, #2
 8009900:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	6899      	ldr	r1, [r3, #8]
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	7e1b      	ldrb	r3, [r3, #24]
 800990c:	005a      	lsls	r2, r3, #1
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	430a      	orrs	r2, r1
 8009914:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f893 3020 	ldrb.w	r3, [r3, #32]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d01b      	beq.n	8009958 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	685a      	ldr	r2, [r3, #4]
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800992e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	685a      	ldr	r2, [r3, #4]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800993e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	6859      	ldr	r1, [r3, #4]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800994a:	3b01      	subs	r3, #1
 800994c:	035a      	lsls	r2, r3, #13
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	430a      	orrs	r2, r1
 8009954:	605a      	str	r2, [r3, #4]
 8009956:	e007      	b.n	8009968 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	685a      	ldr	r2, [r3, #4]
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009966:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8009976:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	69db      	ldr	r3, [r3, #28]
 8009982:	3b01      	subs	r3, #1
 8009984:	051a      	lsls	r2, r3, #20
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	430a      	orrs	r2, r1
 800998c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	689a      	ldr	r2, [r3, #8]
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800999c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	6899      	ldr	r1, [r3, #8]
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80099aa:	025a      	lsls	r2, r3, #9
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	430a      	orrs	r2, r1
 80099b2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	689a      	ldr	r2, [r3, #8]
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80099c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	6899      	ldr	r1, [r3, #8]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	695b      	ldr	r3, [r3, #20]
 80099ce:	029a      	lsls	r2, r3, #10
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	430a      	orrs	r2, r1
 80099d6:	609a      	str	r2, [r3, #8]
}
 80099d8:	bf00      	nop
 80099da:	3714      	adds	r7, #20
 80099dc:	46bd      	mov	sp, r7
 80099de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e2:	4770      	bx	lr
 80099e4:	40012300 	.word	0x40012300
 80099e8:	0f000001 	.word	0x0f000001

080099ec <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80099ec:	b480      	push	{r7}
 80099ee:	b083      	sub	sp, #12
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80099f4:	bf00      	nop
 80099f6:	370c      	adds	r7, #12
 80099f8:	46bd      	mov	sp, r7
 80099fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fe:	4770      	bx	lr

08009a00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b085      	sub	sp, #20
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f003 0307 	and.w	r3, r3, #7
 8009a0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009a10:	4b0c      	ldr	r3, [pc, #48]	@ (8009a44 <__NVIC_SetPriorityGrouping+0x44>)
 8009a12:	68db      	ldr	r3, [r3, #12]
 8009a14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009a16:	68ba      	ldr	r2, [r7, #8]
 8009a18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8009a1c:	4013      	ands	r3, r2
 8009a1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009a28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8009a2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009a30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009a32:	4a04      	ldr	r2, [pc, #16]	@ (8009a44 <__NVIC_SetPriorityGrouping+0x44>)
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	60d3      	str	r3, [r2, #12]
}
 8009a38:	bf00      	nop
 8009a3a:	3714      	adds	r7, #20
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	4770      	bx	lr
 8009a44:	e000ed00 	.word	0xe000ed00

08009a48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009a4c:	4b04      	ldr	r3, [pc, #16]	@ (8009a60 <__NVIC_GetPriorityGrouping+0x18>)
 8009a4e:	68db      	ldr	r3, [r3, #12]
 8009a50:	0a1b      	lsrs	r3, r3, #8
 8009a52:	f003 0307 	and.w	r3, r3, #7
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr
 8009a60:	e000ed00 	.word	0xe000ed00

08009a64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b083      	sub	sp, #12
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	db0b      	blt.n	8009a8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009a76:	79fb      	ldrb	r3, [r7, #7]
 8009a78:	f003 021f 	and.w	r2, r3, #31
 8009a7c:	4907      	ldr	r1, [pc, #28]	@ (8009a9c <__NVIC_EnableIRQ+0x38>)
 8009a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a82:	095b      	lsrs	r3, r3, #5
 8009a84:	2001      	movs	r0, #1
 8009a86:	fa00 f202 	lsl.w	r2, r0, r2
 8009a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8009a8e:	bf00      	nop
 8009a90:	370c      	adds	r7, #12
 8009a92:	46bd      	mov	sp, r7
 8009a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a98:	4770      	bx	lr
 8009a9a:	bf00      	nop
 8009a9c:	e000e100 	.word	0xe000e100

08009aa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b083      	sub	sp, #12
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	6039      	str	r1, [r7, #0]
 8009aaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	db0a      	blt.n	8009aca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	b2da      	uxtb	r2, r3
 8009ab8:	490c      	ldr	r1, [pc, #48]	@ (8009aec <__NVIC_SetPriority+0x4c>)
 8009aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009abe:	0112      	lsls	r2, r2, #4
 8009ac0:	b2d2      	uxtb	r2, r2
 8009ac2:	440b      	add	r3, r1
 8009ac4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009ac8:	e00a      	b.n	8009ae0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	b2da      	uxtb	r2, r3
 8009ace:	4908      	ldr	r1, [pc, #32]	@ (8009af0 <__NVIC_SetPriority+0x50>)
 8009ad0:	79fb      	ldrb	r3, [r7, #7]
 8009ad2:	f003 030f 	and.w	r3, r3, #15
 8009ad6:	3b04      	subs	r3, #4
 8009ad8:	0112      	lsls	r2, r2, #4
 8009ada:	b2d2      	uxtb	r2, r2
 8009adc:	440b      	add	r3, r1
 8009ade:	761a      	strb	r2, [r3, #24]
}
 8009ae0:	bf00      	nop
 8009ae2:	370c      	adds	r7, #12
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aea:	4770      	bx	lr
 8009aec:	e000e100 	.word	0xe000e100
 8009af0:	e000ed00 	.word	0xe000ed00

08009af4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009af4:	b480      	push	{r7}
 8009af6:	b089      	sub	sp, #36	@ 0x24
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	60f8      	str	r0, [r7, #12]
 8009afc:	60b9      	str	r1, [r7, #8]
 8009afe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	f003 0307 	and.w	r3, r3, #7
 8009b06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009b08:	69fb      	ldr	r3, [r7, #28]
 8009b0a:	f1c3 0307 	rsb	r3, r3, #7
 8009b0e:	2b04      	cmp	r3, #4
 8009b10:	bf28      	it	cs
 8009b12:	2304      	movcs	r3, #4
 8009b14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009b16:	69fb      	ldr	r3, [r7, #28]
 8009b18:	3304      	adds	r3, #4
 8009b1a:	2b06      	cmp	r3, #6
 8009b1c:	d902      	bls.n	8009b24 <NVIC_EncodePriority+0x30>
 8009b1e:	69fb      	ldr	r3, [r7, #28]
 8009b20:	3b03      	subs	r3, #3
 8009b22:	e000      	b.n	8009b26 <NVIC_EncodePriority+0x32>
 8009b24:	2300      	movs	r3, #0
 8009b26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009b28:	f04f 32ff 	mov.w	r2, #4294967295
 8009b2c:	69bb      	ldr	r3, [r7, #24]
 8009b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8009b32:	43da      	mvns	r2, r3
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	401a      	ands	r2, r3
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009b3c:	f04f 31ff 	mov.w	r1, #4294967295
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	fa01 f303 	lsl.w	r3, r1, r3
 8009b46:	43d9      	mvns	r1, r3
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009b4c:	4313      	orrs	r3, r2
         );
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3724      	adds	r7, #36	@ 0x24
 8009b52:	46bd      	mov	sp, r7
 8009b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b58:	4770      	bx	lr

08009b5a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009b5a:	b580      	push	{r7, lr}
 8009b5c:	b082      	sub	sp, #8
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f7ff ff4c 	bl	8009a00 <__NVIC_SetPriorityGrouping>
}
 8009b68:	bf00      	nop
 8009b6a:	3708      	adds	r7, #8
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}

08009b70 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b086      	sub	sp, #24
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	4603      	mov	r3, r0
 8009b78:	60b9      	str	r1, [r7, #8]
 8009b7a:	607a      	str	r2, [r7, #4]
 8009b7c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009b82:	f7ff ff61 	bl	8009a48 <__NVIC_GetPriorityGrouping>
 8009b86:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009b88:	687a      	ldr	r2, [r7, #4]
 8009b8a:	68b9      	ldr	r1, [r7, #8]
 8009b8c:	6978      	ldr	r0, [r7, #20]
 8009b8e:	f7ff ffb1 	bl	8009af4 <NVIC_EncodePriority>
 8009b92:	4602      	mov	r2, r0
 8009b94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b98:	4611      	mov	r1, r2
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f7ff ff80 	bl	8009aa0 <__NVIC_SetPriority>
}
 8009ba0:	bf00      	nop
 8009ba2:	3718      	adds	r7, #24
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}

08009ba8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b082      	sub	sp, #8
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	4603      	mov	r3, r0
 8009bb0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f7ff ff54 	bl	8009a64 <__NVIC_EnableIRQ>
}
 8009bbc:	bf00      	nop
 8009bbe:	3708      	adds	r7, #8
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}

08009bc4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b083      	sub	sp, #12
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009bd2:	b2db      	uxtb	r3, r3
 8009bd4:	2b02      	cmp	r3, #2
 8009bd6:	d004      	beq.n	8009be2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2280      	movs	r2, #128	@ 0x80
 8009bdc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8009bde:	2301      	movs	r3, #1
 8009be0:	e00c      	b.n	8009bfc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2205      	movs	r2, #5
 8009be6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	681a      	ldr	r2, [r3, #0]
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f022 0201 	bic.w	r2, r2, #1
 8009bf8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8009bfa:	2300      	movs	r3, #0
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	370c      	adds	r7, #12
 8009c00:	46bd      	mov	sp, r7
 8009c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c06:	4770      	bx	lr

08009c08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b089      	sub	sp, #36	@ 0x24
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
 8009c10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009c12:	2300      	movs	r3, #0
 8009c14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009c16:	2300      	movs	r3, #0
 8009c18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009c1e:	2300      	movs	r3, #0
 8009c20:	61fb      	str	r3, [r7, #28]
 8009c22:	e16b      	b.n	8009efc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009c24:	2201      	movs	r2, #1
 8009c26:	69fb      	ldr	r3, [r7, #28]
 8009c28:	fa02 f303 	lsl.w	r3, r2, r3
 8009c2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	697a      	ldr	r2, [r7, #20]
 8009c34:	4013      	ands	r3, r2
 8009c36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009c38:	693a      	ldr	r2, [r7, #16]
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	f040 815a 	bne.w	8009ef6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	685b      	ldr	r3, [r3, #4]
 8009c46:	f003 0303 	and.w	r3, r3, #3
 8009c4a:	2b01      	cmp	r3, #1
 8009c4c:	d005      	beq.n	8009c5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	685b      	ldr	r3, [r3, #4]
 8009c52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009c56:	2b02      	cmp	r3, #2
 8009c58:	d130      	bne.n	8009cbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	689b      	ldr	r3, [r3, #8]
 8009c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009c60:	69fb      	ldr	r3, [r7, #28]
 8009c62:	005b      	lsls	r3, r3, #1
 8009c64:	2203      	movs	r2, #3
 8009c66:	fa02 f303 	lsl.w	r3, r2, r3
 8009c6a:	43db      	mvns	r3, r3
 8009c6c:	69ba      	ldr	r2, [r7, #24]
 8009c6e:	4013      	ands	r3, r2
 8009c70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	68da      	ldr	r2, [r3, #12]
 8009c76:	69fb      	ldr	r3, [r7, #28]
 8009c78:	005b      	lsls	r3, r3, #1
 8009c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8009c7e:	69ba      	ldr	r2, [r7, #24]
 8009c80:	4313      	orrs	r3, r2
 8009c82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	69ba      	ldr	r2, [r7, #24]
 8009c88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	685b      	ldr	r3, [r3, #4]
 8009c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009c90:	2201      	movs	r2, #1
 8009c92:	69fb      	ldr	r3, [r7, #28]
 8009c94:	fa02 f303 	lsl.w	r3, r2, r3
 8009c98:	43db      	mvns	r3, r3
 8009c9a:	69ba      	ldr	r2, [r7, #24]
 8009c9c:	4013      	ands	r3, r2
 8009c9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	091b      	lsrs	r3, r3, #4
 8009ca6:	f003 0201 	and.w	r2, r3, #1
 8009caa:	69fb      	ldr	r3, [r7, #28]
 8009cac:	fa02 f303 	lsl.w	r3, r2, r3
 8009cb0:	69ba      	ldr	r2, [r7, #24]
 8009cb2:	4313      	orrs	r3, r2
 8009cb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	69ba      	ldr	r2, [r7, #24]
 8009cba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	685b      	ldr	r3, [r3, #4]
 8009cc0:	f003 0303 	and.w	r3, r3, #3
 8009cc4:	2b03      	cmp	r3, #3
 8009cc6:	d017      	beq.n	8009cf8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	68db      	ldr	r3, [r3, #12]
 8009ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009cce:	69fb      	ldr	r3, [r7, #28]
 8009cd0:	005b      	lsls	r3, r3, #1
 8009cd2:	2203      	movs	r2, #3
 8009cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8009cd8:	43db      	mvns	r3, r3
 8009cda:	69ba      	ldr	r2, [r7, #24]
 8009cdc:	4013      	ands	r3, r2
 8009cde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	689a      	ldr	r2, [r3, #8]
 8009ce4:	69fb      	ldr	r3, [r7, #28]
 8009ce6:	005b      	lsls	r3, r3, #1
 8009ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8009cec:	69ba      	ldr	r2, [r7, #24]
 8009cee:	4313      	orrs	r3, r2
 8009cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	69ba      	ldr	r2, [r7, #24]
 8009cf6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	685b      	ldr	r3, [r3, #4]
 8009cfc:	f003 0303 	and.w	r3, r3, #3
 8009d00:	2b02      	cmp	r3, #2
 8009d02:	d123      	bne.n	8009d4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009d04:	69fb      	ldr	r3, [r7, #28]
 8009d06:	08da      	lsrs	r2, r3, #3
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	3208      	adds	r2, #8
 8009d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009d12:	69fb      	ldr	r3, [r7, #28]
 8009d14:	f003 0307 	and.w	r3, r3, #7
 8009d18:	009b      	lsls	r3, r3, #2
 8009d1a:	220f      	movs	r2, #15
 8009d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8009d20:	43db      	mvns	r3, r3
 8009d22:	69ba      	ldr	r2, [r7, #24]
 8009d24:	4013      	ands	r3, r2
 8009d26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	691a      	ldr	r2, [r3, #16]
 8009d2c:	69fb      	ldr	r3, [r7, #28]
 8009d2e:	f003 0307 	and.w	r3, r3, #7
 8009d32:	009b      	lsls	r3, r3, #2
 8009d34:	fa02 f303 	lsl.w	r3, r2, r3
 8009d38:	69ba      	ldr	r2, [r7, #24]
 8009d3a:	4313      	orrs	r3, r2
 8009d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009d3e:	69fb      	ldr	r3, [r7, #28]
 8009d40:	08da      	lsrs	r2, r3, #3
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	3208      	adds	r2, #8
 8009d46:	69b9      	ldr	r1, [r7, #24]
 8009d48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009d52:	69fb      	ldr	r3, [r7, #28]
 8009d54:	005b      	lsls	r3, r3, #1
 8009d56:	2203      	movs	r2, #3
 8009d58:	fa02 f303 	lsl.w	r3, r2, r3
 8009d5c:	43db      	mvns	r3, r3
 8009d5e:	69ba      	ldr	r2, [r7, #24]
 8009d60:	4013      	ands	r3, r2
 8009d62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	685b      	ldr	r3, [r3, #4]
 8009d68:	f003 0203 	and.w	r2, r3, #3
 8009d6c:	69fb      	ldr	r3, [r7, #28]
 8009d6e:	005b      	lsls	r3, r3, #1
 8009d70:	fa02 f303 	lsl.w	r3, r2, r3
 8009d74:	69ba      	ldr	r2, [r7, #24]
 8009d76:	4313      	orrs	r3, r2
 8009d78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	69ba      	ldr	r2, [r7, #24]
 8009d7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	685b      	ldr	r3, [r3, #4]
 8009d84:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	f000 80b4 	beq.w	8009ef6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009d8e:	2300      	movs	r3, #0
 8009d90:	60fb      	str	r3, [r7, #12]
 8009d92:	4b60      	ldr	r3, [pc, #384]	@ (8009f14 <HAL_GPIO_Init+0x30c>)
 8009d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d96:	4a5f      	ldr	r2, [pc, #380]	@ (8009f14 <HAL_GPIO_Init+0x30c>)
 8009d98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009d9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8009d9e:	4b5d      	ldr	r3, [pc, #372]	@ (8009f14 <HAL_GPIO_Init+0x30c>)
 8009da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009da2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009da6:	60fb      	str	r3, [r7, #12]
 8009da8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009daa:	4a5b      	ldr	r2, [pc, #364]	@ (8009f18 <HAL_GPIO_Init+0x310>)
 8009dac:	69fb      	ldr	r3, [r7, #28]
 8009dae:	089b      	lsrs	r3, r3, #2
 8009db0:	3302      	adds	r3, #2
 8009db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009db8:	69fb      	ldr	r3, [r7, #28]
 8009dba:	f003 0303 	and.w	r3, r3, #3
 8009dbe:	009b      	lsls	r3, r3, #2
 8009dc0:	220f      	movs	r2, #15
 8009dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8009dc6:	43db      	mvns	r3, r3
 8009dc8:	69ba      	ldr	r2, [r7, #24]
 8009dca:	4013      	ands	r3, r2
 8009dcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	4a52      	ldr	r2, [pc, #328]	@ (8009f1c <HAL_GPIO_Init+0x314>)
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d02b      	beq.n	8009e2e <HAL_GPIO_Init+0x226>
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	4a51      	ldr	r2, [pc, #324]	@ (8009f20 <HAL_GPIO_Init+0x318>)
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	d025      	beq.n	8009e2a <HAL_GPIO_Init+0x222>
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	4a50      	ldr	r2, [pc, #320]	@ (8009f24 <HAL_GPIO_Init+0x31c>)
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d01f      	beq.n	8009e26 <HAL_GPIO_Init+0x21e>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	4a4f      	ldr	r2, [pc, #316]	@ (8009f28 <HAL_GPIO_Init+0x320>)
 8009dea:	4293      	cmp	r3, r2
 8009dec:	d019      	beq.n	8009e22 <HAL_GPIO_Init+0x21a>
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	4a4e      	ldr	r2, [pc, #312]	@ (8009f2c <HAL_GPIO_Init+0x324>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d013      	beq.n	8009e1e <HAL_GPIO_Init+0x216>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	4a4d      	ldr	r2, [pc, #308]	@ (8009f30 <HAL_GPIO_Init+0x328>)
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d00d      	beq.n	8009e1a <HAL_GPIO_Init+0x212>
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	4a4c      	ldr	r2, [pc, #304]	@ (8009f34 <HAL_GPIO_Init+0x32c>)
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d007      	beq.n	8009e16 <HAL_GPIO_Init+0x20e>
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	4a4b      	ldr	r2, [pc, #300]	@ (8009f38 <HAL_GPIO_Init+0x330>)
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	d101      	bne.n	8009e12 <HAL_GPIO_Init+0x20a>
 8009e0e:	2307      	movs	r3, #7
 8009e10:	e00e      	b.n	8009e30 <HAL_GPIO_Init+0x228>
 8009e12:	2308      	movs	r3, #8
 8009e14:	e00c      	b.n	8009e30 <HAL_GPIO_Init+0x228>
 8009e16:	2306      	movs	r3, #6
 8009e18:	e00a      	b.n	8009e30 <HAL_GPIO_Init+0x228>
 8009e1a:	2305      	movs	r3, #5
 8009e1c:	e008      	b.n	8009e30 <HAL_GPIO_Init+0x228>
 8009e1e:	2304      	movs	r3, #4
 8009e20:	e006      	b.n	8009e30 <HAL_GPIO_Init+0x228>
 8009e22:	2303      	movs	r3, #3
 8009e24:	e004      	b.n	8009e30 <HAL_GPIO_Init+0x228>
 8009e26:	2302      	movs	r3, #2
 8009e28:	e002      	b.n	8009e30 <HAL_GPIO_Init+0x228>
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	e000      	b.n	8009e30 <HAL_GPIO_Init+0x228>
 8009e2e:	2300      	movs	r3, #0
 8009e30:	69fa      	ldr	r2, [r7, #28]
 8009e32:	f002 0203 	and.w	r2, r2, #3
 8009e36:	0092      	lsls	r2, r2, #2
 8009e38:	4093      	lsls	r3, r2
 8009e3a:	69ba      	ldr	r2, [r7, #24]
 8009e3c:	4313      	orrs	r3, r2
 8009e3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009e40:	4935      	ldr	r1, [pc, #212]	@ (8009f18 <HAL_GPIO_Init+0x310>)
 8009e42:	69fb      	ldr	r3, [r7, #28]
 8009e44:	089b      	lsrs	r3, r3, #2
 8009e46:	3302      	adds	r3, #2
 8009e48:	69ba      	ldr	r2, [r7, #24]
 8009e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009e4e:	4b3b      	ldr	r3, [pc, #236]	@ (8009f3c <HAL_GPIO_Init+0x334>)
 8009e50:	689b      	ldr	r3, [r3, #8]
 8009e52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009e54:	693b      	ldr	r3, [r7, #16]
 8009e56:	43db      	mvns	r3, r3
 8009e58:	69ba      	ldr	r2, [r7, #24]
 8009e5a:	4013      	ands	r3, r2
 8009e5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	685b      	ldr	r3, [r3, #4]
 8009e62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d003      	beq.n	8009e72 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8009e6a:	69ba      	ldr	r2, [r7, #24]
 8009e6c:	693b      	ldr	r3, [r7, #16]
 8009e6e:	4313      	orrs	r3, r2
 8009e70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009e72:	4a32      	ldr	r2, [pc, #200]	@ (8009f3c <HAL_GPIO_Init+0x334>)
 8009e74:	69bb      	ldr	r3, [r7, #24]
 8009e76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009e78:	4b30      	ldr	r3, [pc, #192]	@ (8009f3c <HAL_GPIO_Init+0x334>)
 8009e7a:	68db      	ldr	r3, [r3, #12]
 8009e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009e7e:	693b      	ldr	r3, [r7, #16]
 8009e80:	43db      	mvns	r3, r3
 8009e82:	69ba      	ldr	r2, [r7, #24]
 8009e84:	4013      	ands	r3, r2
 8009e86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	685b      	ldr	r3, [r3, #4]
 8009e8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d003      	beq.n	8009e9c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8009e94:	69ba      	ldr	r2, [r7, #24]
 8009e96:	693b      	ldr	r3, [r7, #16]
 8009e98:	4313      	orrs	r3, r2
 8009e9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009e9c:	4a27      	ldr	r2, [pc, #156]	@ (8009f3c <HAL_GPIO_Init+0x334>)
 8009e9e:	69bb      	ldr	r3, [r7, #24]
 8009ea0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8009ea2:	4b26      	ldr	r3, [pc, #152]	@ (8009f3c <HAL_GPIO_Init+0x334>)
 8009ea4:	685b      	ldr	r3, [r3, #4]
 8009ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	43db      	mvns	r3, r3
 8009eac:	69ba      	ldr	r2, [r7, #24]
 8009eae:	4013      	ands	r3, r2
 8009eb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	685b      	ldr	r3, [r3, #4]
 8009eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d003      	beq.n	8009ec6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8009ebe:	69ba      	ldr	r2, [r7, #24]
 8009ec0:	693b      	ldr	r3, [r7, #16]
 8009ec2:	4313      	orrs	r3, r2
 8009ec4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009ec6:	4a1d      	ldr	r2, [pc, #116]	@ (8009f3c <HAL_GPIO_Init+0x334>)
 8009ec8:	69bb      	ldr	r3, [r7, #24]
 8009eca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009ecc:	4b1b      	ldr	r3, [pc, #108]	@ (8009f3c <HAL_GPIO_Init+0x334>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009ed2:	693b      	ldr	r3, [r7, #16]
 8009ed4:	43db      	mvns	r3, r3
 8009ed6:	69ba      	ldr	r2, [r7, #24]
 8009ed8:	4013      	ands	r3, r2
 8009eda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	685b      	ldr	r3, [r3, #4]
 8009ee0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d003      	beq.n	8009ef0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8009ee8:	69ba      	ldr	r2, [r7, #24]
 8009eea:	693b      	ldr	r3, [r7, #16]
 8009eec:	4313      	orrs	r3, r2
 8009eee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009ef0:	4a12      	ldr	r2, [pc, #72]	@ (8009f3c <HAL_GPIO_Init+0x334>)
 8009ef2:	69bb      	ldr	r3, [r7, #24]
 8009ef4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009ef6:	69fb      	ldr	r3, [r7, #28]
 8009ef8:	3301      	adds	r3, #1
 8009efa:	61fb      	str	r3, [r7, #28]
 8009efc:	69fb      	ldr	r3, [r7, #28]
 8009efe:	2b0f      	cmp	r3, #15
 8009f00:	f67f ae90 	bls.w	8009c24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009f04:	bf00      	nop
 8009f06:	bf00      	nop
 8009f08:	3724      	adds	r7, #36	@ 0x24
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f10:	4770      	bx	lr
 8009f12:	bf00      	nop
 8009f14:	40023800 	.word	0x40023800
 8009f18:	40013800 	.word	0x40013800
 8009f1c:	40020000 	.word	0x40020000
 8009f20:	40020400 	.word	0x40020400
 8009f24:	40020800 	.word	0x40020800
 8009f28:	40020c00 	.word	0x40020c00
 8009f2c:	40021000 	.word	0x40021000
 8009f30:	40021400 	.word	0x40021400
 8009f34:	40021800 	.word	0x40021800
 8009f38:	40021c00 	.word	0x40021c00
 8009f3c:	40013c00 	.word	0x40013c00

08009f40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009f40:	b480      	push	{r7}
 8009f42:	b085      	sub	sp, #20
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
 8009f48:	460b      	mov	r3, r1
 8009f4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	691a      	ldr	r2, [r3, #16]
 8009f50:	887b      	ldrh	r3, [r7, #2]
 8009f52:	4013      	ands	r3, r2
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d002      	beq.n	8009f5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009f58:	2301      	movs	r3, #1
 8009f5a:	73fb      	strb	r3, [r7, #15]
 8009f5c:	e001      	b.n	8009f62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	3714      	adds	r7, #20
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6e:	4770      	bx	lr

08009f70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b083      	sub	sp, #12
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
 8009f78:	460b      	mov	r3, r1
 8009f7a:	807b      	strh	r3, [r7, #2]
 8009f7c:	4613      	mov	r3, r2
 8009f7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009f80:	787b      	ldrb	r3, [r7, #1]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d003      	beq.n	8009f8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009f86:	887a      	ldrh	r2, [r7, #2]
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009f8c:	e003      	b.n	8009f96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009f8e:	887b      	ldrh	r3, [r7, #2]
 8009f90:	041a      	lsls	r2, r3, #16
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	619a      	str	r2, [r3, #24]
}
 8009f96:	bf00      	nop
 8009f98:	370c      	adds	r7, #12
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa0:	4770      	bx	lr

08009fa2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009fa2:	b480      	push	{r7}
 8009fa4:	b085      	sub	sp, #20
 8009fa6:	af00      	add	r7, sp, #0
 8009fa8:	6078      	str	r0, [r7, #4]
 8009faa:	460b      	mov	r3, r1
 8009fac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	695b      	ldr	r3, [r3, #20]
 8009fb2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009fb4:	887a      	ldrh	r2, [r7, #2]
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	4013      	ands	r3, r2
 8009fba:	041a      	lsls	r2, r3, #16
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	43d9      	mvns	r1, r3
 8009fc0:	887b      	ldrh	r3, [r7, #2]
 8009fc2:	400b      	ands	r3, r1
 8009fc4:	431a      	orrs	r2, r3
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	619a      	str	r2, [r3, #24]
}
 8009fca:	bf00      	nop
 8009fcc:	3714      	adds	r7, #20
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd4:	4770      	bx	lr
	...

08009fd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b084      	sub	sp, #16
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d101      	bne.n	8009fea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	e12b      	b.n	800a242 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009ff0:	b2db      	uxtb	r3, r3
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d106      	bne.n	800a004 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f7fe f9b8 	bl	8008374 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2224      	movs	r2, #36	@ 0x24
 800a008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	681a      	ldr	r2, [r3, #0]
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f022 0201 	bic.w	r2, r2, #1
 800a01a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	681a      	ldr	r2, [r3, #0]
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a02a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	681a      	ldr	r2, [r3, #0]
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a03a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800a03c:	f001 fd24 	bl	800ba88 <HAL_RCC_GetPCLK1Freq>
 800a040:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	685b      	ldr	r3, [r3, #4]
 800a046:	4a81      	ldr	r2, [pc, #516]	@ (800a24c <HAL_I2C_Init+0x274>)
 800a048:	4293      	cmp	r3, r2
 800a04a:	d807      	bhi.n	800a05c <HAL_I2C_Init+0x84>
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	4a80      	ldr	r2, [pc, #512]	@ (800a250 <HAL_I2C_Init+0x278>)
 800a050:	4293      	cmp	r3, r2
 800a052:	bf94      	ite	ls
 800a054:	2301      	movls	r3, #1
 800a056:	2300      	movhi	r3, #0
 800a058:	b2db      	uxtb	r3, r3
 800a05a:	e006      	b.n	800a06a <HAL_I2C_Init+0x92>
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	4a7d      	ldr	r2, [pc, #500]	@ (800a254 <HAL_I2C_Init+0x27c>)
 800a060:	4293      	cmp	r3, r2
 800a062:	bf94      	ite	ls
 800a064:	2301      	movls	r3, #1
 800a066:	2300      	movhi	r3, #0
 800a068:	b2db      	uxtb	r3, r3
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d001      	beq.n	800a072 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800a06e:	2301      	movs	r3, #1
 800a070:	e0e7      	b.n	800a242 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	4a78      	ldr	r2, [pc, #480]	@ (800a258 <HAL_I2C_Init+0x280>)
 800a076:	fba2 2303 	umull	r2, r3, r2, r3
 800a07a:	0c9b      	lsrs	r3, r3, #18
 800a07c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	685b      	ldr	r3, [r3, #4]
 800a084:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	68ba      	ldr	r2, [r7, #8]
 800a08e:	430a      	orrs	r2, r1
 800a090:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	6a1b      	ldr	r3, [r3, #32]
 800a098:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	685b      	ldr	r3, [r3, #4]
 800a0a0:	4a6a      	ldr	r2, [pc, #424]	@ (800a24c <HAL_I2C_Init+0x274>)
 800a0a2:	4293      	cmp	r3, r2
 800a0a4:	d802      	bhi.n	800a0ac <HAL_I2C_Init+0xd4>
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	3301      	adds	r3, #1
 800a0aa:	e009      	b.n	800a0c0 <HAL_I2C_Init+0xe8>
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800a0b2:	fb02 f303 	mul.w	r3, r2, r3
 800a0b6:	4a69      	ldr	r2, [pc, #420]	@ (800a25c <HAL_I2C_Init+0x284>)
 800a0b8:	fba2 2303 	umull	r2, r3, r2, r3
 800a0bc:	099b      	lsrs	r3, r3, #6
 800a0be:	3301      	adds	r3, #1
 800a0c0:	687a      	ldr	r2, [r7, #4]
 800a0c2:	6812      	ldr	r2, [r2, #0]
 800a0c4:	430b      	orrs	r3, r1
 800a0c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	69db      	ldr	r3, [r3, #28]
 800a0ce:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800a0d2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	685b      	ldr	r3, [r3, #4]
 800a0da:	495c      	ldr	r1, [pc, #368]	@ (800a24c <HAL_I2C_Init+0x274>)
 800a0dc:	428b      	cmp	r3, r1
 800a0de:	d819      	bhi.n	800a114 <HAL_I2C_Init+0x13c>
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	1e59      	subs	r1, r3, #1
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	685b      	ldr	r3, [r3, #4]
 800a0e8:	005b      	lsls	r3, r3, #1
 800a0ea:	fbb1 f3f3 	udiv	r3, r1, r3
 800a0ee:	1c59      	adds	r1, r3, #1
 800a0f0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800a0f4:	400b      	ands	r3, r1
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d00a      	beq.n	800a110 <HAL_I2C_Init+0x138>
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	1e59      	subs	r1, r3, #1
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	685b      	ldr	r3, [r3, #4]
 800a102:	005b      	lsls	r3, r3, #1
 800a104:	fbb1 f3f3 	udiv	r3, r1, r3
 800a108:	3301      	adds	r3, #1
 800a10a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a10e:	e051      	b.n	800a1b4 <HAL_I2C_Init+0x1dc>
 800a110:	2304      	movs	r3, #4
 800a112:	e04f      	b.n	800a1b4 <HAL_I2C_Init+0x1dc>
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	689b      	ldr	r3, [r3, #8]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d111      	bne.n	800a140 <HAL_I2C_Init+0x168>
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	1e58      	subs	r0, r3, #1
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6859      	ldr	r1, [r3, #4]
 800a124:	460b      	mov	r3, r1
 800a126:	005b      	lsls	r3, r3, #1
 800a128:	440b      	add	r3, r1
 800a12a:	fbb0 f3f3 	udiv	r3, r0, r3
 800a12e:	3301      	adds	r3, #1
 800a130:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a134:	2b00      	cmp	r3, #0
 800a136:	bf0c      	ite	eq
 800a138:	2301      	moveq	r3, #1
 800a13a:	2300      	movne	r3, #0
 800a13c:	b2db      	uxtb	r3, r3
 800a13e:	e012      	b.n	800a166 <HAL_I2C_Init+0x18e>
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	1e58      	subs	r0, r3, #1
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6859      	ldr	r1, [r3, #4]
 800a148:	460b      	mov	r3, r1
 800a14a:	009b      	lsls	r3, r3, #2
 800a14c:	440b      	add	r3, r1
 800a14e:	0099      	lsls	r1, r3, #2
 800a150:	440b      	add	r3, r1
 800a152:	fbb0 f3f3 	udiv	r3, r0, r3
 800a156:	3301      	adds	r3, #1
 800a158:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	bf0c      	ite	eq
 800a160:	2301      	moveq	r3, #1
 800a162:	2300      	movne	r3, #0
 800a164:	b2db      	uxtb	r3, r3
 800a166:	2b00      	cmp	r3, #0
 800a168:	d001      	beq.n	800a16e <HAL_I2C_Init+0x196>
 800a16a:	2301      	movs	r3, #1
 800a16c:	e022      	b.n	800a1b4 <HAL_I2C_Init+0x1dc>
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	689b      	ldr	r3, [r3, #8]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d10e      	bne.n	800a194 <HAL_I2C_Init+0x1bc>
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	1e58      	subs	r0, r3, #1
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	6859      	ldr	r1, [r3, #4]
 800a17e:	460b      	mov	r3, r1
 800a180:	005b      	lsls	r3, r3, #1
 800a182:	440b      	add	r3, r1
 800a184:	fbb0 f3f3 	udiv	r3, r0, r3
 800a188:	3301      	adds	r3, #1
 800a18a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a18e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a192:	e00f      	b.n	800a1b4 <HAL_I2C_Init+0x1dc>
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	1e58      	subs	r0, r3, #1
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6859      	ldr	r1, [r3, #4]
 800a19c:	460b      	mov	r3, r1
 800a19e:	009b      	lsls	r3, r3, #2
 800a1a0:	440b      	add	r3, r1
 800a1a2:	0099      	lsls	r1, r3, #2
 800a1a4:	440b      	add	r3, r1
 800a1a6:	fbb0 f3f3 	udiv	r3, r0, r3
 800a1aa:	3301      	adds	r3, #1
 800a1ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a1b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a1b4:	6879      	ldr	r1, [r7, #4]
 800a1b6:	6809      	ldr	r1, [r1, #0]
 800a1b8:	4313      	orrs	r3, r2
 800a1ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	69da      	ldr	r2, [r3, #28]
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6a1b      	ldr	r3, [r3, #32]
 800a1ce:	431a      	orrs	r2, r3
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	430a      	orrs	r2, r1
 800a1d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	689b      	ldr	r3, [r3, #8]
 800a1de:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800a1e2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a1e6:	687a      	ldr	r2, [r7, #4]
 800a1e8:	6911      	ldr	r1, [r2, #16]
 800a1ea:	687a      	ldr	r2, [r7, #4]
 800a1ec:	68d2      	ldr	r2, [r2, #12]
 800a1ee:	4311      	orrs	r1, r2
 800a1f0:	687a      	ldr	r2, [r7, #4]
 800a1f2:	6812      	ldr	r2, [r2, #0]
 800a1f4:	430b      	orrs	r3, r1
 800a1f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	68db      	ldr	r3, [r3, #12]
 800a1fe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	695a      	ldr	r2, [r3, #20]
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	699b      	ldr	r3, [r3, #24]
 800a20a:	431a      	orrs	r2, r3
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	430a      	orrs	r2, r1
 800a212:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	681a      	ldr	r2, [r3, #0]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f042 0201 	orr.w	r2, r2, #1
 800a222:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2200      	movs	r2, #0
 800a228:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2220      	movs	r2, #32
 800a22e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2200      	movs	r2, #0
 800a236:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2200      	movs	r2, #0
 800a23c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800a240:	2300      	movs	r3, #0
}
 800a242:	4618      	mov	r0, r3
 800a244:	3710      	adds	r7, #16
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}
 800a24a:	bf00      	nop
 800a24c:	000186a0 	.word	0x000186a0
 800a250:	001e847f 	.word	0x001e847f
 800a254:	003d08ff 	.word	0x003d08ff
 800a258:	431bde83 	.word	0x431bde83
 800a25c:	10624dd3 	.word	0x10624dd3

0800a260 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b088      	sub	sp, #32
 800a264:	af02      	add	r7, sp, #8
 800a266:	60f8      	str	r0, [r7, #12]
 800a268:	607a      	str	r2, [r7, #4]
 800a26a:	461a      	mov	r2, r3
 800a26c:	460b      	mov	r3, r1
 800a26e:	817b      	strh	r3, [r7, #10]
 800a270:	4613      	mov	r3, r2
 800a272:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a274:	f7fe fe5c 	bl	8008f30 <HAL_GetTick>
 800a278:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a280:	b2db      	uxtb	r3, r3
 800a282:	2b20      	cmp	r3, #32
 800a284:	f040 80e0 	bne.w	800a448 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a288:	697b      	ldr	r3, [r7, #20]
 800a28a:	9300      	str	r3, [sp, #0]
 800a28c:	2319      	movs	r3, #25
 800a28e:	2201      	movs	r2, #1
 800a290:	4970      	ldr	r1, [pc, #448]	@ (800a454 <HAL_I2C_Master_Transmit+0x1f4>)
 800a292:	68f8      	ldr	r0, [r7, #12]
 800a294:	f000 fd92 	bl	800adbc <I2C_WaitOnFlagUntilTimeout>
 800a298:	4603      	mov	r3, r0
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d001      	beq.n	800a2a2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800a29e:	2302      	movs	r3, #2
 800a2a0:	e0d3      	b.n	800a44a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a2a8:	2b01      	cmp	r3, #1
 800a2aa:	d101      	bne.n	800a2b0 <HAL_I2C_Master_Transmit+0x50>
 800a2ac:	2302      	movs	r3, #2
 800a2ae:	e0cc      	b.n	800a44a <HAL_I2C_Master_Transmit+0x1ea>
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	2201      	movs	r2, #1
 800a2b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	f003 0301 	and.w	r3, r3, #1
 800a2c2:	2b01      	cmp	r3, #1
 800a2c4:	d007      	beq.n	800a2d6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	681a      	ldr	r2, [r3, #0]
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f042 0201 	orr.w	r2, r2, #1
 800a2d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	681a      	ldr	r2, [r3, #0]
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a2e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	2221      	movs	r2, #33	@ 0x21
 800a2ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	2210      	movs	r2, #16
 800a2f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	687a      	ldr	r2, [r7, #4]
 800a300:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	893a      	ldrh	r2, [r7, #8]
 800a306:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a30c:	b29a      	uxth	r2, r3
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	4a50      	ldr	r2, [pc, #320]	@ (800a458 <HAL_I2C_Master_Transmit+0x1f8>)
 800a316:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a318:	8979      	ldrh	r1, [r7, #10]
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	6a3a      	ldr	r2, [r7, #32]
 800a31e:	68f8      	ldr	r0, [r7, #12]
 800a320:	f000 fbfc 	bl	800ab1c <I2C_MasterRequestWrite>
 800a324:	4603      	mov	r3, r0
 800a326:	2b00      	cmp	r3, #0
 800a328:	d001      	beq.n	800a32e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800a32a:	2301      	movs	r3, #1
 800a32c:	e08d      	b.n	800a44a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a32e:	2300      	movs	r3, #0
 800a330:	613b      	str	r3, [r7, #16]
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	695b      	ldr	r3, [r3, #20]
 800a338:	613b      	str	r3, [r7, #16]
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	699b      	ldr	r3, [r3, #24]
 800a340:	613b      	str	r3, [r7, #16]
 800a342:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800a344:	e066      	b.n	800a414 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a346:	697a      	ldr	r2, [r7, #20]
 800a348:	6a39      	ldr	r1, [r7, #32]
 800a34a:	68f8      	ldr	r0, [r7, #12]
 800a34c:	f000 fe50 	bl	800aff0 <I2C_WaitOnTXEFlagUntilTimeout>
 800a350:	4603      	mov	r3, r0
 800a352:	2b00      	cmp	r3, #0
 800a354:	d00d      	beq.n	800a372 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a35a:	2b04      	cmp	r3, #4
 800a35c:	d107      	bne.n	800a36e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	681a      	ldr	r2, [r3, #0]
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a36c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a36e:	2301      	movs	r3, #1
 800a370:	e06b      	b.n	800a44a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a376:	781a      	ldrb	r2, [r3, #0]
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a382:	1c5a      	adds	r2, r3, #1
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a38c:	b29b      	uxth	r3, r3
 800a38e:	3b01      	subs	r3, #1
 800a390:	b29a      	uxth	r2, r3
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a39a:	3b01      	subs	r3, #1
 800a39c:	b29a      	uxth	r2, r3
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	695b      	ldr	r3, [r3, #20]
 800a3a8:	f003 0304 	and.w	r3, r3, #4
 800a3ac:	2b04      	cmp	r3, #4
 800a3ae:	d11b      	bne.n	800a3e8 <HAL_I2C_Master_Transmit+0x188>
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d017      	beq.n	800a3e8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3bc:	781a      	ldrb	r2, [r3, #0]
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3c8:	1c5a      	adds	r2, r3, #1
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a3d2:	b29b      	uxth	r3, r3
 800a3d4:	3b01      	subs	r3, #1
 800a3d6:	b29a      	uxth	r2, r3
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a3e0:	3b01      	subs	r3, #1
 800a3e2:	b29a      	uxth	r2, r3
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a3e8:	697a      	ldr	r2, [r7, #20]
 800a3ea:	6a39      	ldr	r1, [r7, #32]
 800a3ec:	68f8      	ldr	r0, [r7, #12]
 800a3ee:	f000 fe47 	bl	800b080 <I2C_WaitOnBTFFlagUntilTimeout>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d00d      	beq.n	800a414 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3fc:	2b04      	cmp	r3, #4
 800a3fe:	d107      	bne.n	800a410 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	681a      	ldr	r2, [r3, #0]
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a40e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a410:	2301      	movs	r3, #1
 800a412:	e01a      	b.n	800a44a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d194      	bne.n	800a346 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	681a      	ldr	r2, [r3, #0]
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a42a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	2220      	movs	r2, #32
 800a430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	2200      	movs	r2, #0
 800a438:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	2200      	movs	r2, #0
 800a440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800a444:	2300      	movs	r3, #0
 800a446:	e000      	b.n	800a44a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a448:	2302      	movs	r3, #2
  }
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	3718      	adds	r7, #24
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}
 800a452:	bf00      	nop
 800a454:	00100002 	.word	0x00100002
 800a458:	ffff0000 	.word	0xffff0000

0800a45c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b08c      	sub	sp, #48	@ 0x30
 800a460:	af02      	add	r7, sp, #8
 800a462:	60f8      	str	r0, [r7, #12]
 800a464:	607a      	str	r2, [r7, #4]
 800a466:	461a      	mov	r2, r3
 800a468:	460b      	mov	r3, r1
 800a46a:	817b      	strh	r3, [r7, #10]
 800a46c:	4613      	mov	r3, r2
 800a46e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a470:	f7fe fd5e 	bl	8008f30 <HAL_GetTick>
 800a474:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a47c:	b2db      	uxtb	r3, r3
 800a47e:	2b20      	cmp	r3, #32
 800a480:	f040 8217 	bne.w	800a8b2 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a486:	9300      	str	r3, [sp, #0]
 800a488:	2319      	movs	r3, #25
 800a48a:	2201      	movs	r2, #1
 800a48c:	497c      	ldr	r1, [pc, #496]	@ (800a680 <HAL_I2C_Master_Receive+0x224>)
 800a48e:	68f8      	ldr	r0, [r7, #12]
 800a490:	f000 fc94 	bl	800adbc <I2C_WaitOnFlagUntilTimeout>
 800a494:	4603      	mov	r3, r0
 800a496:	2b00      	cmp	r3, #0
 800a498:	d001      	beq.n	800a49e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800a49a:	2302      	movs	r3, #2
 800a49c:	e20a      	b.n	800a8b4 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a4a4:	2b01      	cmp	r3, #1
 800a4a6:	d101      	bne.n	800a4ac <HAL_I2C_Master_Receive+0x50>
 800a4a8:	2302      	movs	r3, #2
 800a4aa:	e203      	b.n	800a8b4 <HAL_I2C_Master_Receive+0x458>
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	f003 0301 	and.w	r3, r3, #1
 800a4be:	2b01      	cmp	r3, #1
 800a4c0:	d007      	beq.n	800a4d2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	681a      	ldr	r2, [r3, #0]
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f042 0201 	orr.w	r2, r2, #1
 800a4d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	681a      	ldr	r2, [r3, #0]
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a4e0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	2222      	movs	r2, #34	@ 0x22
 800a4e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	2210      	movs	r2, #16
 800a4ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	687a      	ldr	r2, [r7, #4]
 800a4fc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	893a      	ldrh	r2, [r7, #8]
 800a502:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a508:	b29a      	uxth	r2, r3
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	4a5c      	ldr	r2, [pc, #368]	@ (800a684 <HAL_I2C_Master_Receive+0x228>)
 800a512:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a514:	8979      	ldrh	r1, [r7, #10]
 800a516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a518:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a51a:	68f8      	ldr	r0, [r7, #12]
 800a51c:	f000 fb80 	bl	800ac20 <I2C_MasterRequestRead>
 800a520:	4603      	mov	r3, r0
 800a522:	2b00      	cmp	r3, #0
 800a524:	d001      	beq.n	800a52a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800a526:	2301      	movs	r3, #1
 800a528:	e1c4      	b.n	800a8b4 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d113      	bne.n	800a55a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a532:	2300      	movs	r3, #0
 800a534:	623b      	str	r3, [r7, #32]
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	695b      	ldr	r3, [r3, #20]
 800a53c:	623b      	str	r3, [r7, #32]
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	699b      	ldr	r3, [r3, #24]
 800a544:	623b      	str	r3, [r7, #32]
 800a546:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	681a      	ldr	r2, [r3, #0]
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a556:	601a      	str	r2, [r3, #0]
 800a558:	e198      	b.n	800a88c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a55e:	2b01      	cmp	r3, #1
 800a560:	d11b      	bne.n	800a59a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	681a      	ldr	r2, [r3, #0]
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a570:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a572:	2300      	movs	r3, #0
 800a574:	61fb      	str	r3, [r7, #28]
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	695b      	ldr	r3, [r3, #20]
 800a57c:	61fb      	str	r3, [r7, #28]
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	699b      	ldr	r3, [r3, #24]
 800a584:	61fb      	str	r3, [r7, #28]
 800a586:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	681a      	ldr	r2, [r3, #0]
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a596:	601a      	str	r2, [r3, #0]
 800a598:	e178      	b.n	800a88c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a59e:	2b02      	cmp	r3, #2
 800a5a0:	d11b      	bne.n	800a5da <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	681a      	ldr	r2, [r3, #0]
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a5b0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	681a      	ldr	r2, [r3, #0]
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a5c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	61bb      	str	r3, [r7, #24]
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	695b      	ldr	r3, [r3, #20]
 800a5cc:	61bb      	str	r3, [r7, #24]
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	699b      	ldr	r3, [r3, #24]
 800a5d4:	61bb      	str	r3, [r7, #24]
 800a5d6:	69bb      	ldr	r3, [r7, #24]
 800a5d8:	e158      	b.n	800a88c <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	681a      	ldr	r2, [r3, #0]
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a5e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	617b      	str	r3, [r7, #20]
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	695b      	ldr	r3, [r3, #20]
 800a5f4:	617b      	str	r3, [r7, #20]
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	699b      	ldr	r3, [r3, #24]
 800a5fc:	617b      	str	r3, [r7, #20]
 800a5fe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800a600:	e144      	b.n	800a88c <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a606:	2b03      	cmp	r3, #3
 800a608:	f200 80f1 	bhi.w	800a7ee <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a610:	2b01      	cmp	r3, #1
 800a612:	d123      	bne.n	800a65c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a614:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a616:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a618:	68f8      	ldr	r0, [r7, #12]
 800a61a:	f000 fd79 	bl	800b110 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a61e:	4603      	mov	r3, r0
 800a620:	2b00      	cmp	r3, #0
 800a622:	d001      	beq.n	800a628 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800a624:	2301      	movs	r3, #1
 800a626:	e145      	b.n	800a8b4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	691a      	ldr	r2, [r3, #16]
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a632:	b2d2      	uxtb	r2, r2
 800a634:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a63a:	1c5a      	adds	r2, r3, #1
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a644:	3b01      	subs	r3, #1
 800a646:	b29a      	uxth	r2, r3
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a650:	b29b      	uxth	r3, r3
 800a652:	3b01      	subs	r3, #1
 800a654:	b29a      	uxth	r2, r3
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a65a:	e117      	b.n	800a88c <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a660:	2b02      	cmp	r3, #2
 800a662:	d14e      	bne.n	800a702 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a666:	9300      	str	r3, [sp, #0]
 800a668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a66a:	2200      	movs	r2, #0
 800a66c:	4906      	ldr	r1, [pc, #24]	@ (800a688 <HAL_I2C_Master_Receive+0x22c>)
 800a66e:	68f8      	ldr	r0, [r7, #12]
 800a670:	f000 fba4 	bl	800adbc <I2C_WaitOnFlagUntilTimeout>
 800a674:	4603      	mov	r3, r0
 800a676:	2b00      	cmp	r3, #0
 800a678:	d008      	beq.n	800a68c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800a67a:	2301      	movs	r3, #1
 800a67c:	e11a      	b.n	800a8b4 <HAL_I2C_Master_Receive+0x458>
 800a67e:	bf00      	nop
 800a680:	00100002 	.word	0x00100002
 800a684:	ffff0000 	.word	0xffff0000
 800a688:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	681a      	ldr	r2, [r3, #0]
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a69a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	691a      	ldr	r2, [r3, #16]
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6a6:	b2d2      	uxtb	r2, r2
 800a6a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6ae:	1c5a      	adds	r2, r3, #1
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a6b8:	3b01      	subs	r3, #1
 800a6ba:	b29a      	uxth	r2, r3
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a6c4:	b29b      	uxth	r3, r3
 800a6c6:	3b01      	subs	r3, #1
 800a6c8:	b29a      	uxth	r2, r3
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	691a      	ldr	r2, [r3, #16]
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6d8:	b2d2      	uxtb	r2, r2
 800a6da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6e0:	1c5a      	adds	r2, r3, #1
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a6ea:	3b01      	subs	r3, #1
 800a6ec:	b29a      	uxth	r2, r3
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a6f6:	b29b      	uxth	r3, r3
 800a6f8:	3b01      	subs	r3, #1
 800a6fa:	b29a      	uxth	r2, r3
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a700:	e0c4      	b.n	800a88c <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a704:	9300      	str	r3, [sp, #0]
 800a706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a708:	2200      	movs	r2, #0
 800a70a:	496c      	ldr	r1, [pc, #432]	@ (800a8bc <HAL_I2C_Master_Receive+0x460>)
 800a70c:	68f8      	ldr	r0, [r7, #12]
 800a70e:	f000 fb55 	bl	800adbc <I2C_WaitOnFlagUntilTimeout>
 800a712:	4603      	mov	r3, r0
 800a714:	2b00      	cmp	r3, #0
 800a716:	d001      	beq.n	800a71c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800a718:	2301      	movs	r3, #1
 800a71a:	e0cb      	b.n	800a8b4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	681a      	ldr	r2, [r3, #0]
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a72a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	691a      	ldr	r2, [r3, #16]
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a736:	b2d2      	uxtb	r2, r2
 800a738:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a73e:	1c5a      	adds	r2, r3, #1
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a748:	3b01      	subs	r3, #1
 800a74a:	b29a      	uxth	r2, r3
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a754:	b29b      	uxth	r3, r3
 800a756:	3b01      	subs	r3, #1
 800a758:	b29a      	uxth	r2, r3
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a75e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a760:	9300      	str	r3, [sp, #0]
 800a762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a764:	2200      	movs	r2, #0
 800a766:	4955      	ldr	r1, [pc, #340]	@ (800a8bc <HAL_I2C_Master_Receive+0x460>)
 800a768:	68f8      	ldr	r0, [r7, #12]
 800a76a:	f000 fb27 	bl	800adbc <I2C_WaitOnFlagUntilTimeout>
 800a76e:	4603      	mov	r3, r0
 800a770:	2b00      	cmp	r3, #0
 800a772:	d001      	beq.n	800a778 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800a774:	2301      	movs	r3, #1
 800a776:	e09d      	b.n	800a8b4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	681a      	ldr	r2, [r3, #0]
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a786:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	691a      	ldr	r2, [r3, #16]
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a792:	b2d2      	uxtb	r2, r2
 800a794:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a79a:	1c5a      	adds	r2, r3, #1
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a7a4:	3b01      	subs	r3, #1
 800a7a6:	b29a      	uxth	r2, r3
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a7b0:	b29b      	uxth	r3, r3
 800a7b2:	3b01      	subs	r3, #1
 800a7b4:	b29a      	uxth	r2, r3
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	691a      	ldr	r2, [r3, #16]
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7c4:	b2d2      	uxtb	r2, r2
 800a7c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7cc:	1c5a      	adds	r2, r3, #1
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a7d6:	3b01      	subs	r3, #1
 800a7d8:	b29a      	uxth	r2, r3
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a7e2:	b29b      	uxth	r3, r3
 800a7e4:	3b01      	subs	r3, #1
 800a7e6:	b29a      	uxth	r2, r3
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a7ec:	e04e      	b.n	800a88c <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a7ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a7f0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a7f2:	68f8      	ldr	r0, [r7, #12]
 800a7f4:	f000 fc8c 	bl	800b110 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d001      	beq.n	800a802 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800a7fe:	2301      	movs	r3, #1
 800a800:	e058      	b.n	800a8b4 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	691a      	ldr	r2, [r3, #16]
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a80c:	b2d2      	uxtb	r2, r2
 800a80e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a814:	1c5a      	adds	r2, r3, #1
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a81e:	3b01      	subs	r3, #1
 800a820:	b29a      	uxth	r2, r3
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a82a:	b29b      	uxth	r3, r3
 800a82c:	3b01      	subs	r3, #1
 800a82e:	b29a      	uxth	r2, r3
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	695b      	ldr	r3, [r3, #20]
 800a83a:	f003 0304 	and.w	r3, r3, #4
 800a83e:	2b04      	cmp	r3, #4
 800a840:	d124      	bne.n	800a88c <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a846:	2b03      	cmp	r3, #3
 800a848:	d107      	bne.n	800a85a <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	681a      	ldr	r2, [r3, #0]
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a858:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	691a      	ldr	r2, [r3, #16]
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a864:	b2d2      	uxtb	r2, r2
 800a866:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a86c:	1c5a      	adds	r2, r3, #1
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a876:	3b01      	subs	r3, #1
 800a878:	b29a      	uxth	r2, r3
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a882:	b29b      	uxth	r3, r3
 800a884:	3b01      	subs	r3, #1
 800a886:	b29a      	uxth	r2, r3
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a890:	2b00      	cmp	r3, #0
 800a892:	f47f aeb6 	bne.w	800a602 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	2220      	movs	r2, #32
 800a89a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	e000      	b.n	800a8b4 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800a8b2:	2302      	movs	r3, #2
  }
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	3728      	adds	r7, #40	@ 0x28
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}
 800a8bc:	00010004 	.word	0x00010004

0800a8c0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b08a      	sub	sp, #40	@ 0x28
 800a8c4:	af02      	add	r7, sp, #8
 800a8c6:	60f8      	str	r0, [r7, #12]
 800a8c8:	607a      	str	r2, [r7, #4]
 800a8ca:	603b      	str	r3, [r7, #0]
 800a8cc:	460b      	mov	r3, r1
 800a8ce:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800a8d0:	f7fe fb2e 	bl	8008f30 <HAL_GetTick>
 800a8d4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a8e0:	b2db      	uxtb	r3, r3
 800a8e2:	2b20      	cmp	r3, #32
 800a8e4:	f040 8111 	bne.w	800ab0a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a8e8:	69fb      	ldr	r3, [r7, #28]
 800a8ea:	9300      	str	r3, [sp, #0]
 800a8ec:	2319      	movs	r3, #25
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	4988      	ldr	r1, [pc, #544]	@ (800ab14 <HAL_I2C_IsDeviceReady+0x254>)
 800a8f2:	68f8      	ldr	r0, [r7, #12]
 800a8f4:	f000 fa62 	bl	800adbc <I2C_WaitOnFlagUntilTimeout>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d001      	beq.n	800a902 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800a8fe:	2302      	movs	r3, #2
 800a900:	e104      	b.n	800ab0c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a908:	2b01      	cmp	r3, #1
 800a90a:	d101      	bne.n	800a910 <HAL_I2C_IsDeviceReady+0x50>
 800a90c:	2302      	movs	r3, #2
 800a90e:	e0fd      	b.n	800ab0c <HAL_I2C_IsDeviceReady+0x24c>
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	2201      	movs	r2, #1
 800a914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f003 0301 	and.w	r3, r3, #1
 800a922:	2b01      	cmp	r3, #1
 800a924:	d007      	beq.n	800a936 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	681a      	ldr	r2, [r3, #0]
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f042 0201 	orr.w	r2, r2, #1
 800a934:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	681a      	ldr	r2, [r3, #0]
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a944:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	2224      	movs	r2, #36	@ 0x24
 800a94a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	2200      	movs	r2, #0
 800a952:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	4a70      	ldr	r2, [pc, #448]	@ (800ab18 <HAL_I2C_IsDeviceReady+0x258>)
 800a958:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	681a      	ldr	r2, [r3, #0]
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a968:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800a96a:	69fb      	ldr	r3, [r7, #28]
 800a96c:	9300      	str	r3, [sp, #0]
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	2200      	movs	r2, #0
 800a972:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a976:	68f8      	ldr	r0, [r7, #12]
 800a978:	f000 fa20 	bl	800adbc <I2C_WaitOnFlagUntilTimeout>
 800a97c:	4603      	mov	r3, r0
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d00d      	beq.n	800a99e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a98c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a990:	d103      	bne.n	800a99a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a998:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800a99a:	2303      	movs	r3, #3
 800a99c:	e0b6      	b.n	800ab0c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a99e:	897b      	ldrh	r3, [r7, #10]
 800a9a0:	b2db      	uxtb	r3, r3
 800a9a2:	461a      	mov	r2, r3
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800a9ac:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800a9ae:	f7fe fabf 	bl	8008f30 <HAL_GetTick>
 800a9b2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	695b      	ldr	r3, [r3, #20]
 800a9ba:	f003 0302 	and.w	r3, r3, #2
 800a9be:	2b02      	cmp	r3, #2
 800a9c0:	bf0c      	ite	eq
 800a9c2:	2301      	moveq	r3, #1
 800a9c4:	2300      	movne	r3, #0
 800a9c6:	b2db      	uxtb	r3, r3
 800a9c8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	695b      	ldr	r3, [r3, #20]
 800a9d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a9d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a9d8:	bf0c      	ite	eq
 800a9da:	2301      	moveq	r3, #1
 800a9dc:	2300      	movne	r3, #0
 800a9de:	b2db      	uxtb	r3, r3
 800a9e0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800a9e2:	e025      	b.n	800aa30 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a9e4:	f7fe faa4 	bl	8008f30 <HAL_GetTick>
 800a9e8:	4602      	mov	r2, r0
 800a9ea:	69fb      	ldr	r3, [r7, #28]
 800a9ec:	1ad3      	subs	r3, r2, r3
 800a9ee:	683a      	ldr	r2, [r7, #0]
 800a9f0:	429a      	cmp	r2, r3
 800a9f2:	d302      	bcc.n	800a9fa <HAL_I2C_IsDeviceReady+0x13a>
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d103      	bne.n	800aa02 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	22a0      	movs	r2, #160	@ 0xa0
 800a9fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	695b      	ldr	r3, [r3, #20]
 800aa08:	f003 0302 	and.w	r3, r3, #2
 800aa0c:	2b02      	cmp	r3, #2
 800aa0e:	bf0c      	ite	eq
 800aa10:	2301      	moveq	r3, #1
 800aa12:	2300      	movne	r3, #0
 800aa14:	b2db      	uxtb	r3, r3
 800aa16:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	695b      	ldr	r3, [r3, #20]
 800aa1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800aa22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aa26:	bf0c      	ite	eq
 800aa28:	2301      	moveq	r3, #1
 800aa2a:	2300      	movne	r3, #0
 800aa2c:	b2db      	uxtb	r3, r3
 800aa2e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aa36:	b2db      	uxtb	r3, r3
 800aa38:	2ba0      	cmp	r3, #160	@ 0xa0
 800aa3a:	d005      	beq.n	800aa48 <HAL_I2C_IsDeviceReady+0x188>
 800aa3c:	7dfb      	ldrb	r3, [r7, #23]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d102      	bne.n	800aa48 <HAL_I2C_IsDeviceReady+0x188>
 800aa42:	7dbb      	ldrb	r3, [r7, #22]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d0cd      	beq.n	800a9e4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	2220      	movs	r2, #32
 800aa4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	695b      	ldr	r3, [r3, #20]
 800aa56:	f003 0302 	and.w	r3, r3, #2
 800aa5a:	2b02      	cmp	r3, #2
 800aa5c:	d129      	bne.n	800aab2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	681a      	ldr	r2, [r3, #0]
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aa6c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aa6e:	2300      	movs	r3, #0
 800aa70:	613b      	str	r3, [r7, #16]
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	695b      	ldr	r3, [r3, #20]
 800aa78:	613b      	str	r3, [r7, #16]
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	699b      	ldr	r3, [r3, #24]
 800aa80:	613b      	str	r3, [r7, #16]
 800aa82:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800aa84:	69fb      	ldr	r3, [r7, #28]
 800aa86:	9300      	str	r3, [sp, #0]
 800aa88:	2319      	movs	r3, #25
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	4921      	ldr	r1, [pc, #132]	@ (800ab14 <HAL_I2C_IsDeviceReady+0x254>)
 800aa8e:	68f8      	ldr	r0, [r7, #12]
 800aa90:	f000 f994 	bl	800adbc <I2C_WaitOnFlagUntilTimeout>
 800aa94:	4603      	mov	r3, r0
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d001      	beq.n	800aa9e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	e036      	b.n	800ab0c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	2220      	movs	r2, #32
 800aaa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800aaae:	2300      	movs	r3, #0
 800aab0:	e02c      	b.n	800ab0c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	681a      	ldr	r2, [r3, #0]
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aac0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800aaca:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800aacc:	69fb      	ldr	r3, [r7, #28]
 800aace:	9300      	str	r3, [sp, #0]
 800aad0:	2319      	movs	r3, #25
 800aad2:	2201      	movs	r2, #1
 800aad4:	490f      	ldr	r1, [pc, #60]	@ (800ab14 <HAL_I2C_IsDeviceReady+0x254>)
 800aad6:	68f8      	ldr	r0, [r7, #12]
 800aad8:	f000 f970 	bl	800adbc <I2C_WaitOnFlagUntilTimeout>
 800aadc:	4603      	mov	r3, r0
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d001      	beq.n	800aae6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800aae2:	2301      	movs	r3, #1
 800aae4:	e012      	b.n	800ab0c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800aae6:	69bb      	ldr	r3, [r7, #24]
 800aae8:	3301      	adds	r3, #1
 800aaea:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800aaec:	69ba      	ldr	r2, [r7, #24]
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	429a      	cmp	r2, r3
 800aaf2:	f4ff af32 	bcc.w	800a95a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	2220      	movs	r2, #32
 800aafa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	2200      	movs	r2, #0
 800ab02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800ab06:	2301      	movs	r3, #1
 800ab08:	e000      	b.n	800ab0c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800ab0a:	2302      	movs	r3, #2
  }
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3720      	adds	r7, #32
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}
 800ab14:	00100002 	.word	0x00100002
 800ab18:	ffff0000 	.word	0xffff0000

0800ab1c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b088      	sub	sp, #32
 800ab20:	af02      	add	r7, sp, #8
 800ab22:	60f8      	str	r0, [r7, #12]
 800ab24:	607a      	str	r2, [r7, #4]
 800ab26:	603b      	str	r3, [r7, #0]
 800ab28:	460b      	mov	r3, r1
 800ab2a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab30:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800ab32:	697b      	ldr	r3, [r7, #20]
 800ab34:	2b08      	cmp	r3, #8
 800ab36:	d006      	beq.n	800ab46 <I2C_MasterRequestWrite+0x2a>
 800ab38:	697b      	ldr	r3, [r7, #20]
 800ab3a:	2b01      	cmp	r3, #1
 800ab3c:	d003      	beq.n	800ab46 <I2C_MasterRequestWrite+0x2a>
 800ab3e:	697b      	ldr	r3, [r7, #20]
 800ab40:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800ab44:	d108      	bne.n	800ab58 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	681a      	ldr	r2, [r3, #0]
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ab54:	601a      	str	r2, [r3, #0]
 800ab56:	e00b      	b.n	800ab70 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab5c:	2b12      	cmp	r3, #18
 800ab5e:	d107      	bne.n	800ab70 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	681a      	ldr	r2, [r3, #0]
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ab6e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	9300      	str	r3, [sp, #0]
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2200      	movs	r2, #0
 800ab78:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800ab7c:	68f8      	ldr	r0, [r7, #12]
 800ab7e:	f000 f91d 	bl	800adbc <I2C_WaitOnFlagUntilTimeout>
 800ab82:	4603      	mov	r3, r0
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d00d      	beq.n	800aba4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab96:	d103      	bne.n	800aba0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ab9e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800aba0:	2303      	movs	r3, #3
 800aba2:	e035      	b.n	800ac10 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	691b      	ldr	r3, [r3, #16]
 800aba8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800abac:	d108      	bne.n	800abc0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800abae:	897b      	ldrh	r3, [r7, #10]
 800abb0:	b2db      	uxtb	r3, r3
 800abb2:	461a      	mov	r2, r3
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800abbc:	611a      	str	r2, [r3, #16]
 800abbe:	e01b      	b.n	800abf8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800abc0:	897b      	ldrh	r3, [r7, #10]
 800abc2:	11db      	asrs	r3, r3, #7
 800abc4:	b2db      	uxtb	r3, r3
 800abc6:	f003 0306 	and.w	r3, r3, #6
 800abca:	b2db      	uxtb	r3, r3
 800abcc:	f063 030f 	orn	r3, r3, #15
 800abd0:	b2da      	uxtb	r2, r3
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	687a      	ldr	r2, [r7, #4]
 800abdc:	490e      	ldr	r1, [pc, #56]	@ (800ac18 <I2C_MasterRequestWrite+0xfc>)
 800abde:	68f8      	ldr	r0, [r7, #12]
 800abe0:	f000 f966 	bl	800aeb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800abe4:	4603      	mov	r3, r0
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d001      	beq.n	800abee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800abea:	2301      	movs	r3, #1
 800abec:	e010      	b.n	800ac10 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800abee:	897b      	ldrh	r3, [r7, #10]
 800abf0:	b2da      	uxtb	r2, r3
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	687a      	ldr	r2, [r7, #4]
 800abfc:	4907      	ldr	r1, [pc, #28]	@ (800ac1c <I2C_MasterRequestWrite+0x100>)
 800abfe:	68f8      	ldr	r0, [r7, #12]
 800ac00:	f000 f956 	bl	800aeb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ac04:	4603      	mov	r3, r0
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d001      	beq.n	800ac0e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	e000      	b.n	800ac10 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800ac0e:	2300      	movs	r3, #0
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	3718      	adds	r7, #24
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}
 800ac18:	00010008 	.word	0x00010008
 800ac1c:	00010002 	.word	0x00010002

0800ac20 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b088      	sub	sp, #32
 800ac24:	af02      	add	r7, sp, #8
 800ac26:	60f8      	str	r0, [r7, #12]
 800ac28:	607a      	str	r2, [r7, #4]
 800ac2a:	603b      	str	r3, [r7, #0]
 800ac2c:	460b      	mov	r3, r1
 800ac2e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac34:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	681a      	ldr	r2, [r3, #0]
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ac44:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800ac46:	697b      	ldr	r3, [r7, #20]
 800ac48:	2b08      	cmp	r3, #8
 800ac4a:	d006      	beq.n	800ac5a <I2C_MasterRequestRead+0x3a>
 800ac4c:	697b      	ldr	r3, [r7, #20]
 800ac4e:	2b01      	cmp	r3, #1
 800ac50:	d003      	beq.n	800ac5a <I2C_MasterRequestRead+0x3a>
 800ac52:	697b      	ldr	r3, [r7, #20]
 800ac54:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800ac58:	d108      	bne.n	800ac6c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	681a      	ldr	r2, [r3, #0]
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ac68:	601a      	str	r2, [r3, #0]
 800ac6a:	e00b      	b.n	800ac84 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac70:	2b11      	cmp	r3, #17
 800ac72:	d107      	bne.n	800ac84 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	681a      	ldr	r2, [r3, #0]
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ac82:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	9300      	str	r3, [sp, #0]
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800ac90:	68f8      	ldr	r0, [r7, #12]
 800ac92:	f000 f893 	bl	800adbc <I2C_WaitOnFlagUntilTimeout>
 800ac96:	4603      	mov	r3, r0
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d00d      	beq.n	800acb8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aca6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800acaa:	d103      	bne.n	800acb4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800acb2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800acb4:	2303      	movs	r3, #3
 800acb6:	e079      	b.n	800adac <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	691b      	ldr	r3, [r3, #16]
 800acbc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800acc0:	d108      	bne.n	800acd4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800acc2:	897b      	ldrh	r3, [r7, #10]
 800acc4:	b2db      	uxtb	r3, r3
 800acc6:	f043 0301 	orr.w	r3, r3, #1
 800acca:	b2da      	uxtb	r2, r3
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	611a      	str	r2, [r3, #16]
 800acd2:	e05f      	b.n	800ad94 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800acd4:	897b      	ldrh	r3, [r7, #10]
 800acd6:	11db      	asrs	r3, r3, #7
 800acd8:	b2db      	uxtb	r3, r3
 800acda:	f003 0306 	and.w	r3, r3, #6
 800acde:	b2db      	uxtb	r3, r3
 800ace0:	f063 030f 	orn	r3, r3, #15
 800ace4:	b2da      	uxtb	r2, r3
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	687a      	ldr	r2, [r7, #4]
 800acf0:	4930      	ldr	r1, [pc, #192]	@ (800adb4 <I2C_MasterRequestRead+0x194>)
 800acf2:	68f8      	ldr	r0, [r7, #12]
 800acf4:	f000 f8dc 	bl	800aeb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800acf8:	4603      	mov	r3, r0
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d001      	beq.n	800ad02 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800acfe:	2301      	movs	r3, #1
 800ad00:	e054      	b.n	800adac <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800ad02:	897b      	ldrh	r3, [r7, #10]
 800ad04:	b2da      	uxtb	r2, r3
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	687a      	ldr	r2, [r7, #4]
 800ad10:	4929      	ldr	r1, [pc, #164]	@ (800adb8 <I2C_MasterRequestRead+0x198>)
 800ad12:	68f8      	ldr	r0, [r7, #12]
 800ad14:	f000 f8cc 	bl	800aeb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d001      	beq.n	800ad22 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800ad1e:	2301      	movs	r3, #1
 800ad20:	e044      	b.n	800adac <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ad22:	2300      	movs	r3, #0
 800ad24:	613b      	str	r3, [r7, #16]
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	695b      	ldr	r3, [r3, #20]
 800ad2c:	613b      	str	r3, [r7, #16]
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	699b      	ldr	r3, [r3, #24]
 800ad34:	613b      	str	r3, [r7, #16]
 800ad36:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	681a      	ldr	r2, [r3, #0]
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ad46:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	9300      	str	r3, [sp, #0]
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2200      	movs	r2, #0
 800ad50:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800ad54:	68f8      	ldr	r0, [r7, #12]
 800ad56:	f000 f831 	bl	800adbc <I2C_WaitOnFlagUntilTimeout>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d00d      	beq.n	800ad7c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad6e:	d103      	bne.n	800ad78 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ad76:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800ad78:	2303      	movs	r3, #3
 800ad7a:	e017      	b.n	800adac <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800ad7c:	897b      	ldrh	r3, [r7, #10]
 800ad7e:	11db      	asrs	r3, r3, #7
 800ad80:	b2db      	uxtb	r3, r3
 800ad82:	f003 0306 	and.w	r3, r3, #6
 800ad86:	b2db      	uxtb	r3, r3
 800ad88:	f063 030e 	orn	r3, r3, #14
 800ad8c:	b2da      	uxtb	r2, r3
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	687a      	ldr	r2, [r7, #4]
 800ad98:	4907      	ldr	r1, [pc, #28]	@ (800adb8 <I2C_MasterRequestRead+0x198>)
 800ad9a:	68f8      	ldr	r0, [r7, #12]
 800ad9c:	f000 f888 	bl	800aeb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ada0:	4603      	mov	r3, r0
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d001      	beq.n	800adaa <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800ada6:	2301      	movs	r3, #1
 800ada8:	e000      	b.n	800adac <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800adaa:	2300      	movs	r3, #0
}
 800adac:	4618      	mov	r0, r3
 800adae:	3718      	adds	r7, #24
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}
 800adb4:	00010008 	.word	0x00010008
 800adb8:	00010002 	.word	0x00010002

0800adbc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b084      	sub	sp, #16
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	60f8      	str	r0, [r7, #12]
 800adc4:	60b9      	str	r1, [r7, #8]
 800adc6:	603b      	str	r3, [r7, #0]
 800adc8:	4613      	mov	r3, r2
 800adca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800adcc:	e048      	b.n	800ae60 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800add4:	d044      	beq.n	800ae60 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800add6:	f7fe f8ab 	bl	8008f30 <HAL_GetTick>
 800adda:	4602      	mov	r2, r0
 800addc:	69bb      	ldr	r3, [r7, #24]
 800adde:	1ad3      	subs	r3, r2, r3
 800ade0:	683a      	ldr	r2, [r7, #0]
 800ade2:	429a      	cmp	r2, r3
 800ade4:	d302      	bcc.n	800adec <I2C_WaitOnFlagUntilTimeout+0x30>
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d139      	bne.n	800ae60 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	0c1b      	lsrs	r3, r3, #16
 800adf0:	b2db      	uxtb	r3, r3
 800adf2:	2b01      	cmp	r3, #1
 800adf4:	d10d      	bne.n	800ae12 <I2C_WaitOnFlagUntilTimeout+0x56>
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	695b      	ldr	r3, [r3, #20]
 800adfc:	43da      	mvns	r2, r3
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	4013      	ands	r3, r2
 800ae02:	b29b      	uxth	r3, r3
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	bf0c      	ite	eq
 800ae08:	2301      	moveq	r3, #1
 800ae0a:	2300      	movne	r3, #0
 800ae0c:	b2db      	uxtb	r3, r3
 800ae0e:	461a      	mov	r2, r3
 800ae10:	e00c      	b.n	800ae2c <I2C_WaitOnFlagUntilTimeout+0x70>
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	699b      	ldr	r3, [r3, #24]
 800ae18:	43da      	mvns	r2, r3
 800ae1a:	68bb      	ldr	r3, [r7, #8]
 800ae1c:	4013      	ands	r3, r2
 800ae1e:	b29b      	uxth	r3, r3
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	bf0c      	ite	eq
 800ae24:	2301      	moveq	r3, #1
 800ae26:	2300      	movne	r3, #0
 800ae28:	b2db      	uxtb	r3, r3
 800ae2a:	461a      	mov	r2, r3
 800ae2c:	79fb      	ldrb	r3, [r7, #7]
 800ae2e:	429a      	cmp	r2, r3
 800ae30:	d116      	bne.n	800ae60 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	2200      	movs	r2, #0
 800ae36:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	2220      	movs	r2, #32
 800ae3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	2200      	movs	r2, #0
 800ae44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae4c:	f043 0220 	orr.w	r2, r3, #32
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	2200      	movs	r2, #0
 800ae58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	e023      	b.n	800aea8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	0c1b      	lsrs	r3, r3, #16
 800ae64:	b2db      	uxtb	r3, r3
 800ae66:	2b01      	cmp	r3, #1
 800ae68:	d10d      	bne.n	800ae86 <I2C_WaitOnFlagUntilTimeout+0xca>
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	695b      	ldr	r3, [r3, #20]
 800ae70:	43da      	mvns	r2, r3
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	4013      	ands	r3, r2
 800ae76:	b29b      	uxth	r3, r3
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	bf0c      	ite	eq
 800ae7c:	2301      	moveq	r3, #1
 800ae7e:	2300      	movne	r3, #0
 800ae80:	b2db      	uxtb	r3, r3
 800ae82:	461a      	mov	r2, r3
 800ae84:	e00c      	b.n	800aea0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	699b      	ldr	r3, [r3, #24]
 800ae8c:	43da      	mvns	r2, r3
 800ae8e:	68bb      	ldr	r3, [r7, #8]
 800ae90:	4013      	ands	r3, r2
 800ae92:	b29b      	uxth	r3, r3
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	bf0c      	ite	eq
 800ae98:	2301      	moveq	r3, #1
 800ae9a:	2300      	movne	r3, #0
 800ae9c:	b2db      	uxtb	r3, r3
 800ae9e:	461a      	mov	r2, r3
 800aea0:	79fb      	ldrb	r3, [r7, #7]
 800aea2:	429a      	cmp	r2, r3
 800aea4:	d093      	beq.n	800adce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aea6:	2300      	movs	r3, #0
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	3710      	adds	r7, #16
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}

0800aeb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b084      	sub	sp, #16
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	60f8      	str	r0, [r7, #12]
 800aeb8:	60b9      	str	r1, [r7, #8]
 800aeba:	607a      	str	r2, [r7, #4]
 800aebc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800aebe:	e071      	b.n	800afa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	695b      	ldr	r3, [r3, #20]
 800aec6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800aeca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aece:	d123      	bne.n	800af18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	681a      	ldr	r2, [r3, #0]
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aede:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800aee8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	2200      	movs	r2, #0
 800aeee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	2220      	movs	r2, #32
 800aef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	2200      	movs	r2, #0
 800aefc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af04:	f043 0204 	orr.w	r2, r3, #4
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	2200      	movs	r2, #0
 800af10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800af14:	2301      	movs	r3, #1
 800af16:	e067      	b.n	800afe8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af1e:	d041      	beq.n	800afa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af20:	f7fe f806 	bl	8008f30 <HAL_GetTick>
 800af24:	4602      	mov	r2, r0
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	1ad3      	subs	r3, r2, r3
 800af2a:	687a      	ldr	r2, [r7, #4]
 800af2c:	429a      	cmp	r2, r3
 800af2e:	d302      	bcc.n	800af36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d136      	bne.n	800afa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	0c1b      	lsrs	r3, r3, #16
 800af3a:	b2db      	uxtb	r3, r3
 800af3c:	2b01      	cmp	r3, #1
 800af3e:	d10c      	bne.n	800af5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	695b      	ldr	r3, [r3, #20]
 800af46:	43da      	mvns	r2, r3
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	4013      	ands	r3, r2
 800af4c:	b29b      	uxth	r3, r3
 800af4e:	2b00      	cmp	r3, #0
 800af50:	bf14      	ite	ne
 800af52:	2301      	movne	r3, #1
 800af54:	2300      	moveq	r3, #0
 800af56:	b2db      	uxtb	r3, r3
 800af58:	e00b      	b.n	800af72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	699b      	ldr	r3, [r3, #24]
 800af60:	43da      	mvns	r2, r3
 800af62:	68bb      	ldr	r3, [r7, #8]
 800af64:	4013      	ands	r3, r2
 800af66:	b29b      	uxth	r3, r3
 800af68:	2b00      	cmp	r3, #0
 800af6a:	bf14      	ite	ne
 800af6c:	2301      	movne	r3, #1
 800af6e:	2300      	moveq	r3, #0
 800af70:	b2db      	uxtb	r3, r3
 800af72:	2b00      	cmp	r3, #0
 800af74:	d016      	beq.n	800afa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	2200      	movs	r2, #0
 800af7a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	2220      	movs	r2, #32
 800af80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	2200      	movs	r2, #0
 800af88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af90:	f043 0220 	orr.w	r2, r3, #32
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	2200      	movs	r2, #0
 800af9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800afa0:	2301      	movs	r3, #1
 800afa2:	e021      	b.n	800afe8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	0c1b      	lsrs	r3, r3, #16
 800afa8:	b2db      	uxtb	r3, r3
 800afaa:	2b01      	cmp	r3, #1
 800afac:	d10c      	bne.n	800afc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	695b      	ldr	r3, [r3, #20]
 800afb4:	43da      	mvns	r2, r3
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	4013      	ands	r3, r2
 800afba:	b29b      	uxth	r3, r3
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	bf14      	ite	ne
 800afc0:	2301      	movne	r3, #1
 800afc2:	2300      	moveq	r3, #0
 800afc4:	b2db      	uxtb	r3, r3
 800afc6:	e00b      	b.n	800afe0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	699b      	ldr	r3, [r3, #24]
 800afce:	43da      	mvns	r2, r3
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	4013      	ands	r3, r2
 800afd4:	b29b      	uxth	r3, r3
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	bf14      	ite	ne
 800afda:	2301      	movne	r3, #1
 800afdc:	2300      	moveq	r3, #0
 800afde:	b2db      	uxtb	r3, r3
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	f47f af6d 	bne.w	800aec0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800afe6:	2300      	movs	r3, #0
}
 800afe8:	4618      	mov	r0, r3
 800afea:	3710      	adds	r7, #16
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}

0800aff0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b084      	sub	sp, #16
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	60f8      	str	r0, [r7, #12]
 800aff8:	60b9      	str	r1, [r7, #8]
 800affa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800affc:	e034      	b.n	800b068 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800affe:	68f8      	ldr	r0, [r7, #12]
 800b000:	f000 f8e3 	bl	800b1ca <I2C_IsAcknowledgeFailed>
 800b004:	4603      	mov	r3, r0
 800b006:	2b00      	cmp	r3, #0
 800b008:	d001      	beq.n	800b00e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b00a:	2301      	movs	r3, #1
 800b00c:	e034      	b.n	800b078 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b00e:	68bb      	ldr	r3, [r7, #8]
 800b010:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b014:	d028      	beq.n	800b068 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b016:	f7fd ff8b 	bl	8008f30 <HAL_GetTick>
 800b01a:	4602      	mov	r2, r0
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	1ad3      	subs	r3, r2, r3
 800b020:	68ba      	ldr	r2, [r7, #8]
 800b022:	429a      	cmp	r2, r3
 800b024:	d302      	bcc.n	800b02c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d11d      	bne.n	800b068 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	695b      	ldr	r3, [r3, #20]
 800b032:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b036:	2b80      	cmp	r3, #128	@ 0x80
 800b038:	d016      	beq.n	800b068 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	2200      	movs	r2, #0
 800b03e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	2220      	movs	r2, #32
 800b044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	2200      	movs	r2, #0
 800b04c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b054:	f043 0220 	orr.w	r2, r3, #32
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	2200      	movs	r2, #0
 800b060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b064:	2301      	movs	r3, #1
 800b066:	e007      	b.n	800b078 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	695b      	ldr	r3, [r3, #20]
 800b06e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b072:	2b80      	cmp	r3, #128	@ 0x80
 800b074:	d1c3      	bne.n	800affe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b076:	2300      	movs	r3, #0
}
 800b078:	4618      	mov	r0, r3
 800b07a:	3710      	adds	r7, #16
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}

0800b080 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b084      	sub	sp, #16
 800b084:	af00      	add	r7, sp, #0
 800b086:	60f8      	str	r0, [r7, #12]
 800b088:	60b9      	str	r1, [r7, #8]
 800b08a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b08c:	e034      	b.n	800b0f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b08e:	68f8      	ldr	r0, [r7, #12]
 800b090:	f000 f89b 	bl	800b1ca <I2C_IsAcknowledgeFailed>
 800b094:	4603      	mov	r3, r0
 800b096:	2b00      	cmp	r3, #0
 800b098:	d001      	beq.n	800b09e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b09a:	2301      	movs	r3, #1
 800b09c:	e034      	b.n	800b108 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0a4:	d028      	beq.n	800b0f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b0a6:	f7fd ff43 	bl	8008f30 <HAL_GetTick>
 800b0aa:	4602      	mov	r2, r0
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	1ad3      	subs	r3, r2, r3
 800b0b0:	68ba      	ldr	r2, [r7, #8]
 800b0b2:	429a      	cmp	r2, r3
 800b0b4:	d302      	bcc.n	800b0bc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d11d      	bne.n	800b0f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	695b      	ldr	r3, [r3, #20]
 800b0c2:	f003 0304 	and.w	r3, r3, #4
 800b0c6:	2b04      	cmp	r3, #4
 800b0c8:	d016      	beq.n	800b0f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	2220      	movs	r2, #32
 800b0d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	2200      	movs	r2, #0
 800b0dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0e4:	f043 0220 	orr.w	r2, r3, #32
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	e007      	b.n	800b108 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	695b      	ldr	r3, [r3, #20]
 800b0fe:	f003 0304 	and.w	r3, r3, #4
 800b102:	2b04      	cmp	r3, #4
 800b104:	d1c3      	bne.n	800b08e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b106:	2300      	movs	r3, #0
}
 800b108:	4618      	mov	r0, r3
 800b10a:	3710      	adds	r7, #16
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}

0800b110 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b084      	sub	sp, #16
 800b114:	af00      	add	r7, sp, #0
 800b116:	60f8      	str	r0, [r7, #12]
 800b118:	60b9      	str	r1, [r7, #8]
 800b11a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b11c:	e049      	b.n	800b1b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	695b      	ldr	r3, [r3, #20]
 800b124:	f003 0310 	and.w	r3, r3, #16
 800b128:	2b10      	cmp	r3, #16
 800b12a:	d119      	bne.n	800b160 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	f06f 0210 	mvn.w	r2, #16
 800b134:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	2200      	movs	r2, #0
 800b13a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	2220      	movs	r2, #32
 800b140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	2200      	movs	r2, #0
 800b148:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	2200      	movs	r2, #0
 800b158:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800b15c:	2301      	movs	r3, #1
 800b15e:	e030      	b.n	800b1c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b160:	f7fd fee6 	bl	8008f30 <HAL_GetTick>
 800b164:	4602      	mov	r2, r0
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	1ad3      	subs	r3, r2, r3
 800b16a:	68ba      	ldr	r2, [r7, #8]
 800b16c:	429a      	cmp	r2, r3
 800b16e:	d302      	bcc.n	800b176 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d11d      	bne.n	800b1b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	695b      	ldr	r3, [r3, #20]
 800b17c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b180:	2b40      	cmp	r3, #64	@ 0x40
 800b182:	d016      	beq.n	800b1b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	2200      	movs	r2, #0
 800b188:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	2220      	movs	r2, #32
 800b18e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	2200      	movs	r2, #0
 800b196:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b19e:	f043 0220 	orr.w	r2, r3, #32
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800b1ae:	2301      	movs	r3, #1
 800b1b0:	e007      	b.n	800b1c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	695b      	ldr	r3, [r3, #20]
 800b1b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1bc:	2b40      	cmp	r3, #64	@ 0x40
 800b1be:	d1ae      	bne.n	800b11e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b1c0:	2300      	movs	r3, #0
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	3710      	adds	r7, #16
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}

0800b1ca <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800b1ca:	b480      	push	{r7}
 800b1cc:	b083      	sub	sp, #12
 800b1ce:	af00      	add	r7, sp, #0
 800b1d0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	695b      	ldr	r3, [r3, #20]
 800b1d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b1dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b1e0:	d11b      	bne.n	800b21a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800b1ea:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2220      	movs	r2, #32
 800b1f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b206:	f043 0204 	orr.w	r2, r3, #4
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2200      	movs	r2, #0
 800b212:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800b216:	2301      	movs	r3, #1
 800b218:	e000      	b.n	800b21c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800b21a:	2300      	movs	r3, #0
}
 800b21c:	4618      	mov	r0, r3
 800b21e:	370c      	adds	r7, #12
 800b220:	46bd      	mov	sp, r7
 800b222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b226:	4770      	bx	lr

0800b228 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b086      	sub	sp, #24
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d101      	bne.n	800b23a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b236:	2301      	movs	r3, #1
 800b238:	e267      	b.n	800b70a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	f003 0301 	and.w	r3, r3, #1
 800b242:	2b00      	cmp	r3, #0
 800b244:	d075      	beq.n	800b332 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800b246:	4b88      	ldr	r3, [pc, #544]	@ (800b468 <HAL_RCC_OscConfig+0x240>)
 800b248:	689b      	ldr	r3, [r3, #8]
 800b24a:	f003 030c 	and.w	r3, r3, #12
 800b24e:	2b04      	cmp	r3, #4
 800b250:	d00c      	beq.n	800b26c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b252:	4b85      	ldr	r3, [pc, #532]	@ (800b468 <HAL_RCC_OscConfig+0x240>)
 800b254:	689b      	ldr	r3, [r3, #8]
 800b256:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800b25a:	2b08      	cmp	r3, #8
 800b25c:	d112      	bne.n	800b284 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b25e:	4b82      	ldr	r3, [pc, #520]	@ (800b468 <HAL_RCC_OscConfig+0x240>)
 800b260:	685b      	ldr	r3, [r3, #4]
 800b262:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b266:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b26a:	d10b      	bne.n	800b284 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b26c:	4b7e      	ldr	r3, [pc, #504]	@ (800b468 <HAL_RCC_OscConfig+0x240>)
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b274:	2b00      	cmp	r3, #0
 800b276:	d05b      	beq.n	800b330 <HAL_RCC_OscConfig+0x108>
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	685b      	ldr	r3, [r3, #4]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d157      	bne.n	800b330 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b280:	2301      	movs	r3, #1
 800b282:	e242      	b.n	800b70a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	685b      	ldr	r3, [r3, #4]
 800b288:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b28c:	d106      	bne.n	800b29c <HAL_RCC_OscConfig+0x74>
 800b28e:	4b76      	ldr	r3, [pc, #472]	@ (800b468 <HAL_RCC_OscConfig+0x240>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	4a75      	ldr	r2, [pc, #468]	@ (800b468 <HAL_RCC_OscConfig+0x240>)
 800b294:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b298:	6013      	str	r3, [r2, #0]
 800b29a:	e01d      	b.n	800b2d8 <HAL_RCC_OscConfig+0xb0>
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	685b      	ldr	r3, [r3, #4]
 800b2a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b2a4:	d10c      	bne.n	800b2c0 <HAL_RCC_OscConfig+0x98>
 800b2a6:	4b70      	ldr	r3, [pc, #448]	@ (800b468 <HAL_RCC_OscConfig+0x240>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	4a6f      	ldr	r2, [pc, #444]	@ (800b468 <HAL_RCC_OscConfig+0x240>)
 800b2ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b2b0:	6013      	str	r3, [r2, #0]
 800b2b2:	4b6d      	ldr	r3, [pc, #436]	@ (800b468 <HAL_RCC_OscConfig+0x240>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	4a6c      	ldr	r2, [pc, #432]	@ (800b468 <HAL_RCC_OscConfig+0x240>)
 800b2b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b2bc:	6013      	str	r3, [r2, #0]
 800b2be:	e00b      	b.n	800b2d8 <HAL_RCC_OscConfig+0xb0>
 800b2c0:	4b69      	ldr	r3, [pc, #420]	@ (800b468 <HAL_RCC_OscConfig+0x240>)
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	4a68      	ldr	r2, [pc, #416]	@ (800b468 <HAL_RCC_OscConfig+0x240>)
 800b2c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b2ca:	6013      	str	r3, [r2, #0]
 800b2cc:	4b66      	ldr	r3, [pc, #408]	@ (800b468 <HAL_RCC_OscConfig+0x240>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	4a65      	ldr	r2, [pc, #404]	@ (800b468 <HAL_RCC_OscConfig+0x240>)
 800b2d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b2d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	685b      	ldr	r3, [r3, #4]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d013      	beq.n	800b308 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b2e0:	f7fd fe26 	bl	8008f30 <HAL_GetTick>
 800b2e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b2e6:	e008      	b.n	800b2fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b2e8:	f7fd fe22 	bl	8008f30 <HAL_GetTick>
 800b2ec:	4602      	mov	r2, r0
 800b2ee:	693b      	ldr	r3, [r7, #16]
 800b2f0:	1ad3      	subs	r3, r2, r3
 800b2f2:	2b64      	cmp	r3, #100	@ 0x64
 800b2f4:	d901      	bls.n	800b2fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b2f6:	2303      	movs	r3, #3
 800b2f8:	e207      	b.n	800b70a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b2fa:	4b5b      	ldr	r3, [pc, #364]	@ (800b468 <HAL_RCC_OscConfig+0x240>)
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b302:	2b00      	cmp	r3, #0
 800b304:	d0f0      	beq.n	800b2e8 <HAL_RCC_OscConfig+0xc0>
 800b306:	e014      	b.n	800b332 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b308:	f7fd fe12 	bl	8008f30 <HAL_GetTick>
 800b30c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b30e:	e008      	b.n	800b322 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b310:	f7fd fe0e 	bl	8008f30 <HAL_GetTick>
 800b314:	4602      	mov	r2, r0
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	1ad3      	subs	r3, r2, r3
 800b31a:	2b64      	cmp	r3, #100	@ 0x64
 800b31c:	d901      	bls.n	800b322 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b31e:	2303      	movs	r3, #3
 800b320:	e1f3      	b.n	800b70a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b322:	4b51      	ldr	r3, [pc, #324]	@ (800b468 <HAL_RCC_OscConfig+0x240>)
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d1f0      	bne.n	800b310 <HAL_RCC_OscConfig+0xe8>
 800b32e:	e000      	b.n	800b332 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b330:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	f003 0302 	and.w	r3, r3, #2
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d063      	beq.n	800b406 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800b33e:	4b4a      	ldr	r3, [pc, #296]	@ (800b468 <HAL_RCC_OscConfig+0x240>)
 800b340:	689b      	ldr	r3, [r3, #8]
 800b342:	f003 030c 	and.w	r3, r3, #12
 800b346:	2b00      	cmp	r3, #0
 800b348:	d00b      	beq.n	800b362 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b34a:	4b47      	ldr	r3, [pc, #284]	@ (800b468 <HAL_RCC_OscConfig+0x240>)
 800b34c:	689b      	ldr	r3, [r3, #8]
 800b34e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800b352:	2b08      	cmp	r3, #8
 800b354:	d11c      	bne.n	800b390 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b356:	4b44      	ldr	r3, [pc, #272]	@ (800b468 <HAL_RCC_OscConfig+0x240>)
 800b358:	685b      	ldr	r3, [r3, #4]
 800b35a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d116      	bne.n	800b390 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b362:	4b41      	ldr	r3, [pc, #260]	@ (800b468 <HAL_RCC_OscConfig+0x240>)
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	f003 0302 	and.w	r3, r3, #2
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d005      	beq.n	800b37a <HAL_RCC_OscConfig+0x152>
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	68db      	ldr	r3, [r3, #12]
 800b372:	2b01      	cmp	r3, #1
 800b374:	d001      	beq.n	800b37a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800b376:	2301      	movs	r3, #1
 800b378:	e1c7      	b.n	800b70a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b37a:	4b3b      	ldr	r3, [pc, #236]	@ (800b468 <HAL_RCC_OscConfig+0x240>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	691b      	ldr	r3, [r3, #16]
 800b386:	00db      	lsls	r3, r3, #3
 800b388:	4937      	ldr	r1, [pc, #220]	@ (800b468 <HAL_RCC_OscConfig+0x240>)
 800b38a:	4313      	orrs	r3, r2
 800b38c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b38e:	e03a      	b.n	800b406 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	68db      	ldr	r3, [r3, #12]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d020      	beq.n	800b3da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b398:	4b34      	ldr	r3, [pc, #208]	@ (800b46c <HAL_RCC_OscConfig+0x244>)
 800b39a:	2201      	movs	r2, #1
 800b39c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b39e:	f7fd fdc7 	bl	8008f30 <HAL_GetTick>
 800b3a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b3a4:	e008      	b.n	800b3b8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b3a6:	f7fd fdc3 	bl	8008f30 <HAL_GetTick>
 800b3aa:	4602      	mov	r2, r0
 800b3ac:	693b      	ldr	r3, [r7, #16]
 800b3ae:	1ad3      	subs	r3, r2, r3
 800b3b0:	2b02      	cmp	r3, #2
 800b3b2:	d901      	bls.n	800b3b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800b3b4:	2303      	movs	r3, #3
 800b3b6:	e1a8      	b.n	800b70a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b3b8:	4b2b      	ldr	r3, [pc, #172]	@ (800b468 <HAL_RCC_OscConfig+0x240>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	f003 0302 	and.w	r3, r3, #2
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d0f0      	beq.n	800b3a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b3c4:	4b28      	ldr	r3, [pc, #160]	@ (800b468 <HAL_RCC_OscConfig+0x240>)
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	691b      	ldr	r3, [r3, #16]
 800b3d0:	00db      	lsls	r3, r3, #3
 800b3d2:	4925      	ldr	r1, [pc, #148]	@ (800b468 <HAL_RCC_OscConfig+0x240>)
 800b3d4:	4313      	orrs	r3, r2
 800b3d6:	600b      	str	r3, [r1, #0]
 800b3d8:	e015      	b.n	800b406 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b3da:	4b24      	ldr	r3, [pc, #144]	@ (800b46c <HAL_RCC_OscConfig+0x244>)
 800b3dc:	2200      	movs	r2, #0
 800b3de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b3e0:	f7fd fda6 	bl	8008f30 <HAL_GetTick>
 800b3e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b3e6:	e008      	b.n	800b3fa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b3e8:	f7fd fda2 	bl	8008f30 <HAL_GetTick>
 800b3ec:	4602      	mov	r2, r0
 800b3ee:	693b      	ldr	r3, [r7, #16]
 800b3f0:	1ad3      	subs	r3, r2, r3
 800b3f2:	2b02      	cmp	r3, #2
 800b3f4:	d901      	bls.n	800b3fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800b3f6:	2303      	movs	r3, #3
 800b3f8:	e187      	b.n	800b70a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b3fa:	4b1b      	ldr	r3, [pc, #108]	@ (800b468 <HAL_RCC_OscConfig+0x240>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	f003 0302 	and.w	r3, r3, #2
 800b402:	2b00      	cmp	r3, #0
 800b404:	d1f0      	bne.n	800b3e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	f003 0308 	and.w	r3, r3, #8
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d036      	beq.n	800b480 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	695b      	ldr	r3, [r3, #20]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d016      	beq.n	800b448 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b41a:	4b15      	ldr	r3, [pc, #84]	@ (800b470 <HAL_RCC_OscConfig+0x248>)
 800b41c:	2201      	movs	r2, #1
 800b41e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b420:	f7fd fd86 	bl	8008f30 <HAL_GetTick>
 800b424:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b426:	e008      	b.n	800b43a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b428:	f7fd fd82 	bl	8008f30 <HAL_GetTick>
 800b42c:	4602      	mov	r2, r0
 800b42e:	693b      	ldr	r3, [r7, #16]
 800b430:	1ad3      	subs	r3, r2, r3
 800b432:	2b02      	cmp	r3, #2
 800b434:	d901      	bls.n	800b43a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800b436:	2303      	movs	r3, #3
 800b438:	e167      	b.n	800b70a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b43a:	4b0b      	ldr	r3, [pc, #44]	@ (800b468 <HAL_RCC_OscConfig+0x240>)
 800b43c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b43e:	f003 0302 	and.w	r3, r3, #2
 800b442:	2b00      	cmp	r3, #0
 800b444:	d0f0      	beq.n	800b428 <HAL_RCC_OscConfig+0x200>
 800b446:	e01b      	b.n	800b480 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b448:	4b09      	ldr	r3, [pc, #36]	@ (800b470 <HAL_RCC_OscConfig+0x248>)
 800b44a:	2200      	movs	r2, #0
 800b44c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b44e:	f7fd fd6f 	bl	8008f30 <HAL_GetTick>
 800b452:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b454:	e00e      	b.n	800b474 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b456:	f7fd fd6b 	bl	8008f30 <HAL_GetTick>
 800b45a:	4602      	mov	r2, r0
 800b45c:	693b      	ldr	r3, [r7, #16]
 800b45e:	1ad3      	subs	r3, r2, r3
 800b460:	2b02      	cmp	r3, #2
 800b462:	d907      	bls.n	800b474 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800b464:	2303      	movs	r3, #3
 800b466:	e150      	b.n	800b70a <HAL_RCC_OscConfig+0x4e2>
 800b468:	40023800 	.word	0x40023800
 800b46c:	42470000 	.word	0x42470000
 800b470:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b474:	4b88      	ldr	r3, [pc, #544]	@ (800b698 <HAL_RCC_OscConfig+0x470>)
 800b476:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b478:	f003 0302 	and.w	r3, r3, #2
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d1ea      	bne.n	800b456 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	f003 0304 	and.w	r3, r3, #4
 800b488:	2b00      	cmp	r3, #0
 800b48a:	f000 8097 	beq.w	800b5bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b48e:	2300      	movs	r3, #0
 800b490:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b492:	4b81      	ldr	r3, [pc, #516]	@ (800b698 <HAL_RCC_OscConfig+0x470>)
 800b494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b496:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d10f      	bne.n	800b4be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b49e:	2300      	movs	r3, #0
 800b4a0:	60bb      	str	r3, [r7, #8]
 800b4a2:	4b7d      	ldr	r3, [pc, #500]	@ (800b698 <HAL_RCC_OscConfig+0x470>)
 800b4a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4a6:	4a7c      	ldr	r2, [pc, #496]	@ (800b698 <HAL_RCC_OscConfig+0x470>)
 800b4a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b4ac:	6413      	str	r3, [r2, #64]	@ 0x40
 800b4ae:	4b7a      	ldr	r3, [pc, #488]	@ (800b698 <HAL_RCC_OscConfig+0x470>)
 800b4b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b4b6:	60bb      	str	r3, [r7, #8]
 800b4b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b4be:	4b77      	ldr	r3, [pc, #476]	@ (800b69c <HAL_RCC_OscConfig+0x474>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d118      	bne.n	800b4fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b4ca:	4b74      	ldr	r3, [pc, #464]	@ (800b69c <HAL_RCC_OscConfig+0x474>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	4a73      	ldr	r2, [pc, #460]	@ (800b69c <HAL_RCC_OscConfig+0x474>)
 800b4d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b4d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b4d6:	f7fd fd2b 	bl	8008f30 <HAL_GetTick>
 800b4da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b4dc:	e008      	b.n	800b4f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b4de:	f7fd fd27 	bl	8008f30 <HAL_GetTick>
 800b4e2:	4602      	mov	r2, r0
 800b4e4:	693b      	ldr	r3, [r7, #16]
 800b4e6:	1ad3      	subs	r3, r2, r3
 800b4e8:	2b02      	cmp	r3, #2
 800b4ea:	d901      	bls.n	800b4f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800b4ec:	2303      	movs	r3, #3
 800b4ee:	e10c      	b.n	800b70a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b4f0:	4b6a      	ldr	r3, [pc, #424]	@ (800b69c <HAL_RCC_OscConfig+0x474>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d0f0      	beq.n	800b4de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	689b      	ldr	r3, [r3, #8]
 800b500:	2b01      	cmp	r3, #1
 800b502:	d106      	bne.n	800b512 <HAL_RCC_OscConfig+0x2ea>
 800b504:	4b64      	ldr	r3, [pc, #400]	@ (800b698 <HAL_RCC_OscConfig+0x470>)
 800b506:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b508:	4a63      	ldr	r2, [pc, #396]	@ (800b698 <HAL_RCC_OscConfig+0x470>)
 800b50a:	f043 0301 	orr.w	r3, r3, #1
 800b50e:	6713      	str	r3, [r2, #112]	@ 0x70
 800b510:	e01c      	b.n	800b54c <HAL_RCC_OscConfig+0x324>
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	689b      	ldr	r3, [r3, #8]
 800b516:	2b05      	cmp	r3, #5
 800b518:	d10c      	bne.n	800b534 <HAL_RCC_OscConfig+0x30c>
 800b51a:	4b5f      	ldr	r3, [pc, #380]	@ (800b698 <HAL_RCC_OscConfig+0x470>)
 800b51c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b51e:	4a5e      	ldr	r2, [pc, #376]	@ (800b698 <HAL_RCC_OscConfig+0x470>)
 800b520:	f043 0304 	orr.w	r3, r3, #4
 800b524:	6713      	str	r3, [r2, #112]	@ 0x70
 800b526:	4b5c      	ldr	r3, [pc, #368]	@ (800b698 <HAL_RCC_OscConfig+0x470>)
 800b528:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b52a:	4a5b      	ldr	r2, [pc, #364]	@ (800b698 <HAL_RCC_OscConfig+0x470>)
 800b52c:	f043 0301 	orr.w	r3, r3, #1
 800b530:	6713      	str	r3, [r2, #112]	@ 0x70
 800b532:	e00b      	b.n	800b54c <HAL_RCC_OscConfig+0x324>
 800b534:	4b58      	ldr	r3, [pc, #352]	@ (800b698 <HAL_RCC_OscConfig+0x470>)
 800b536:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b538:	4a57      	ldr	r2, [pc, #348]	@ (800b698 <HAL_RCC_OscConfig+0x470>)
 800b53a:	f023 0301 	bic.w	r3, r3, #1
 800b53e:	6713      	str	r3, [r2, #112]	@ 0x70
 800b540:	4b55      	ldr	r3, [pc, #340]	@ (800b698 <HAL_RCC_OscConfig+0x470>)
 800b542:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b544:	4a54      	ldr	r2, [pc, #336]	@ (800b698 <HAL_RCC_OscConfig+0x470>)
 800b546:	f023 0304 	bic.w	r3, r3, #4
 800b54a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	689b      	ldr	r3, [r3, #8]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d015      	beq.n	800b580 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b554:	f7fd fcec 	bl	8008f30 <HAL_GetTick>
 800b558:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b55a:	e00a      	b.n	800b572 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b55c:	f7fd fce8 	bl	8008f30 <HAL_GetTick>
 800b560:	4602      	mov	r2, r0
 800b562:	693b      	ldr	r3, [r7, #16]
 800b564:	1ad3      	subs	r3, r2, r3
 800b566:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b56a:	4293      	cmp	r3, r2
 800b56c:	d901      	bls.n	800b572 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800b56e:	2303      	movs	r3, #3
 800b570:	e0cb      	b.n	800b70a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b572:	4b49      	ldr	r3, [pc, #292]	@ (800b698 <HAL_RCC_OscConfig+0x470>)
 800b574:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b576:	f003 0302 	and.w	r3, r3, #2
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d0ee      	beq.n	800b55c <HAL_RCC_OscConfig+0x334>
 800b57e:	e014      	b.n	800b5aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b580:	f7fd fcd6 	bl	8008f30 <HAL_GetTick>
 800b584:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b586:	e00a      	b.n	800b59e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b588:	f7fd fcd2 	bl	8008f30 <HAL_GetTick>
 800b58c:	4602      	mov	r2, r0
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	1ad3      	subs	r3, r2, r3
 800b592:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b596:	4293      	cmp	r3, r2
 800b598:	d901      	bls.n	800b59e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800b59a:	2303      	movs	r3, #3
 800b59c:	e0b5      	b.n	800b70a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b59e:	4b3e      	ldr	r3, [pc, #248]	@ (800b698 <HAL_RCC_OscConfig+0x470>)
 800b5a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b5a2:	f003 0302 	and.w	r3, r3, #2
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d1ee      	bne.n	800b588 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b5aa:	7dfb      	ldrb	r3, [r7, #23]
 800b5ac:	2b01      	cmp	r3, #1
 800b5ae:	d105      	bne.n	800b5bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b5b0:	4b39      	ldr	r3, [pc, #228]	@ (800b698 <HAL_RCC_OscConfig+0x470>)
 800b5b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5b4:	4a38      	ldr	r2, [pc, #224]	@ (800b698 <HAL_RCC_OscConfig+0x470>)
 800b5b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b5ba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	699b      	ldr	r3, [r3, #24]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	f000 80a1 	beq.w	800b708 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b5c6:	4b34      	ldr	r3, [pc, #208]	@ (800b698 <HAL_RCC_OscConfig+0x470>)
 800b5c8:	689b      	ldr	r3, [r3, #8]
 800b5ca:	f003 030c 	and.w	r3, r3, #12
 800b5ce:	2b08      	cmp	r3, #8
 800b5d0:	d05c      	beq.n	800b68c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	699b      	ldr	r3, [r3, #24]
 800b5d6:	2b02      	cmp	r3, #2
 800b5d8:	d141      	bne.n	800b65e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b5da:	4b31      	ldr	r3, [pc, #196]	@ (800b6a0 <HAL_RCC_OscConfig+0x478>)
 800b5dc:	2200      	movs	r2, #0
 800b5de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b5e0:	f7fd fca6 	bl	8008f30 <HAL_GetTick>
 800b5e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b5e6:	e008      	b.n	800b5fa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b5e8:	f7fd fca2 	bl	8008f30 <HAL_GetTick>
 800b5ec:	4602      	mov	r2, r0
 800b5ee:	693b      	ldr	r3, [r7, #16]
 800b5f0:	1ad3      	subs	r3, r2, r3
 800b5f2:	2b02      	cmp	r3, #2
 800b5f4:	d901      	bls.n	800b5fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800b5f6:	2303      	movs	r3, #3
 800b5f8:	e087      	b.n	800b70a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b5fa:	4b27      	ldr	r3, [pc, #156]	@ (800b698 <HAL_RCC_OscConfig+0x470>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b602:	2b00      	cmp	r3, #0
 800b604:	d1f0      	bne.n	800b5e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	69da      	ldr	r2, [r3, #28]
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6a1b      	ldr	r3, [r3, #32]
 800b60e:	431a      	orrs	r2, r3
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b614:	019b      	lsls	r3, r3, #6
 800b616:	431a      	orrs	r2, r3
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b61c:	085b      	lsrs	r3, r3, #1
 800b61e:	3b01      	subs	r3, #1
 800b620:	041b      	lsls	r3, r3, #16
 800b622:	431a      	orrs	r2, r3
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b628:	061b      	lsls	r3, r3, #24
 800b62a:	491b      	ldr	r1, [pc, #108]	@ (800b698 <HAL_RCC_OscConfig+0x470>)
 800b62c:	4313      	orrs	r3, r2
 800b62e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b630:	4b1b      	ldr	r3, [pc, #108]	@ (800b6a0 <HAL_RCC_OscConfig+0x478>)
 800b632:	2201      	movs	r2, #1
 800b634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b636:	f7fd fc7b 	bl	8008f30 <HAL_GetTick>
 800b63a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b63c:	e008      	b.n	800b650 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b63e:	f7fd fc77 	bl	8008f30 <HAL_GetTick>
 800b642:	4602      	mov	r2, r0
 800b644:	693b      	ldr	r3, [r7, #16]
 800b646:	1ad3      	subs	r3, r2, r3
 800b648:	2b02      	cmp	r3, #2
 800b64a:	d901      	bls.n	800b650 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800b64c:	2303      	movs	r3, #3
 800b64e:	e05c      	b.n	800b70a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b650:	4b11      	ldr	r3, [pc, #68]	@ (800b698 <HAL_RCC_OscConfig+0x470>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d0f0      	beq.n	800b63e <HAL_RCC_OscConfig+0x416>
 800b65c:	e054      	b.n	800b708 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b65e:	4b10      	ldr	r3, [pc, #64]	@ (800b6a0 <HAL_RCC_OscConfig+0x478>)
 800b660:	2200      	movs	r2, #0
 800b662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b664:	f7fd fc64 	bl	8008f30 <HAL_GetTick>
 800b668:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b66a:	e008      	b.n	800b67e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b66c:	f7fd fc60 	bl	8008f30 <HAL_GetTick>
 800b670:	4602      	mov	r2, r0
 800b672:	693b      	ldr	r3, [r7, #16]
 800b674:	1ad3      	subs	r3, r2, r3
 800b676:	2b02      	cmp	r3, #2
 800b678:	d901      	bls.n	800b67e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800b67a:	2303      	movs	r3, #3
 800b67c:	e045      	b.n	800b70a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b67e:	4b06      	ldr	r3, [pc, #24]	@ (800b698 <HAL_RCC_OscConfig+0x470>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b686:	2b00      	cmp	r3, #0
 800b688:	d1f0      	bne.n	800b66c <HAL_RCC_OscConfig+0x444>
 800b68a:	e03d      	b.n	800b708 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	699b      	ldr	r3, [r3, #24]
 800b690:	2b01      	cmp	r3, #1
 800b692:	d107      	bne.n	800b6a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800b694:	2301      	movs	r3, #1
 800b696:	e038      	b.n	800b70a <HAL_RCC_OscConfig+0x4e2>
 800b698:	40023800 	.word	0x40023800
 800b69c:	40007000 	.word	0x40007000
 800b6a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b6a4:	4b1b      	ldr	r3, [pc, #108]	@ (800b714 <HAL_RCC_OscConfig+0x4ec>)
 800b6a6:	685b      	ldr	r3, [r3, #4]
 800b6a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	699b      	ldr	r3, [r3, #24]
 800b6ae:	2b01      	cmp	r3, #1
 800b6b0:	d028      	beq.n	800b704 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b6bc:	429a      	cmp	r2, r3
 800b6be:	d121      	bne.n	800b704 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b6ca:	429a      	cmp	r2, r3
 800b6cc:	d11a      	bne.n	800b704 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b6ce:	68fa      	ldr	r2, [r7, #12]
 800b6d0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800b6d4:	4013      	ands	r3, r2
 800b6d6:	687a      	ldr	r2, [r7, #4]
 800b6d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b6da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b6dc:	4293      	cmp	r3, r2
 800b6de:	d111      	bne.n	800b704 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6ea:	085b      	lsrs	r3, r3, #1
 800b6ec:	3b01      	subs	r3, #1
 800b6ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b6f0:	429a      	cmp	r2, r3
 800b6f2:	d107      	bne.n	800b704 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b700:	429a      	cmp	r2, r3
 800b702:	d001      	beq.n	800b708 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800b704:	2301      	movs	r3, #1
 800b706:	e000      	b.n	800b70a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800b708:	2300      	movs	r3, #0
}
 800b70a:	4618      	mov	r0, r3
 800b70c:	3718      	adds	r7, #24
 800b70e:	46bd      	mov	sp, r7
 800b710:	bd80      	pop	{r7, pc}
 800b712:	bf00      	nop
 800b714:	40023800 	.word	0x40023800

0800b718 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b084      	sub	sp, #16
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
 800b720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d101      	bne.n	800b72c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b728:	2301      	movs	r3, #1
 800b72a:	e0cc      	b.n	800b8c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b72c:	4b68      	ldr	r3, [pc, #416]	@ (800b8d0 <HAL_RCC_ClockConfig+0x1b8>)
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	f003 0307 	and.w	r3, r3, #7
 800b734:	683a      	ldr	r2, [r7, #0]
 800b736:	429a      	cmp	r2, r3
 800b738:	d90c      	bls.n	800b754 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b73a:	4b65      	ldr	r3, [pc, #404]	@ (800b8d0 <HAL_RCC_ClockConfig+0x1b8>)
 800b73c:	683a      	ldr	r2, [r7, #0]
 800b73e:	b2d2      	uxtb	r2, r2
 800b740:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b742:	4b63      	ldr	r3, [pc, #396]	@ (800b8d0 <HAL_RCC_ClockConfig+0x1b8>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	f003 0307 	and.w	r3, r3, #7
 800b74a:	683a      	ldr	r2, [r7, #0]
 800b74c:	429a      	cmp	r2, r3
 800b74e:	d001      	beq.n	800b754 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b750:	2301      	movs	r3, #1
 800b752:	e0b8      	b.n	800b8c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	f003 0302 	and.w	r3, r3, #2
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d020      	beq.n	800b7a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	f003 0304 	and.w	r3, r3, #4
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d005      	beq.n	800b778 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b76c:	4b59      	ldr	r3, [pc, #356]	@ (800b8d4 <HAL_RCC_ClockConfig+0x1bc>)
 800b76e:	689b      	ldr	r3, [r3, #8]
 800b770:	4a58      	ldr	r2, [pc, #352]	@ (800b8d4 <HAL_RCC_ClockConfig+0x1bc>)
 800b772:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800b776:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	f003 0308 	and.w	r3, r3, #8
 800b780:	2b00      	cmp	r3, #0
 800b782:	d005      	beq.n	800b790 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b784:	4b53      	ldr	r3, [pc, #332]	@ (800b8d4 <HAL_RCC_ClockConfig+0x1bc>)
 800b786:	689b      	ldr	r3, [r3, #8]
 800b788:	4a52      	ldr	r2, [pc, #328]	@ (800b8d4 <HAL_RCC_ClockConfig+0x1bc>)
 800b78a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800b78e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b790:	4b50      	ldr	r3, [pc, #320]	@ (800b8d4 <HAL_RCC_ClockConfig+0x1bc>)
 800b792:	689b      	ldr	r3, [r3, #8]
 800b794:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	689b      	ldr	r3, [r3, #8]
 800b79c:	494d      	ldr	r1, [pc, #308]	@ (800b8d4 <HAL_RCC_ClockConfig+0x1bc>)
 800b79e:	4313      	orrs	r3, r2
 800b7a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	f003 0301 	and.w	r3, r3, #1
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d044      	beq.n	800b838 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	685b      	ldr	r3, [r3, #4]
 800b7b2:	2b01      	cmp	r3, #1
 800b7b4:	d107      	bne.n	800b7c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b7b6:	4b47      	ldr	r3, [pc, #284]	@ (800b8d4 <HAL_RCC_ClockConfig+0x1bc>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d119      	bne.n	800b7f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	e07f      	b.n	800b8c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	685b      	ldr	r3, [r3, #4]
 800b7ca:	2b02      	cmp	r3, #2
 800b7cc:	d003      	beq.n	800b7d6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b7d2:	2b03      	cmp	r3, #3
 800b7d4:	d107      	bne.n	800b7e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b7d6:	4b3f      	ldr	r3, [pc, #252]	@ (800b8d4 <HAL_RCC_ClockConfig+0x1bc>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d109      	bne.n	800b7f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b7e2:	2301      	movs	r3, #1
 800b7e4:	e06f      	b.n	800b8c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b7e6:	4b3b      	ldr	r3, [pc, #236]	@ (800b8d4 <HAL_RCC_ClockConfig+0x1bc>)
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	f003 0302 	and.w	r3, r3, #2
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d101      	bne.n	800b7f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	e067      	b.n	800b8c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b7f6:	4b37      	ldr	r3, [pc, #220]	@ (800b8d4 <HAL_RCC_ClockConfig+0x1bc>)
 800b7f8:	689b      	ldr	r3, [r3, #8]
 800b7fa:	f023 0203 	bic.w	r2, r3, #3
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	685b      	ldr	r3, [r3, #4]
 800b802:	4934      	ldr	r1, [pc, #208]	@ (800b8d4 <HAL_RCC_ClockConfig+0x1bc>)
 800b804:	4313      	orrs	r3, r2
 800b806:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b808:	f7fd fb92 	bl	8008f30 <HAL_GetTick>
 800b80c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b80e:	e00a      	b.n	800b826 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b810:	f7fd fb8e 	bl	8008f30 <HAL_GetTick>
 800b814:	4602      	mov	r2, r0
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	1ad3      	subs	r3, r2, r3
 800b81a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b81e:	4293      	cmp	r3, r2
 800b820:	d901      	bls.n	800b826 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b822:	2303      	movs	r3, #3
 800b824:	e04f      	b.n	800b8c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b826:	4b2b      	ldr	r3, [pc, #172]	@ (800b8d4 <HAL_RCC_ClockConfig+0x1bc>)
 800b828:	689b      	ldr	r3, [r3, #8]
 800b82a:	f003 020c 	and.w	r2, r3, #12
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	685b      	ldr	r3, [r3, #4]
 800b832:	009b      	lsls	r3, r3, #2
 800b834:	429a      	cmp	r2, r3
 800b836:	d1eb      	bne.n	800b810 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b838:	4b25      	ldr	r3, [pc, #148]	@ (800b8d0 <HAL_RCC_ClockConfig+0x1b8>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	f003 0307 	and.w	r3, r3, #7
 800b840:	683a      	ldr	r2, [r7, #0]
 800b842:	429a      	cmp	r2, r3
 800b844:	d20c      	bcs.n	800b860 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b846:	4b22      	ldr	r3, [pc, #136]	@ (800b8d0 <HAL_RCC_ClockConfig+0x1b8>)
 800b848:	683a      	ldr	r2, [r7, #0]
 800b84a:	b2d2      	uxtb	r2, r2
 800b84c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b84e:	4b20      	ldr	r3, [pc, #128]	@ (800b8d0 <HAL_RCC_ClockConfig+0x1b8>)
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	f003 0307 	and.w	r3, r3, #7
 800b856:	683a      	ldr	r2, [r7, #0]
 800b858:	429a      	cmp	r2, r3
 800b85a:	d001      	beq.n	800b860 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b85c:	2301      	movs	r3, #1
 800b85e:	e032      	b.n	800b8c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	f003 0304 	and.w	r3, r3, #4
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d008      	beq.n	800b87e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b86c:	4b19      	ldr	r3, [pc, #100]	@ (800b8d4 <HAL_RCC_ClockConfig+0x1bc>)
 800b86e:	689b      	ldr	r3, [r3, #8]
 800b870:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	68db      	ldr	r3, [r3, #12]
 800b878:	4916      	ldr	r1, [pc, #88]	@ (800b8d4 <HAL_RCC_ClockConfig+0x1bc>)
 800b87a:	4313      	orrs	r3, r2
 800b87c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	f003 0308 	and.w	r3, r3, #8
 800b886:	2b00      	cmp	r3, #0
 800b888:	d009      	beq.n	800b89e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b88a:	4b12      	ldr	r3, [pc, #72]	@ (800b8d4 <HAL_RCC_ClockConfig+0x1bc>)
 800b88c:	689b      	ldr	r3, [r3, #8]
 800b88e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	691b      	ldr	r3, [r3, #16]
 800b896:	00db      	lsls	r3, r3, #3
 800b898:	490e      	ldr	r1, [pc, #56]	@ (800b8d4 <HAL_RCC_ClockConfig+0x1bc>)
 800b89a:	4313      	orrs	r3, r2
 800b89c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b89e:	f000 f821 	bl	800b8e4 <HAL_RCC_GetSysClockFreq>
 800b8a2:	4602      	mov	r2, r0
 800b8a4:	4b0b      	ldr	r3, [pc, #44]	@ (800b8d4 <HAL_RCC_ClockConfig+0x1bc>)
 800b8a6:	689b      	ldr	r3, [r3, #8]
 800b8a8:	091b      	lsrs	r3, r3, #4
 800b8aa:	f003 030f 	and.w	r3, r3, #15
 800b8ae:	490a      	ldr	r1, [pc, #40]	@ (800b8d8 <HAL_RCC_ClockConfig+0x1c0>)
 800b8b0:	5ccb      	ldrb	r3, [r1, r3]
 800b8b2:	fa22 f303 	lsr.w	r3, r2, r3
 800b8b6:	4a09      	ldr	r2, [pc, #36]	@ (800b8dc <HAL_RCC_ClockConfig+0x1c4>)
 800b8b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800b8ba:	4b09      	ldr	r3, [pc, #36]	@ (800b8e0 <HAL_RCC_ClockConfig+0x1c8>)
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	4618      	mov	r0, r3
 800b8c0:	f7fc ff3c 	bl	800873c <HAL_InitTick>

  return HAL_OK;
 800b8c4:	2300      	movs	r3, #0
}
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	3710      	adds	r7, #16
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}
 800b8ce:	bf00      	nop
 800b8d0:	40023c00 	.word	0x40023c00
 800b8d4:	40023800 	.word	0x40023800
 800b8d8:	08014fbc 	.word	0x08014fbc
 800b8dc:	20000298 	.word	0x20000298
 800b8e0:	2000029c 	.word	0x2000029c

0800b8e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b8e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b8e8:	b090      	sub	sp, #64	@ 0x40
 800b8ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b8fc:	4b59      	ldr	r3, [pc, #356]	@ (800ba64 <HAL_RCC_GetSysClockFreq+0x180>)
 800b8fe:	689b      	ldr	r3, [r3, #8]
 800b900:	f003 030c 	and.w	r3, r3, #12
 800b904:	2b08      	cmp	r3, #8
 800b906:	d00d      	beq.n	800b924 <HAL_RCC_GetSysClockFreq+0x40>
 800b908:	2b08      	cmp	r3, #8
 800b90a:	f200 80a1 	bhi.w	800ba50 <HAL_RCC_GetSysClockFreq+0x16c>
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d002      	beq.n	800b918 <HAL_RCC_GetSysClockFreq+0x34>
 800b912:	2b04      	cmp	r3, #4
 800b914:	d003      	beq.n	800b91e <HAL_RCC_GetSysClockFreq+0x3a>
 800b916:	e09b      	b.n	800ba50 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b918:	4b53      	ldr	r3, [pc, #332]	@ (800ba68 <HAL_RCC_GetSysClockFreq+0x184>)
 800b91a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800b91c:	e09b      	b.n	800ba56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b91e:	4b53      	ldr	r3, [pc, #332]	@ (800ba6c <HAL_RCC_GetSysClockFreq+0x188>)
 800b920:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800b922:	e098      	b.n	800ba56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b924:	4b4f      	ldr	r3, [pc, #316]	@ (800ba64 <HAL_RCC_GetSysClockFreq+0x180>)
 800b926:	685b      	ldr	r3, [r3, #4]
 800b928:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b92c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b92e:	4b4d      	ldr	r3, [pc, #308]	@ (800ba64 <HAL_RCC_GetSysClockFreq+0x180>)
 800b930:	685b      	ldr	r3, [r3, #4]
 800b932:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b936:	2b00      	cmp	r3, #0
 800b938:	d028      	beq.n	800b98c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b93a:	4b4a      	ldr	r3, [pc, #296]	@ (800ba64 <HAL_RCC_GetSysClockFreq+0x180>)
 800b93c:	685b      	ldr	r3, [r3, #4]
 800b93e:	099b      	lsrs	r3, r3, #6
 800b940:	2200      	movs	r2, #0
 800b942:	623b      	str	r3, [r7, #32]
 800b944:	627a      	str	r2, [r7, #36]	@ 0x24
 800b946:	6a3b      	ldr	r3, [r7, #32]
 800b948:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800b94c:	2100      	movs	r1, #0
 800b94e:	4b47      	ldr	r3, [pc, #284]	@ (800ba6c <HAL_RCC_GetSysClockFreq+0x188>)
 800b950:	fb03 f201 	mul.w	r2, r3, r1
 800b954:	2300      	movs	r3, #0
 800b956:	fb00 f303 	mul.w	r3, r0, r3
 800b95a:	4413      	add	r3, r2
 800b95c:	4a43      	ldr	r2, [pc, #268]	@ (800ba6c <HAL_RCC_GetSysClockFreq+0x188>)
 800b95e:	fba0 1202 	umull	r1, r2, r0, r2
 800b962:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b964:	460a      	mov	r2, r1
 800b966:	62ba      	str	r2, [r7, #40]	@ 0x28
 800b968:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b96a:	4413      	add	r3, r2
 800b96c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b96e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b970:	2200      	movs	r2, #0
 800b972:	61bb      	str	r3, [r7, #24]
 800b974:	61fa      	str	r2, [r7, #28]
 800b976:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b97a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800b97e:	f7f5 f933 	bl	8000be8 <__aeabi_uldivmod>
 800b982:	4602      	mov	r2, r0
 800b984:	460b      	mov	r3, r1
 800b986:	4613      	mov	r3, r2
 800b988:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b98a:	e053      	b.n	800ba34 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b98c:	4b35      	ldr	r3, [pc, #212]	@ (800ba64 <HAL_RCC_GetSysClockFreq+0x180>)
 800b98e:	685b      	ldr	r3, [r3, #4]
 800b990:	099b      	lsrs	r3, r3, #6
 800b992:	2200      	movs	r2, #0
 800b994:	613b      	str	r3, [r7, #16]
 800b996:	617a      	str	r2, [r7, #20]
 800b998:	693b      	ldr	r3, [r7, #16]
 800b99a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800b99e:	f04f 0b00 	mov.w	fp, #0
 800b9a2:	4652      	mov	r2, sl
 800b9a4:	465b      	mov	r3, fp
 800b9a6:	f04f 0000 	mov.w	r0, #0
 800b9aa:	f04f 0100 	mov.w	r1, #0
 800b9ae:	0159      	lsls	r1, r3, #5
 800b9b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b9b4:	0150      	lsls	r0, r2, #5
 800b9b6:	4602      	mov	r2, r0
 800b9b8:	460b      	mov	r3, r1
 800b9ba:	ebb2 080a 	subs.w	r8, r2, sl
 800b9be:	eb63 090b 	sbc.w	r9, r3, fp
 800b9c2:	f04f 0200 	mov.w	r2, #0
 800b9c6:	f04f 0300 	mov.w	r3, #0
 800b9ca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800b9ce:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800b9d2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800b9d6:	ebb2 0408 	subs.w	r4, r2, r8
 800b9da:	eb63 0509 	sbc.w	r5, r3, r9
 800b9de:	f04f 0200 	mov.w	r2, #0
 800b9e2:	f04f 0300 	mov.w	r3, #0
 800b9e6:	00eb      	lsls	r3, r5, #3
 800b9e8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b9ec:	00e2      	lsls	r2, r4, #3
 800b9ee:	4614      	mov	r4, r2
 800b9f0:	461d      	mov	r5, r3
 800b9f2:	eb14 030a 	adds.w	r3, r4, sl
 800b9f6:	603b      	str	r3, [r7, #0]
 800b9f8:	eb45 030b 	adc.w	r3, r5, fp
 800b9fc:	607b      	str	r3, [r7, #4]
 800b9fe:	f04f 0200 	mov.w	r2, #0
 800ba02:	f04f 0300 	mov.w	r3, #0
 800ba06:	e9d7 4500 	ldrd	r4, r5, [r7]
 800ba0a:	4629      	mov	r1, r5
 800ba0c:	028b      	lsls	r3, r1, #10
 800ba0e:	4621      	mov	r1, r4
 800ba10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800ba14:	4621      	mov	r1, r4
 800ba16:	028a      	lsls	r2, r1, #10
 800ba18:	4610      	mov	r0, r2
 800ba1a:	4619      	mov	r1, r3
 800ba1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba1e:	2200      	movs	r2, #0
 800ba20:	60bb      	str	r3, [r7, #8]
 800ba22:	60fa      	str	r2, [r7, #12]
 800ba24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ba28:	f7f5 f8de 	bl	8000be8 <__aeabi_uldivmod>
 800ba2c:	4602      	mov	r2, r0
 800ba2e:	460b      	mov	r3, r1
 800ba30:	4613      	mov	r3, r2
 800ba32:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800ba34:	4b0b      	ldr	r3, [pc, #44]	@ (800ba64 <HAL_RCC_GetSysClockFreq+0x180>)
 800ba36:	685b      	ldr	r3, [r3, #4]
 800ba38:	0c1b      	lsrs	r3, r3, #16
 800ba3a:	f003 0303 	and.w	r3, r3, #3
 800ba3e:	3301      	adds	r3, #1
 800ba40:	005b      	lsls	r3, r3, #1
 800ba42:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800ba44:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ba46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba48:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba4c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800ba4e:	e002      	b.n	800ba56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800ba50:	4b05      	ldr	r3, [pc, #20]	@ (800ba68 <HAL_RCC_GetSysClockFreq+0x184>)
 800ba52:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800ba54:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ba56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800ba58:	4618      	mov	r0, r3
 800ba5a:	3740      	adds	r7, #64	@ 0x40
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ba62:	bf00      	nop
 800ba64:	40023800 	.word	0x40023800
 800ba68:	00f42400 	.word	0x00f42400
 800ba6c:	017d7840 	.word	0x017d7840

0800ba70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ba70:	b480      	push	{r7}
 800ba72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ba74:	4b03      	ldr	r3, [pc, #12]	@ (800ba84 <HAL_RCC_GetHCLKFreq+0x14>)
 800ba76:	681b      	ldr	r3, [r3, #0]
}
 800ba78:	4618      	mov	r0, r3
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba80:	4770      	bx	lr
 800ba82:	bf00      	nop
 800ba84:	20000298 	.word	0x20000298

0800ba88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ba8c:	f7ff fff0 	bl	800ba70 <HAL_RCC_GetHCLKFreq>
 800ba90:	4602      	mov	r2, r0
 800ba92:	4b05      	ldr	r3, [pc, #20]	@ (800baa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ba94:	689b      	ldr	r3, [r3, #8]
 800ba96:	0a9b      	lsrs	r3, r3, #10
 800ba98:	f003 0307 	and.w	r3, r3, #7
 800ba9c:	4903      	ldr	r1, [pc, #12]	@ (800baac <HAL_RCC_GetPCLK1Freq+0x24>)
 800ba9e:	5ccb      	ldrb	r3, [r1, r3]
 800baa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800baa4:	4618      	mov	r0, r3
 800baa6:	bd80      	pop	{r7, pc}
 800baa8:	40023800 	.word	0x40023800
 800baac:	08014fcc 	.word	0x08014fcc

0800bab0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800bab4:	f7ff ffdc 	bl	800ba70 <HAL_RCC_GetHCLKFreq>
 800bab8:	4602      	mov	r2, r0
 800baba:	4b05      	ldr	r3, [pc, #20]	@ (800bad0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800babc:	689b      	ldr	r3, [r3, #8]
 800babe:	0b5b      	lsrs	r3, r3, #13
 800bac0:	f003 0307 	and.w	r3, r3, #7
 800bac4:	4903      	ldr	r1, [pc, #12]	@ (800bad4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800bac6:	5ccb      	ldrb	r3, [r1, r3]
 800bac8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bacc:	4618      	mov	r0, r3
 800bace:	bd80      	pop	{r7, pc}
 800bad0:	40023800 	.word	0x40023800
 800bad4:	08014fcc 	.word	0x08014fcc

0800bad8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800bad8:	b480      	push	{r7}
 800bada:	b083      	sub	sp, #12
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
 800bae0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	220f      	movs	r2, #15
 800bae6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800bae8:	4b12      	ldr	r3, [pc, #72]	@ (800bb34 <HAL_RCC_GetClockConfig+0x5c>)
 800baea:	689b      	ldr	r3, [r3, #8]
 800baec:	f003 0203 	and.w	r2, r3, #3
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800baf4:	4b0f      	ldr	r3, [pc, #60]	@ (800bb34 <HAL_RCC_GetClockConfig+0x5c>)
 800baf6:	689b      	ldr	r3, [r3, #8]
 800baf8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800bb00:	4b0c      	ldr	r3, [pc, #48]	@ (800bb34 <HAL_RCC_GetClockConfig+0x5c>)
 800bb02:	689b      	ldr	r3, [r3, #8]
 800bb04:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800bb0c:	4b09      	ldr	r3, [pc, #36]	@ (800bb34 <HAL_RCC_GetClockConfig+0x5c>)
 800bb0e:	689b      	ldr	r3, [r3, #8]
 800bb10:	08db      	lsrs	r3, r3, #3
 800bb12:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800bb1a:	4b07      	ldr	r3, [pc, #28]	@ (800bb38 <HAL_RCC_GetClockConfig+0x60>)
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	f003 0207 	and.w	r2, r3, #7
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	601a      	str	r2, [r3, #0]
}
 800bb26:	bf00      	nop
 800bb28:	370c      	adds	r7, #12
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb30:	4770      	bx	lr
 800bb32:	bf00      	nop
 800bb34:	40023800 	.word	0x40023800
 800bb38:	40023c00 	.word	0x40023c00

0800bb3c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b086      	sub	sp, #24
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800bb44:	2300      	movs	r3, #0
 800bb46:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800bb48:	2300      	movs	r3, #0
 800bb4a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	f003 0301 	and.w	r3, r3, #1
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d105      	bne.n	800bb64 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d035      	beq.n	800bbd0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800bb64:	4b62      	ldr	r3, [pc, #392]	@ (800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800bb66:	2200      	movs	r2, #0
 800bb68:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800bb6a:	f7fd f9e1 	bl	8008f30 <HAL_GetTick>
 800bb6e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800bb70:	e008      	b.n	800bb84 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800bb72:	f7fd f9dd 	bl	8008f30 <HAL_GetTick>
 800bb76:	4602      	mov	r2, r0
 800bb78:	697b      	ldr	r3, [r7, #20]
 800bb7a:	1ad3      	subs	r3, r2, r3
 800bb7c:	2b02      	cmp	r3, #2
 800bb7e:	d901      	bls.n	800bb84 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bb80:	2303      	movs	r3, #3
 800bb82:	e0b0      	b.n	800bce6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800bb84:	4b5b      	ldr	r3, [pc, #364]	@ (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d1f0      	bne.n	800bb72 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	685b      	ldr	r3, [r3, #4]
 800bb94:	019a      	lsls	r2, r3, #6
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	689b      	ldr	r3, [r3, #8]
 800bb9a:	071b      	lsls	r3, r3, #28
 800bb9c:	4955      	ldr	r1, [pc, #340]	@ (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bb9e:	4313      	orrs	r3, r2
 800bba0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800bba4:	4b52      	ldr	r3, [pc, #328]	@ (800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800bba6:	2201      	movs	r2, #1
 800bba8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800bbaa:	f7fd f9c1 	bl	8008f30 <HAL_GetTick>
 800bbae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800bbb0:	e008      	b.n	800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800bbb2:	f7fd f9bd 	bl	8008f30 <HAL_GetTick>
 800bbb6:	4602      	mov	r2, r0
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	1ad3      	subs	r3, r2, r3
 800bbbc:	2b02      	cmp	r3, #2
 800bbbe:	d901      	bls.n	800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bbc0:	2303      	movs	r3, #3
 800bbc2:	e090      	b.n	800bce6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800bbc4:	4b4b      	ldr	r3, [pc, #300]	@ (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d0f0      	beq.n	800bbb2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	f003 0302 	and.w	r3, r3, #2
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	f000 8083 	beq.w	800bce4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800bbde:	2300      	movs	r3, #0
 800bbe0:	60fb      	str	r3, [r7, #12]
 800bbe2:	4b44      	ldr	r3, [pc, #272]	@ (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bbe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bbe6:	4a43      	ldr	r2, [pc, #268]	@ (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bbe8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bbec:	6413      	str	r3, [r2, #64]	@ 0x40
 800bbee:	4b41      	ldr	r3, [pc, #260]	@ (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bbf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bbf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bbf6:	60fb      	str	r3, [r7, #12]
 800bbf8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800bbfa:	4b3f      	ldr	r3, [pc, #252]	@ (800bcf8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	4a3e      	ldr	r2, [pc, #248]	@ (800bcf8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800bc00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bc04:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800bc06:	f7fd f993 	bl	8008f30 <HAL_GetTick>
 800bc0a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800bc0c:	e008      	b.n	800bc20 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bc0e:	f7fd f98f 	bl	8008f30 <HAL_GetTick>
 800bc12:	4602      	mov	r2, r0
 800bc14:	697b      	ldr	r3, [r7, #20]
 800bc16:	1ad3      	subs	r3, r2, r3
 800bc18:	2b02      	cmp	r3, #2
 800bc1a:	d901      	bls.n	800bc20 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800bc1c:	2303      	movs	r3, #3
 800bc1e:	e062      	b.n	800bce6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800bc20:	4b35      	ldr	r3, [pc, #212]	@ (800bcf8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d0f0      	beq.n	800bc0e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800bc2c:	4b31      	ldr	r3, [pc, #196]	@ (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bc2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bc30:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bc34:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800bc36:	693b      	ldr	r3, [r7, #16]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d02f      	beq.n	800bc9c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	68db      	ldr	r3, [r3, #12]
 800bc40:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bc44:	693a      	ldr	r2, [r7, #16]
 800bc46:	429a      	cmp	r2, r3
 800bc48:	d028      	beq.n	800bc9c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bc4a:	4b2a      	ldr	r3, [pc, #168]	@ (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bc4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bc4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bc52:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800bc54:	4b29      	ldr	r3, [pc, #164]	@ (800bcfc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800bc56:	2201      	movs	r2, #1
 800bc58:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800bc5a:	4b28      	ldr	r3, [pc, #160]	@ (800bcfc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800bc60:	4a24      	ldr	r2, [pc, #144]	@ (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bc62:	693b      	ldr	r3, [r7, #16]
 800bc64:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800bc66:	4b23      	ldr	r3, [pc, #140]	@ (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bc68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bc6a:	f003 0301 	and.w	r3, r3, #1
 800bc6e:	2b01      	cmp	r3, #1
 800bc70:	d114      	bne.n	800bc9c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800bc72:	f7fd f95d 	bl	8008f30 <HAL_GetTick>
 800bc76:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bc78:	e00a      	b.n	800bc90 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bc7a:	f7fd f959 	bl	8008f30 <HAL_GetTick>
 800bc7e:	4602      	mov	r2, r0
 800bc80:	697b      	ldr	r3, [r7, #20]
 800bc82:	1ad3      	subs	r3, r2, r3
 800bc84:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bc88:	4293      	cmp	r3, r2
 800bc8a:	d901      	bls.n	800bc90 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800bc8c:	2303      	movs	r3, #3
 800bc8e:	e02a      	b.n	800bce6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bc90:	4b18      	ldr	r3, [pc, #96]	@ (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bc92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bc94:	f003 0302 	and.w	r3, r3, #2
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d0ee      	beq.n	800bc7a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	68db      	ldr	r3, [r3, #12]
 800bca0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bca4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bca8:	d10d      	bne.n	800bcc6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800bcaa:	4b12      	ldr	r3, [pc, #72]	@ (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bcac:	689b      	ldr	r3, [r3, #8]
 800bcae:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	68db      	ldr	r3, [r3, #12]
 800bcb6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800bcba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bcbe:	490d      	ldr	r1, [pc, #52]	@ (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bcc0:	4313      	orrs	r3, r2
 800bcc2:	608b      	str	r3, [r1, #8]
 800bcc4:	e005      	b.n	800bcd2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800bcc6:	4b0b      	ldr	r3, [pc, #44]	@ (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bcc8:	689b      	ldr	r3, [r3, #8]
 800bcca:	4a0a      	ldr	r2, [pc, #40]	@ (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bccc:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800bcd0:	6093      	str	r3, [r2, #8]
 800bcd2:	4b08      	ldr	r3, [pc, #32]	@ (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bcd4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	68db      	ldr	r3, [r3, #12]
 800bcda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bcde:	4905      	ldr	r1, [pc, #20]	@ (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bce0:	4313      	orrs	r3, r2
 800bce2:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800bce4:	2300      	movs	r3, #0
}
 800bce6:	4618      	mov	r0, r3
 800bce8:	3718      	adds	r7, #24
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd80      	pop	{r7, pc}
 800bcee:	bf00      	nop
 800bcf0:	42470068 	.word	0x42470068
 800bcf4:	40023800 	.word	0x40023800
 800bcf8:	40007000 	.word	0x40007000
 800bcfc:	42470e40 	.word	0x42470e40

0800bd00 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b084      	sub	sp, #16
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800bd08:	2301      	movs	r3, #1
 800bd0a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d101      	bne.n	800bd16 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800bd12:	2301      	movs	r3, #1
 800bd14:	e073      	b.n	800bdfe <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	7f5b      	ldrb	r3, [r3, #29]
 800bd1a:	b2db      	uxtb	r3, r3
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d105      	bne.n	800bd2c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2200      	movs	r2, #0
 800bd24:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800bd26:	6878      	ldr	r0, [r7, #4]
 800bd28:	f7fc fc34 	bl	8008594 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2202      	movs	r2, #2
 800bd30:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	68db      	ldr	r3, [r3, #12]
 800bd38:	f003 0310 	and.w	r3, r3, #16
 800bd3c:	2b10      	cmp	r3, #16
 800bd3e:	d055      	beq.n	800bdec <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	22ca      	movs	r2, #202	@ 0xca
 800bd46:	625a      	str	r2, [r3, #36]	@ 0x24
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	2253      	movs	r2, #83	@ 0x53
 800bd4e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800bd50:	6878      	ldr	r0, [r7, #4]
 800bd52:	f000 fa49 	bl	800c1e8 <RTC_EnterInitMode>
 800bd56:	4603      	mov	r3, r0
 800bd58:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800bd5a:	7bfb      	ldrb	r3, [r7, #15]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d12c      	bne.n	800bdba <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	689b      	ldr	r3, [r3, #8]
 800bd66:	687a      	ldr	r2, [r7, #4]
 800bd68:	6812      	ldr	r2, [r2, #0]
 800bd6a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800bd6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bd72:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	6899      	ldr	r1, [r3, #8]
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	685a      	ldr	r2, [r3, #4]
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	691b      	ldr	r3, [r3, #16]
 800bd82:	431a      	orrs	r2, r3
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	695b      	ldr	r3, [r3, #20]
 800bd88:	431a      	orrs	r2, r3
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	430a      	orrs	r2, r1
 800bd90:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	687a      	ldr	r2, [r7, #4]
 800bd98:	68d2      	ldr	r2, [r2, #12]
 800bd9a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	6919      	ldr	r1, [r3, #16]
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	689b      	ldr	r3, [r3, #8]
 800bda6:	041a      	lsls	r2, r3, #16
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	430a      	orrs	r2, r1
 800bdae:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800bdb0:	6878      	ldr	r0, [r7, #4]
 800bdb2:	f000 fa50 	bl	800c256 <RTC_ExitInitMode>
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800bdba:	7bfb      	ldrb	r3, [r7, #15]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d110      	bne.n	800bde2 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800bdce:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	699a      	ldr	r2, [r3, #24]
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	430a      	orrs	r2, r1
 800bde0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	22ff      	movs	r2, #255	@ 0xff
 800bde8:	625a      	str	r2, [r3, #36]	@ 0x24
 800bdea:	e001      	b.n	800bdf0 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800bdec:	2300      	movs	r3, #0
 800bdee:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800bdf0:	7bfb      	ldrb	r3, [r7, #15]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d102      	bne.n	800bdfc <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2201      	movs	r2, #1
 800bdfa:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800bdfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdfe:	4618      	mov	r0, r3
 800be00:	3710      	adds	r7, #16
 800be02:	46bd      	mov	sp, r7
 800be04:	bd80      	pop	{r7, pc}

0800be06 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800be06:	b590      	push	{r4, r7, lr}
 800be08:	b087      	sub	sp, #28
 800be0a:	af00      	add	r7, sp, #0
 800be0c:	60f8      	str	r0, [r7, #12]
 800be0e:	60b9      	str	r1, [r7, #8]
 800be10:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800be12:	2300      	movs	r3, #0
 800be14:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	7f1b      	ldrb	r3, [r3, #28]
 800be1a:	2b01      	cmp	r3, #1
 800be1c:	d101      	bne.n	800be22 <HAL_RTC_SetTime+0x1c>
 800be1e:	2302      	movs	r3, #2
 800be20:	e087      	b.n	800bf32 <HAL_RTC_SetTime+0x12c>
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	2201      	movs	r2, #1
 800be26:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	2202      	movs	r2, #2
 800be2c:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d126      	bne.n	800be82 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	689b      	ldr	r3, [r3, #8]
 800be3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d102      	bne.n	800be48 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800be42:	68bb      	ldr	r3, [r7, #8]
 800be44:	2200      	movs	r2, #0
 800be46:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800be48:	68bb      	ldr	r3, [r7, #8]
 800be4a:	781b      	ldrb	r3, [r3, #0]
 800be4c:	4618      	mov	r0, r3
 800be4e:	f000 fa27 	bl	800c2a0 <RTC_ByteToBcd2>
 800be52:	4603      	mov	r3, r0
 800be54:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800be56:	68bb      	ldr	r3, [r7, #8]
 800be58:	785b      	ldrb	r3, [r3, #1]
 800be5a:	4618      	mov	r0, r3
 800be5c:	f000 fa20 	bl	800c2a0 <RTC_ByteToBcd2>
 800be60:	4603      	mov	r3, r0
 800be62:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800be64:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800be66:	68bb      	ldr	r3, [r7, #8]
 800be68:	789b      	ldrb	r3, [r3, #2]
 800be6a:	4618      	mov	r0, r3
 800be6c:	f000 fa18 	bl	800c2a0 <RTC_ByteToBcd2>
 800be70:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800be72:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800be76:	68bb      	ldr	r3, [r7, #8]
 800be78:	78db      	ldrb	r3, [r3, #3]
 800be7a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800be7c:	4313      	orrs	r3, r2
 800be7e:	617b      	str	r3, [r7, #20]
 800be80:	e018      	b.n	800beb4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	689b      	ldr	r3, [r3, #8]
 800be88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d102      	bne.n	800be96 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	2200      	movs	r2, #0
 800be94:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	781b      	ldrb	r3, [r3, #0]
 800be9a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800be9c:	68bb      	ldr	r3, [r7, #8]
 800be9e:	785b      	ldrb	r3, [r3, #1]
 800bea0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800bea2:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800bea4:	68ba      	ldr	r2, [r7, #8]
 800bea6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800bea8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800beaa:	68bb      	ldr	r3, [r7, #8]
 800beac:	78db      	ldrb	r3, [r3, #3]
 800beae:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800beb0:	4313      	orrs	r3, r2
 800beb2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	22ca      	movs	r2, #202	@ 0xca
 800beba:	625a      	str	r2, [r3, #36]	@ 0x24
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	2253      	movs	r2, #83	@ 0x53
 800bec2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800bec4:	68f8      	ldr	r0, [r7, #12]
 800bec6:	f000 f98f 	bl	800c1e8 <RTC_EnterInitMode>
 800beca:	4603      	mov	r3, r0
 800becc:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800bece:	7cfb      	ldrb	r3, [r7, #19]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d120      	bne.n	800bf16 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	681a      	ldr	r2, [r3, #0]
 800bed8:	697b      	ldr	r3, [r7, #20]
 800beda:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800bede:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800bee2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	689a      	ldr	r2, [r3, #8]
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800bef2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	6899      	ldr	r1, [r3, #8]
 800befa:	68bb      	ldr	r3, [r7, #8]
 800befc:	68da      	ldr	r2, [r3, #12]
 800befe:	68bb      	ldr	r3, [r7, #8]
 800bf00:	691b      	ldr	r3, [r3, #16]
 800bf02:	431a      	orrs	r2, r3
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	430a      	orrs	r2, r1
 800bf0a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800bf0c:	68f8      	ldr	r0, [r7, #12]
 800bf0e:	f000 f9a2 	bl	800c256 <RTC_ExitInitMode>
 800bf12:	4603      	mov	r3, r0
 800bf14:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800bf16:	7cfb      	ldrb	r3, [r7, #19]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d102      	bne.n	800bf22 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	2201      	movs	r2, #1
 800bf20:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	22ff      	movs	r2, #255	@ 0xff
 800bf28:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	771a      	strb	r2, [r3, #28]

  return status;
 800bf30:	7cfb      	ldrb	r3, [r7, #19]
}
 800bf32:	4618      	mov	r0, r3
 800bf34:	371c      	adds	r7, #28
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd90      	pop	{r4, r7, pc}

0800bf3a <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800bf3a:	b580      	push	{r7, lr}
 800bf3c:	b086      	sub	sp, #24
 800bf3e:	af00      	add	r7, sp, #0
 800bf40:	60f8      	str	r0, [r7, #12]
 800bf42:	60b9      	str	r1, [r7, #8]
 800bf44:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800bf46:	2300      	movs	r3, #0
 800bf48:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bf50:	68bb      	ldr	r3, [r7, #8]
 800bf52:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	691b      	ldr	r3, [r3, #16]
 800bf5a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800bf5e:	68bb      	ldr	r3, [r7, #8]
 800bf60:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800bf6c:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800bf70:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800bf72:	697b      	ldr	r3, [r7, #20]
 800bf74:	0c1b      	lsrs	r3, r3, #16
 800bf76:	b2db      	uxtb	r3, r3
 800bf78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bf7c:	b2da      	uxtb	r2, r3
 800bf7e:	68bb      	ldr	r3, [r7, #8]
 800bf80:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800bf82:	697b      	ldr	r3, [r7, #20]
 800bf84:	0a1b      	lsrs	r3, r3, #8
 800bf86:	b2db      	uxtb	r3, r3
 800bf88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bf8c:	b2da      	uxtb	r2, r3
 800bf8e:	68bb      	ldr	r3, [r7, #8]
 800bf90:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800bf92:	697b      	ldr	r3, [r7, #20]
 800bf94:	b2db      	uxtb	r3, r3
 800bf96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bf9a:	b2da      	uxtb	r2, r3
 800bf9c:	68bb      	ldr	r3, [r7, #8]
 800bf9e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800bfa0:	697b      	ldr	r3, [r7, #20]
 800bfa2:	0d9b      	lsrs	r3, r3, #22
 800bfa4:	b2db      	uxtb	r3, r3
 800bfa6:	f003 0301 	and.w	r3, r3, #1
 800bfaa:	b2da      	uxtb	r2, r3
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d11a      	bne.n	800bfec <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800bfb6:	68bb      	ldr	r3, [r7, #8]
 800bfb8:	781b      	ldrb	r3, [r3, #0]
 800bfba:	4618      	mov	r0, r3
 800bfbc:	f000 f98e 	bl	800c2dc <RTC_Bcd2ToByte>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	461a      	mov	r2, r3
 800bfc4:	68bb      	ldr	r3, [r7, #8]
 800bfc6:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800bfc8:	68bb      	ldr	r3, [r7, #8]
 800bfca:	785b      	ldrb	r3, [r3, #1]
 800bfcc:	4618      	mov	r0, r3
 800bfce:	f000 f985 	bl	800c2dc <RTC_Bcd2ToByte>
 800bfd2:	4603      	mov	r3, r0
 800bfd4:	461a      	mov	r2, r3
 800bfd6:	68bb      	ldr	r3, [r7, #8]
 800bfd8:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800bfda:	68bb      	ldr	r3, [r7, #8]
 800bfdc:	789b      	ldrb	r3, [r3, #2]
 800bfde:	4618      	mov	r0, r3
 800bfe0:	f000 f97c 	bl	800c2dc <RTC_Bcd2ToByte>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	461a      	mov	r2, r3
 800bfe8:	68bb      	ldr	r3, [r7, #8]
 800bfea:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800bfec:	2300      	movs	r3, #0
}
 800bfee:	4618      	mov	r0, r3
 800bff0:	3718      	adds	r7, #24
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bd80      	pop	{r7, pc}

0800bff6 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800bff6:	b590      	push	{r4, r7, lr}
 800bff8:	b087      	sub	sp, #28
 800bffa:	af00      	add	r7, sp, #0
 800bffc:	60f8      	str	r0, [r7, #12]
 800bffe:	60b9      	str	r1, [r7, #8]
 800c000:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800c002:	2300      	movs	r3, #0
 800c004:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	7f1b      	ldrb	r3, [r3, #28]
 800c00a:	2b01      	cmp	r3, #1
 800c00c:	d101      	bne.n	800c012 <HAL_RTC_SetDate+0x1c>
 800c00e:	2302      	movs	r3, #2
 800c010:	e071      	b.n	800c0f6 <HAL_RTC_SetDate+0x100>
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	2201      	movs	r2, #1
 800c016:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	2202      	movs	r2, #2
 800c01c:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d10e      	bne.n	800c042 <HAL_RTC_SetDate+0x4c>
 800c024:	68bb      	ldr	r3, [r7, #8]
 800c026:	785b      	ldrb	r3, [r3, #1]
 800c028:	f003 0310 	and.w	r3, r3, #16
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d008      	beq.n	800c042 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c030:	68bb      	ldr	r3, [r7, #8]
 800c032:	785b      	ldrb	r3, [r3, #1]
 800c034:	f023 0310 	bic.w	r3, r3, #16
 800c038:	b2db      	uxtb	r3, r3
 800c03a:	330a      	adds	r3, #10
 800c03c:	b2da      	uxtb	r2, r3
 800c03e:	68bb      	ldr	r3, [r7, #8]
 800c040:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d11c      	bne.n	800c082 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c048:	68bb      	ldr	r3, [r7, #8]
 800c04a:	78db      	ldrb	r3, [r3, #3]
 800c04c:	4618      	mov	r0, r3
 800c04e:	f000 f927 	bl	800c2a0 <RTC_ByteToBcd2>
 800c052:	4603      	mov	r3, r0
 800c054:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c056:	68bb      	ldr	r3, [r7, #8]
 800c058:	785b      	ldrb	r3, [r3, #1]
 800c05a:	4618      	mov	r0, r3
 800c05c:	f000 f920 	bl	800c2a0 <RTC_ByteToBcd2>
 800c060:	4603      	mov	r3, r0
 800c062:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c064:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800c066:	68bb      	ldr	r3, [r7, #8]
 800c068:	789b      	ldrb	r3, [r3, #2]
 800c06a:	4618      	mov	r0, r3
 800c06c:	f000 f918 	bl	800c2a0 <RTC_ByteToBcd2>
 800c070:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c072:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800c076:	68bb      	ldr	r3, [r7, #8]
 800c078:	781b      	ldrb	r3, [r3, #0]
 800c07a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c07c:	4313      	orrs	r3, r2
 800c07e:	617b      	str	r3, [r7, #20]
 800c080:	e00e      	b.n	800c0a0 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c082:	68bb      	ldr	r3, [r7, #8]
 800c084:	78db      	ldrb	r3, [r3, #3]
 800c086:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c088:	68bb      	ldr	r3, [r7, #8]
 800c08a:	785b      	ldrb	r3, [r3, #1]
 800c08c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c08e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800c090:	68ba      	ldr	r2, [r7, #8]
 800c092:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c094:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800c096:	68bb      	ldr	r3, [r7, #8]
 800c098:	781b      	ldrb	r3, [r3, #0]
 800c09a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c09c:	4313      	orrs	r3, r2
 800c09e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	22ca      	movs	r2, #202	@ 0xca
 800c0a6:	625a      	str	r2, [r3, #36]	@ 0x24
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	2253      	movs	r2, #83	@ 0x53
 800c0ae:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c0b0:	68f8      	ldr	r0, [r7, #12]
 800c0b2:	f000 f899 	bl	800c1e8 <RTC_EnterInitMode>
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800c0ba:	7cfb      	ldrb	r3, [r7, #19]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d10c      	bne.n	800c0da <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	681a      	ldr	r2, [r3, #0]
 800c0c4:	697b      	ldr	r3, [r7, #20]
 800c0c6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c0ca:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c0ce:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c0d0:	68f8      	ldr	r0, [r7, #12]
 800c0d2:	f000 f8c0 	bl	800c256 <RTC_ExitInitMode>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800c0da:	7cfb      	ldrb	r3, [r7, #19]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d102      	bne.n	800c0e6 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	2201      	movs	r2, #1
 800c0e4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	22ff      	movs	r2, #255	@ 0xff
 800c0ec:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	771a      	strb	r2, [r3, #28]

  return status;
 800c0f4:	7cfb      	ldrb	r3, [r7, #19]
}
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	371c      	adds	r7, #28
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	bd90      	pop	{r4, r7, pc}

0800c0fe <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c0fe:	b580      	push	{r7, lr}
 800c100:	b086      	sub	sp, #24
 800c102:	af00      	add	r7, sp, #0
 800c104:	60f8      	str	r0, [r7, #12]
 800c106:	60b9      	str	r1, [r7, #8]
 800c108:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800c10a:	2300      	movs	r3, #0
 800c10c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	685b      	ldr	r3, [r3, #4]
 800c114:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c118:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c11c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800c11e:	697b      	ldr	r3, [r7, #20]
 800c120:	0c1b      	lsrs	r3, r3, #16
 800c122:	b2da      	uxtb	r2, r3
 800c124:	68bb      	ldr	r3, [r7, #8]
 800c126:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800c128:	697b      	ldr	r3, [r7, #20]
 800c12a:	0a1b      	lsrs	r3, r3, #8
 800c12c:	b2db      	uxtb	r3, r3
 800c12e:	f003 031f 	and.w	r3, r3, #31
 800c132:	b2da      	uxtb	r2, r3
 800c134:	68bb      	ldr	r3, [r7, #8]
 800c136:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800c138:	697b      	ldr	r3, [r7, #20]
 800c13a:	b2db      	uxtb	r3, r3
 800c13c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c140:	b2da      	uxtb	r2, r3
 800c142:	68bb      	ldr	r3, [r7, #8]
 800c144:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800c146:	697b      	ldr	r3, [r7, #20]
 800c148:	0b5b      	lsrs	r3, r3, #13
 800c14a:	b2db      	uxtb	r3, r3
 800c14c:	f003 0307 	and.w	r3, r3, #7
 800c150:	b2da      	uxtb	r2, r3
 800c152:	68bb      	ldr	r3, [r7, #8]
 800c154:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d11a      	bne.n	800c192 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800c15c:	68bb      	ldr	r3, [r7, #8]
 800c15e:	78db      	ldrb	r3, [r3, #3]
 800c160:	4618      	mov	r0, r3
 800c162:	f000 f8bb 	bl	800c2dc <RTC_Bcd2ToByte>
 800c166:	4603      	mov	r3, r0
 800c168:	461a      	mov	r2, r3
 800c16a:	68bb      	ldr	r3, [r7, #8]
 800c16c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	785b      	ldrb	r3, [r3, #1]
 800c172:	4618      	mov	r0, r3
 800c174:	f000 f8b2 	bl	800c2dc <RTC_Bcd2ToByte>
 800c178:	4603      	mov	r3, r0
 800c17a:	461a      	mov	r2, r3
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800c180:	68bb      	ldr	r3, [r7, #8]
 800c182:	789b      	ldrb	r3, [r3, #2]
 800c184:	4618      	mov	r0, r3
 800c186:	f000 f8a9 	bl	800c2dc <RTC_Bcd2ToByte>
 800c18a:	4603      	mov	r3, r0
 800c18c:	461a      	mov	r2, r3
 800c18e:	68bb      	ldr	r3, [r7, #8]
 800c190:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800c192:	2300      	movs	r3, #0
}
 800c194:	4618      	mov	r0, r3
 800c196:	3718      	adds	r7, #24
 800c198:	46bd      	mov	sp, r7
 800c19a:	bd80      	pop	{r7, pc}

0800c19c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b084      	sub	sp, #16
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	4a0d      	ldr	r2, [pc, #52]	@ (800c1e4 <HAL_RTC_WaitForSynchro+0x48>)
 800c1ae:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c1b0:	f7fc febe 	bl	8008f30 <HAL_GetTick>
 800c1b4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c1b6:	e009      	b.n	800c1cc <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c1b8:	f7fc feba 	bl	8008f30 <HAL_GetTick>
 800c1bc:	4602      	mov	r2, r0
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	1ad3      	subs	r3, r2, r3
 800c1c2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c1c6:	d901      	bls.n	800c1cc <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800c1c8:	2303      	movs	r3, #3
 800c1ca:	e007      	b.n	800c1dc <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	68db      	ldr	r3, [r3, #12]
 800c1d2:	f003 0320 	and.w	r3, r3, #32
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d0ee      	beq.n	800c1b8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800c1da:	2300      	movs	r3, #0
}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	3710      	adds	r7, #16
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	bd80      	pop	{r7, pc}
 800c1e4:	00017f5f 	.word	0x00017f5f

0800c1e8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b084      	sub	sp, #16
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	68db      	ldr	r3, [r3, #12]
 800c1fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c202:	2b00      	cmp	r3, #0
 800c204:	d122      	bne.n	800c24c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	68da      	ldr	r2, [r3, #12]
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800c214:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c216:	f7fc fe8b 	bl	8008f30 <HAL_GetTick>
 800c21a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800c21c:	e00c      	b.n	800c238 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c21e:	f7fc fe87 	bl	8008f30 <HAL_GetTick>
 800c222:	4602      	mov	r2, r0
 800c224:	68bb      	ldr	r3, [r7, #8]
 800c226:	1ad3      	subs	r3, r2, r3
 800c228:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c22c:	d904      	bls.n	800c238 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2204      	movs	r2, #4
 800c232:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800c234:	2301      	movs	r3, #1
 800c236:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	68db      	ldr	r3, [r3, #12]
 800c23e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c242:	2b00      	cmp	r3, #0
 800c244:	d102      	bne.n	800c24c <RTC_EnterInitMode+0x64>
 800c246:	7bfb      	ldrb	r3, [r7, #15]
 800c248:	2b01      	cmp	r3, #1
 800c24a:	d1e8      	bne.n	800c21e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800c24c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c24e:	4618      	mov	r0, r3
 800c250:	3710      	adds	r7, #16
 800c252:	46bd      	mov	sp, r7
 800c254:	bd80      	pop	{r7, pc}

0800c256 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800c256:	b580      	push	{r7, lr}
 800c258:	b084      	sub	sp, #16
 800c25a:	af00      	add	r7, sp, #0
 800c25c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c25e:	2300      	movs	r3, #0
 800c260:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	68da      	ldr	r2, [r3, #12]
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c270:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	689b      	ldr	r3, [r3, #8]
 800c278:	f003 0320 	and.w	r3, r3, #32
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d10a      	bne.n	800c296 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c280:	6878      	ldr	r0, [r7, #4]
 800c282:	f7ff ff8b 	bl	800c19c <HAL_RTC_WaitForSynchro>
 800c286:	4603      	mov	r3, r0
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d004      	beq.n	800c296 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2204      	movs	r2, #4
 800c290:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800c292:	2301      	movs	r3, #1
 800c294:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800c296:	7bfb      	ldrb	r3, [r7, #15]
}
 800c298:	4618      	mov	r0, r3
 800c29a:	3710      	adds	r7, #16
 800c29c:	46bd      	mov	sp, r7
 800c29e:	bd80      	pop	{r7, pc}

0800c2a0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800c2a0:	b480      	push	{r7}
 800c2a2:	b085      	sub	sp, #20
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800c2ae:	e005      	b.n	800c2bc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	3301      	adds	r3, #1
 800c2b4:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800c2b6:	79fb      	ldrb	r3, [r7, #7]
 800c2b8:	3b0a      	subs	r3, #10
 800c2ba:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800c2bc:	79fb      	ldrb	r3, [r7, #7]
 800c2be:	2b09      	cmp	r3, #9
 800c2c0:	d8f6      	bhi.n	800c2b0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	b2db      	uxtb	r3, r3
 800c2c6:	011b      	lsls	r3, r3, #4
 800c2c8:	b2da      	uxtb	r2, r3
 800c2ca:	79fb      	ldrb	r3, [r7, #7]
 800c2cc:	4313      	orrs	r3, r2
 800c2ce:	b2db      	uxtb	r3, r3
}
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	3714      	adds	r7, #20
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2da:	4770      	bx	lr

0800c2dc <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800c2dc:	b480      	push	{r7}
 800c2de:	b085      	sub	sp, #20
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800c2ea:	79fb      	ldrb	r3, [r7, #7]
 800c2ec:	091b      	lsrs	r3, r3, #4
 800c2ee:	b2db      	uxtb	r3, r3
 800c2f0:	461a      	mov	r2, r3
 800c2f2:	4613      	mov	r3, r2
 800c2f4:	009b      	lsls	r3, r3, #2
 800c2f6:	4413      	add	r3, r2
 800c2f8:	005b      	lsls	r3, r3, #1
 800c2fa:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	b2da      	uxtb	r2, r3
 800c300:	79fb      	ldrb	r3, [r7, #7]
 800c302:	f003 030f 	and.w	r3, r3, #15
 800c306:	b2db      	uxtb	r3, r3
 800c308:	4413      	add	r3, r2
 800c30a:	b2db      	uxtb	r3, r3
}
 800c30c:	4618      	mov	r0, r3
 800c30e:	3714      	adds	r7, #20
 800c310:	46bd      	mov	sp, r7
 800c312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c316:	4770      	bx	lr

0800c318 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b082      	sub	sp, #8
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d101      	bne.n	800c32a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c326:	2301      	movs	r3, #1
 800c328:	e07b      	b.n	800c422 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d108      	bne.n	800c344 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	685b      	ldr	r3, [r3, #4]
 800c336:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c33a:	d009      	beq.n	800c350 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2200      	movs	r2, #0
 800c340:	61da      	str	r2, [r3, #28]
 800c342:	e005      	b.n	800c350 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	2200      	movs	r2, #0
 800c348:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	2200      	movs	r2, #0
 800c34e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	2200      	movs	r2, #0
 800c354:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800c35c:	b2db      	uxtb	r3, r3
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d106      	bne.n	800c370 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	2200      	movs	r2, #0
 800c366:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c36a:	6878      	ldr	r0, [r7, #4]
 800c36c:	f7fc f972 	bl	8008654 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2202      	movs	r2, #2
 800c374:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	681a      	ldr	r2, [r3, #0]
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c386:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	685b      	ldr	r3, [r3, #4]
 800c38c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	689b      	ldr	r3, [r3, #8]
 800c394:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800c398:	431a      	orrs	r2, r3
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	68db      	ldr	r3, [r3, #12]
 800c39e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c3a2:	431a      	orrs	r2, r3
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	691b      	ldr	r3, [r3, #16]
 800c3a8:	f003 0302 	and.w	r3, r3, #2
 800c3ac:	431a      	orrs	r2, r3
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	695b      	ldr	r3, [r3, #20]
 800c3b2:	f003 0301 	and.w	r3, r3, #1
 800c3b6:	431a      	orrs	r2, r3
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	699b      	ldr	r3, [r3, #24]
 800c3bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c3c0:	431a      	orrs	r2, r3
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	69db      	ldr	r3, [r3, #28]
 800c3c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c3ca:	431a      	orrs	r2, r3
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	6a1b      	ldr	r3, [r3, #32]
 800c3d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c3d4:	ea42 0103 	orr.w	r1, r2, r3
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3dc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	430a      	orrs	r2, r1
 800c3e6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	699b      	ldr	r3, [r3, #24]
 800c3ec:	0c1b      	lsrs	r3, r3, #16
 800c3ee:	f003 0104 	and.w	r1, r3, #4
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3f6:	f003 0210 	and.w	r2, r3, #16
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	430a      	orrs	r2, r1
 800c400:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	69da      	ldr	r2, [r3, #28]
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c410:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	2200      	movs	r2, #0
 800c416:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2201      	movs	r2, #1
 800c41c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800c420:	2300      	movs	r3, #0
}
 800c422:	4618      	mov	r0, r3
 800c424:	3708      	adds	r7, #8
 800c426:	46bd      	mov	sp, r7
 800c428:	bd80      	pop	{r7, pc}

0800c42a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c42a:	b580      	push	{r7, lr}
 800c42c:	b088      	sub	sp, #32
 800c42e:	af00      	add	r7, sp, #0
 800c430:	60f8      	str	r0, [r7, #12]
 800c432:	60b9      	str	r1, [r7, #8]
 800c434:	603b      	str	r3, [r7, #0]
 800c436:	4613      	mov	r3, r2
 800c438:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c43a:	f7fc fd79 	bl	8008f30 <HAL_GetTick>
 800c43e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800c440:	88fb      	ldrh	r3, [r7, #6]
 800c442:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800c44a:	b2db      	uxtb	r3, r3
 800c44c:	2b01      	cmp	r3, #1
 800c44e:	d001      	beq.n	800c454 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800c450:	2302      	movs	r3, #2
 800c452:	e12a      	b.n	800c6aa <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800c454:	68bb      	ldr	r3, [r7, #8]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d002      	beq.n	800c460 <HAL_SPI_Transmit+0x36>
 800c45a:	88fb      	ldrh	r3, [r7, #6]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d101      	bne.n	800c464 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800c460:	2301      	movs	r3, #1
 800c462:	e122      	b.n	800c6aa <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800c46a:	2b01      	cmp	r3, #1
 800c46c:	d101      	bne.n	800c472 <HAL_SPI_Transmit+0x48>
 800c46e:	2302      	movs	r3, #2
 800c470:	e11b      	b.n	800c6aa <HAL_SPI_Transmit+0x280>
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	2201      	movs	r2, #1
 800c476:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	2203      	movs	r2, #3
 800c47e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	2200      	movs	r2, #0
 800c486:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	68ba      	ldr	r2, [r7, #8]
 800c48c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	88fa      	ldrh	r2, [r7, #6]
 800c492:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	88fa      	ldrh	r2, [r7, #6]
 800c498:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	2200      	movs	r2, #0
 800c49e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	689b      	ldr	r3, [r3, #8]
 800c4bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c4c0:	d10f      	bne.n	800c4e2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	681a      	ldr	r2, [r3, #0]
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c4d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	681a      	ldr	r2, [r3, #0]
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c4e0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c4ec:	2b40      	cmp	r3, #64	@ 0x40
 800c4ee:	d007      	beq.n	800c500 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	681a      	ldr	r2, [r3, #0]
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c4fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	68db      	ldr	r3, [r3, #12]
 800c504:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c508:	d152      	bne.n	800c5b0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	685b      	ldr	r3, [r3, #4]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d002      	beq.n	800c518 <HAL_SPI_Transmit+0xee>
 800c512:	8b7b      	ldrh	r3, [r7, #26]
 800c514:	2b01      	cmp	r3, #1
 800c516:	d145      	bne.n	800c5a4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c51c:	881a      	ldrh	r2, [r3, #0]
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c528:	1c9a      	adds	r2, r3, #2
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800c532:	b29b      	uxth	r3, r3
 800c534:	3b01      	subs	r3, #1
 800c536:	b29a      	uxth	r2, r3
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800c53c:	e032      	b.n	800c5a4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	689b      	ldr	r3, [r3, #8]
 800c544:	f003 0302 	and.w	r3, r3, #2
 800c548:	2b02      	cmp	r3, #2
 800c54a:	d112      	bne.n	800c572 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c550:	881a      	ldrh	r2, [r3, #0]
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c55c:	1c9a      	adds	r2, r3, #2
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800c566:	b29b      	uxth	r3, r3
 800c568:	3b01      	subs	r3, #1
 800c56a:	b29a      	uxth	r2, r3
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	86da      	strh	r2, [r3, #54]	@ 0x36
 800c570:	e018      	b.n	800c5a4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c572:	f7fc fcdd 	bl	8008f30 <HAL_GetTick>
 800c576:	4602      	mov	r2, r0
 800c578:	69fb      	ldr	r3, [r7, #28]
 800c57a:	1ad3      	subs	r3, r2, r3
 800c57c:	683a      	ldr	r2, [r7, #0]
 800c57e:	429a      	cmp	r2, r3
 800c580:	d803      	bhi.n	800c58a <HAL_SPI_Transmit+0x160>
 800c582:	683b      	ldr	r3, [r7, #0]
 800c584:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c588:	d102      	bne.n	800c590 <HAL_SPI_Transmit+0x166>
 800c58a:	683b      	ldr	r3, [r7, #0]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d109      	bne.n	800c5a4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	2201      	movs	r2, #1
 800c594:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	2200      	movs	r2, #0
 800c59c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800c5a0:	2303      	movs	r3, #3
 800c5a2:	e082      	b.n	800c6aa <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800c5a8:	b29b      	uxth	r3, r3
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d1c7      	bne.n	800c53e <HAL_SPI_Transmit+0x114>
 800c5ae:	e053      	b.n	800c658 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	685b      	ldr	r3, [r3, #4]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d002      	beq.n	800c5be <HAL_SPI_Transmit+0x194>
 800c5b8:	8b7b      	ldrh	r3, [r7, #26]
 800c5ba:	2b01      	cmp	r3, #1
 800c5bc:	d147      	bne.n	800c64e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	330c      	adds	r3, #12
 800c5c8:	7812      	ldrb	r2, [r2, #0]
 800c5ca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c5d0:	1c5a      	adds	r2, r3, #1
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800c5da:	b29b      	uxth	r3, r3
 800c5dc:	3b01      	subs	r3, #1
 800c5de:	b29a      	uxth	r2, r3
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800c5e4:	e033      	b.n	800c64e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	689b      	ldr	r3, [r3, #8]
 800c5ec:	f003 0302 	and.w	r3, r3, #2
 800c5f0:	2b02      	cmp	r3, #2
 800c5f2:	d113      	bne.n	800c61c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	330c      	adds	r3, #12
 800c5fe:	7812      	ldrb	r2, [r2, #0]
 800c600:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c606:	1c5a      	adds	r2, r3, #1
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800c610:	b29b      	uxth	r3, r3
 800c612:	3b01      	subs	r3, #1
 800c614:	b29a      	uxth	r2, r3
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	86da      	strh	r2, [r3, #54]	@ 0x36
 800c61a:	e018      	b.n	800c64e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c61c:	f7fc fc88 	bl	8008f30 <HAL_GetTick>
 800c620:	4602      	mov	r2, r0
 800c622:	69fb      	ldr	r3, [r7, #28]
 800c624:	1ad3      	subs	r3, r2, r3
 800c626:	683a      	ldr	r2, [r7, #0]
 800c628:	429a      	cmp	r2, r3
 800c62a:	d803      	bhi.n	800c634 <HAL_SPI_Transmit+0x20a>
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c632:	d102      	bne.n	800c63a <HAL_SPI_Transmit+0x210>
 800c634:	683b      	ldr	r3, [r7, #0]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d109      	bne.n	800c64e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	2201      	movs	r2, #1
 800c63e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	2200      	movs	r2, #0
 800c646:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800c64a:	2303      	movs	r3, #3
 800c64c:	e02d      	b.n	800c6aa <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800c652:	b29b      	uxth	r3, r3
 800c654:	2b00      	cmp	r3, #0
 800c656:	d1c6      	bne.n	800c5e6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c658:	69fa      	ldr	r2, [r7, #28]
 800c65a:	6839      	ldr	r1, [r7, #0]
 800c65c:	68f8      	ldr	r0, [r7, #12]
 800c65e:	f000 f8b1 	bl	800c7c4 <SPI_EndRxTxTransaction>
 800c662:	4603      	mov	r3, r0
 800c664:	2b00      	cmp	r3, #0
 800c666:	d002      	beq.n	800c66e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	2220      	movs	r2, #32
 800c66c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	689b      	ldr	r3, [r3, #8]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d10a      	bne.n	800c68c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c676:	2300      	movs	r3, #0
 800c678:	617b      	str	r3, [r7, #20]
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	68db      	ldr	r3, [r3, #12]
 800c680:	617b      	str	r3, [r7, #20]
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	689b      	ldr	r3, [r3, #8]
 800c688:	617b      	str	r3, [r7, #20]
 800c68a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	2201      	movs	r2, #1
 800c690:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	2200      	movs	r2, #0
 800c698:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d001      	beq.n	800c6a8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800c6a4:	2301      	movs	r3, #1
 800c6a6:	e000      	b.n	800c6aa <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800c6a8:	2300      	movs	r3, #0
  }
}
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	3720      	adds	r7, #32
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	bd80      	pop	{r7, pc}
	...

0800c6b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b088      	sub	sp, #32
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	60f8      	str	r0, [r7, #12]
 800c6bc:	60b9      	str	r1, [r7, #8]
 800c6be:	603b      	str	r3, [r7, #0]
 800c6c0:	4613      	mov	r3, r2
 800c6c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800c6c4:	f7fc fc34 	bl	8008f30 <HAL_GetTick>
 800c6c8:	4602      	mov	r2, r0
 800c6ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6cc:	1a9b      	subs	r3, r3, r2
 800c6ce:	683a      	ldr	r2, [r7, #0]
 800c6d0:	4413      	add	r3, r2
 800c6d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800c6d4:	f7fc fc2c 	bl	8008f30 <HAL_GetTick>
 800c6d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c6da:	4b39      	ldr	r3, [pc, #228]	@ (800c7c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	015b      	lsls	r3, r3, #5
 800c6e0:	0d1b      	lsrs	r3, r3, #20
 800c6e2:	69fa      	ldr	r2, [r7, #28]
 800c6e4:	fb02 f303 	mul.w	r3, r2, r3
 800c6e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c6ea:	e054      	b.n	800c796 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c6ec:	683b      	ldr	r3, [r7, #0]
 800c6ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6f2:	d050      	beq.n	800c796 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c6f4:	f7fc fc1c 	bl	8008f30 <HAL_GetTick>
 800c6f8:	4602      	mov	r2, r0
 800c6fa:	69bb      	ldr	r3, [r7, #24]
 800c6fc:	1ad3      	subs	r3, r2, r3
 800c6fe:	69fa      	ldr	r2, [r7, #28]
 800c700:	429a      	cmp	r2, r3
 800c702:	d902      	bls.n	800c70a <SPI_WaitFlagStateUntilTimeout+0x56>
 800c704:	69fb      	ldr	r3, [r7, #28]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d13d      	bne.n	800c786 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	685a      	ldr	r2, [r3, #4]
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800c718:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	685b      	ldr	r3, [r3, #4]
 800c71e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c722:	d111      	bne.n	800c748 <SPI_WaitFlagStateUntilTimeout+0x94>
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	689b      	ldr	r3, [r3, #8]
 800c728:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c72c:	d004      	beq.n	800c738 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	689b      	ldr	r3, [r3, #8]
 800c732:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c736:	d107      	bne.n	800c748 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	681a      	ldr	r2, [r3, #0]
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c746:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c74c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c750:	d10f      	bne.n	800c772 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	681a      	ldr	r2, [r3, #0]
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c760:	601a      	str	r2, [r3, #0]
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	681a      	ldr	r2, [r3, #0]
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c770:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	2201      	movs	r2, #1
 800c776:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	2200      	movs	r2, #0
 800c77e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800c782:	2303      	movs	r3, #3
 800c784:	e017      	b.n	800c7b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c786:	697b      	ldr	r3, [r7, #20]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d101      	bne.n	800c790 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800c78c:	2300      	movs	r3, #0
 800c78e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800c790:	697b      	ldr	r3, [r7, #20]
 800c792:	3b01      	subs	r3, #1
 800c794:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	689a      	ldr	r2, [r3, #8]
 800c79c:	68bb      	ldr	r3, [r7, #8]
 800c79e:	4013      	ands	r3, r2
 800c7a0:	68ba      	ldr	r2, [r7, #8]
 800c7a2:	429a      	cmp	r2, r3
 800c7a4:	bf0c      	ite	eq
 800c7a6:	2301      	moveq	r3, #1
 800c7a8:	2300      	movne	r3, #0
 800c7aa:	b2db      	uxtb	r3, r3
 800c7ac:	461a      	mov	r2, r3
 800c7ae:	79fb      	ldrb	r3, [r7, #7]
 800c7b0:	429a      	cmp	r2, r3
 800c7b2:	d19b      	bne.n	800c6ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800c7b4:	2300      	movs	r3, #0
}
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	3720      	adds	r7, #32
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bd80      	pop	{r7, pc}
 800c7be:	bf00      	nop
 800c7c0:	20000298 	.word	0x20000298

0800c7c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b088      	sub	sp, #32
 800c7c8:	af02      	add	r7, sp, #8
 800c7ca:	60f8      	str	r0, [r7, #12]
 800c7cc:	60b9      	str	r1, [r7, #8]
 800c7ce:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	9300      	str	r3, [sp, #0]
 800c7d4:	68bb      	ldr	r3, [r7, #8]
 800c7d6:	2201      	movs	r2, #1
 800c7d8:	2102      	movs	r1, #2
 800c7da:	68f8      	ldr	r0, [r7, #12]
 800c7dc:	f7ff ff6a 	bl	800c6b4 <SPI_WaitFlagStateUntilTimeout>
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d007      	beq.n	800c7f6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c7ea:	f043 0220 	orr.w	r2, r3, #32
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800c7f2:	2303      	movs	r3, #3
 800c7f4:	e032      	b.n	800c85c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c7f6:	4b1b      	ldr	r3, [pc, #108]	@ (800c864 <SPI_EndRxTxTransaction+0xa0>)
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	4a1b      	ldr	r2, [pc, #108]	@ (800c868 <SPI_EndRxTxTransaction+0xa4>)
 800c7fc:	fba2 2303 	umull	r2, r3, r2, r3
 800c800:	0d5b      	lsrs	r3, r3, #21
 800c802:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c806:	fb02 f303 	mul.w	r3, r2, r3
 800c80a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	685b      	ldr	r3, [r3, #4]
 800c810:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c814:	d112      	bne.n	800c83c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	9300      	str	r3, [sp, #0]
 800c81a:	68bb      	ldr	r3, [r7, #8]
 800c81c:	2200      	movs	r2, #0
 800c81e:	2180      	movs	r1, #128	@ 0x80
 800c820:	68f8      	ldr	r0, [r7, #12]
 800c822:	f7ff ff47 	bl	800c6b4 <SPI_WaitFlagStateUntilTimeout>
 800c826:	4603      	mov	r3, r0
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d016      	beq.n	800c85a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c830:	f043 0220 	orr.w	r2, r3, #32
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800c838:	2303      	movs	r3, #3
 800c83a:	e00f      	b.n	800c85c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800c83c:	697b      	ldr	r3, [r7, #20]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d00a      	beq.n	800c858 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800c842:	697b      	ldr	r3, [r7, #20]
 800c844:	3b01      	subs	r3, #1
 800c846:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	689b      	ldr	r3, [r3, #8]
 800c84e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c852:	2b80      	cmp	r3, #128	@ 0x80
 800c854:	d0f2      	beq.n	800c83c <SPI_EndRxTxTransaction+0x78>
 800c856:	e000      	b.n	800c85a <SPI_EndRxTxTransaction+0x96>
        break;
 800c858:	bf00      	nop
  }

  return HAL_OK;
 800c85a:	2300      	movs	r3, #0
}
 800c85c:	4618      	mov	r0, r3
 800c85e:	3718      	adds	r7, #24
 800c860:	46bd      	mov	sp, r7
 800c862:	bd80      	pop	{r7, pc}
 800c864:	20000298 	.word	0x20000298
 800c868:	165e9f81 	.word	0x165e9f81

0800c86c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b082      	sub	sp, #8
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d101      	bne.n	800c87e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c87a:	2301      	movs	r3, #1
 800c87c:	e041      	b.n	800c902 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c884:	b2db      	uxtb	r3, r3
 800c886:	2b00      	cmp	r3, #0
 800c888:	d106      	bne.n	800c898 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2200      	movs	r2, #0
 800c88e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c892:	6878      	ldr	r0, [r7, #4]
 800c894:	f7fc f932 	bl	8008afc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2202      	movs	r2, #2
 800c89c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681a      	ldr	r2, [r3, #0]
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	3304      	adds	r3, #4
 800c8a8:	4619      	mov	r1, r3
 800c8aa:	4610      	mov	r0, r2
 800c8ac:	f000 fa7e 	bl	800cdac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2201      	movs	r2, #1
 800c8b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	2201      	movs	r2, #1
 800c8bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	2201      	movs	r2, #1
 800c8c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2201      	movs	r2, #1
 800c8cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2201      	movs	r2, #1
 800c8d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	2201      	movs	r2, #1
 800c8dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	2201      	movs	r2, #1
 800c8e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2201      	movs	r2, #1
 800c8ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	2201      	movs	r2, #1
 800c8f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	2201      	movs	r2, #1
 800c8fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c900:	2300      	movs	r3, #0
}
 800c902:	4618      	mov	r0, r3
 800c904:	3708      	adds	r7, #8
 800c906:	46bd      	mov	sp, r7
 800c908:	bd80      	pop	{r7, pc}
	...

0800c90c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c90c:	b480      	push	{r7}
 800c90e:	b085      	sub	sp, #20
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c91a:	b2db      	uxtb	r3, r3
 800c91c:	2b01      	cmp	r3, #1
 800c91e:	d001      	beq.n	800c924 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c920:	2301      	movs	r3, #1
 800c922:	e04e      	b.n	800c9c2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	2202      	movs	r2, #2
 800c928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	68da      	ldr	r2, [r3, #12]
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	f042 0201 	orr.w	r2, r2, #1
 800c93a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	4a23      	ldr	r2, [pc, #140]	@ (800c9d0 <HAL_TIM_Base_Start_IT+0xc4>)
 800c942:	4293      	cmp	r3, r2
 800c944:	d022      	beq.n	800c98c <HAL_TIM_Base_Start_IT+0x80>
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c94e:	d01d      	beq.n	800c98c <HAL_TIM_Base_Start_IT+0x80>
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	4a1f      	ldr	r2, [pc, #124]	@ (800c9d4 <HAL_TIM_Base_Start_IT+0xc8>)
 800c956:	4293      	cmp	r3, r2
 800c958:	d018      	beq.n	800c98c <HAL_TIM_Base_Start_IT+0x80>
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	4a1e      	ldr	r2, [pc, #120]	@ (800c9d8 <HAL_TIM_Base_Start_IT+0xcc>)
 800c960:	4293      	cmp	r3, r2
 800c962:	d013      	beq.n	800c98c <HAL_TIM_Base_Start_IT+0x80>
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	4a1c      	ldr	r2, [pc, #112]	@ (800c9dc <HAL_TIM_Base_Start_IT+0xd0>)
 800c96a:	4293      	cmp	r3, r2
 800c96c:	d00e      	beq.n	800c98c <HAL_TIM_Base_Start_IT+0x80>
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	4a1b      	ldr	r2, [pc, #108]	@ (800c9e0 <HAL_TIM_Base_Start_IT+0xd4>)
 800c974:	4293      	cmp	r3, r2
 800c976:	d009      	beq.n	800c98c <HAL_TIM_Base_Start_IT+0x80>
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	4a19      	ldr	r2, [pc, #100]	@ (800c9e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800c97e:	4293      	cmp	r3, r2
 800c980:	d004      	beq.n	800c98c <HAL_TIM_Base_Start_IT+0x80>
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	4a18      	ldr	r2, [pc, #96]	@ (800c9e8 <HAL_TIM_Base_Start_IT+0xdc>)
 800c988:	4293      	cmp	r3, r2
 800c98a:	d111      	bne.n	800c9b0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	689b      	ldr	r3, [r3, #8]
 800c992:	f003 0307 	and.w	r3, r3, #7
 800c996:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	2b06      	cmp	r3, #6
 800c99c:	d010      	beq.n	800c9c0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	681a      	ldr	r2, [r3, #0]
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	f042 0201 	orr.w	r2, r2, #1
 800c9ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c9ae:	e007      	b.n	800c9c0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	681a      	ldr	r2, [r3, #0]
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	f042 0201 	orr.w	r2, r2, #1
 800c9be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c9c0:	2300      	movs	r3, #0
}
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	3714      	adds	r7, #20
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9cc:	4770      	bx	lr
 800c9ce:	bf00      	nop
 800c9d0:	40010000 	.word	0x40010000
 800c9d4:	40000400 	.word	0x40000400
 800c9d8:	40000800 	.word	0x40000800
 800c9dc:	40000c00 	.word	0x40000c00
 800c9e0:	40010400 	.word	0x40010400
 800c9e4:	40014000 	.word	0x40014000
 800c9e8:	40001800 	.word	0x40001800

0800c9ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b084      	sub	sp, #16
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	68db      	ldr	r3, [r3, #12]
 800c9fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	691b      	ldr	r3, [r3, #16]
 800ca02:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ca04:	68bb      	ldr	r3, [r7, #8]
 800ca06:	f003 0302 	and.w	r3, r3, #2
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d020      	beq.n	800ca50 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	f003 0302 	and.w	r3, r3, #2
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d01b      	beq.n	800ca50 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	f06f 0202 	mvn.w	r2, #2
 800ca20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	2201      	movs	r2, #1
 800ca26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	699b      	ldr	r3, [r3, #24]
 800ca2e:	f003 0303 	and.w	r3, r3, #3
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d003      	beq.n	800ca3e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ca36:	6878      	ldr	r0, [r7, #4]
 800ca38:	f000 f999 	bl	800cd6e <HAL_TIM_IC_CaptureCallback>
 800ca3c:	e005      	b.n	800ca4a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca3e:	6878      	ldr	r0, [r7, #4]
 800ca40:	f000 f98b 	bl	800cd5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca44:	6878      	ldr	r0, [r7, #4]
 800ca46:	f000 f99c 	bl	800cd82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ca50:	68bb      	ldr	r3, [r7, #8]
 800ca52:	f003 0304 	and.w	r3, r3, #4
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d020      	beq.n	800ca9c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	f003 0304 	and.w	r3, r3, #4
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d01b      	beq.n	800ca9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	f06f 0204 	mvn.w	r2, #4
 800ca6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	2202      	movs	r2, #2
 800ca72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	699b      	ldr	r3, [r3, #24]
 800ca7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d003      	beq.n	800ca8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	f000 f973 	bl	800cd6e <HAL_TIM_IC_CaptureCallback>
 800ca88:	e005      	b.n	800ca96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca8a:	6878      	ldr	r0, [r7, #4]
 800ca8c:	f000 f965 	bl	800cd5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca90:	6878      	ldr	r0, [r7, #4]
 800ca92:	f000 f976 	bl	800cd82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	2200      	movs	r2, #0
 800ca9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ca9c:	68bb      	ldr	r3, [r7, #8]
 800ca9e:	f003 0308 	and.w	r3, r3, #8
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d020      	beq.n	800cae8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	f003 0308 	and.w	r3, r3, #8
 800caac:	2b00      	cmp	r3, #0
 800caae:	d01b      	beq.n	800cae8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	f06f 0208 	mvn.w	r2, #8
 800cab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	2204      	movs	r2, #4
 800cabe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	69db      	ldr	r3, [r3, #28]
 800cac6:	f003 0303 	and.w	r3, r3, #3
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d003      	beq.n	800cad6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cace:	6878      	ldr	r0, [r7, #4]
 800cad0:	f000 f94d 	bl	800cd6e <HAL_TIM_IC_CaptureCallback>
 800cad4:	e005      	b.n	800cae2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cad6:	6878      	ldr	r0, [r7, #4]
 800cad8:	f000 f93f 	bl	800cd5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cadc:	6878      	ldr	r0, [r7, #4]
 800cade:	f000 f950 	bl	800cd82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	2200      	movs	r2, #0
 800cae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800cae8:	68bb      	ldr	r3, [r7, #8]
 800caea:	f003 0310 	and.w	r3, r3, #16
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d020      	beq.n	800cb34 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	f003 0310 	and.w	r3, r3, #16
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d01b      	beq.n	800cb34 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	f06f 0210 	mvn.w	r2, #16
 800cb04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2208      	movs	r2, #8
 800cb0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	69db      	ldr	r3, [r3, #28]
 800cb12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d003      	beq.n	800cb22 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cb1a:	6878      	ldr	r0, [r7, #4]
 800cb1c:	f000 f927 	bl	800cd6e <HAL_TIM_IC_CaptureCallback>
 800cb20:	e005      	b.n	800cb2e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cb22:	6878      	ldr	r0, [r7, #4]
 800cb24:	f000 f919 	bl	800cd5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	f000 f92a 	bl	800cd82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	2200      	movs	r2, #0
 800cb32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800cb34:	68bb      	ldr	r3, [r7, #8]
 800cb36:	f003 0301 	and.w	r3, r3, #1
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d00c      	beq.n	800cb58 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	f003 0301 	and.w	r3, r3, #1
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d007      	beq.n	800cb58 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	f06f 0201 	mvn.w	r2, #1
 800cb50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cb52:	6878      	ldr	r0, [r7, #4]
 800cb54:	f7fb fce0 	bl	8008518 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800cb58:	68bb      	ldr	r3, [r7, #8]
 800cb5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d00c      	beq.n	800cb7c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d007      	beq.n	800cb7c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800cb74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cb76:	6878      	ldr	r0, [r7, #4]
 800cb78:	f000 fae4 	bl	800d144 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800cb7c:	68bb      	ldr	r3, [r7, #8]
 800cb7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d00c      	beq.n	800cba0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d007      	beq.n	800cba0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800cb98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cb9a:	6878      	ldr	r0, [r7, #4]
 800cb9c:	f000 f8fb 	bl	800cd96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800cba0:	68bb      	ldr	r3, [r7, #8]
 800cba2:	f003 0320 	and.w	r3, r3, #32
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d00c      	beq.n	800cbc4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	f003 0320 	and.w	r3, r3, #32
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d007      	beq.n	800cbc4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	f06f 0220 	mvn.w	r2, #32
 800cbbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cbbe:	6878      	ldr	r0, [r7, #4]
 800cbc0:	f000 fab6 	bl	800d130 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cbc4:	bf00      	nop
 800cbc6:	3710      	adds	r7, #16
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	bd80      	pop	{r7, pc}

0800cbcc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b084      	sub	sp, #16
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
 800cbd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cbe0:	2b01      	cmp	r3, #1
 800cbe2:	d101      	bne.n	800cbe8 <HAL_TIM_ConfigClockSource+0x1c>
 800cbe4:	2302      	movs	r3, #2
 800cbe6:	e0b4      	b.n	800cd52 <HAL_TIM_ConfigClockSource+0x186>
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	2201      	movs	r2, #1
 800cbec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	2202      	movs	r2, #2
 800cbf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	689b      	ldr	r3, [r3, #8]
 800cbfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cc00:	68bb      	ldr	r3, [r7, #8]
 800cc02:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800cc06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cc08:	68bb      	ldr	r3, [r7, #8]
 800cc0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800cc0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	68ba      	ldr	r2, [r7, #8]
 800cc16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cc20:	d03e      	beq.n	800cca0 <HAL_TIM_ConfigClockSource+0xd4>
 800cc22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cc26:	f200 8087 	bhi.w	800cd38 <HAL_TIM_ConfigClockSource+0x16c>
 800cc2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cc2e:	f000 8086 	beq.w	800cd3e <HAL_TIM_ConfigClockSource+0x172>
 800cc32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cc36:	d87f      	bhi.n	800cd38 <HAL_TIM_ConfigClockSource+0x16c>
 800cc38:	2b70      	cmp	r3, #112	@ 0x70
 800cc3a:	d01a      	beq.n	800cc72 <HAL_TIM_ConfigClockSource+0xa6>
 800cc3c:	2b70      	cmp	r3, #112	@ 0x70
 800cc3e:	d87b      	bhi.n	800cd38 <HAL_TIM_ConfigClockSource+0x16c>
 800cc40:	2b60      	cmp	r3, #96	@ 0x60
 800cc42:	d050      	beq.n	800cce6 <HAL_TIM_ConfigClockSource+0x11a>
 800cc44:	2b60      	cmp	r3, #96	@ 0x60
 800cc46:	d877      	bhi.n	800cd38 <HAL_TIM_ConfigClockSource+0x16c>
 800cc48:	2b50      	cmp	r3, #80	@ 0x50
 800cc4a:	d03c      	beq.n	800ccc6 <HAL_TIM_ConfigClockSource+0xfa>
 800cc4c:	2b50      	cmp	r3, #80	@ 0x50
 800cc4e:	d873      	bhi.n	800cd38 <HAL_TIM_ConfigClockSource+0x16c>
 800cc50:	2b40      	cmp	r3, #64	@ 0x40
 800cc52:	d058      	beq.n	800cd06 <HAL_TIM_ConfigClockSource+0x13a>
 800cc54:	2b40      	cmp	r3, #64	@ 0x40
 800cc56:	d86f      	bhi.n	800cd38 <HAL_TIM_ConfigClockSource+0x16c>
 800cc58:	2b30      	cmp	r3, #48	@ 0x30
 800cc5a:	d064      	beq.n	800cd26 <HAL_TIM_ConfigClockSource+0x15a>
 800cc5c:	2b30      	cmp	r3, #48	@ 0x30
 800cc5e:	d86b      	bhi.n	800cd38 <HAL_TIM_ConfigClockSource+0x16c>
 800cc60:	2b20      	cmp	r3, #32
 800cc62:	d060      	beq.n	800cd26 <HAL_TIM_ConfigClockSource+0x15a>
 800cc64:	2b20      	cmp	r3, #32
 800cc66:	d867      	bhi.n	800cd38 <HAL_TIM_ConfigClockSource+0x16c>
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d05c      	beq.n	800cd26 <HAL_TIM_ConfigClockSource+0x15a>
 800cc6c:	2b10      	cmp	r3, #16
 800cc6e:	d05a      	beq.n	800cd26 <HAL_TIM_ConfigClockSource+0x15a>
 800cc70:	e062      	b.n	800cd38 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cc76:	683b      	ldr	r3, [r7, #0]
 800cc78:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cc82:	f000 f9b9 	bl	800cff8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	689b      	ldr	r3, [r3, #8]
 800cc8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cc8e:	68bb      	ldr	r3, [r7, #8]
 800cc90:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800cc94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	68ba      	ldr	r2, [r7, #8]
 800cc9c:	609a      	str	r2, [r3, #8]
      break;
 800cc9e:	e04f      	b.n	800cd40 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cca4:	683b      	ldr	r3, [r7, #0]
 800cca6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cca8:	683b      	ldr	r3, [r7, #0]
 800ccaa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ccac:	683b      	ldr	r3, [r7, #0]
 800ccae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ccb0:	f000 f9a2 	bl	800cff8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	689a      	ldr	r2, [r3, #8]
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ccc2:	609a      	str	r2, [r3, #8]
      break;
 800ccc4:	e03c      	b.n	800cd40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ccd2:	461a      	mov	r2, r3
 800ccd4:	f000 f916 	bl	800cf04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	2150      	movs	r1, #80	@ 0x50
 800ccde:	4618      	mov	r0, r3
 800cce0:	f000 f96f 	bl	800cfc2 <TIM_ITRx_SetConfig>
      break;
 800cce4:	e02c      	b.n	800cd40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ccea:	683b      	ldr	r3, [r7, #0]
 800ccec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ccee:	683b      	ldr	r3, [r7, #0]
 800ccf0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ccf2:	461a      	mov	r2, r3
 800ccf4:	f000 f935 	bl	800cf62 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	2160      	movs	r1, #96	@ 0x60
 800ccfe:	4618      	mov	r0, r3
 800cd00:	f000 f95f 	bl	800cfc2 <TIM_ITRx_SetConfig>
      break;
 800cd04:	e01c      	b.n	800cd40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cd12:	461a      	mov	r2, r3
 800cd14:	f000 f8f6 	bl	800cf04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	2140      	movs	r1, #64	@ 0x40
 800cd1e:	4618      	mov	r0, r3
 800cd20:	f000 f94f 	bl	800cfc2 <TIM_ITRx_SetConfig>
      break;
 800cd24:	e00c      	b.n	800cd40 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681a      	ldr	r2, [r3, #0]
 800cd2a:	683b      	ldr	r3, [r7, #0]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	4619      	mov	r1, r3
 800cd30:	4610      	mov	r0, r2
 800cd32:	f000 f946 	bl	800cfc2 <TIM_ITRx_SetConfig>
      break;
 800cd36:	e003      	b.n	800cd40 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800cd38:	2301      	movs	r3, #1
 800cd3a:	73fb      	strb	r3, [r7, #15]
      break;
 800cd3c:	e000      	b.n	800cd40 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800cd3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2201      	movs	r2, #1
 800cd44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800cd50:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd52:	4618      	mov	r0, r3
 800cd54:	3710      	adds	r7, #16
 800cd56:	46bd      	mov	sp, r7
 800cd58:	bd80      	pop	{r7, pc}

0800cd5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cd5a:	b480      	push	{r7}
 800cd5c:	b083      	sub	sp, #12
 800cd5e:	af00      	add	r7, sp, #0
 800cd60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cd62:	bf00      	nop
 800cd64:	370c      	adds	r7, #12
 800cd66:	46bd      	mov	sp, r7
 800cd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6c:	4770      	bx	lr

0800cd6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cd6e:	b480      	push	{r7}
 800cd70:	b083      	sub	sp, #12
 800cd72:	af00      	add	r7, sp, #0
 800cd74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cd76:	bf00      	nop
 800cd78:	370c      	adds	r7, #12
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd80:	4770      	bx	lr

0800cd82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cd82:	b480      	push	{r7}
 800cd84:	b083      	sub	sp, #12
 800cd86:	af00      	add	r7, sp, #0
 800cd88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cd8a:	bf00      	nop
 800cd8c:	370c      	adds	r7, #12
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd94:	4770      	bx	lr

0800cd96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cd96:	b480      	push	{r7}
 800cd98:	b083      	sub	sp, #12
 800cd9a:	af00      	add	r7, sp, #0
 800cd9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cd9e:	bf00      	nop
 800cda0:	370c      	adds	r7, #12
 800cda2:	46bd      	mov	sp, r7
 800cda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda8:	4770      	bx	lr
	...

0800cdac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800cdac:	b480      	push	{r7}
 800cdae:	b085      	sub	sp, #20
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
 800cdb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	4a46      	ldr	r2, [pc, #280]	@ (800ced8 <TIM_Base_SetConfig+0x12c>)
 800cdc0:	4293      	cmp	r3, r2
 800cdc2:	d013      	beq.n	800cdec <TIM_Base_SetConfig+0x40>
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cdca:	d00f      	beq.n	800cdec <TIM_Base_SetConfig+0x40>
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	4a43      	ldr	r2, [pc, #268]	@ (800cedc <TIM_Base_SetConfig+0x130>)
 800cdd0:	4293      	cmp	r3, r2
 800cdd2:	d00b      	beq.n	800cdec <TIM_Base_SetConfig+0x40>
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	4a42      	ldr	r2, [pc, #264]	@ (800cee0 <TIM_Base_SetConfig+0x134>)
 800cdd8:	4293      	cmp	r3, r2
 800cdda:	d007      	beq.n	800cdec <TIM_Base_SetConfig+0x40>
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	4a41      	ldr	r2, [pc, #260]	@ (800cee4 <TIM_Base_SetConfig+0x138>)
 800cde0:	4293      	cmp	r3, r2
 800cde2:	d003      	beq.n	800cdec <TIM_Base_SetConfig+0x40>
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	4a40      	ldr	r2, [pc, #256]	@ (800cee8 <TIM_Base_SetConfig+0x13c>)
 800cde8:	4293      	cmp	r3, r2
 800cdea:	d108      	bne.n	800cdfe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cdf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	685b      	ldr	r3, [r3, #4]
 800cdf8:	68fa      	ldr	r2, [r7, #12]
 800cdfa:	4313      	orrs	r3, r2
 800cdfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	4a35      	ldr	r2, [pc, #212]	@ (800ced8 <TIM_Base_SetConfig+0x12c>)
 800ce02:	4293      	cmp	r3, r2
 800ce04:	d02b      	beq.n	800ce5e <TIM_Base_SetConfig+0xb2>
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ce0c:	d027      	beq.n	800ce5e <TIM_Base_SetConfig+0xb2>
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	4a32      	ldr	r2, [pc, #200]	@ (800cedc <TIM_Base_SetConfig+0x130>)
 800ce12:	4293      	cmp	r3, r2
 800ce14:	d023      	beq.n	800ce5e <TIM_Base_SetConfig+0xb2>
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	4a31      	ldr	r2, [pc, #196]	@ (800cee0 <TIM_Base_SetConfig+0x134>)
 800ce1a:	4293      	cmp	r3, r2
 800ce1c:	d01f      	beq.n	800ce5e <TIM_Base_SetConfig+0xb2>
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	4a30      	ldr	r2, [pc, #192]	@ (800cee4 <TIM_Base_SetConfig+0x138>)
 800ce22:	4293      	cmp	r3, r2
 800ce24:	d01b      	beq.n	800ce5e <TIM_Base_SetConfig+0xb2>
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	4a2f      	ldr	r2, [pc, #188]	@ (800cee8 <TIM_Base_SetConfig+0x13c>)
 800ce2a:	4293      	cmp	r3, r2
 800ce2c:	d017      	beq.n	800ce5e <TIM_Base_SetConfig+0xb2>
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	4a2e      	ldr	r2, [pc, #184]	@ (800ceec <TIM_Base_SetConfig+0x140>)
 800ce32:	4293      	cmp	r3, r2
 800ce34:	d013      	beq.n	800ce5e <TIM_Base_SetConfig+0xb2>
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	4a2d      	ldr	r2, [pc, #180]	@ (800cef0 <TIM_Base_SetConfig+0x144>)
 800ce3a:	4293      	cmp	r3, r2
 800ce3c:	d00f      	beq.n	800ce5e <TIM_Base_SetConfig+0xb2>
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	4a2c      	ldr	r2, [pc, #176]	@ (800cef4 <TIM_Base_SetConfig+0x148>)
 800ce42:	4293      	cmp	r3, r2
 800ce44:	d00b      	beq.n	800ce5e <TIM_Base_SetConfig+0xb2>
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	4a2b      	ldr	r2, [pc, #172]	@ (800cef8 <TIM_Base_SetConfig+0x14c>)
 800ce4a:	4293      	cmp	r3, r2
 800ce4c:	d007      	beq.n	800ce5e <TIM_Base_SetConfig+0xb2>
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	4a2a      	ldr	r2, [pc, #168]	@ (800cefc <TIM_Base_SetConfig+0x150>)
 800ce52:	4293      	cmp	r3, r2
 800ce54:	d003      	beq.n	800ce5e <TIM_Base_SetConfig+0xb2>
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	4a29      	ldr	r2, [pc, #164]	@ (800cf00 <TIM_Base_SetConfig+0x154>)
 800ce5a:	4293      	cmp	r3, r2
 800ce5c:	d108      	bne.n	800ce70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ce64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ce66:	683b      	ldr	r3, [r7, #0]
 800ce68:	68db      	ldr	r3, [r3, #12]
 800ce6a:	68fa      	ldr	r2, [r7, #12]
 800ce6c:	4313      	orrs	r3, r2
 800ce6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ce76:	683b      	ldr	r3, [r7, #0]
 800ce78:	695b      	ldr	r3, [r3, #20]
 800ce7a:	4313      	orrs	r3, r2
 800ce7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	68fa      	ldr	r2, [r7, #12]
 800ce82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ce84:	683b      	ldr	r3, [r7, #0]
 800ce86:	689a      	ldr	r2, [r3, #8]
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	681a      	ldr	r2, [r3, #0]
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	4a10      	ldr	r2, [pc, #64]	@ (800ced8 <TIM_Base_SetConfig+0x12c>)
 800ce98:	4293      	cmp	r3, r2
 800ce9a:	d003      	beq.n	800cea4 <TIM_Base_SetConfig+0xf8>
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	4a12      	ldr	r2, [pc, #72]	@ (800cee8 <TIM_Base_SetConfig+0x13c>)
 800cea0:	4293      	cmp	r3, r2
 800cea2:	d103      	bne.n	800ceac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cea4:	683b      	ldr	r3, [r7, #0]
 800cea6:	691a      	ldr	r2, [r3, #16]
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	2201      	movs	r2, #1
 800ceb0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	691b      	ldr	r3, [r3, #16]
 800ceb6:	f003 0301 	and.w	r3, r3, #1
 800ceba:	2b01      	cmp	r3, #1
 800cebc:	d105      	bne.n	800ceca <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	691b      	ldr	r3, [r3, #16]
 800cec2:	f023 0201 	bic.w	r2, r3, #1
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	611a      	str	r2, [r3, #16]
  }
}
 800ceca:	bf00      	nop
 800cecc:	3714      	adds	r7, #20
 800cece:	46bd      	mov	sp, r7
 800ced0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced4:	4770      	bx	lr
 800ced6:	bf00      	nop
 800ced8:	40010000 	.word	0x40010000
 800cedc:	40000400 	.word	0x40000400
 800cee0:	40000800 	.word	0x40000800
 800cee4:	40000c00 	.word	0x40000c00
 800cee8:	40010400 	.word	0x40010400
 800ceec:	40014000 	.word	0x40014000
 800cef0:	40014400 	.word	0x40014400
 800cef4:	40014800 	.word	0x40014800
 800cef8:	40001800 	.word	0x40001800
 800cefc:	40001c00 	.word	0x40001c00
 800cf00:	40002000 	.word	0x40002000

0800cf04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cf04:	b480      	push	{r7}
 800cf06:	b087      	sub	sp, #28
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	60f8      	str	r0, [r7, #12]
 800cf0c:	60b9      	str	r1, [r7, #8]
 800cf0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	6a1b      	ldr	r3, [r3, #32]
 800cf14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	6a1b      	ldr	r3, [r3, #32]
 800cf1a:	f023 0201 	bic.w	r2, r3, #1
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	699b      	ldr	r3, [r3, #24]
 800cf26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cf28:	693b      	ldr	r3, [r7, #16]
 800cf2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800cf2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	011b      	lsls	r3, r3, #4
 800cf34:	693a      	ldr	r2, [r7, #16]
 800cf36:	4313      	orrs	r3, r2
 800cf38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cf3a:	697b      	ldr	r3, [r7, #20]
 800cf3c:	f023 030a 	bic.w	r3, r3, #10
 800cf40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cf42:	697a      	ldr	r2, [r7, #20]
 800cf44:	68bb      	ldr	r3, [r7, #8]
 800cf46:	4313      	orrs	r3, r2
 800cf48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	693a      	ldr	r2, [r7, #16]
 800cf4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	697a      	ldr	r2, [r7, #20]
 800cf54:	621a      	str	r2, [r3, #32]
}
 800cf56:	bf00      	nop
 800cf58:	371c      	adds	r7, #28
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf60:	4770      	bx	lr

0800cf62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cf62:	b480      	push	{r7}
 800cf64:	b087      	sub	sp, #28
 800cf66:	af00      	add	r7, sp, #0
 800cf68:	60f8      	str	r0, [r7, #12]
 800cf6a:	60b9      	str	r1, [r7, #8]
 800cf6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	6a1b      	ldr	r3, [r3, #32]
 800cf72:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	6a1b      	ldr	r3, [r3, #32]
 800cf78:	f023 0210 	bic.w	r2, r3, #16
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	699b      	ldr	r3, [r3, #24]
 800cf84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cf86:	693b      	ldr	r3, [r7, #16]
 800cf88:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800cf8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	031b      	lsls	r3, r3, #12
 800cf92:	693a      	ldr	r2, [r7, #16]
 800cf94:	4313      	orrs	r3, r2
 800cf96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cf98:	697b      	ldr	r3, [r7, #20]
 800cf9a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800cf9e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cfa0:	68bb      	ldr	r3, [r7, #8]
 800cfa2:	011b      	lsls	r3, r3, #4
 800cfa4:	697a      	ldr	r2, [r7, #20]
 800cfa6:	4313      	orrs	r3, r2
 800cfa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	693a      	ldr	r2, [r7, #16]
 800cfae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	697a      	ldr	r2, [r7, #20]
 800cfb4:	621a      	str	r2, [r3, #32]
}
 800cfb6:	bf00      	nop
 800cfb8:	371c      	adds	r7, #28
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc0:	4770      	bx	lr

0800cfc2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cfc2:	b480      	push	{r7}
 800cfc4:	b085      	sub	sp, #20
 800cfc6:	af00      	add	r7, sp, #0
 800cfc8:	6078      	str	r0, [r7, #4]
 800cfca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	689b      	ldr	r3, [r3, #8]
 800cfd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cfd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cfda:	683a      	ldr	r2, [r7, #0]
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	4313      	orrs	r3, r2
 800cfe0:	f043 0307 	orr.w	r3, r3, #7
 800cfe4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	68fa      	ldr	r2, [r7, #12]
 800cfea:	609a      	str	r2, [r3, #8]
}
 800cfec:	bf00      	nop
 800cfee:	3714      	adds	r7, #20
 800cff0:	46bd      	mov	sp, r7
 800cff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff6:	4770      	bx	lr

0800cff8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cff8:	b480      	push	{r7}
 800cffa:	b087      	sub	sp, #28
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	60f8      	str	r0, [r7, #12]
 800d000:	60b9      	str	r1, [r7, #8]
 800d002:	607a      	str	r2, [r7, #4]
 800d004:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	689b      	ldr	r3, [r3, #8]
 800d00a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d00c:	697b      	ldr	r3, [r7, #20]
 800d00e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d012:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d014:	683b      	ldr	r3, [r7, #0]
 800d016:	021a      	lsls	r2, r3, #8
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	431a      	orrs	r2, r3
 800d01c:	68bb      	ldr	r3, [r7, #8]
 800d01e:	4313      	orrs	r3, r2
 800d020:	697a      	ldr	r2, [r7, #20]
 800d022:	4313      	orrs	r3, r2
 800d024:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	697a      	ldr	r2, [r7, #20]
 800d02a:	609a      	str	r2, [r3, #8]
}
 800d02c:	bf00      	nop
 800d02e:	371c      	adds	r7, #28
 800d030:	46bd      	mov	sp, r7
 800d032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d036:	4770      	bx	lr

0800d038 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d038:	b480      	push	{r7}
 800d03a:	b085      	sub	sp, #20
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
 800d040:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d048:	2b01      	cmp	r3, #1
 800d04a:	d101      	bne.n	800d050 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d04c:	2302      	movs	r3, #2
 800d04e:	e05a      	b.n	800d106 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	2201      	movs	r2, #1
 800d054:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	2202      	movs	r2, #2
 800d05c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	685b      	ldr	r3, [r3, #4]
 800d066:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	689b      	ldr	r3, [r3, #8]
 800d06e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d076:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d078:	683b      	ldr	r3, [r7, #0]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	68fa      	ldr	r2, [r7, #12]
 800d07e:	4313      	orrs	r3, r2
 800d080:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	68fa      	ldr	r2, [r7, #12]
 800d088:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	4a21      	ldr	r2, [pc, #132]	@ (800d114 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800d090:	4293      	cmp	r3, r2
 800d092:	d022      	beq.n	800d0da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d09c:	d01d      	beq.n	800d0da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	4a1d      	ldr	r2, [pc, #116]	@ (800d118 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800d0a4:	4293      	cmp	r3, r2
 800d0a6:	d018      	beq.n	800d0da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	4a1b      	ldr	r2, [pc, #108]	@ (800d11c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800d0ae:	4293      	cmp	r3, r2
 800d0b0:	d013      	beq.n	800d0da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	4a1a      	ldr	r2, [pc, #104]	@ (800d120 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800d0b8:	4293      	cmp	r3, r2
 800d0ba:	d00e      	beq.n	800d0da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	4a18      	ldr	r2, [pc, #96]	@ (800d124 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800d0c2:	4293      	cmp	r3, r2
 800d0c4:	d009      	beq.n	800d0da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	4a17      	ldr	r2, [pc, #92]	@ (800d128 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800d0cc:	4293      	cmp	r3, r2
 800d0ce:	d004      	beq.n	800d0da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	4a15      	ldr	r2, [pc, #84]	@ (800d12c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800d0d6:	4293      	cmp	r3, r2
 800d0d8:	d10c      	bne.n	800d0f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d0da:	68bb      	ldr	r3, [r7, #8]
 800d0dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d0e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d0e2:	683b      	ldr	r3, [r7, #0]
 800d0e4:	685b      	ldr	r3, [r3, #4]
 800d0e6:	68ba      	ldr	r2, [r7, #8]
 800d0e8:	4313      	orrs	r3, r2
 800d0ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	68ba      	ldr	r2, [r7, #8]
 800d0f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	2201      	movs	r2, #1
 800d0f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	2200      	movs	r2, #0
 800d100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d104:	2300      	movs	r3, #0
}
 800d106:	4618      	mov	r0, r3
 800d108:	3714      	adds	r7, #20
 800d10a:	46bd      	mov	sp, r7
 800d10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d110:	4770      	bx	lr
 800d112:	bf00      	nop
 800d114:	40010000 	.word	0x40010000
 800d118:	40000400 	.word	0x40000400
 800d11c:	40000800 	.word	0x40000800
 800d120:	40000c00 	.word	0x40000c00
 800d124:	40010400 	.word	0x40010400
 800d128:	40014000 	.word	0x40014000
 800d12c:	40001800 	.word	0x40001800

0800d130 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d130:	b480      	push	{r7}
 800d132:	b083      	sub	sp, #12
 800d134:	af00      	add	r7, sp, #0
 800d136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d138:	bf00      	nop
 800d13a:	370c      	adds	r7, #12
 800d13c:	46bd      	mov	sp, r7
 800d13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d142:	4770      	bx	lr

0800d144 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d144:	b480      	push	{r7}
 800d146:	b083      	sub	sp, #12
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d14c:	bf00      	nop
 800d14e:	370c      	adds	r7, #12
 800d150:	46bd      	mov	sp, r7
 800d152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d156:	4770      	bx	lr

0800d158 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b082      	sub	sp, #8
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d101      	bne.n	800d16a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d166:	2301      	movs	r3, #1
 800d168:	e042      	b.n	800d1f0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d170:	b2db      	uxtb	r3, r3
 800d172:	2b00      	cmp	r3, #0
 800d174:	d106      	bne.n	800d184 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	2200      	movs	r2, #0
 800d17a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d17e:	6878      	ldr	r0, [r7, #4]
 800d180:	f7fb fd86 	bl	8008c90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	2224      	movs	r2, #36	@ 0x24
 800d188:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	68da      	ldr	r2, [r3, #12]
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d19a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d19c:	6878      	ldr	r0, [r7, #4]
 800d19e:	f000 faaf 	bl	800d700 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	691a      	ldr	r2, [r3, #16]
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d1b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	695a      	ldr	r2, [r3, #20]
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d1c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	68da      	ldr	r2, [r3, #12]
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800d1d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	2220      	movs	r2, #32
 800d1dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	2220      	movs	r2, #32
 800d1e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800d1ee:	2300      	movs	r3, #0
}
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	3708      	adds	r7, #8
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	bd80      	pop	{r7, pc}

0800d1f8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d1f8:	b580      	push	{r7, lr}
 800d1fa:	b08a      	sub	sp, #40	@ 0x28
 800d1fc:	af02      	add	r7, sp, #8
 800d1fe:	60f8      	str	r0, [r7, #12]
 800d200:	60b9      	str	r1, [r7, #8]
 800d202:	603b      	str	r3, [r7, #0]
 800d204:	4613      	mov	r3, r2
 800d206:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800d208:	2300      	movs	r3, #0
 800d20a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d212:	b2db      	uxtb	r3, r3
 800d214:	2b20      	cmp	r3, #32
 800d216:	d175      	bne.n	800d304 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800d218:	68bb      	ldr	r3, [r7, #8]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d002      	beq.n	800d224 <HAL_UART_Transmit+0x2c>
 800d21e:	88fb      	ldrh	r3, [r7, #6]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d101      	bne.n	800d228 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800d224:	2301      	movs	r3, #1
 800d226:	e06e      	b.n	800d306 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	2200      	movs	r2, #0
 800d22c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	2221      	movs	r2, #33	@ 0x21
 800d232:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d236:	f7fb fe7b 	bl	8008f30 <HAL_GetTick>
 800d23a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	88fa      	ldrh	r2, [r7, #6]
 800d240:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	88fa      	ldrh	r2, [r7, #6]
 800d246:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	689b      	ldr	r3, [r3, #8]
 800d24c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d250:	d108      	bne.n	800d264 <HAL_UART_Transmit+0x6c>
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	691b      	ldr	r3, [r3, #16]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d104      	bne.n	800d264 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800d25a:	2300      	movs	r3, #0
 800d25c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d25e:	68bb      	ldr	r3, [r7, #8]
 800d260:	61bb      	str	r3, [r7, #24]
 800d262:	e003      	b.n	800d26c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800d264:	68bb      	ldr	r3, [r7, #8]
 800d266:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d268:	2300      	movs	r3, #0
 800d26a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d26c:	e02e      	b.n	800d2cc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d26e:	683b      	ldr	r3, [r7, #0]
 800d270:	9300      	str	r3, [sp, #0]
 800d272:	697b      	ldr	r3, [r7, #20]
 800d274:	2200      	movs	r2, #0
 800d276:	2180      	movs	r1, #128	@ 0x80
 800d278:	68f8      	ldr	r0, [r7, #12]
 800d27a:	f000 f933 	bl	800d4e4 <UART_WaitOnFlagUntilTimeout>
 800d27e:	4603      	mov	r3, r0
 800d280:	2b00      	cmp	r3, #0
 800d282:	d005      	beq.n	800d290 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	2220      	movs	r2, #32
 800d288:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800d28c:	2303      	movs	r3, #3
 800d28e:	e03a      	b.n	800d306 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800d290:	69fb      	ldr	r3, [r7, #28]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d10b      	bne.n	800d2ae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d296:	69bb      	ldr	r3, [r7, #24]
 800d298:	881b      	ldrh	r3, [r3, #0]
 800d29a:	461a      	mov	r2, r3
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d2a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800d2a6:	69bb      	ldr	r3, [r7, #24]
 800d2a8:	3302      	adds	r3, #2
 800d2aa:	61bb      	str	r3, [r7, #24]
 800d2ac:	e007      	b.n	800d2be <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800d2ae:	69fb      	ldr	r3, [r7, #28]
 800d2b0:	781a      	ldrb	r2, [r3, #0]
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800d2b8:	69fb      	ldr	r3, [r7, #28]
 800d2ba:	3301      	adds	r3, #1
 800d2bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800d2c2:	b29b      	uxth	r3, r3
 800d2c4:	3b01      	subs	r3, #1
 800d2c6:	b29a      	uxth	r2, r3
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800d2d0:	b29b      	uxth	r3, r3
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d1cb      	bne.n	800d26e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d2d6:	683b      	ldr	r3, [r7, #0]
 800d2d8:	9300      	str	r3, [sp, #0]
 800d2da:	697b      	ldr	r3, [r7, #20]
 800d2dc:	2200      	movs	r2, #0
 800d2de:	2140      	movs	r1, #64	@ 0x40
 800d2e0:	68f8      	ldr	r0, [r7, #12]
 800d2e2:	f000 f8ff 	bl	800d4e4 <UART_WaitOnFlagUntilTimeout>
 800d2e6:	4603      	mov	r3, r0
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d005      	beq.n	800d2f8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	2220      	movs	r2, #32
 800d2f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800d2f4:	2303      	movs	r3, #3
 800d2f6:	e006      	b.n	800d306 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	2220      	movs	r2, #32
 800d2fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800d300:	2300      	movs	r3, #0
 800d302:	e000      	b.n	800d306 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800d304:	2302      	movs	r3, #2
  }
}
 800d306:	4618      	mov	r0, r3
 800d308:	3720      	adds	r7, #32
 800d30a:	46bd      	mov	sp, r7
 800d30c:	bd80      	pop	{r7, pc}

0800d30e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d30e:	b580      	push	{r7, lr}
 800d310:	b084      	sub	sp, #16
 800d312:	af00      	add	r7, sp, #0
 800d314:	60f8      	str	r0, [r7, #12]
 800d316:	60b9      	str	r1, [r7, #8]
 800d318:	4613      	mov	r3, r2
 800d31a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d322:	b2db      	uxtb	r3, r3
 800d324:	2b20      	cmp	r3, #32
 800d326:	d112      	bne.n	800d34e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800d328:	68bb      	ldr	r3, [r7, #8]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d002      	beq.n	800d334 <HAL_UART_Receive_IT+0x26>
 800d32e:	88fb      	ldrh	r3, [r7, #6]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d101      	bne.n	800d338 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800d334:	2301      	movs	r3, #1
 800d336:	e00b      	b.n	800d350 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	2200      	movs	r2, #0
 800d33c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800d33e:	88fb      	ldrh	r3, [r7, #6]
 800d340:	461a      	mov	r2, r3
 800d342:	68b9      	ldr	r1, [r7, #8]
 800d344:	68f8      	ldr	r0, [r7, #12]
 800d346:	f000 f926 	bl	800d596 <UART_Start_Receive_IT>
 800d34a:	4603      	mov	r3, r0
 800d34c:	e000      	b.n	800d350 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800d34e:	2302      	movs	r3, #2
  }
}
 800d350:	4618      	mov	r0, r3
 800d352:	3710      	adds	r7, #16
 800d354:	46bd      	mov	sp, r7
 800d356:	bd80      	pop	{r7, pc}

0800d358 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b09a      	sub	sp, #104	@ 0x68
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	330c      	adds	r3, #12
 800d366:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d368:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d36a:	e853 3f00 	ldrex	r3, [r3]
 800d36e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800d370:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d372:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d376:	667b      	str	r3, [r7, #100]	@ 0x64
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	330c      	adds	r3, #12
 800d37e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d380:	657a      	str	r2, [r7, #84]	@ 0x54
 800d382:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d384:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d386:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d388:	e841 2300 	strex	r3, r2, [r1]
 800d38c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800d38e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d390:	2b00      	cmp	r3, #0
 800d392:	d1e5      	bne.n	800d360 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	3314      	adds	r3, #20
 800d39a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d39c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d39e:	e853 3f00 	ldrex	r3, [r3]
 800d3a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d3a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3a6:	f023 0301 	bic.w	r3, r3, #1
 800d3aa:	663b      	str	r3, [r7, #96]	@ 0x60
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	3314      	adds	r3, #20
 800d3b2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d3b4:	643a      	str	r2, [r7, #64]	@ 0x40
 800d3b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d3ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d3bc:	e841 2300 	strex	r3, r2, [r1]
 800d3c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d3c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d1e5      	bne.n	800d394 <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d3cc:	2b01      	cmp	r3, #1
 800d3ce:	d119      	bne.n	800d404 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	330c      	adds	r3, #12
 800d3d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3d8:	6a3b      	ldr	r3, [r7, #32]
 800d3da:	e853 3f00 	ldrex	r3, [r3]
 800d3de:	61fb      	str	r3, [r7, #28]
   return(result);
 800d3e0:	69fb      	ldr	r3, [r7, #28]
 800d3e2:	f023 0310 	bic.w	r3, r3, #16
 800d3e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	330c      	adds	r3, #12
 800d3ee:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d3f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d3f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d3f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d3f8:	e841 2300 	strex	r3, r2, [r1]
 800d3fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d3fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d400:	2b00      	cmp	r3, #0
 800d402:	d1e5      	bne.n	800d3d0 <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	695b      	ldr	r3, [r3, #20]
 800d40a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d40e:	2b40      	cmp	r3, #64	@ 0x40
 800d410:	d13f      	bne.n	800d492 <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	3314      	adds	r3, #20
 800d418:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	e853 3f00 	ldrex	r3, [r3]
 800d420:	60bb      	str	r3, [r7, #8]
   return(result);
 800d422:	68bb      	ldr	r3, [r7, #8]
 800d424:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d428:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	3314      	adds	r3, #20
 800d430:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d432:	61ba      	str	r2, [r7, #24]
 800d434:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d436:	6979      	ldr	r1, [r7, #20]
 800d438:	69ba      	ldr	r2, [r7, #24]
 800d43a:	e841 2300 	strex	r3, r2, [r1]
 800d43e:	613b      	str	r3, [r7, #16]
   return(result);
 800d440:	693b      	ldr	r3, [r7, #16]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d1e5      	bne.n	800d412 <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d013      	beq.n	800d476 <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d452:	4a19      	ldr	r2, [pc, #100]	@ (800d4b8 <HAL_UART_AbortReceive_IT+0x160>)
 800d454:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d45a:	4618      	mov	r0, r3
 800d45c:	f7fc fbb2 	bl	8009bc4 <HAL_DMA_Abort_IT>
 800d460:	4603      	mov	r3, r0
 800d462:	2b00      	cmp	r3, #0
 800d464:	d022      	beq.n	800d4ac <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d46a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d46c:	687a      	ldr	r2, [r7, #4]
 800d46e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800d470:	4610      	mov	r0, r2
 800d472:	4798      	blx	r3
 800d474:	e01a      	b.n	800d4ac <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	2200      	movs	r2, #0
 800d47a:	85da      	strh	r2, [r3, #46]	@ 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	2220      	movs	r2, #32
 800d480:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	2200      	movs	r2, #0
 800d488:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800d48a:	6878      	ldr	r0, [r7, #4]
 800d48c:	f000 f820 	bl	800d4d0 <HAL_UART_AbortReceiveCpltCallback>
 800d490:	e00c      	b.n	800d4ac <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	2200      	movs	r2, #0
 800d496:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	2220      	movs	r2, #32
 800d49c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800d4a6:	6878      	ldr	r0, [r7, #4]
 800d4a8:	f000 f812 	bl	800d4d0 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800d4ac:	2300      	movs	r3, #0
}
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	3768      	adds	r7, #104	@ 0x68
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	bd80      	pop	{r7, pc}
 800d4b6:	bf00      	nop
 800d4b8:	0800d6d1 	.word	0x0800d6d1

0800d4bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d4bc:	b480      	push	{r7}
 800d4be:	b083      	sub	sp, #12
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800d4c4:	bf00      	nop
 800d4c6:	370c      	adds	r7, #12
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ce:	4770      	bx	lr

0800d4d0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800d4d0:	b480      	push	{r7}
 800d4d2:	b083      	sub	sp, #12
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800d4d8:	bf00      	nop
 800d4da:	370c      	adds	r7, #12
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e2:	4770      	bx	lr

0800d4e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b086      	sub	sp, #24
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	60f8      	str	r0, [r7, #12]
 800d4ec:	60b9      	str	r1, [r7, #8]
 800d4ee:	603b      	str	r3, [r7, #0]
 800d4f0:	4613      	mov	r3, r2
 800d4f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d4f4:	e03b      	b.n	800d56e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d4f6:	6a3b      	ldr	r3, [r7, #32]
 800d4f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4fc:	d037      	beq.n	800d56e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d4fe:	f7fb fd17 	bl	8008f30 <HAL_GetTick>
 800d502:	4602      	mov	r2, r0
 800d504:	683b      	ldr	r3, [r7, #0]
 800d506:	1ad3      	subs	r3, r2, r3
 800d508:	6a3a      	ldr	r2, [r7, #32]
 800d50a:	429a      	cmp	r2, r3
 800d50c:	d302      	bcc.n	800d514 <UART_WaitOnFlagUntilTimeout+0x30>
 800d50e:	6a3b      	ldr	r3, [r7, #32]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d101      	bne.n	800d518 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d514:	2303      	movs	r3, #3
 800d516:	e03a      	b.n	800d58e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	68db      	ldr	r3, [r3, #12]
 800d51e:	f003 0304 	and.w	r3, r3, #4
 800d522:	2b00      	cmp	r3, #0
 800d524:	d023      	beq.n	800d56e <UART_WaitOnFlagUntilTimeout+0x8a>
 800d526:	68bb      	ldr	r3, [r7, #8]
 800d528:	2b80      	cmp	r3, #128	@ 0x80
 800d52a:	d020      	beq.n	800d56e <UART_WaitOnFlagUntilTimeout+0x8a>
 800d52c:	68bb      	ldr	r3, [r7, #8]
 800d52e:	2b40      	cmp	r3, #64	@ 0x40
 800d530:	d01d      	beq.n	800d56e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	f003 0308 	and.w	r3, r3, #8
 800d53c:	2b08      	cmp	r3, #8
 800d53e:	d116      	bne.n	800d56e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800d540:	2300      	movs	r3, #0
 800d542:	617b      	str	r3, [r7, #20]
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	617b      	str	r3, [r7, #20]
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	685b      	ldr	r3, [r3, #4]
 800d552:	617b      	str	r3, [r7, #20]
 800d554:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d556:	68f8      	ldr	r0, [r7, #12]
 800d558:	f000 f857 	bl	800d60a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	2208      	movs	r2, #8
 800d560:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	2200      	movs	r2, #0
 800d566:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800d56a:	2301      	movs	r3, #1
 800d56c:	e00f      	b.n	800d58e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	681a      	ldr	r2, [r3, #0]
 800d574:	68bb      	ldr	r3, [r7, #8]
 800d576:	4013      	ands	r3, r2
 800d578:	68ba      	ldr	r2, [r7, #8]
 800d57a:	429a      	cmp	r2, r3
 800d57c:	bf0c      	ite	eq
 800d57e:	2301      	moveq	r3, #1
 800d580:	2300      	movne	r3, #0
 800d582:	b2db      	uxtb	r3, r3
 800d584:	461a      	mov	r2, r3
 800d586:	79fb      	ldrb	r3, [r7, #7]
 800d588:	429a      	cmp	r2, r3
 800d58a:	d0b4      	beq.n	800d4f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d58c:	2300      	movs	r3, #0
}
 800d58e:	4618      	mov	r0, r3
 800d590:	3718      	adds	r7, #24
 800d592:	46bd      	mov	sp, r7
 800d594:	bd80      	pop	{r7, pc}

0800d596 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d596:	b480      	push	{r7}
 800d598:	b085      	sub	sp, #20
 800d59a:	af00      	add	r7, sp, #0
 800d59c:	60f8      	str	r0, [r7, #12]
 800d59e:	60b9      	str	r1, [r7, #8]
 800d5a0:	4613      	mov	r3, r2
 800d5a2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	68ba      	ldr	r2, [r7, #8]
 800d5a8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	88fa      	ldrh	r2, [r7, #6]
 800d5ae:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	88fa      	ldrh	r2, [r7, #6]
 800d5b4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	2200      	movs	r2, #0
 800d5ba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	2222      	movs	r2, #34	@ 0x22
 800d5c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	691b      	ldr	r3, [r3, #16]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d007      	beq.n	800d5dc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	68da      	ldr	r2, [r3, #12]
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d5da:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	695a      	ldr	r2, [r3, #20]
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	f042 0201 	orr.w	r2, r2, #1
 800d5ea:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	68da      	ldr	r2, [r3, #12]
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	f042 0220 	orr.w	r2, r2, #32
 800d5fa:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d5fc:	2300      	movs	r3, #0
}
 800d5fe:	4618      	mov	r0, r3
 800d600:	3714      	adds	r7, #20
 800d602:	46bd      	mov	sp, r7
 800d604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d608:	4770      	bx	lr

0800d60a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d60a:	b480      	push	{r7}
 800d60c:	b095      	sub	sp, #84	@ 0x54
 800d60e:	af00      	add	r7, sp, #0
 800d610:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	330c      	adds	r3, #12
 800d618:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d61a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d61c:	e853 3f00 	ldrex	r3, [r3]
 800d620:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d624:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d628:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	330c      	adds	r3, #12
 800d630:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d632:	643a      	str	r2, [r7, #64]	@ 0x40
 800d634:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d636:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d638:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d63a:	e841 2300 	strex	r3, r2, [r1]
 800d63e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d642:	2b00      	cmp	r3, #0
 800d644:	d1e5      	bne.n	800d612 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	3314      	adds	r3, #20
 800d64c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d64e:	6a3b      	ldr	r3, [r7, #32]
 800d650:	e853 3f00 	ldrex	r3, [r3]
 800d654:	61fb      	str	r3, [r7, #28]
   return(result);
 800d656:	69fb      	ldr	r3, [r7, #28]
 800d658:	f023 0301 	bic.w	r3, r3, #1
 800d65c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	3314      	adds	r3, #20
 800d664:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d666:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d668:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d66a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d66c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d66e:	e841 2300 	strex	r3, r2, [r1]
 800d672:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d676:	2b00      	cmp	r3, #0
 800d678:	d1e5      	bne.n	800d646 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d67e:	2b01      	cmp	r3, #1
 800d680:	d119      	bne.n	800d6b6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	330c      	adds	r3, #12
 800d688:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	e853 3f00 	ldrex	r3, [r3]
 800d690:	60bb      	str	r3, [r7, #8]
   return(result);
 800d692:	68bb      	ldr	r3, [r7, #8]
 800d694:	f023 0310 	bic.w	r3, r3, #16
 800d698:	647b      	str	r3, [r7, #68]	@ 0x44
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	330c      	adds	r3, #12
 800d6a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d6a2:	61ba      	str	r2, [r7, #24]
 800d6a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6a6:	6979      	ldr	r1, [r7, #20]
 800d6a8:	69ba      	ldr	r2, [r7, #24]
 800d6aa:	e841 2300 	strex	r3, r2, [r1]
 800d6ae:	613b      	str	r3, [r7, #16]
   return(result);
 800d6b0:	693b      	ldr	r3, [r7, #16]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d1e5      	bne.n	800d682 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	2220      	movs	r2, #32
 800d6ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800d6c4:	bf00      	nop
 800d6c6:	3754      	adds	r7, #84	@ 0x54
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ce:	4770      	bx	lr

0800d6d0 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b084      	sub	sp, #16
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d6dc:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	2200      	movs	r2, #0
 800d6e2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	2220      	movs	r2, #32
 800d6e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800d6f2:	68f8      	ldr	r0, [r7, #12]
 800d6f4:	f7ff feec 	bl	800d4d0 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d6f8:	bf00      	nop
 800d6fa:	3710      	adds	r7, #16
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	bd80      	pop	{r7, pc}

0800d700 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d700:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d704:	b0c0      	sub	sp, #256	@ 0x100
 800d706:	af00      	add	r7, sp, #0
 800d708:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d70c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	691b      	ldr	r3, [r3, #16]
 800d714:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800d718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d71c:	68d9      	ldr	r1, [r3, #12]
 800d71e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d722:	681a      	ldr	r2, [r3, #0]
 800d724:	ea40 0301 	orr.w	r3, r0, r1
 800d728:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d72a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d72e:	689a      	ldr	r2, [r3, #8]
 800d730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d734:	691b      	ldr	r3, [r3, #16]
 800d736:	431a      	orrs	r2, r3
 800d738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d73c:	695b      	ldr	r3, [r3, #20]
 800d73e:	431a      	orrs	r2, r3
 800d740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d744:	69db      	ldr	r3, [r3, #28]
 800d746:	4313      	orrs	r3, r2
 800d748:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800d74c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	68db      	ldr	r3, [r3, #12]
 800d754:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800d758:	f021 010c 	bic.w	r1, r1, #12
 800d75c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d760:	681a      	ldr	r2, [r3, #0]
 800d762:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d766:	430b      	orrs	r3, r1
 800d768:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d76a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	695b      	ldr	r3, [r3, #20]
 800d772:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800d776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d77a:	6999      	ldr	r1, [r3, #24]
 800d77c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d780:	681a      	ldr	r2, [r3, #0]
 800d782:	ea40 0301 	orr.w	r3, r0, r1
 800d786:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d78c:	681a      	ldr	r2, [r3, #0]
 800d78e:	4b8f      	ldr	r3, [pc, #572]	@ (800d9cc <UART_SetConfig+0x2cc>)
 800d790:	429a      	cmp	r2, r3
 800d792:	d005      	beq.n	800d7a0 <UART_SetConfig+0xa0>
 800d794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d798:	681a      	ldr	r2, [r3, #0]
 800d79a:	4b8d      	ldr	r3, [pc, #564]	@ (800d9d0 <UART_SetConfig+0x2d0>)
 800d79c:	429a      	cmp	r2, r3
 800d79e:	d104      	bne.n	800d7aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d7a0:	f7fe f986 	bl	800bab0 <HAL_RCC_GetPCLK2Freq>
 800d7a4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800d7a8:	e003      	b.n	800d7b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d7aa:	f7fe f96d 	bl	800ba88 <HAL_RCC_GetPCLK1Freq>
 800d7ae:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d7b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d7b6:	69db      	ldr	r3, [r3, #28]
 800d7b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d7bc:	f040 810c 	bne.w	800d9d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d7c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d7ca:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800d7ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800d7d2:	4622      	mov	r2, r4
 800d7d4:	462b      	mov	r3, r5
 800d7d6:	1891      	adds	r1, r2, r2
 800d7d8:	65b9      	str	r1, [r7, #88]	@ 0x58
 800d7da:	415b      	adcs	r3, r3
 800d7dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d7de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800d7e2:	4621      	mov	r1, r4
 800d7e4:	eb12 0801 	adds.w	r8, r2, r1
 800d7e8:	4629      	mov	r1, r5
 800d7ea:	eb43 0901 	adc.w	r9, r3, r1
 800d7ee:	f04f 0200 	mov.w	r2, #0
 800d7f2:	f04f 0300 	mov.w	r3, #0
 800d7f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d7fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d7fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d802:	4690      	mov	r8, r2
 800d804:	4699      	mov	r9, r3
 800d806:	4623      	mov	r3, r4
 800d808:	eb18 0303 	adds.w	r3, r8, r3
 800d80c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800d810:	462b      	mov	r3, r5
 800d812:	eb49 0303 	adc.w	r3, r9, r3
 800d816:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d81a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d81e:	685b      	ldr	r3, [r3, #4]
 800d820:	2200      	movs	r2, #0
 800d822:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d826:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800d82a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800d82e:	460b      	mov	r3, r1
 800d830:	18db      	adds	r3, r3, r3
 800d832:	653b      	str	r3, [r7, #80]	@ 0x50
 800d834:	4613      	mov	r3, r2
 800d836:	eb42 0303 	adc.w	r3, r2, r3
 800d83a:	657b      	str	r3, [r7, #84]	@ 0x54
 800d83c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800d840:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800d844:	f7f3 f9d0 	bl	8000be8 <__aeabi_uldivmod>
 800d848:	4602      	mov	r2, r0
 800d84a:	460b      	mov	r3, r1
 800d84c:	4b61      	ldr	r3, [pc, #388]	@ (800d9d4 <UART_SetConfig+0x2d4>)
 800d84e:	fba3 2302 	umull	r2, r3, r3, r2
 800d852:	095b      	lsrs	r3, r3, #5
 800d854:	011c      	lsls	r4, r3, #4
 800d856:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d85a:	2200      	movs	r2, #0
 800d85c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d860:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800d864:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800d868:	4642      	mov	r2, r8
 800d86a:	464b      	mov	r3, r9
 800d86c:	1891      	adds	r1, r2, r2
 800d86e:	64b9      	str	r1, [r7, #72]	@ 0x48
 800d870:	415b      	adcs	r3, r3
 800d872:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d874:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800d878:	4641      	mov	r1, r8
 800d87a:	eb12 0a01 	adds.w	sl, r2, r1
 800d87e:	4649      	mov	r1, r9
 800d880:	eb43 0b01 	adc.w	fp, r3, r1
 800d884:	f04f 0200 	mov.w	r2, #0
 800d888:	f04f 0300 	mov.w	r3, #0
 800d88c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800d890:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800d894:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d898:	4692      	mov	sl, r2
 800d89a:	469b      	mov	fp, r3
 800d89c:	4643      	mov	r3, r8
 800d89e:	eb1a 0303 	adds.w	r3, sl, r3
 800d8a2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d8a6:	464b      	mov	r3, r9
 800d8a8:	eb4b 0303 	adc.w	r3, fp, r3
 800d8ac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800d8b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d8b4:	685b      	ldr	r3, [r3, #4]
 800d8b6:	2200      	movs	r2, #0
 800d8b8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d8bc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800d8c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800d8c4:	460b      	mov	r3, r1
 800d8c6:	18db      	adds	r3, r3, r3
 800d8c8:	643b      	str	r3, [r7, #64]	@ 0x40
 800d8ca:	4613      	mov	r3, r2
 800d8cc:	eb42 0303 	adc.w	r3, r2, r3
 800d8d0:	647b      	str	r3, [r7, #68]	@ 0x44
 800d8d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800d8d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800d8da:	f7f3 f985 	bl	8000be8 <__aeabi_uldivmod>
 800d8de:	4602      	mov	r2, r0
 800d8e0:	460b      	mov	r3, r1
 800d8e2:	4611      	mov	r1, r2
 800d8e4:	4b3b      	ldr	r3, [pc, #236]	@ (800d9d4 <UART_SetConfig+0x2d4>)
 800d8e6:	fba3 2301 	umull	r2, r3, r3, r1
 800d8ea:	095b      	lsrs	r3, r3, #5
 800d8ec:	2264      	movs	r2, #100	@ 0x64
 800d8ee:	fb02 f303 	mul.w	r3, r2, r3
 800d8f2:	1acb      	subs	r3, r1, r3
 800d8f4:	00db      	lsls	r3, r3, #3
 800d8f6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800d8fa:	4b36      	ldr	r3, [pc, #216]	@ (800d9d4 <UART_SetConfig+0x2d4>)
 800d8fc:	fba3 2302 	umull	r2, r3, r3, r2
 800d900:	095b      	lsrs	r3, r3, #5
 800d902:	005b      	lsls	r3, r3, #1
 800d904:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800d908:	441c      	add	r4, r3
 800d90a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d90e:	2200      	movs	r2, #0
 800d910:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d914:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800d918:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800d91c:	4642      	mov	r2, r8
 800d91e:	464b      	mov	r3, r9
 800d920:	1891      	adds	r1, r2, r2
 800d922:	63b9      	str	r1, [r7, #56]	@ 0x38
 800d924:	415b      	adcs	r3, r3
 800d926:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d928:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800d92c:	4641      	mov	r1, r8
 800d92e:	1851      	adds	r1, r2, r1
 800d930:	6339      	str	r1, [r7, #48]	@ 0x30
 800d932:	4649      	mov	r1, r9
 800d934:	414b      	adcs	r3, r1
 800d936:	637b      	str	r3, [r7, #52]	@ 0x34
 800d938:	f04f 0200 	mov.w	r2, #0
 800d93c:	f04f 0300 	mov.w	r3, #0
 800d940:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800d944:	4659      	mov	r1, fp
 800d946:	00cb      	lsls	r3, r1, #3
 800d948:	4651      	mov	r1, sl
 800d94a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d94e:	4651      	mov	r1, sl
 800d950:	00ca      	lsls	r2, r1, #3
 800d952:	4610      	mov	r0, r2
 800d954:	4619      	mov	r1, r3
 800d956:	4603      	mov	r3, r0
 800d958:	4642      	mov	r2, r8
 800d95a:	189b      	adds	r3, r3, r2
 800d95c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d960:	464b      	mov	r3, r9
 800d962:	460a      	mov	r2, r1
 800d964:	eb42 0303 	adc.w	r3, r2, r3
 800d968:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d96c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d970:	685b      	ldr	r3, [r3, #4]
 800d972:	2200      	movs	r2, #0
 800d974:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d978:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800d97c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800d980:	460b      	mov	r3, r1
 800d982:	18db      	adds	r3, r3, r3
 800d984:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d986:	4613      	mov	r3, r2
 800d988:	eb42 0303 	adc.w	r3, r2, r3
 800d98c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d98e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800d992:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800d996:	f7f3 f927 	bl	8000be8 <__aeabi_uldivmod>
 800d99a:	4602      	mov	r2, r0
 800d99c:	460b      	mov	r3, r1
 800d99e:	4b0d      	ldr	r3, [pc, #52]	@ (800d9d4 <UART_SetConfig+0x2d4>)
 800d9a0:	fba3 1302 	umull	r1, r3, r3, r2
 800d9a4:	095b      	lsrs	r3, r3, #5
 800d9a6:	2164      	movs	r1, #100	@ 0x64
 800d9a8:	fb01 f303 	mul.w	r3, r1, r3
 800d9ac:	1ad3      	subs	r3, r2, r3
 800d9ae:	00db      	lsls	r3, r3, #3
 800d9b0:	3332      	adds	r3, #50	@ 0x32
 800d9b2:	4a08      	ldr	r2, [pc, #32]	@ (800d9d4 <UART_SetConfig+0x2d4>)
 800d9b4:	fba2 2303 	umull	r2, r3, r2, r3
 800d9b8:	095b      	lsrs	r3, r3, #5
 800d9ba:	f003 0207 	and.w	r2, r3, #7
 800d9be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	4422      	add	r2, r4
 800d9c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d9c8:	e106      	b.n	800dbd8 <UART_SetConfig+0x4d8>
 800d9ca:	bf00      	nop
 800d9cc:	40011000 	.word	0x40011000
 800d9d0:	40011400 	.word	0x40011400
 800d9d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d9d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d9dc:	2200      	movs	r2, #0
 800d9de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d9e2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800d9e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800d9ea:	4642      	mov	r2, r8
 800d9ec:	464b      	mov	r3, r9
 800d9ee:	1891      	adds	r1, r2, r2
 800d9f0:	6239      	str	r1, [r7, #32]
 800d9f2:	415b      	adcs	r3, r3
 800d9f4:	627b      	str	r3, [r7, #36]	@ 0x24
 800d9f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d9fa:	4641      	mov	r1, r8
 800d9fc:	1854      	adds	r4, r2, r1
 800d9fe:	4649      	mov	r1, r9
 800da00:	eb43 0501 	adc.w	r5, r3, r1
 800da04:	f04f 0200 	mov.w	r2, #0
 800da08:	f04f 0300 	mov.w	r3, #0
 800da0c:	00eb      	lsls	r3, r5, #3
 800da0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800da12:	00e2      	lsls	r2, r4, #3
 800da14:	4614      	mov	r4, r2
 800da16:	461d      	mov	r5, r3
 800da18:	4643      	mov	r3, r8
 800da1a:	18e3      	adds	r3, r4, r3
 800da1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800da20:	464b      	mov	r3, r9
 800da22:	eb45 0303 	adc.w	r3, r5, r3
 800da26:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800da2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800da2e:	685b      	ldr	r3, [r3, #4]
 800da30:	2200      	movs	r2, #0
 800da32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800da36:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800da3a:	f04f 0200 	mov.w	r2, #0
 800da3e:	f04f 0300 	mov.w	r3, #0
 800da42:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800da46:	4629      	mov	r1, r5
 800da48:	008b      	lsls	r3, r1, #2
 800da4a:	4621      	mov	r1, r4
 800da4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800da50:	4621      	mov	r1, r4
 800da52:	008a      	lsls	r2, r1, #2
 800da54:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800da58:	f7f3 f8c6 	bl	8000be8 <__aeabi_uldivmod>
 800da5c:	4602      	mov	r2, r0
 800da5e:	460b      	mov	r3, r1
 800da60:	4b60      	ldr	r3, [pc, #384]	@ (800dbe4 <UART_SetConfig+0x4e4>)
 800da62:	fba3 2302 	umull	r2, r3, r3, r2
 800da66:	095b      	lsrs	r3, r3, #5
 800da68:	011c      	lsls	r4, r3, #4
 800da6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800da6e:	2200      	movs	r2, #0
 800da70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800da74:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800da78:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800da7c:	4642      	mov	r2, r8
 800da7e:	464b      	mov	r3, r9
 800da80:	1891      	adds	r1, r2, r2
 800da82:	61b9      	str	r1, [r7, #24]
 800da84:	415b      	adcs	r3, r3
 800da86:	61fb      	str	r3, [r7, #28]
 800da88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800da8c:	4641      	mov	r1, r8
 800da8e:	1851      	adds	r1, r2, r1
 800da90:	6139      	str	r1, [r7, #16]
 800da92:	4649      	mov	r1, r9
 800da94:	414b      	adcs	r3, r1
 800da96:	617b      	str	r3, [r7, #20]
 800da98:	f04f 0200 	mov.w	r2, #0
 800da9c:	f04f 0300 	mov.w	r3, #0
 800daa0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800daa4:	4659      	mov	r1, fp
 800daa6:	00cb      	lsls	r3, r1, #3
 800daa8:	4651      	mov	r1, sl
 800daaa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800daae:	4651      	mov	r1, sl
 800dab0:	00ca      	lsls	r2, r1, #3
 800dab2:	4610      	mov	r0, r2
 800dab4:	4619      	mov	r1, r3
 800dab6:	4603      	mov	r3, r0
 800dab8:	4642      	mov	r2, r8
 800daba:	189b      	adds	r3, r3, r2
 800dabc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800dac0:	464b      	mov	r3, r9
 800dac2:	460a      	mov	r2, r1
 800dac4:	eb42 0303 	adc.w	r3, r2, r3
 800dac8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800dacc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dad0:	685b      	ldr	r3, [r3, #4]
 800dad2:	2200      	movs	r2, #0
 800dad4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800dad6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800dad8:	f04f 0200 	mov.w	r2, #0
 800dadc:	f04f 0300 	mov.w	r3, #0
 800dae0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800dae4:	4649      	mov	r1, r9
 800dae6:	008b      	lsls	r3, r1, #2
 800dae8:	4641      	mov	r1, r8
 800daea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800daee:	4641      	mov	r1, r8
 800daf0:	008a      	lsls	r2, r1, #2
 800daf2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800daf6:	f7f3 f877 	bl	8000be8 <__aeabi_uldivmod>
 800dafa:	4602      	mov	r2, r0
 800dafc:	460b      	mov	r3, r1
 800dafe:	4611      	mov	r1, r2
 800db00:	4b38      	ldr	r3, [pc, #224]	@ (800dbe4 <UART_SetConfig+0x4e4>)
 800db02:	fba3 2301 	umull	r2, r3, r3, r1
 800db06:	095b      	lsrs	r3, r3, #5
 800db08:	2264      	movs	r2, #100	@ 0x64
 800db0a:	fb02 f303 	mul.w	r3, r2, r3
 800db0e:	1acb      	subs	r3, r1, r3
 800db10:	011b      	lsls	r3, r3, #4
 800db12:	3332      	adds	r3, #50	@ 0x32
 800db14:	4a33      	ldr	r2, [pc, #204]	@ (800dbe4 <UART_SetConfig+0x4e4>)
 800db16:	fba2 2303 	umull	r2, r3, r2, r3
 800db1a:	095b      	lsrs	r3, r3, #5
 800db1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800db20:	441c      	add	r4, r3
 800db22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800db26:	2200      	movs	r2, #0
 800db28:	673b      	str	r3, [r7, #112]	@ 0x70
 800db2a:	677a      	str	r2, [r7, #116]	@ 0x74
 800db2c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800db30:	4642      	mov	r2, r8
 800db32:	464b      	mov	r3, r9
 800db34:	1891      	adds	r1, r2, r2
 800db36:	60b9      	str	r1, [r7, #8]
 800db38:	415b      	adcs	r3, r3
 800db3a:	60fb      	str	r3, [r7, #12]
 800db3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800db40:	4641      	mov	r1, r8
 800db42:	1851      	adds	r1, r2, r1
 800db44:	6039      	str	r1, [r7, #0]
 800db46:	4649      	mov	r1, r9
 800db48:	414b      	adcs	r3, r1
 800db4a:	607b      	str	r3, [r7, #4]
 800db4c:	f04f 0200 	mov.w	r2, #0
 800db50:	f04f 0300 	mov.w	r3, #0
 800db54:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800db58:	4659      	mov	r1, fp
 800db5a:	00cb      	lsls	r3, r1, #3
 800db5c:	4651      	mov	r1, sl
 800db5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800db62:	4651      	mov	r1, sl
 800db64:	00ca      	lsls	r2, r1, #3
 800db66:	4610      	mov	r0, r2
 800db68:	4619      	mov	r1, r3
 800db6a:	4603      	mov	r3, r0
 800db6c:	4642      	mov	r2, r8
 800db6e:	189b      	adds	r3, r3, r2
 800db70:	66bb      	str	r3, [r7, #104]	@ 0x68
 800db72:	464b      	mov	r3, r9
 800db74:	460a      	mov	r2, r1
 800db76:	eb42 0303 	adc.w	r3, r2, r3
 800db7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800db7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800db80:	685b      	ldr	r3, [r3, #4]
 800db82:	2200      	movs	r2, #0
 800db84:	663b      	str	r3, [r7, #96]	@ 0x60
 800db86:	667a      	str	r2, [r7, #100]	@ 0x64
 800db88:	f04f 0200 	mov.w	r2, #0
 800db8c:	f04f 0300 	mov.w	r3, #0
 800db90:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800db94:	4649      	mov	r1, r9
 800db96:	008b      	lsls	r3, r1, #2
 800db98:	4641      	mov	r1, r8
 800db9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800db9e:	4641      	mov	r1, r8
 800dba0:	008a      	lsls	r2, r1, #2
 800dba2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800dba6:	f7f3 f81f 	bl	8000be8 <__aeabi_uldivmod>
 800dbaa:	4602      	mov	r2, r0
 800dbac:	460b      	mov	r3, r1
 800dbae:	4b0d      	ldr	r3, [pc, #52]	@ (800dbe4 <UART_SetConfig+0x4e4>)
 800dbb0:	fba3 1302 	umull	r1, r3, r3, r2
 800dbb4:	095b      	lsrs	r3, r3, #5
 800dbb6:	2164      	movs	r1, #100	@ 0x64
 800dbb8:	fb01 f303 	mul.w	r3, r1, r3
 800dbbc:	1ad3      	subs	r3, r2, r3
 800dbbe:	011b      	lsls	r3, r3, #4
 800dbc0:	3332      	adds	r3, #50	@ 0x32
 800dbc2:	4a08      	ldr	r2, [pc, #32]	@ (800dbe4 <UART_SetConfig+0x4e4>)
 800dbc4:	fba2 2303 	umull	r2, r3, r2, r3
 800dbc8:	095b      	lsrs	r3, r3, #5
 800dbca:	f003 020f 	and.w	r2, r3, #15
 800dbce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	4422      	add	r2, r4
 800dbd6:	609a      	str	r2, [r3, #8]
}
 800dbd8:	bf00      	nop
 800dbda:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dbe4:	51eb851f 	.word	0x51eb851f

0800dbe8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800dbec:	4b05      	ldr	r3, [pc, #20]	@ (800dc04 <SysTick_Handler+0x1c>)
 800dbee:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800dbf0:	f002 f838 	bl	800fc64 <xTaskGetSchedulerState>
 800dbf4:	4603      	mov	r3, r0
 800dbf6:	2b01      	cmp	r3, #1
 800dbf8:	d001      	beq.n	800dbfe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800dbfa:	f002 ff65 	bl	8010ac8 <xPortSysTickHandler>
  }
}
 800dbfe:	bf00      	nop
 800dc00:	bd80      	pop	{r7, pc}
 800dc02:	bf00      	nop
 800dc04:	e000e010 	.word	0xe000e010

0800dc08 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800dc08:	b480      	push	{r7}
 800dc0a:	b085      	sub	sp, #20
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	60f8      	str	r0, [r7, #12]
 800dc10:	60b9      	str	r1, [r7, #8]
 800dc12:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	4a07      	ldr	r2, [pc, #28]	@ (800dc34 <vApplicationGetIdleTaskMemory+0x2c>)
 800dc18:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800dc1a:	68bb      	ldr	r3, [r7, #8]
 800dc1c:	4a06      	ldr	r2, [pc, #24]	@ (800dc38 <vApplicationGetIdleTaskMemory+0x30>)
 800dc1e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	2280      	movs	r2, #128	@ 0x80
 800dc24:	601a      	str	r2, [r3, #0]
}
 800dc26:	bf00      	nop
 800dc28:	3714      	adds	r7, #20
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc30:	4770      	bx	lr
 800dc32:	bf00      	nop
 800dc34:	20002160 	.word	0x20002160
 800dc38:	20002208 	.word	0x20002208

0800dc3c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800dc3c:	b480      	push	{r7}
 800dc3e:	b085      	sub	sp, #20
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	60f8      	str	r0, [r7, #12]
 800dc44:	60b9      	str	r1, [r7, #8]
 800dc46:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	4a07      	ldr	r2, [pc, #28]	@ (800dc68 <vApplicationGetTimerTaskMemory+0x2c>)
 800dc4c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800dc4e:	68bb      	ldr	r3, [r7, #8]
 800dc50:	4a06      	ldr	r2, [pc, #24]	@ (800dc6c <vApplicationGetTimerTaskMemory+0x30>)
 800dc52:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800dc5a:	601a      	str	r2, [r3, #0]
}
 800dc5c:	bf00      	nop
 800dc5e:	3714      	adds	r7, #20
 800dc60:	46bd      	mov	sp, r7
 800dc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc66:	4770      	bx	lr
 800dc68:	20002408 	.word	0x20002408
 800dc6c:	200024b0 	.word	0x200024b0

0800dc70 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b082      	sub	sp, #8
 800dc74:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800dc76:	2020      	movs	r0, #32
 800dc78:	f002 ffb8 	bl	8010bec <pvPortMalloc>
 800dc7c:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d00a      	beq.n	800dc9a <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	2200      	movs	r2, #0
 800dc88:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	3304      	adds	r3, #4
 800dc8e:	4618      	mov	r0, r3
 800dc90:	f000 f9aa 	bl	800dfe8 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	2200      	movs	r2, #0
 800dc98:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800dc9a:	687b      	ldr	r3, [r7, #4]
	}
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	3708      	adds	r7, #8
 800dca0:	46bd      	mov	sp, r7
 800dca2:	bd80      	pop	{r7, pc}

0800dca4 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b090      	sub	sp, #64	@ 0x40
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	60f8      	str	r0, [r7, #12]
 800dcac:	60b9      	str	r1, [r7, #8]
 800dcae:	607a      	str	r2, [r7, #4]
 800dcb0:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800dcba:	2300      	movs	r3, #0
 800dcbc:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d10b      	bne.n	800dcdc <xEventGroupWaitBits+0x38>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800dcc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcc8:	f383 8811 	msr	BASEPRI, r3
 800dccc:	f3bf 8f6f 	isb	sy
 800dcd0:	f3bf 8f4f 	dsb	sy
 800dcd4:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800dcd6:	bf00      	nop
 800dcd8:	bf00      	nop
 800dcda:	e7fd      	b.n	800dcd8 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800dcdc:	68bb      	ldr	r3, [r7, #8]
 800dcde:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800dce2:	d30b      	bcc.n	800dcfc <xEventGroupWaitBits+0x58>
	__asm volatile
 800dce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dce8:	f383 8811 	msr	BASEPRI, r3
 800dcec:	f3bf 8f6f 	isb	sy
 800dcf0:	f3bf 8f4f 	dsb	sy
 800dcf4:	61fb      	str	r3, [r7, #28]
}
 800dcf6:	bf00      	nop
 800dcf8:	bf00      	nop
 800dcfa:	e7fd      	b.n	800dcf8 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800dcfc:	68bb      	ldr	r3, [r7, #8]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d10b      	bne.n	800dd1a <xEventGroupWaitBits+0x76>
	__asm volatile
 800dd02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd06:	f383 8811 	msr	BASEPRI, r3
 800dd0a:	f3bf 8f6f 	isb	sy
 800dd0e:	f3bf 8f4f 	dsb	sy
 800dd12:	61bb      	str	r3, [r7, #24]
}
 800dd14:	bf00      	nop
 800dd16:	bf00      	nop
 800dd18:	e7fd      	b.n	800dd16 <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dd1a:	f001 ffa3 	bl	800fc64 <xTaskGetSchedulerState>
 800dd1e:	4603      	mov	r3, r0
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d102      	bne.n	800dd2a <xEventGroupWaitBits+0x86>
 800dd24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d101      	bne.n	800dd2e <xEventGroupWaitBits+0x8a>
 800dd2a:	2301      	movs	r3, #1
 800dd2c:	e000      	b.n	800dd30 <xEventGroupWaitBits+0x8c>
 800dd2e:	2300      	movs	r3, #0
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d10b      	bne.n	800dd4c <xEventGroupWaitBits+0xa8>
	__asm volatile
 800dd34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd38:	f383 8811 	msr	BASEPRI, r3
 800dd3c:	f3bf 8f6f 	isb	sy
 800dd40:	f3bf 8f4f 	dsb	sy
 800dd44:	617b      	str	r3, [r7, #20]
}
 800dd46:	bf00      	nop
 800dd48:	bf00      	nop
 800dd4a:	e7fd      	b.n	800dd48 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 800dd4c:	f001 faf4 	bl	800f338 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800dd50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800dd56:	683a      	ldr	r2, [r7, #0]
 800dd58:	68b9      	ldr	r1, [r7, #8]
 800dd5a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dd5c:	f000 f90d 	bl	800df7a <prvTestWaitCondition>
 800dd60:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 800dd62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d00e      	beq.n	800dd86 <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800dd68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d028      	beq.n	800ddc8 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800dd76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd78:	681a      	ldr	r2, [r3, #0]
 800dd7a:	68bb      	ldr	r3, [r7, #8]
 800dd7c:	43db      	mvns	r3, r3
 800dd7e:	401a      	ands	r2, r3
 800dd80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd82:	601a      	str	r2, [r3, #0]
 800dd84:	e020      	b.n	800ddc8 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800dd86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d104      	bne.n	800dd96 <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800dd8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 800dd90:	2301      	movs	r3, #1
 800dd92:	633b      	str	r3, [r7, #48]	@ 0x30
 800dd94:	e018      	b.n	800ddc8 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d003      	beq.n	800dda4 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800dd9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800dda2:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800dda4:	683b      	ldr	r3, [r7, #0]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d003      	beq.n	800ddb2 <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800ddaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ddb0:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800ddb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ddb4:	1d18      	adds	r0, r3, #4
 800ddb6:	68ba      	ldr	r2, [r7, #8]
 800ddb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddba:	4313      	orrs	r3, r2
 800ddbc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ddbe:	4619      	mov	r1, r3
 800ddc0:	f001 fcbc 	bl	800f73c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800ddc8:	f001 fac4 	bl	800f354 <xTaskResumeAll>
 800ddcc:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800ddce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d031      	beq.n	800de38 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 800ddd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d107      	bne.n	800ddea <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 800ddda:	4b1a      	ldr	r3, [pc, #104]	@ (800de44 <xEventGroupWaitBits+0x1a0>)
 800dddc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dde0:	601a      	str	r2, [r3, #0]
 800dde2:	f3bf 8f4f 	dsb	sy
 800dde6:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800ddea:	f002 f8b5 	bl	800ff58 <uxTaskResetEventItemValue>
 800ddee:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800ddf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ddf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d11a      	bne.n	800de30 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 800ddfa:	f002 fdd5 	bl	80109a8 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800ddfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800de04:	683a      	ldr	r2, [r7, #0]
 800de06:	68b9      	ldr	r1, [r7, #8]
 800de08:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800de0a:	f000 f8b6 	bl	800df7a <prvTestWaitCondition>
 800de0e:	4603      	mov	r3, r0
 800de10:	2b00      	cmp	r3, #0
 800de12:	d009      	beq.n	800de28 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d006      	beq.n	800de28 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800de1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de1c:	681a      	ldr	r2, [r3, #0]
 800de1e:	68bb      	ldr	r3, [r7, #8]
 800de20:	43db      	mvns	r3, r3
 800de22:	401a      	ands	r2, r3
 800de24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de26:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800de28:	2301      	movs	r3, #1
 800de2a:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 800de2c:	f002 fdee 	bl	8010a0c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800de30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de32:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800de36:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800de38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800de3a:	4618      	mov	r0, r3
 800de3c:	3740      	adds	r7, #64	@ 0x40
 800de3e:	46bd      	mov	sp, r7
 800de40:	bd80      	pop	{r7, pc}
 800de42:	bf00      	nop
 800de44:	e000ed04 	.word	0xe000ed04

0800de48 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800de48:	b580      	push	{r7, lr}
 800de4a:	b08e      	sub	sp, #56	@ 0x38
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	6078      	str	r0, [r7, #4]
 800de50:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800de52:	2300      	movs	r3, #0
 800de54:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 800de5a:	2300      	movs	r3, #0
 800de5c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d10b      	bne.n	800de7c <xEventGroupSetBits+0x34>
	__asm volatile
 800de64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de68:	f383 8811 	msr	BASEPRI, r3
 800de6c:	f3bf 8f6f 	isb	sy
 800de70:	f3bf 8f4f 	dsb	sy
 800de74:	613b      	str	r3, [r7, #16]
}
 800de76:	bf00      	nop
 800de78:	bf00      	nop
 800de7a:	e7fd      	b.n	800de78 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800de7c:	683b      	ldr	r3, [r7, #0]
 800de7e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800de82:	d30b      	bcc.n	800de9c <xEventGroupSetBits+0x54>
	__asm volatile
 800de84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de88:	f383 8811 	msr	BASEPRI, r3
 800de8c:	f3bf 8f6f 	isb	sy
 800de90:	f3bf 8f4f 	dsb	sy
 800de94:	60fb      	str	r3, [r7, #12]
}
 800de96:	bf00      	nop
 800de98:	bf00      	nop
 800de9a:	e7fd      	b.n	800de98 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800de9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de9e:	3304      	adds	r3, #4
 800dea0:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dea4:	3308      	adds	r3, #8
 800dea6:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800dea8:	f001 fa46 	bl	800f338 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800deac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800deae:	68db      	ldr	r3, [r3, #12]
 800deb0:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800deb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800deb4:	681a      	ldr	r2, [r3, #0]
 800deb6:	683b      	ldr	r3, [r7, #0]
 800deb8:	431a      	orrs	r2, r3
 800deba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800debc:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800debe:	e03c      	b.n	800df3a <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 800dec0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dec2:	685b      	ldr	r3, [r3, #4]
 800dec4:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800dec6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800decc:	2300      	movs	r3, #0
 800dece:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800ded0:	69bb      	ldr	r3, [r7, #24]
 800ded2:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800ded6:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800ded8:	69bb      	ldr	r3, [r7, #24]
 800deda:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800dede:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800dee0:	697b      	ldr	r3, [r7, #20]
 800dee2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d108      	bne.n	800defc <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800deea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800deec:	681a      	ldr	r2, [r3, #0]
 800deee:	69bb      	ldr	r3, [r7, #24]
 800def0:	4013      	ands	r3, r2
 800def2:	2b00      	cmp	r3, #0
 800def4:	d00b      	beq.n	800df0e <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 800def6:	2301      	movs	r3, #1
 800def8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800defa:	e008      	b.n	800df0e <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800defc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800defe:	681a      	ldr	r2, [r3, #0]
 800df00:	69bb      	ldr	r3, [r7, #24]
 800df02:	4013      	ands	r3, r2
 800df04:	69ba      	ldr	r2, [r7, #24]
 800df06:	429a      	cmp	r2, r3
 800df08:	d101      	bne.n	800df0e <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800df0a:	2301      	movs	r3, #1
 800df0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800df0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df10:	2b00      	cmp	r3, #0
 800df12:	d010      	beq.n	800df36 <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800df14:	697b      	ldr	r3, [r7, #20]
 800df16:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d003      	beq.n	800df26 <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800df1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800df20:	69bb      	ldr	r3, [r7, #24]
 800df22:	4313      	orrs	r3, r2
 800df24:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800df26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800df2e:	4619      	mov	r1, r3
 800df30:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800df32:	f001 fcd1 	bl	800f8d8 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800df36:	69fb      	ldr	r3, [r7, #28]
 800df38:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 800df3a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800df3c:	6a3b      	ldr	r3, [r7, #32]
 800df3e:	429a      	cmp	r2, r3
 800df40:	d1be      	bne.n	800dec0 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800df42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df44:	681a      	ldr	r2, [r3, #0]
 800df46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df48:	43db      	mvns	r3, r3
 800df4a:	401a      	ands	r2, r3
 800df4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df4e:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800df50:	f001 fa00 	bl	800f354 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800df54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df56:	681b      	ldr	r3, [r3, #0]
}
 800df58:	4618      	mov	r0, r3
 800df5a:	3738      	adds	r7, #56	@ 0x38
 800df5c:	46bd      	mov	sp, r7
 800df5e:	bd80      	pop	{r7, pc}

0800df60 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800df60:	b580      	push	{r7, lr}
 800df62:	b082      	sub	sp, #8
 800df64:	af00      	add	r7, sp, #0
 800df66:	6078      	str	r0, [r7, #4]
 800df68:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800df6a:	6839      	ldr	r1, [r7, #0]
 800df6c:	6878      	ldr	r0, [r7, #4]
 800df6e:	f7ff ff6b 	bl	800de48 <xEventGroupSetBits>
}
 800df72:	bf00      	nop
 800df74:	3708      	adds	r7, #8
 800df76:	46bd      	mov	sp, r7
 800df78:	bd80      	pop	{r7, pc}

0800df7a <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800df7a:	b480      	push	{r7}
 800df7c:	b087      	sub	sp, #28
 800df7e:	af00      	add	r7, sp, #0
 800df80:	60f8      	str	r0, [r7, #12]
 800df82:	60b9      	str	r1, [r7, #8]
 800df84:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800df86:	2300      	movs	r3, #0
 800df88:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d107      	bne.n	800dfa0 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800df90:	68fa      	ldr	r2, [r7, #12]
 800df92:	68bb      	ldr	r3, [r7, #8]
 800df94:	4013      	ands	r3, r2
 800df96:	2b00      	cmp	r3, #0
 800df98:	d00a      	beq.n	800dfb0 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800df9a:	2301      	movs	r3, #1
 800df9c:	617b      	str	r3, [r7, #20]
 800df9e:	e007      	b.n	800dfb0 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800dfa0:	68fa      	ldr	r2, [r7, #12]
 800dfa2:	68bb      	ldr	r3, [r7, #8]
 800dfa4:	4013      	ands	r3, r2
 800dfa6:	68ba      	ldr	r2, [r7, #8]
 800dfa8:	429a      	cmp	r2, r3
 800dfaa:	d101      	bne.n	800dfb0 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800dfac:	2301      	movs	r3, #1
 800dfae:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800dfb0:	697b      	ldr	r3, [r7, #20]
}
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	371c      	adds	r7, #28
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfbc:	4770      	bx	lr
	...

0800dfc0 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b086      	sub	sp, #24
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	60f8      	str	r0, [r7, #12]
 800dfc8:	60b9      	str	r1, [r7, #8]
 800dfca:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	68ba      	ldr	r2, [r7, #8]
 800dfd0:	68f9      	ldr	r1, [r7, #12]
 800dfd2:	4804      	ldr	r0, [pc, #16]	@ (800dfe4 <xEventGroupSetBitsFromISR+0x24>)
 800dfd4:	f002 fb9a 	bl	801070c <xTimerPendFunctionCallFromISR>
 800dfd8:	6178      	str	r0, [r7, #20]

		return xReturn;
 800dfda:	697b      	ldr	r3, [r7, #20]
	}
 800dfdc:	4618      	mov	r0, r3
 800dfde:	3718      	adds	r7, #24
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	bd80      	pop	{r7, pc}
 800dfe4:	0800df61 	.word	0x0800df61

0800dfe8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800dfe8:	b480      	push	{r7}
 800dfea:	b083      	sub	sp, #12
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	f103 0208 	add.w	r2, r3, #8
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	f04f 32ff 	mov.w	r2, #4294967295
 800e000:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	f103 0208 	add.w	r2, r3, #8
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	f103 0208 	add.w	r2, r3, #8
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	2200      	movs	r2, #0
 800e01a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e01c:	bf00      	nop
 800e01e:	370c      	adds	r7, #12
 800e020:	46bd      	mov	sp, r7
 800e022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e026:	4770      	bx	lr

0800e028 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e028:	b480      	push	{r7}
 800e02a:	b083      	sub	sp, #12
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	2200      	movs	r2, #0
 800e034:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e036:	bf00      	nop
 800e038:	370c      	adds	r7, #12
 800e03a:	46bd      	mov	sp, r7
 800e03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e040:	4770      	bx	lr

0800e042 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e042:	b480      	push	{r7}
 800e044:	b085      	sub	sp, #20
 800e046:	af00      	add	r7, sp, #0
 800e048:	6078      	str	r0, [r7, #4]
 800e04a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	685b      	ldr	r3, [r3, #4]
 800e050:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e052:	683b      	ldr	r3, [r7, #0]
 800e054:	68fa      	ldr	r2, [r7, #12]
 800e056:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	689a      	ldr	r2, [r3, #8]
 800e05c:	683b      	ldr	r3, [r7, #0]
 800e05e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	689b      	ldr	r3, [r3, #8]
 800e064:	683a      	ldr	r2, [r7, #0]
 800e066:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	683a      	ldr	r2, [r7, #0]
 800e06c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e06e:	683b      	ldr	r3, [r7, #0]
 800e070:	687a      	ldr	r2, [r7, #4]
 800e072:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	1c5a      	adds	r2, r3, #1
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	601a      	str	r2, [r3, #0]
}
 800e07e:	bf00      	nop
 800e080:	3714      	adds	r7, #20
 800e082:	46bd      	mov	sp, r7
 800e084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e088:	4770      	bx	lr

0800e08a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e08a:	b480      	push	{r7}
 800e08c:	b085      	sub	sp, #20
 800e08e:	af00      	add	r7, sp, #0
 800e090:	6078      	str	r0, [r7, #4]
 800e092:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e094:	683b      	ldr	r3, [r7, #0]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e09a:	68bb      	ldr	r3, [r7, #8]
 800e09c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0a0:	d103      	bne.n	800e0aa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	691b      	ldr	r3, [r3, #16]
 800e0a6:	60fb      	str	r3, [r7, #12]
 800e0a8:	e00c      	b.n	800e0c4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	3308      	adds	r3, #8
 800e0ae:	60fb      	str	r3, [r7, #12]
 800e0b0:	e002      	b.n	800e0b8 <vListInsert+0x2e>
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	685b      	ldr	r3, [r3, #4]
 800e0b6:	60fb      	str	r3, [r7, #12]
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	685b      	ldr	r3, [r3, #4]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	68ba      	ldr	r2, [r7, #8]
 800e0c0:	429a      	cmp	r2, r3
 800e0c2:	d2f6      	bcs.n	800e0b2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	685a      	ldr	r2, [r3, #4]
 800e0c8:	683b      	ldr	r3, [r7, #0]
 800e0ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e0cc:	683b      	ldr	r3, [r7, #0]
 800e0ce:	685b      	ldr	r3, [r3, #4]
 800e0d0:	683a      	ldr	r2, [r7, #0]
 800e0d2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e0d4:	683b      	ldr	r3, [r7, #0]
 800e0d6:	68fa      	ldr	r2, [r7, #12]
 800e0d8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	683a      	ldr	r2, [r7, #0]
 800e0de:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e0e0:	683b      	ldr	r3, [r7, #0]
 800e0e2:	687a      	ldr	r2, [r7, #4]
 800e0e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	1c5a      	adds	r2, r3, #1
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	601a      	str	r2, [r3, #0]
}
 800e0f0:	bf00      	nop
 800e0f2:	3714      	adds	r7, #20
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fa:	4770      	bx	lr

0800e0fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e0fc:	b480      	push	{r7}
 800e0fe:	b085      	sub	sp, #20
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	691b      	ldr	r3, [r3, #16]
 800e108:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	685b      	ldr	r3, [r3, #4]
 800e10e:	687a      	ldr	r2, [r7, #4]
 800e110:	6892      	ldr	r2, [r2, #8]
 800e112:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	689b      	ldr	r3, [r3, #8]
 800e118:	687a      	ldr	r2, [r7, #4]
 800e11a:	6852      	ldr	r2, [r2, #4]
 800e11c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	685b      	ldr	r3, [r3, #4]
 800e122:	687a      	ldr	r2, [r7, #4]
 800e124:	429a      	cmp	r2, r3
 800e126:	d103      	bne.n	800e130 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	689a      	ldr	r2, [r3, #8]
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	2200      	movs	r2, #0
 800e134:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	1e5a      	subs	r2, r3, #1
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	681b      	ldr	r3, [r3, #0]
}
 800e144:	4618      	mov	r0, r3
 800e146:	3714      	adds	r7, #20
 800e148:	46bd      	mov	sp, r7
 800e14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14e:	4770      	bx	lr

0800e150 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e150:	b580      	push	{r7, lr}
 800e152:	b084      	sub	sp, #16
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
 800e158:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	2b00      	cmp	r3, #0
 800e162:	d10b      	bne.n	800e17c <xQueueGenericReset+0x2c>
	__asm volatile
 800e164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e168:	f383 8811 	msr	BASEPRI, r3
 800e16c:	f3bf 8f6f 	isb	sy
 800e170:	f3bf 8f4f 	dsb	sy
 800e174:	60bb      	str	r3, [r7, #8]
}
 800e176:	bf00      	nop
 800e178:	bf00      	nop
 800e17a:	e7fd      	b.n	800e178 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e17c:	f002 fc14 	bl	80109a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	681a      	ldr	r2, [r3, #0]
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e188:	68f9      	ldr	r1, [r7, #12]
 800e18a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800e18c:	fb01 f303 	mul.w	r3, r1, r3
 800e190:	441a      	add	r2, r3
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	2200      	movs	r2, #0
 800e19a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	681a      	ldr	r2, [r3, #0]
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	681a      	ldr	r2, [r3, #0]
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e1ac:	3b01      	subs	r3, #1
 800e1ae:	68f9      	ldr	r1, [r7, #12]
 800e1b0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800e1b2:	fb01 f303 	mul.w	r3, r1, r3
 800e1b6:	441a      	add	r2, r3
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	22ff      	movs	r2, #255	@ 0xff
 800e1c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	22ff      	movs	r2, #255	@ 0xff
 800e1c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800e1cc:	683b      	ldr	r3, [r7, #0]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d114      	bne.n	800e1fc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	691b      	ldr	r3, [r3, #16]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d01a      	beq.n	800e210 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	3310      	adds	r3, #16
 800e1de:	4618      	mov	r0, r3
 800e1e0:	f001 fb16 	bl	800f810 <xTaskRemoveFromEventList>
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d012      	beq.n	800e210 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e1ea:	4b0d      	ldr	r3, [pc, #52]	@ (800e220 <xQueueGenericReset+0xd0>)
 800e1ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e1f0:	601a      	str	r2, [r3, #0]
 800e1f2:	f3bf 8f4f 	dsb	sy
 800e1f6:	f3bf 8f6f 	isb	sy
 800e1fa:	e009      	b.n	800e210 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	3310      	adds	r3, #16
 800e200:	4618      	mov	r0, r3
 800e202:	f7ff fef1 	bl	800dfe8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	3324      	adds	r3, #36	@ 0x24
 800e20a:	4618      	mov	r0, r3
 800e20c:	f7ff feec 	bl	800dfe8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e210:	f002 fbfc 	bl	8010a0c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e214:	2301      	movs	r3, #1
}
 800e216:	4618      	mov	r0, r3
 800e218:	3710      	adds	r7, #16
 800e21a:	46bd      	mov	sp, r7
 800e21c:	bd80      	pop	{r7, pc}
 800e21e:	bf00      	nop
 800e220:	e000ed04 	.word	0xe000ed04

0800e224 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e224:	b580      	push	{r7, lr}
 800e226:	b08e      	sub	sp, #56	@ 0x38
 800e228:	af02      	add	r7, sp, #8
 800e22a:	60f8      	str	r0, [r7, #12]
 800e22c:	60b9      	str	r1, [r7, #8]
 800e22e:	607a      	str	r2, [r7, #4]
 800e230:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d10b      	bne.n	800e250 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800e238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e23c:	f383 8811 	msr	BASEPRI, r3
 800e240:	f3bf 8f6f 	isb	sy
 800e244:	f3bf 8f4f 	dsb	sy
 800e248:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e24a:	bf00      	nop
 800e24c:	bf00      	nop
 800e24e:	e7fd      	b.n	800e24c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e250:	683b      	ldr	r3, [r7, #0]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d10b      	bne.n	800e26e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800e256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e25a:	f383 8811 	msr	BASEPRI, r3
 800e25e:	f3bf 8f6f 	isb	sy
 800e262:	f3bf 8f4f 	dsb	sy
 800e266:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e268:	bf00      	nop
 800e26a:	bf00      	nop
 800e26c:	e7fd      	b.n	800e26a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	2b00      	cmp	r3, #0
 800e272:	d002      	beq.n	800e27a <xQueueGenericCreateStatic+0x56>
 800e274:	68bb      	ldr	r3, [r7, #8]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d001      	beq.n	800e27e <xQueueGenericCreateStatic+0x5a>
 800e27a:	2301      	movs	r3, #1
 800e27c:	e000      	b.n	800e280 <xQueueGenericCreateStatic+0x5c>
 800e27e:	2300      	movs	r3, #0
 800e280:	2b00      	cmp	r3, #0
 800e282:	d10b      	bne.n	800e29c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800e284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e288:	f383 8811 	msr	BASEPRI, r3
 800e28c:	f3bf 8f6f 	isb	sy
 800e290:	f3bf 8f4f 	dsb	sy
 800e294:	623b      	str	r3, [r7, #32]
}
 800e296:	bf00      	nop
 800e298:	bf00      	nop
 800e29a:	e7fd      	b.n	800e298 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d102      	bne.n	800e2a8 <xQueueGenericCreateStatic+0x84>
 800e2a2:	68bb      	ldr	r3, [r7, #8]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d101      	bne.n	800e2ac <xQueueGenericCreateStatic+0x88>
 800e2a8:	2301      	movs	r3, #1
 800e2aa:	e000      	b.n	800e2ae <xQueueGenericCreateStatic+0x8a>
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d10b      	bne.n	800e2ca <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800e2b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2b6:	f383 8811 	msr	BASEPRI, r3
 800e2ba:	f3bf 8f6f 	isb	sy
 800e2be:	f3bf 8f4f 	dsb	sy
 800e2c2:	61fb      	str	r3, [r7, #28]
}
 800e2c4:	bf00      	nop
 800e2c6:	bf00      	nop
 800e2c8:	e7fd      	b.n	800e2c6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e2ca:	2350      	movs	r3, #80	@ 0x50
 800e2cc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e2ce:	697b      	ldr	r3, [r7, #20]
 800e2d0:	2b50      	cmp	r3, #80	@ 0x50
 800e2d2:	d00b      	beq.n	800e2ec <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800e2d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2d8:	f383 8811 	msr	BASEPRI, r3
 800e2dc:	f3bf 8f6f 	isb	sy
 800e2e0:	f3bf 8f4f 	dsb	sy
 800e2e4:	61bb      	str	r3, [r7, #24]
}
 800e2e6:	bf00      	nop
 800e2e8:	bf00      	nop
 800e2ea:	e7fd      	b.n	800e2e8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e2ec:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e2ee:	683b      	ldr	r3, [r7, #0]
 800e2f0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800e2f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d00d      	beq.n	800e314 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e2f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2fa:	2201      	movs	r2, #1
 800e2fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e300:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800e304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e306:	9300      	str	r3, [sp, #0]
 800e308:	4613      	mov	r3, r2
 800e30a:	687a      	ldr	r2, [r7, #4]
 800e30c:	68b9      	ldr	r1, [r7, #8]
 800e30e:	68f8      	ldr	r0, [r7, #12]
 800e310:	f000 f840 	bl	800e394 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800e316:	4618      	mov	r0, r3
 800e318:	3730      	adds	r7, #48	@ 0x30
 800e31a:	46bd      	mov	sp, r7
 800e31c:	bd80      	pop	{r7, pc}

0800e31e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e31e:	b580      	push	{r7, lr}
 800e320:	b08a      	sub	sp, #40	@ 0x28
 800e322:	af02      	add	r7, sp, #8
 800e324:	60f8      	str	r0, [r7, #12]
 800e326:	60b9      	str	r1, [r7, #8]
 800e328:	4613      	mov	r3, r2
 800e32a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d10b      	bne.n	800e34a <xQueueGenericCreate+0x2c>
	__asm volatile
 800e332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e336:	f383 8811 	msr	BASEPRI, r3
 800e33a:	f3bf 8f6f 	isb	sy
 800e33e:	f3bf 8f4f 	dsb	sy
 800e342:	613b      	str	r3, [r7, #16]
}
 800e344:	bf00      	nop
 800e346:	bf00      	nop
 800e348:	e7fd      	b.n	800e346 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	68ba      	ldr	r2, [r7, #8]
 800e34e:	fb02 f303 	mul.w	r3, r2, r3
 800e352:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e354:	69fb      	ldr	r3, [r7, #28]
 800e356:	3350      	adds	r3, #80	@ 0x50
 800e358:	4618      	mov	r0, r3
 800e35a:	f002 fc47 	bl	8010bec <pvPortMalloc>
 800e35e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e360:	69bb      	ldr	r3, [r7, #24]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d011      	beq.n	800e38a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e366:	69bb      	ldr	r3, [r7, #24]
 800e368:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e36a:	697b      	ldr	r3, [r7, #20]
 800e36c:	3350      	adds	r3, #80	@ 0x50
 800e36e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e370:	69bb      	ldr	r3, [r7, #24]
 800e372:	2200      	movs	r2, #0
 800e374:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e378:	79fa      	ldrb	r2, [r7, #7]
 800e37a:	69bb      	ldr	r3, [r7, #24]
 800e37c:	9300      	str	r3, [sp, #0]
 800e37e:	4613      	mov	r3, r2
 800e380:	697a      	ldr	r2, [r7, #20]
 800e382:	68b9      	ldr	r1, [r7, #8]
 800e384:	68f8      	ldr	r0, [r7, #12]
 800e386:	f000 f805 	bl	800e394 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e38a:	69bb      	ldr	r3, [r7, #24]
	}
 800e38c:	4618      	mov	r0, r3
 800e38e:	3720      	adds	r7, #32
 800e390:	46bd      	mov	sp, r7
 800e392:	bd80      	pop	{r7, pc}

0800e394 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e394:	b580      	push	{r7, lr}
 800e396:	b084      	sub	sp, #16
 800e398:	af00      	add	r7, sp, #0
 800e39a:	60f8      	str	r0, [r7, #12]
 800e39c:	60b9      	str	r1, [r7, #8]
 800e39e:	607a      	str	r2, [r7, #4]
 800e3a0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e3a2:	68bb      	ldr	r3, [r7, #8]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d103      	bne.n	800e3b0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e3a8:	69bb      	ldr	r3, [r7, #24]
 800e3aa:	69ba      	ldr	r2, [r7, #24]
 800e3ac:	601a      	str	r2, [r3, #0]
 800e3ae:	e002      	b.n	800e3b6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e3b0:	69bb      	ldr	r3, [r7, #24]
 800e3b2:	687a      	ldr	r2, [r7, #4]
 800e3b4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e3b6:	69bb      	ldr	r3, [r7, #24]
 800e3b8:	68fa      	ldr	r2, [r7, #12]
 800e3ba:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e3bc:	69bb      	ldr	r3, [r7, #24]
 800e3be:	68ba      	ldr	r2, [r7, #8]
 800e3c0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e3c2:	2101      	movs	r1, #1
 800e3c4:	69b8      	ldr	r0, [r7, #24]
 800e3c6:	f7ff fec3 	bl	800e150 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e3ca:	69bb      	ldr	r3, [r7, #24]
 800e3cc:	78fa      	ldrb	r2, [r7, #3]
 800e3ce:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e3d2:	bf00      	nop
 800e3d4:	3710      	adds	r7, #16
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	bd80      	pop	{r7, pc}

0800e3da <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800e3da:	b580      	push	{r7, lr}
 800e3dc:	b082      	sub	sp, #8
 800e3de:	af00      	add	r7, sp, #0
 800e3e0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d00e      	beq.n	800e406 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	2200      	movs	r2, #0
 800e3ec:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	2200      	movs	r2, #0
 800e3f2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	2200      	movs	r2, #0
 800e3f8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	2100      	movs	r1, #0
 800e400:	6878      	ldr	r0, [r7, #4]
 800e402:	f000 f81d 	bl	800e440 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800e406:	bf00      	nop
 800e408:	3708      	adds	r7, #8
 800e40a:	46bd      	mov	sp, r7
 800e40c:	bd80      	pop	{r7, pc}

0800e40e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800e40e:	b580      	push	{r7, lr}
 800e410:	b086      	sub	sp, #24
 800e412:	af00      	add	r7, sp, #0
 800e414:	4603      	mov	r3, r0
 800e416:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e418:	2301      	movs	r3, #1
 800e41a:	617b      	str	r3, [r7, #20]
 800e41c:	2300      	movs	r3, #0
 800e41e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800e420:	79fb      	ldrb	r3, [r7, #7]
 800e422:	461a      	mov	r2, r3
 800e424:	6939      	ldr	r1, [r7, #16]
 800e426:	6978      	ldr	r0, [r7, #20]
 800e428:	f7ff ff79 	bl	800e31e <xQueueGenericCreate>
 800e42c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e42e:	68f8      	ldr	r0, [r7, #12]
 800e430:	f7ff ffd3 	bl	800e3da <prvInitialiseMutex>

		return xNewQueue;
 800e434:	68fb      	ldr	r3, [r7, #12]
	}
 800e436:	4618      	mov	r0, r3
 800e438:	3718      	adds	r7, #24
 800e43a:	46bd      	mov	sp, r7
 800e43c:	bd80      	pop	{r7, pc}
	...

0800e440 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e440:	b580      	push	{r7, lr}
 800e442:	b08e      	sub	sp, #56	@ 0x38
 800e444:	af00      	add	r7, sp, #0
 800e446:	60f8      	str	r0, [r7, #12]
 800e448:	60b9      	str	r1, [r7, #8]
 800e44a:	607a      	str	r2, [r7, #4]
 800e44c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e44e:	2300      	movs	r3, #0
 800e450:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d10b      	bne.n	800e474 <xQueueGenericSend+0x34>
	__asm volatile
 800e45c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e460:	f383 8811 	msr	BASEPRI, r3
 800e464:	f3bf 8f6f 	isb	sy
 800e468:	f3bf 8f4f 	dsb	sy
 800e46c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e46e:	bf00      	nop
 800e470:	bf00      	nop
 800e472:	e7fd      	b.n	800e470 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e474:	68bb      	ldr	r3, [r7, #8]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d103      	bne.n	800e482 <xQueueGenericSend+0x42>
 800e47a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e47c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d101      	bne.n	800e486 <xQueueGenericSend+0x46>
 800e482:	2301      	movs	r3, #1
 800e484:	e000      	b.n	800e488 <xQueueGenericSend+0x48>
 800e486:	2300      	movs	r3, #0
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d10b      	bne.n	800e4a4 <xQueueGenericSend+0x64>
	__asm volatile
 800e48c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e490:	f383 8811 	msr	BASEPRI, r3
 800e494:	f3bf 8f6f 	isb	sy
 800e498:	f3bf 8f4f 	dsb	sy
 800e49c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e49e:	bf00      	nop
 800e4a0:	bf00      	nop
 800e4a2:	e7fd      	b.n	800e4a0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e4a4:	683b      	ldr	r3, [r7, #0]
 800e4a6:	2b02      	cmp	r3, #2
 800e4a8:	d103      	bne.n	800e4b2 <xQueueGenericSend+0x72>
 800e4aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e4ae:	2b01      	cmp	r3, #1
 800e4b0:	d101      	bne.n	800e4b6 <xQueueGenericSend+0x76>
 800e4b2:	2301      	movs	r3, #1
 800e4b4:	e000      	b.n	800e4b8 <xQueueGenericSend+0x78>
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d10b      	bne.n	800e4d4 <xQueueGenericSend+0x94>
	__asm volatile
 800e4bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4c0:	f383 8811 	msr	BASEPRI, r3
 800e4c4:	f3bf 8f6f 	isb	sy
 800e4c8:	f3bf 8f4f 	dsb	sy
 800e4cc:	623b      	str	r3, [r7, #32]
}
 800e4ce:	bf00      	nop
 800e4d0:	bf00      	nop
 800e4d2:	e7fd      	b.n	800e4d0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e4d4:	f001 fbc6 	bl	800fc64 <xTaskGetSchedulerState>
 800e4d8:	4603      	mov	r3, r0
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d102      	bne.n	800e4e4 <xQueueGenericSend+0xa4>
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d101      	bne.n	800e4e8 <xQueueGenericSend+0xa8>
 800e4e4:	2301      	movs	r3, #1
 800e4e6:	e000      	b.n	800e4ea <xQueueGenericSend+0xaa>
 800e4e8:	2300      	movs	r3, #0
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d10b      	bne.n	800e506 <xQueueGenericSend+0xc6>
	__asm volatile
 800e4ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4f2:	f383 8811 	msr	BASEPRI, r3
 800e4f6:	f3bf 8f6f 	isb	sy
 800e4fa:	f3bf 8f4f 	dsb	sy
 800e4fe:	61fb      	str	r3, [r7, #28]
}
 800e500:	bf00      	nop
 800e502:	bf00      	nop
 800e504:	e7fd      	b.n	800e502 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e506:	f002 fa4f 	bl	80109a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e50a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e50c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e50e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e510:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e512:	429a      	cmp	r2, r3
 800e514:	d302      	bcc.n	800e51c <xQueueGenericSend+0xdc>
 800e516:	683b      	ldr	r3, [r7, #0]
 800e518:	2b02      	cmp	r3, #2
 800e51a:	d129      	bne.n	800e570 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e51c:	683a      	ldr	r2, [r7, #0]
 800e51e:	68b9      	ldr	r1, [r7, #8]
 800e520:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e522:	f000 fb37 	bl	800eb94 <prvCopyDataToQueue>
 800e526:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e52a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d010      	beq.n	800e552 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e532:	3324      	adds	r3, #36	@ 0x24
 800e534:	4618      	mov	r0, r3
 800e536:	f001 f96b 	bl	800f810 <xTaskRemoveFromEventList>
 800e53a:	4603      	mov	r3, r0
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d013      	beq.n	800e568 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e540:	4b3f      	ldr	r3, [pc, #252]	@ (800e640 <xQueueGenericSend+0x200>)
 800e542:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e546:	601a      	str	r2, [r3, #0]
 800e548:	f3bf 8f4f 	dsb	sy
 800e54c:	f3bf 8f6f 	isb	sy
 800e550:	e00a      	b.n	800e568 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e554:	2b00      	cmp	r3, #0
 800e556:	d007      	beq.n	800e568 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e558:	4b39      	ldr	r3, [pc, #228]	@ (800e640 <xQueueGenericSend+0x200>)
 800e55a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e55e:	601a      	str	r2, [r3, #0]
 800e560:	f3bf 8f4f 	dsb	sy
 800e564:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e568:	f002 fa50 	bl	8010a0c <vPortExitCritical>
				return pdPASS;
 800e56c:	2301      	movs	r3, #1
 800e56e:	e063      	b.n	800e638 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d103      	bne.n	800e57e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e576:	f002 fa49 	bl	8010a0c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e57a:	2300      	movs	r3, #0
 800e57c:	e05c      	b.n	800e638 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e57e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e580:	2b00      	cmp	r3, #0
 800e582:	d106      	bne.n	800e592 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e584:	f107 0314 	add.w	r3, r7, #20
 800e588:	4618      	mov	r0, r3
 800e58a:	f001 fa09 	bl	800f9a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e58e:	2301      	movs	r3, #1
 800e590:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e592:	f002 fa3b 	bl	8010a0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e596:	f000 fecf 	bl	800f338 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e59a:	f002 fa05 	bl	80109a8 <vPortEnterCritical>
 800e59e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e5a4:	b25b      	sxtb	r3, r3
 800e5a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5aa:	d103      	bne.n	800e5b4 <xQueueGenericSend+0x174>
 800e5ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5ae:	2200      	movs	r2, #0
 800e5b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e5b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e5ba:	b25b      	sxtb	r3, r3
 800e5bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5c0:	d103      	bne.n	800e5ca <xQueueGenericSend+0x18a>
 800e5c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e5ca:	f002 fa1f 	bl	8010a0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e5ce:	1d3a      	adds	r2, r7, #4
 800e5d0:	f107 0314 	add.w	r3, r7, #20
 800e5d4:	4611      	mov	r1, r2
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	f001 f9f8 	bl	800f9cc <xTaskCheckForTimeOut>
 800e5dc:	4603      	mov	r3, r0
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d124      	bne.n	800e62c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e5e2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e5e4:	f000 fbce 	bl	800ed84 <prvIsQueueFull>
 800e5e8:	4603      	mov	r3, r0
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d018      	beq.n	800e620 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e5ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5f0:	3310      	adds	r3, #16
 800e5f2:	687a      	ldr	r2, [r7, #4]
 800e5f4:	4611      	mov	r1, r2
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	f001 f87a 	bl	800f6f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e5fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e5fe:	f000 fb59 	bl	800ecb4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e602:	f000 fea7 	bl	800f354 <xTaskResumeAll>
 800e606:	4603      	mov	r3, r0
 800e608:	2b00      	cmp	r3, #0
 800e60a:	f47f af7c 	bne.w	800e506 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800e60e:	4b0c      	ldr	r3, [pc, #48]	@ (800e640 <xQueueGenericSend+0x200>)
 800e610:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e614:	601a      	str	r2, [r3, #0]
 800e616:	f3bf 8f4f 	dsb	sy
 800e61a:	f3bf 8f6f 	isb	sy
 800e61e:	e772      	b.n	800e506 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e620:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e622:	f000 fb47 	bl	800ecb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e626:	f000 fe95 	bl	800f354 <xTaskResumeAll>
 800e62a:	e76c      	b.n	800e506 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e62c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e62e:	f000 fb41 	bl	800ecb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e632:	f000 fe8f 	bl	800f354 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e636:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e638:	4618      	mov	r0, r3
 800e63a:	3738      	adds	r7, #56	@ 0x38
 800e63c:	46bd      	mov	sp, r7
 800e63e:	bd80      	pop	{r7, pc}
 800e640:	e000ed04 	.word	0xe000ed04

0800e644 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e644:	b580      	push	{r7, lr}
 800e646:	b090      	sub	sp, #64	@ 0x40
 800e648:	af00      	add	r7, sp, #0
 800e64a:	60f8      	str	r0, [r7, #12]
 800e64c:	60b9      	str	r1, [r7, #8]
 800e64e:	607a      	str	r2, [r7, #4]
 800e650:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800e656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d10b      	bne.n	800e674 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800e65c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e660:	f383 8811 	msr	BASEPRI, r3
 800e664:	f3bf 8f6f 	isb	sy
 800e668:	f3bf 8f4f 	dsb	sy
 800e66c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e66e:	bf00      	nop
 800e670:	bf00      	nop
 800e672:	e7fd      	b.n	800e670 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e674:	68bb      	ldr	r3, [r7, #8]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d103      	bne.n	800e682 <xQueueGenericSendFromISR+0x3e>
 800e67a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e67c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d101      	bne.n	800e686 <xQueueGenericSendFromISR+0x42>
 800e682:	2301      	movs	r3, #1
 800e684:	e000      	b.n	800e688 <xQueueGenericSendFromISR+0x44>
 800e686:	2300      	movs	r3, #0
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d10b      	bne.n	800e6a4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800e68c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e690:	f383 8811 	msr	BASEPRI, r3
 800e694:	f3bf 8f6f 	isb	sy
 800e698:	f3bf 8f4f 	dsb	sy
 800e69c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e69e:	bf00      	nop
 800e6a0:	bf00      	nop
 800e6a2:	e7fd      	b.n	800e6a0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e6a4:	683b      	ldr	r3, [r7, #0]
 800e6a6:	2b02      	cmp	r3, #2
 800e6a8:	d103      	bne.n	800e6b2 <xQueueGenericSendFromISR+0x6e>
 800e6aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e6ae:	2b01      	cmp	r3, #1
 800e6b0:	d101      	bne.n	800e6b6 <xQueueGenericSendFromISR+0x72>
 800e6b2:	2301      	movs	r3, #1
 800e6b4:	e000      	b.n	800e6b8 <xQueueGenericSendFromISR+0x74>
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d10b      	bne.n	800e6d4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800e6bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6c0:	f383 8811 	msr	BASEPRI, r3
 800e6c4:	f3bf 8f6f 	isb	sy
 800e6c8:	f3bf 8f4f 	dsb	sy
 800e6cc:	623b      	str	r3, [r7, #32]
}
 800e6ce:	bf00      	nop
 800e6d0:	bf00      	nop
 800e6d2:	e7fd      	b.n	800e6d0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e6d4:	f002 fa48 	bl	8010b68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e6d8:	f3ef 8211 	mrs	r2, BASEPRI
 800e6dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6e0:	f383 8811 	msr	BASEPRI, r3
 800e6e4:	f3bf 8f6f 	isb	sy
 800e6e8:	f3bf 8f4f 	dsb	sy
 800e6ec:	61fa      	str	r2, [r7, #28]
 800e6ee:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e6f0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e6f2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e6f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e6f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e6fc:	429a      	cmp	r2, r3
 800e6fe:	d302      	bcc.n	800e706 <xQueueGenericSendFromISR+0xc2>
 800e700:	683b      	ldr	r3, [r7, #0]
 800e702:	2b02      	cmp	r3, #2
 800e704:	d12f      	bne.n	800e766 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e708:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e70c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e714:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e716:	683a      	ldr	r2, [r7, #0]
 800e718:	68b9      	ldr	r1, [r7, #8]
 800e71a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e71c:	f000 fa3a 	bl	800eb94 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e720:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800e724:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e728:	d112      	bne.n	800e750 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e72a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e72c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d016      	beq.n	800e760 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e734:	3324      	adds	r3, #36	@ 0x24
 800e736:	4618      	mov	r0, r3
 800e738:	f001 f86a 	bl	800f810 <xTaskRemoveFromEventList>
 800e73c:	4603      	mov	r3, r0
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d00e      	beq.n	800e760 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	2b00      	cmp	r3, #0
 800e746:	d00b      	beq.n	800e760 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	2201      	movs	r2, #1
 800e74c:	601a      	str	r2, [r3, #0]
 800e74e:	e007      	b.n	800e760 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e750:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800e754:	3301      	adds	r3, #1
 800e756:	b2db      	uxtb	r3, r3
 800e758:	b25a      	sxtb	r2, r3
 800e75a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e75c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800e760:	2301      	movs	r3, #1
 800e762:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800e764:	e001      	b.n	800e76a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e766:	2300      	movs	r3, #0
 800e768:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e76a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e76c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e76e:	697b      	ldr	r3, [r7, #20]
 800e770:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e774:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e776:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800e778:	4618      	mov	r0, r3
 800e77a:	3740      	adds	r7, #64	@ 0x40
 800e77c:	46bd      	mov	sp, r7
 800e77e:	bd80      	pop	{r7, pc}

0800e780 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e780:	b580      	push	{r7, lr}
 800e782:	b08c      	sub	sp, #48	@ 0x30
 800e784:	af00      	add	r7, sp, #0
 800e786:	60f8      	str	r0, [r7, #12]
 800e788:	60b9      	str	r1, [r7, #8]
 800e78a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e78c:	2300      	movs	r3, #0
 800e78e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e796:	2b00      	cmp	r3, #0
 800e798:	d10b      	bne.n	800e7b2 <xQueueReceive+0x32>
	__asm volatile
 800e79a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e79e:	f383 8811 	msr	BASEPRI, r3
 800e7a2:	f3bf 8f6f 	isb	sy
 800e7a6:	f3bf 8f4f 	dsb	sy
 800e7aa:	623b      	str	r3, [r7, #32]
}
 800e7ac:	bf00      	nop
 800e7ae:	bf00      	nop
 800e7b0:	e7fd      	b.n	800e7ae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e7b2:	68bb      	ldr	r3, [r7, #8]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d103      	bne.n	800e7c0 <xQueueReceive+0x40>
 800e7b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d101      	bne.n	800e7c4 <xQueueReceive+0x44>
 800e7c0:	2301      	movs	r3, #1
 800e7c2:	e000      	b.n	800e7c6 <xQueueReceive+0x46>
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d10b      	bne.n	800e7e2 <xQueueReceive+0x62>
	__asm volatile
 800e7ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7ce:	f383 8811 	msr	BASEPRI, r3
 800e7d2:	f3bf 8f6f 	isb	sy
 800e7d6:	f3bf 8f4f 	dsb	sy
 800e7da:	61fb      	str	r3, [r7, #28]
}
 800e7dc:	bf00      	nop
 800e7de:	bf00      	nop
 800e7e0:	e7fd      	b.n	800e7de <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e7e2:	f001 fa3f 	bl	800fc64 <xTaskGetSchedulerState>
 800e7e6:	4603      	mov	r3, r0
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d102      	bne.n	800e7f2 <xQueueReceive+0x72>
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d101      	bne.n	800e7f6 <xQueueReceive+0x76>
 800e7f2:	2301      	movs	r3, #1
 800e7f4:	e000      	b.n	800e7f8 <xQueueReceive+0x78>
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d10b      	bne.n	800e814 <xQueueReceive+0x94>
	__asm volatile
 800e7fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e800:	f383 8811 	msr	BASEPRI, r3
 800e804:	f3bf 8f6f 	isb	sy
 800e808:	f3bf 8f4f 	dsb	sy
 800e80c:	61bb      	str	r3, [r7, #24]
}
 800e80e:	bf00      	nop
 800e810:	bf00      	nop
 800e812:	e7fd      	b.n	800e810 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e814:	f002 f8c8 	bl	80109a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e81a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e81c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e81e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e820:	2b00      	cmp	r3, #0
 800e822:	d01f      	beq.n	800e864 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e824:	68b9      	ldr	r1, [r7, #8]
 800e826:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e828:	f000 fa1e 	bl	800ec68 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e82c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e82e:	1e5a      	subs	r2, r3, #1
 800e830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e832:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e836:	691b      	ldr	r3, [r3, #16]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d00f      	beq.n	800e85c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e83c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e83e:	3310      	adds	r3, #16
 800e840:	4618      	mov	r0, r3
 800e842:	f000 ffe5 	bl	800f810 <xTaskRemoveFromEventList>
 800e846:	4603      	mov	r3, r0
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d007      	beq.n	800e85c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e84c:	4b3c      	ldr	r3, [pc, #240]	@ (800e940 <xQueueReceive+0x1c0>)
 800e84e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e852:	601a      	str	r2, [r3, #0]
 800e854:	f3bf 8f4f 	dsb	sy
 800e858:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e85c:	f002 f8d6 	bl	8010a0c <vPortExitCritical>
				return pdPASS;
 800e860:	2301      	movs	r3, #1
 800e862:	e069      	b.n	800e938 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d103      	bne.n	800e872 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e86a:	f002 f8cf 	bl	8010a0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e86e:	2300      	movs	r3, #0
 800e870:	e062      	b.n	800e938 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e874:	2b00      	cmp	r3, #0
 800e876:	d106      	bne.n	800e886 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e878:	f107 0310 	add.w	r3, r7, #16
 800e87c:	4618      	mov	r0, r3
 800e87e:	f001 f88f 	bl	800f9a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e882:	2301      	movs	r3, #1
 800e884:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e886:	f002 f8c1 	bl	8010a0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e88a:	f000 fd55 	bl	800f338 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e88e:	f002 f88b 	bl	80109a8 <vPortEnterCritical>
 800e892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e894:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e898:	b25b      	sxtb	r3, r3
 800e89a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e89e:	d103      	bne.n	800e8a8 <xQueueReceive+0x128>
 800e8a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e8a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e8ae:	b25b      	sxtb	r3, r3
 800e8b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8b4:	d103      	bne.n	800e8be <xQueueReceive+0x13e>
 800e8b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e8be:	f002 f8a5 	bl	8010a0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e8c2:	1d3a      	adds	r2, r7, #4
 800e8c4:	f107 0310 	add.w	r3, r7, #16
 800e8c8:	4611      	mov	r1, r2
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	f001 f87e 	bl	800f9cc <xTaskCheckForTimeOut>
 800e8d0:	4603      	mov	r3, r0
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d123      	bne.n	800e91e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e8d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e8d8:	f000 fa3e 	bl	800ed58 <prvIsQueueEmpty>
 800e8dc:	4603      	mov	r3, r0
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d017      	beq.n	800e912 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e8e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8e4:	3324      	adds	r3, #36	@ 0x24
 800e8e6:	687a      	ldr	r2, [r7, #4]
 800e8e8:	4611      	mov	r1, r2
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	f000 ff00 	bl	800f6f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e8f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e8f2:	f000 f9df 	bl	800ecb4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e8f6:	f000 fd2d 	bl	800f354 <xTaskResumeAll>
 800e8fa:	4603      	mov	r3, r0
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d189      	bne.n	800e814 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800e900:	4b0f      	ldr	r3, [pc, #60]	@ (800e940 <xQueueReceive+0x1c0>)
 800e902:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e906:	601a      	str	r2, [r3, #0]
 800e908:	f3bf 8f4f 	dsb	sy
 800e90c:	f3bf 8f6f 	isb	sy
 800e910:	e780      	b.n	800e814 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e912:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e914:	f000 f9ce 	bl	800ecb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e918:	f000 fd1c 	bl	800f354 <xTaskResumeAll>
 800e91c:	e77a      	b.n	800e814 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e91e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e920:	f000 f9c8 	bl	800ecb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e924:	f000 fd16 	bl	800f354 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e928:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e92a:	f000 fa15 	bl	800ed58 <prvIsQueueEmpty>
 800e92e:	4603      	mov	r3, r0
 800e930:	2b00      	cmp	r3, #0
 800e932:	f43f af6f 	beq.w	800e814 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e936:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e938:	4618      	mov	r0, r3
 800e93a:	3730      	adds	r7, #48	@ 0x30
 800e93c:	46bd      	mov	sp, r7
 800e93e:	bd80      	pop	{r7, pc}
 800e940:	e000ed04 	.word	0xe000ed04

0800e944 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800e944:	b580      	push	{r7, lr}
 800e946:	b08e      	sub	sp, #56	@ 0x38
 800e948:	af00      	add	r7, sp, #0
 800e94a:	6078      	str	r0, [r7, #4]
 800e94c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800e94e:	2300      	movs	r3, #0
 800e950:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800e956:	2300      	movs	r3, #0
 800e958:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e95a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d10b      	bne.n	800e978 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800e960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e964:	f383 8811 	msr	BASEPRI, r3
 800e968:	f3bf 8f6f 	isb	sy
 800e96c:	f3bf 8f4f 	dsb	sy
 800e970:	623b      	str	r3, [r7, #32]
}
 800e972:	bf00      	nop
 800e974:	bf00      	nop
 800e976:	e7fd      	b.n	800e974 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e97a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d00b      	beq.n	800e998 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800e980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e984:	f383 8811 	msr	BASEPRI, r3
 800e988:	f3bf 8f6f 	isb	sy
 800e98c:	f3bf 8f4f 	dsb	sy
 800e990:	61fb      	str	r3, [r7, #28]
}
 800e992:	bf00      	nop
 800e994:	bf00      	nop
 800e996:	e7fd      	b.n	800e994 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e998:	f001 f964 	bl	800fc64 <xTaskGetSchedulerState>
 800e99c:	4603      	mov	r3, r0
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d102      	bne.n	800e9a8 <xQueueSemaphoreTake+0x64>
 800e9a2:	683b      	ldr	r3, [r7, #0]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d101      	bne.n	800e9ac <xQueueSemaphoreTake+0x68>
 800e9a8:	2301      	movs	r3, #1
 800e9aa:	e000      	b.n	800e9ae <xQueueSemaphoreTake+0x6a>
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d10b      	bne.n	800e9ca <xQueueSemaphoreTake+0x86>
	__asm volatile
 800e9b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9b6:	f383 8811 	msr	BASEPRI, r3
 800e9ba:	f3bf 8f6f 	isb	sy
 800e9be:	f3bf 8f4f 	dsb	sy
 800e9c2:	61bb      	str	r3, [r7, #24]
}
 800e9c4:	bf00      	nop
 800e9c6:	bf00      	nop
 800e9c8:	e7fd      	b.n	800e9c6 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e9ca:	f001 ffed 	bl	80109a8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800e9ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e9d2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800e9d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d024      	beq.n	800ea24 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800e9da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9dc:	1e5a      	subs	r2, r3, #1
 800e9de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9e0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e9e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d104      	bne.n	800e9f4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800e9ea:	f001 facd 	bl	800ff88 <pvTaskIncrementMutexHeldCount>
 800e9ee:	4602      	mov	r2, r0
 800e9f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9f2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e9f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9f6:	691b      	ldr	r3, [r3, #16]
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d00f      	beq.n	800ea1c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e9fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9fe:	3310      	adds	r3, #16
 800ea00:	4618      	mov	r0, r3
 800ea02:	f000 ff05 	bl	800f810 <xTaskRemoveFromEventList>
 800ea06:	4603      	mov	r3, r0
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d007      	beq.n	800ea1c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ea0c:	4b54      	ldr	r3, [pc, #336]	@ (800eb60 <xQueueSemaphoreTake+0x21c>)
 800ea0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ea12:	601a      	str	r2, [r3, #0]
 800ea14:	f3bf 8f4f 	dsb	sy
 800ea18:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ea1c:	f001 fff6 	bl	8010a0c <vPortExitCritical>
				return pdPASS;
 800ea20:	2301      	movs	r3, #1
 800ea22:	e098      	b.n	800eb56 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ea24:	683b      	ldr	r3, [r7, #0]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d112      	bne.n	800ea50 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ea2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d00b      	beq.n	800ea48 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800ea30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea34:	f383 8811 	msr	BASEPRI, r3
 800ea38:	f3bf 8f6f 	isb	sy
 800ea3c:	f3bf 8f4f 	dsb	sy
 800ea40:	617b      	str	r3, [r7, #20]
}
 800ea42:	bf00      	nop
 800ea44:	bf00      	nop
 800ea46:	e7fd      	b.n	800ea44 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ea48:	f001 ffe0 	bl	8010a0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	e082      	b.n	800eb56 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ea50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d106      	bne.n	800ea64 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ea56:	f107 030c 	add.w	r3, r7, #12
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	f000 ffa0 	bl	800f9a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ea60:	2301      	movs	r3, #1
 800ea62:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ea64:	f001 ffd2 	bl	8010a0c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ea68:	f000 fc66 	bl	800f338 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ea6c:	f001 ff9c 	bl	80109a8 <vPortEnterCritical>
 800ea70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea72:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ea76:	b25b      	sxtb	r3, r3
 800ea78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea7c:	d103      	bne.n	800ea86 <xQueueSemaphoreTake+0x142>
 800ea7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea80:	2200      	movs	r2, #0
 800ea82:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ea86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea88:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ea8c:	b25b      	sxtb	r3, r3
 800ea8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea92:	d103      	bne.n	800ea9c <xQueueSemaphoreTake+0x158>
 800ea94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea96:	2200      	movs	r2, #0
 800ea98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ea9c:	f001 ffb6 	bl	8010a0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800eaa0:	463a      	mov	r2, r7
 800eaa2:	f107 030c 	add.w	r3, r7, #12
 800eaa6:	4611      	mov	r1, r2
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	f000 ff8f 	bl	800f9cc <xTaskCheckForTimeOut>
 800eaae:	4603      	mov	r3, r0
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d132      	bne.n	800eb1a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800eab4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800eab6:	f000 f94f 	bl	800ed58 <prvIsQueueEmpty>
 800eaba:	4603      	mov	r3, r0
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d026      	beq.n	800eb0e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800eac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d109      	bne.n	800eadc <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800eac8:	f001 ff6e 	bl	80109a8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800eacc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eace:	689b      	ldr	r3, [r3, #8]
 800ead0:	4618      	mov	r0, r3
 800ead2:	f001 f8e5 	bl	800fca0 <xTaskPriorityInherit>
 800ead6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800ead8:	f001 ff98 	bl	8010a0c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800eadc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eade:	3324      	adds	r3, #36	@ 0x24
 800eae0:	683a      	ldr	r2, [r7, #0]
 800eae2:	4611      	mov	r1, r2
 800eae4:	4618      	mov	r0, r3
 800eae6:	f000 fe03 	bl	800f6f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800eaea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800eaec:	f000 f8e2 	bl	800ecb4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800eaf0:	f000 fc30 	bl	800f354 <xTaskResumeAll>
 800eaf4:	4603      	mov	r3, r0
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	f47f af67 	bne.w	800e9ca <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800eafc:	4b18      	ldr	r3, [pc, #96]	@ (800eb60 <xQueueSemaphoreTake+0x21c>)
 800eafe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eb02:	601a      	str	r2, [r3, #0]
 800eb04:	f3bf 8f4f 	dsb	sy
 800eb08:	f3bf 8f6f 	isb	sy
 800eb0c:	e75d      	b.n	800e9ca <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800eb0e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800eb10:	f000 f8d0 	bl	800ecb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800eb14:	f000 fc1e 	bl	800f354 <xTaskResumeAll>
 800eb18:	e757      	b.n	800e9ca <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800eb1a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800eb1c:	f000 f8ca 	bl	800ecb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800eb20:	f000 fc18 	bl	800f354 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800eb24:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800eb26:	f000 f917 	bl	800ed58 <prvIsQueueEmpty>
 800eb2a:	4603      	mov	r3, r0
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	f43f af4c 	beq.w	800e9ca <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800eb32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d00d      	beq.n	800eb54 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800eb38:	f001 ff36 	bl	80109a8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800eb3c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800eb3e:	f000 f811 	bl	800eb64 <prvGetDisinheritPriorityAfterTimeout>
 800eb42:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800eb44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb46:	689b      	ldr	r3, [r3, #8]
 800eb48:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	f001 f980 	bl	800fe50 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800eb50:	f001 ff5c 	bl	8010a0c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800eb54:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800eb56:	4618      	mov	r0, r3
 800eb58:	3738      	adds	r7, #56	@ 0x38
 800eb5a:	46bd      	mov	sp, r7
 800eb5c:	bd80      	pop	{r7, pc}
 800eb5e:	bf00      	nop
 800eb60:	e000ed04 	.word	0xe000ed04

0800eb64 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800eb64:	b480      	push	{r7}
 800eb66:	b085      	sub	sp, #20
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d006      	beq.n	800eb82 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800eb7e:	60fb      	str	r3, [r7, #12]
 800eb80:	e001      	b.n	800eb86 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800eb82:	2300      	movs	r3, #0
 800eb84:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800eb86:	68fb      	ldr	r3, [r7, #12]
	}
 800eb88:	4618      	mov	r0, r3
 800eb8a:	3714      	adds	r7, #20
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb92:	4770      	bx	lr

0800eb94 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800eb94:	b580      	push	{r7, lr}
 800eb96:	b086      	sub	sp, #24
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	60f8      	str	r0, [r7, #12]
 800eb9c:	60b9      	str	r1, [r7, #8]
 800eb9e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800eba0:	2300      	movs	r3, #0
 800eba2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eba8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d10d      	bne.n	800ebce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d14d      	bne.n	800ec56 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	689b      	ldr	r3, [r3, #8]
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	f001 f8d6 	bl	800fd70 <xTaskPriorityDisinherit>
 800ebc4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	2200      	movs	r2, #0
 800ebca:	609a      	str	r2, [r3, #8]
 800ebcc:	e043      	b.n	800ec56 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d119      	bne.n	800ec08 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	6858      	ldr	r0, [r3, #4]
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ebdc:	461a      	mov	r2, r3
 800ebde:	68b9      	ldr	r1, [r7, #8]
 800ebe0:	f003 f90b 	bl	8011dfa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	685a      	ldr	r2, [r3, #4]
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ebec:	441a      	add	r2, r3
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	685a      	ldr	r2, [r3, #4]
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	689b      	ldr	r3, [r3, #8]
 800ebfa:	429a      	cmp	r2, r3
 800ebfc:	d32b      	bcc.n	800ec56 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	681a      	ldr	r2, [r3, #0]
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	605a      	str	r2, [r3, #4]
 800ec06:	e026      	b.n	800ec56 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	68d8      	ldr	r0, [r3, #12]
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ec10:	461a      	mov	r2, r3
 800ec12:	68b9      	ldr	r1, [r7, #8]
 800ec14:	f003 f8f1 	bl	8011dfa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	68da      	ldr	r2, [r3, #12]
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ec20:	425b      	negs	r3, r3
 800ec22:	441a      	add	r2, r3
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	68da      	ldr	r2, [r3, #12]
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	429a      	cmp	r2, r3
 800ec32:	d207      	bcs.n	800ec44 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	689a      	ldr	r2, [r3, #8]
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ec3c:	425b      	negs	r3, r3
 800ec3e:	441a      	add	r2, r3
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	2b02      	cmp	r3, #2
 800ec48:	d105      	bne.n	800ec56 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ec4a:	693b      	ldr	r3, [r7, #16]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d002      	beq.n	800ec56 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ec50:	693b      	ldr	r3, [r7, #16]
 800ec52:	3b01      	subs	r3, #1
 800ec54:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ec56:	693b      	ldr	r3, [r7, #16]
 800ec58:	1c5a      	adds	r2, r3, #1
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800ec5e:	697b      	ldr	r3, [r7, #20]
}
 800ec60:	4618      	mov	r0, r3
 800ec62:	3718      	adds	r7, #24
 800ec64:	46bd      	mov	sp, r7
 800ec66:	bd80      	pop	{r7, pc}

0800ec68 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b082      	sub	sp, #8
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
 800ec70:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d018      	beq.n	800ecac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	68da      	ldr	r2, [r3, #12]
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ec82:	441a      	add	r2, r3
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	68da      	ldr	r2, [r3, #12]
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	689b      	ldr	r3, [r3, #8]
 800ec90:	429a      	cmp	r2, r3
 800ec92:	d303      	bcc.n	800ec9c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	681a      	ldr	r2, [r3, #0]
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	68d9      	ldr	r1, [r3, #12]
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eca4:	461a      	mov	r2, r3
 800eca6:	6838      	ldr	r0, [r7, #0]
 800eca8:	f003 f8a7 	bl	8011dfa <memcpy>
	}
}
 800ecac:	bf00      	nop
 800ecae:	3708      	adds	r7, #8
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	bd80      	pop	{r7, pc}

0800ecb4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	b084      	sub	sp, #16
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ecbc:	f001 fe74 	bl	80109a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ecc6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ecc8:	e011      	b.n	800ecee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d012      	beq.n	800ecf8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	3324      	adds	r3, #36	@ 0x24
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	f000 fd9a 	bl	800f810 <xTaskRemoveFromEventList>
 800ecdc:	4603      	mov	r3, r0
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d001      	beq.n	800ece6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ece2:	f000 fed7 	bl	800fa94 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ece6:	7bfb      	ldrb	r3, [r7, #15]
 800ece8:	3b01      	subs	r3, #1
 800ecea:	b2db      	uxtb	r3, r3
 800ecec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ecee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	dce9      	bgt.n	800ecca <prvUnlockQueue+0x16>
 800ecf6:	e000      	b.n	800ecfa <prvUnlockQueue+0x46>
					break;
 800ecf8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	22ff      	movs	r2, #255	@ 0xff
 800ecfe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ed02:	f001 fe83 	bl	8010a0c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ed06:	f001 fe4f 	bl	80109a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ed10:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ed12:	e011      	b.n	800ed38 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	691b      	ldr	r3, [r3, #16]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d012      	beq.n	800ed42 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	3310      	adds	r3, #16
 800ed20:	4618      	mov	r0, r3
 800ed22:	f000 fd75 	bl	800f810 <xTaskRemoveFromEventList>
 800ed26:	4603      	mov	r3, r0
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d001      	beq.n	800ed30 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ed2c:	f000 feb2 	bl	800fa94 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ed30:	7bbb      	ldrb	r3, [r7, #14]
 800ed32:	3b01      	subs	r3, #1
 800ed34:	b2db      	uxtb	r3, r3
 800ed36:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ed38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	dce9      	bgt.n	800ed14 <prvUnlockQueue+0x60>
 800ed40:	e000      	b.n	800ed44 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ed42:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	22ff      	movs	r2, #255	@ 0xff
 800ed48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ed4c:	f001 fe5e 	bl	8010a0c <vPortExitCritical>
}
 800ed50:	bf00      	nop
 800ed52:	3710      	adds	r7, #16
 800ed54:	46bd      	mov	sp, r7
 800ed56:	bd80      	pop	{r7, pc}

0800ed58 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	b084      	sub	sp, #16
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ed60:	f001 fe22 	bl	80109a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d102      	bne.n	800ed72 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ed6c:	2301      	movs	r3, #1
 800ed6e:	60fb      	str	r3, [r7, #12]
 800ed70:	e001      	b.n	800ed76 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ed72:	2300      	movs	r3, #0
 800ed74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ed76:	f001 fe49 	bl	8010a0c <vPortExitCritical>

	return xReturn;
 800ed7a:	68fb      	ldr	r3, [r7, #12]
}
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	3710      	adds	r7, #16
 800ed80:	46bd      	mov	sp, r7
 800ed82:	bd80      	pop	{r7, pc}

0800ed84 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ed84:	b580      	push	{r7, lr}
 800ed86:	b084      	sub	sp, #16
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ed8c:	f001 fe0c 	bl	80109a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ed98:	429a      	cmp	r2, r3
 800ed9a:	d102      	bne.n	800eda2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ed9c:	2301      	movs	r3, #1
 800ed9e:	60fb      	str	r3, [r7, #12]
 800eda0:	e001      	b.n	800eda6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800eda2:	2300      	movs	r3, #0
 800eda4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800eda6:	f001 fe31 	bl	8010a0c <vPortExitCritical>

	return xReturn;
 800edaa:	68fb      	ldr	r3, [r7, #12]
}
 800edac:	4618      	mov	r0, r3
 800edae:	3710      	adds	r7, #16
 800edb0:	46bd      	mov	sp, r7
 800edb2:	bd80      	pop	{r7, pc}

0800edb4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800edb4:	b480      	push	{r7}
 800edb6:	b085      	sub	sp, #20
 800edb8:	af00      	add	r7, sp, #0
 800edba:	6078      	str	r0, [r7, #4]
 800edbc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800edbe:	2300      	movs	r3, #0
 800edc0:	60fb      	str	r3, [r7, #12]
 800edc2:	e014      	b.n	800edee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800edc4:	4a0f      	ldr	r2, [pc, #60]	@ (800ee04 <vQueueAddToRegistry+0x50>)
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d10b      	bne.n	800ede8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800edd0:	490c      	ldr	r1, [pc, #48]	@ (800ee04 <vQueueAddToRegistry+0x50>)
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	683a      	ldr	r2, [r7, #0]
 800edd6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800edda:	4a0a      	ldr	r2, [pc, #40]	@ (800ee04 <vQueueAddToRegistry+0x50>)
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	00db      	lsls	r3, r3, #3
 800ede0:	4413      	add	r3, r2
 800ede2:	687a      	ldr	r2, [r7, #4]
 800ede4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ede6:	e006      	b.n	800edf6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	3301      	adds	r3, #1
 800edec:	60fb      	str	r3, [r7, #12]
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	2b07      	cmp	r3, #7
 800edf2:	d9e7      	bls.n	800edc4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800edf4:	bf00      	nop
 800edf6:	bf00      	nop
 800edf8:	3714      	adds	r7, #20
 800edfa:	46bd      	mov	sp, r7
 800edfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee00:	4770      	bx	lr
 800ee02:	bf00      	nop
 800ee04:	200028b0 	.word	0x200028b0

0800ee08 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ee08:	b580      	push	{r7, lr}
 800ee0a:	b086      	sub	sp, #24
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	60f8      	str	r0, [r7, #12]
 800ee10:	60b9      	str	r1, [r7, #8]
 800ee12:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ee18:	f001 fdc6 	bl	80109a8 <vPortEnterCritical>
 800ee1c:	697b      	ldr	r3, [r7, #20]
 800ee1e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ee22:	b25b      	sxtb	r3, r3
 800ee24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee28:	d103      	bne.n	800ee32 <vQueueWaitForMessageRestricted+0x2a>
 800ee2a:	697b      	ldr	r3, [r7, #20]
 800ee2c:	2200      	movs	r2, #0
 800ee2e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ee32:	697b      	ldr	r3, [r7, #20]
 800ee34:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ee38:	b25b      	sxtb	r3, r3
 800ee3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee3e:	d103      	bne.n	800ee48 <vQueueWaitForMessageRestricted+0x40>
 800ee40:	697b      	ldr	r3, [r7, #20]
 800ee42:	2200      	movs	r2, #0
 800ee44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ee48:	f001 fde0 	bl	8010a0c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ee4c:	697b      	ldr	r3, [r7, #20]
 800ee4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d106      	bne.n	800ee62 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ee54:	697b      	ldr	r3, [r7, #20]
 800ee56:	3324      	adds	r3, #36	@ 0x24
 800ee58:	687a      	ldr	r2, [r7, #4]
 800ee5a:	68b9      	ldr	r1, [r7, #8]
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	f000 fcab 	bl	800f7b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ee62:	6978      	ldr	r0, [r7, #20]
 800ee64:	f7ff ff26 	bl	800ecb4 <prvUnlockQueue>
	}
 800ee68:	bf00      	nop
 800ee6a:	3718      	adds	r7, #24
 800ee6c:	46bd      	mov	sp, r7
 800ee6e:	bd80      	pop	{r7, pc}

0800ee70 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ee70:	b580      	push	{r7, lr}
 800ee72:	b08e      	sub	sp, #56	@ 0x38
 800ee74:	af04      	add	r7, sp, #16
 800ee76:	60f8      	str	r0, [r7, #12]
 800ee78:	60b9      	str	r1, [r7, #8]
 800ee7a:	607a      	str	r2, [r7, #4]
 800ee7c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ee7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d10b      	bne.n	800ee9c <xTaskCreateStatic+0x2c>
	__asm volatile
 800ee84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee88:	f383 8811 	msr	BASEPRI, r3
 800ee8c:	f3bf 8f6f 	isb	sy
 800ee90:	f3bf 8f4f 	dsb	sy
 800ee94:	623b      	str	r3, [r7, #32]
}
 800ee96:	bf00      	nop
 800ee98:	bf00      	nop
 800ee9a:	e7fd      	b.n	800ee98 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ee9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d10b      	bne.n	800eeba <xTaskCreateStatic+0x4a>
	__asm volatile
 800eea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eea6:	f383 8811 	msr	BASEPRI, r3
 800eeaa:	f3bf 8f6f 	isb	sy
 800eeae:	f3bf 8f4f 	dsb	sy
 800eeb2:	61fb      	str	r3, [r7, #28]
}
 800eeb4:	bf00      	nop
 800eeb6:	bf00      	nop
 800eeb8:	e7fd      	b.n	800eeb6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800eeba:	23a8      	movs	r3, #168	@ 0xa8
 800eebc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800eebe:	693b      	ldr	r3, [r7, #16]
 800eec0:	2ba8      	cmp	r3, #168	@ 0xa8
 800eec2:	d00b      	beq.n	800eedc <xTaskCreateStatic+0x6c>
	__asm volatile
 800eec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eec8:	f383 8811 	msr	BASEPRI, r3
 800eecc:	f3bf 8f6f 	isb	sy
 800eed0:	f3bf 8f4f 	dsb	sy
 800eed4:	61bb      	str	r3, [r7, #24]
}
 800eed6:	bf00      	nop
 800eed8:	bf00      	nop
 800eeda:	e7fd      	b.n	800eed8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800eedc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800eede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d01e      	beq.n	800ef22 <xTaskCreateStatic+0xb2>
 800eee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d01b      	beq.n	800ef22 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800eeea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eeec:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800eeee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eef0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800eef2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800eef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eef6:	2202      	movs	r2, #2
 800eef8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800eefc:	2300      	movs	r3, #0
 800eefe:	9303      	str	r3, [sp, #12]
 800ef00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef02:	9302      	str	r3, [sp, #8]
 800ef04:	f107 0314 	add.w	r3, r7, #20
 800ef08:	9301      	str	r3, [sp, #4]
 800ef0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef0c:	9300      	str	r3, [sp, #0]
 800ef0e:	683b      	ldr	r3, [r7, #0]
 800ef10:	687a      	ldr	r2, [r7, #4]
 800ef12:	68b9      	ldr	r1, [r7, #8]
 800ef14:	68f8      	ldr	r0, [r7, #12]
 800ef16:	f000 f851 	bl	800efbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ef1a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ef1c:	f000 f8f6 	bl	800f10c <prvAddNewTaskToReadyList>
 800ef20:	e001      	b.n	800ef26 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800ef22:	2300      	movs	r3, #0
 800ef24:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ef26:	697b      	ldr	r3, [r7, #20]
	}
 800ef28:	4618      	mov	r0, r3
 800ef2a:	3728      	adds	r7, #40	@ 0x28
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	bd80      	pop	{r7, pc}

0800ef30 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ef30:	b580      	push	{r7, lr}
 800ef32:	b08c      	sub	sp, #48	@ 0x30
 800ef34:	af04      	add	r7, sp, #16
 800ef36:	60f8      	str	r0, [r7, #12]
 800ef38:	60b9      	str	r1, [r7, #8]
 800ef3a:	603b      	str	r3, [r7, #0]
 800ef3c:	4613      	mov	r3, r2
 800ef3e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ef40:	88fb      	ldrh	r3, [r7, #6]
 800ef42:	009b      	lsls	r3, r3, #2
 800ef44:	4618      	mov	r0, r3
 800ef46:	f001 fe51 	bl	8010bec <pvPortMalloc>
 800ef4a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ef4c:	697b      	ldr	r3, [r7, #20]
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d00e      	beq.n	800ef70 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ef52:	20a8      	movs	r0, #168	@ 0xa8
 800ef54:	f001 fe4a 	bl	8010bec <pvPortMalloc>
 800ef58:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ef5a:	69fb      	ldr	r3, [r7, #28]
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d003      	beq.n	800ef68 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ef60:	69fb      	ldr	r3, [r7, #28]
 800ef62:	697a      	ldr	r2, [r7, #20]
 800ef64:	631a      	str	r2, [r3, #48]	@ 0x30
 800ef66:	e005      	b.n	800ef74 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ef68:	6978      	ldr	r0, [r7, #20]
 800ef6a:	f001 ff0d 	bl	8010d88 <vPortFree>
 800ef6e:	e001      	b.n	800ef74 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ef70:	2300      	movs	r3, #0
 800ef72:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ef74:	69fb      	ldr	r3, [r7, #28]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d017      	beq.n	800efaa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ef7a:	69fb      	ldr	r3, [r7, #28]
 800ef7c:	2200      	movs	r2, #0
 800ef7e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ef82:	88fa      	ldrh	r2, [r7, #6]
 800ef84:	2300      	movs	r3, #0
 800ef86:	9303      	str	r3, [sp, #12]
 800ef88:	69fb      	ldr	r3, [r7, #28]
 800ef8a:	9302      	str	r3, [sp, #8]
 800ef8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef8e:	9301      	str	r3, [sp, #4]
 800ef90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef92:	9300      	str	r3, [sp, #0]
 800ef94:	683b      	ldr	r3, [r7, #0]
 800ef96:	68b9      	ldr	r1, [r7, #8]
 800ef98:	68f8      	ldr	r0, [r7, #12]
 800ef9a:	f000 f80f 	bl	800efbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ef9e:	69f8      	ldr	r0, [r7, #28]
 800efa0:	f000 f8b4 	bl	800f10c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800efa4:	2301      	movs	r3, #1
 800efa6:	61bb      	str	r3, [r7, #24]
 800efa8:	e002      	b.n	800efb0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800efaa:	f04f 33ff 	mov.w	r3, #4294967295
 800efae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800efb0:	69bb      	ldr	r3, [r7, #24]
	}
 800efb2:	4618      	mov	r0, r3
 800efb4:	3720      	adds	r7, #32
 800efb6:	46bd      	mov	sp, r7
 800efb8:	bd80      	pop	{r7, pc}
	...

0800efbc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b088      	sub	sp, #32
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	60f8      	str	r0, [r7, #12]
 800efc4:	60b9      	str	r1, [r7, #8]
 800efc6:	607a      	str	r2, [r7, #4]
 800efc8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800efca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efcc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	009b      	lsls	r3, r3, #2
 800efd2:	461a      	mov	r2, r3
 800efd4:	21a5      	movs	r1, #165	@ 0xa5
 800efd6:	f002 fdfc 	bl	8011bd2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800efda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efdc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800efe4:	3b01      	subs	r3, #1
 800efe6:	009b      	lsls	r3, r3, #2
 800efe8:	4413      	add	r3, r2
 800efea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800efec:	69bb      	ldr	r3, [r7, #24]
 800efee:	f023 0307 	bic.w	r3, r3, #7
 800eff2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800eff4:	69bb      	ldr	r3, [r7, #24]
 800eff6:	f003 0307 	and.w	r3, r3, #7
 800effa:	2b00      	cmp	r3, #0
 800effc:	d00b      	beq.n	800f016 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800effe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f002:	f383 8811 	msr	BASEPRI, r3
 800f006:	f3bf 8f6f 	isb	sy
 800f00a:	f3bf 8f4f 	dsb	sy
 800f00e:	617b      	str	r3, [r7, #20]
}
 800f010:	bf00      	nop
 800f012:	bf00      	nop
 800f014:	e7fd      	b.n	800f012 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f016:	68bb      	ldr	r3, [r7, #8]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d01f      	beq.n	800f05c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f01c:	2300      	movs	r3, #0
 800f01e:	61fb      	str	r3, [r7, #28]
 800f020:	e012      	b.n	800f048 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f022:	68ba      	ldr	r2, [r7, #8]
 800f024:	69fb      	ldr	r3, [r7, #28]
 800f026:	4413      	add	r3, r2
 800f028:	7819      	ldrb	r1, [r3, #0]
 800f02a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f02c:	69fb      	ldr	r3, [r7, #28]
 800f02e:	4413      	add	r3, r2
 800f030:	3334      	adds	r3, #52	@ 0x34
 800f032:	460a      	mov	r2, r1
 800f034:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f036:	68ba      	ldr	r2, [r7, #8]
 800f038:	69fb      	ldr	r3, [r7, #28]
 800f03a:	4413      	add	r3, r2
 800f03c:	781b      	ldrb	r3, [r3, #0]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d006      	beq.n	800f050 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f042:	69fb      	ldr	r3, [r7, #28]
 800f044:	3301      	adds	r3, #1
 800f046:	61fb      	str	r3, [r7, #28]
 800f048:	69fb      	ldr	r3, [r7, #28]
 800f04a:	2b0f      	cmp	r3, #15
 800f04c:	d9e9      	bls.n	800f022 <prvInitialiseNewTask+0x66>
 800f04e:	e000      	b.n	800f052 <prvInitialiseNewTask+0x96>
			{
				break;
 800f050:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f054:	2200      	movs	r2, #0
 800f056:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f05a:	e003      	b.n	800f064 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f05c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f05e:	2200      	movs	r2, #0
 800f060:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f066:	2b37      	cmp	r3, #55	@ 0x37
 800f068:	d901      	bls.n	800f06e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f06a:	2337      	movs	r3, #55	@ 0x37
 800f06c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f06e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f070:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f072:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f076:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f078:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f07a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f07c:	2200      	movs	r2, #0
 800f07e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f082:	3304      	adds	r3, #4
 800f084:	4618      	mov	r0, r3
 800f086:	f7fe ffcf 	bl	800e028 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f08a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f08c:	3318      	adds	r3, #24
 800f08e:	4618      	mov	r0, r3
 800f090:	f7fe ffca 	bl	800e028 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f096:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f098:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f09a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f09c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f0a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0a2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f0a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f0a8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f0aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0ac:	2200      	movs	r2, #0
 800f0ae:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f0b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0b4:	2200      	movs	r2, #0
 800f0b6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f0ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0bc:	3354      	adds	r3, #84	@ 0x54
 800f0be:	224c      	movs	r2, #76	@ 0x4c
 800f0c0:	2100      	movs	r1, #0
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	f002 fd85 	bl	8011bd2 <memset>
 800f0c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0ca:	4a0d      	ldr	r2, [pc, #52]	@ (800f100 <prvInitialiseNewTask+0x144>)
 800f0cc:	659a      	str	r2, [r3, #88]	@ 0x58
 800f0ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0d0:	4a0c      	ldr	r2, [pc, #48]	@ (800f104 <prvInitialiseNewTask+0x148>)
 800f0d2:	65da      	str	r2, [r3, #92]	@ 0x5c
 800f0d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0d6:	4a0c      	ldr	r2, [pc, #48]	@ (800f108 <prvInitialiseNewTask+0x14c>)
 800f0d8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f0da:	683a      	ldr	r2, [r7, #0]
 800f0dc:	68f9      	ldr	r1, [r7, #12]
 800f0de:	69b8      	ldr	r0, [r7, #24]
 800f0e0:	f001 fb34 	bl	801074c <pxPortInitialiseStack>
 800f0e4:	4602      	mov	r2, r0
 800f0e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0e8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f0ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d002      	beq.n	800f0f6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f0f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f0f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f0f6:	bf00      	nop
 800f0f8:	3720      	adds	r7, #32
 800f0fa:	46bd      	mov	sp, r7
 800f0fc:	bd80      	pop	{r7, pc}
 800f0fe:	bf00      	nop
 800f100:	2000cb84 	.word	0x2000cb84
 800f104:	2000cbec 	.word	0x2000cbec
 800f108:	2000cc54 	.word	0x2000cc54

0800f10c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f10c:	b580      	push	{r7, lr}
 800f10e:	b082      	sub	sp, #8
 800f110:	af00      	add	r7, sp, #0
 800f112:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f114:	f001 fc48 	bl	80109a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f118:	4b2d      	ldr	r3, [pc, #180]	@ (800f1d0 <prvAddNewTaskToReadyList+0xc4>)
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	3301      	adds	r3, #1
 800f11e:	4a2c      	ldr	r2, [pc, #176]	@ (800f1d0 <prvAddNewTaskToReadyList+0xc4>)
 800f120:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f122:	4b2c      	ldr	r3, [pc, #176]	@ (800f1d4 <prvAddNewTaskToReadyList+0xc8>)
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	2b00      	cmp	r3, #0
 800f128:	d109      	bne.n	800f13e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f12a:	4a2a      	ldr	r2, [pc, #168]	@ (800f1d4 <prvAddNewTaskToReadyList+0xc8>)
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f130:	4b27      	ldr	r3, [pc, #156]	@ (800f1d0 <prvAddNewTaskToReadyList+0xc4>)
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	2b01      	cmp	r3, #1
 800f136:	d110      	bne.n	800f15a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f138:	f000 fcd0 	bl	800fadc <prvInitialiseTaskLists>
 800f13c:	e00d      	b.n	800f15a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f13e:	4b26      	ldr	r3, [pc, #152]	@ (800f1d8 <prvAddNewTaskToReadyList+0xcc>)
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	2b00      	cmp	r3, #0
 800f144:	d109      	bne.n	800f15a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f146:	4b23      	ldr	r3, [pc, #140]	@ (800f1d4 <prvAddNewTaskToReadyList+0xc8>)
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f150:	429a      	cmp	r2, r3
 800f152:	d802      	bhi.n	800f15a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f154:	4a1f      	ldr	r2, [pc, #124]	@ (800f1d4 <prvAddNewTaskToReadyList+0xc8>)
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f15a:	4b20      	ldr	r3, [pc, #128]	@ (800f1dc <prvAddNewTaskToReadyList+0xd0>)
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	3301      	adds	r3, #1
 800f160:	4a1e      	ldr	r2, [pc, #120]	@ (800f1dc <prvAddNewTaskToReadyList+0xd0>)
 800f162:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f164:	4b1d      	ldr	r3, [pc, #116]	@ (800f1dc <prvAddNewTaskToReadyList+0xd0>)
 800f166:	681a      	ldr	r2, [r3, #0]
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f170:	4b1b      	ldr	r3, [pc, #108]	@ (800f1e0 <prvAddNewTaskToReadyList+0xd4>)
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	429a      	cmp	r2, r3
 800f176:	d903      	bls.n	800f180 <prvAddNewTaskToReadyList+0x74>
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f17c:	4a18      	ldr	r2, [pc, #96]	@ (800f1e0 <prvAddNewTaskToReadyList+0xd4>)
 800f17e:	6013      	str	r3, [r2, #0]
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f184:	4613      	mov	r3, r2
 800f186:	009b      	lsls	r3, r3, #2
 800f188:	4413      	add	r3, r2
 800f18a:	009b      	lsls	r3, r3, #2
 800f18c:	4a15      	ldr	r2, [pc, #84]	@ (800f1e4 <prvAddNewTaskToReadyList+0xd8>)
 800f18e:	441a      	add	r2, r3
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	3304      	adds	r3, #4
 800f194:	4619      	mov	r1, r3
 800f196:	4610      	mov	r0, r2
 800f198:	f7fe ff53 	bl	800e042 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f19c:	f001 fc36 	bl	8010a0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f1a0:	4b0d      	ldr	r3, [pc, #52]	@ (800f1d8 <prvAddNewTaskToReadyList+0xcc>)
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d00e      	beq.n	800f1c6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f1a8:	4b0a      	ldr	r3, [pc, #40]	@ (800f1d4 <prvAddNewTaskToReadyList+0xc8>)
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1b2:	429a      	cmp	r2, r3
 800f1b4:	d207      	bcs.n	800f1c6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f1b6:	4b0c      	ldr	r3, [pc, #48]	@ (800f1e8 <prvAddNewTaskToReadyList+0xdc>)
 800f1b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f1bc:	601a      	str	r2, [r3, #0]
 800f1be:	f3bf 8f4f 	dsb	sy
 800f1c2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f1c6:	bf00      	nop
 800f1c8:	3708      	adds	r7, #8
 800f1ca:	46bd      	mov	sp, r7
 800f1cc:	bd80      	pop	{r7, pc}
 800f1ce:	bf00      	nop
 800f1d0:	20002dc4 	.word	0x20002dc4
 800f1d4:	200028f0 	.word	0x200028f0
 800f1d8:	20002dd0 	.word	0x20002dd0
 800f1dc:	20002de0 	.word	0x20002de0
 800f1e0:	20002dcc 	.word	0x20002dcc
 800f1e4:	200028f4 	.word	0x200028f4
 800f1e8:	e000ed04 	.word	0xe000ed04

0800f1ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f1ec:	b580      	push	{r7, lr}
 800f1ee:	b084      	sub	sp, #16
 800f1f0:	af00      	add	r7, sp, #0
 800f1f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f1f4:	2300      	movs	r3, #0
 800f1f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d018      	beq.n	800f230 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f1fe:	4b14      	ldr	r3, [pc, #80]	@ (800f250 <vTaskDelay+0x64>)
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	2b00      	cmp	r3, #0
 800f204:	d00b      	beq.n	800f21e <vTaskDelay+0x32>
	__asm volatile
 800f206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f20a:	f383 8811 	msr	BASEPRI, r3
 800f20e:	f3bf 8f6f 	isb	sy
 800f212:	f3bf 8f4f 	dsb	sy
 800f216:	60bb      	str	r3, [r7, #8]
}
 800f218:	bf00      	nop
 800f21a:	bf00      	nop
 800f21c:	e7fd      	b.n	800f21a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f21e:	f000 f88b 	bl	800f338 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f222:	2100      	movs	r1, #0
 800f224:	6878      	ldr	r0, [r7, #4]
 800f226:	f000 fec3 	bl	800ffb0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f22a:	f000 f893 	bl	800f354 <xTaskResumeAll>
 800f22e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d107      	bne.n	800f246 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800f236:	4b07      	ldr	r3, [pc, #28]	@ (800f254 <vTaskDelay+0x68>)
 800f238:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f23c:	601a      	str	r2, [r3, #0]
 800f23e:	f3bf 8f4f 	dsb	sy
 800f242:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f246:	bf00      	nop
 800f248:	3710      	adds	r7, #16
 800f24a:	46bd      	mov	sp, r7
 800f24c:	bd80      	pop	{r7, pc}
 800f24e:	bf00      	nop
 800f250:	20002dec 	.word	0x20002dec
 800f254:	e000ed04 	.word	0xe000ed04

0800f258 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f258:	b580      	push	{r7, lr}
 800f25a:	b08a      	sub	sp, #40	@ 0x28
 800f25c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f25e:	2300      	movs	r3, #0
 800f260:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f262:	2300      	movs	r3, #0
 800f264:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f266:	463a      	mov	r2, r7
 800f268:	1d39      	adds	r1, r7, #4
 800f26a:	f107 0308 	add.w	r3, r7, #8
 800f26e:	4618      	mov	r0, r3
 800f270:	f7fe fcca 	bl	800dc08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f274:	6839      	ldr	r1, [r7, #0]
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	68ba      	ldr	r2, [r7, #8]
 800f27a:	9202      	str	r2, [sp, #8]
 800f27c:	9301      	str	r3, [sp, #4]
 800f27e:	2300      	movs	r3, #0
 800f280:	9300      	str	r3, [sp, #0]
 800f282:	2300      	movs	r3, #0
 800f284:	460a      	mov	r2, r1
 800f286:	4924      	ldr	r1, [pc, #144]	@ (800f318 <vTaskStartScheduler+0xc0>)
 800f288:	4824      	ldr	r0, [pc, #144]	@ (800f31c <vTaskStartScheduler+0xc4>)
 800f28a:	f7ff fdf1 	bl	800ee70 <xTaskCreateStatic>
 800f28e:	4603      	mov	r3, r0
 800f290:	4a23      	ldr	r2, [pc, #140]	@ (800f320 <vTaskStartScheduler+0xc8>)
 800f292:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f294:	4b22      	ldr	r3, [pc, #136]	@ (800f320 <vTaskStartScheduler+0xc8>)
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d002      	beq.n	800f2a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f29c:	2301      	movs	r3, #1
 800f29e:	617b      	str	r3, [r7, #20]
 800f2a0:	e001      	b.n	800f2a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f2a2:	2300      	movs	r3, #0
 800f2a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f2a6:	697b      	ldr	r3, [r7, #20]
 800f2a8:	2b01      	cmp	r3, #1
 800f2aa:	d102      	bne.n	800f2b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f2ac:	f000 fed4 	bl	8010058 <xTimerCreateTimerTask>
 800f2b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f2b2:	697b      	ldr	r3, [r7, #20]
 800f2b4:	2b01      	cmp	r3, #1
 800f2b6:	d11b      	bne.n	800f2f0 <vTaskStartScheduler+0x98>
	__asm volatile
 800f2b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2bc:	f383 8811 	msr	BASEPRI, r3
 800f2c0:	f3bf 8f6f 	isb	sy
 800f2c4:	f3bf 8f4f 	dsb	sy
 800f2c8:	613b      	str	r3, [r7, #16]
}
 800f2ca:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f2cc:	4b15      	ldr	r3, [pc, #84]	@ (800f324 <vTaskStartScheduler+0xcc>)
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	3354      	adds	r3, #84	@ 0x54
 800f2d2:	4a15      	ldr	r2, [pc, #84]	@ (800f328 <vTaskStartScheduler+0xd0>)
 800f2d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f2d6:	4b15      	ldr	r3, [pc, #84]	@ (800f32c <vTaskStartScheduler+0xd4>)
 800f2d8:	f04f 32ff 	mov.w	r2, #4294967295
 800f2dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f2de:	4b14      	ldr	r3, [pc, #80]	@ (800f330 <vTaskStartScheduler+0xd8>)
 800f2e0:	2201      	movs	r2, #1
 800f2e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f2e4:	4b13      	ldr	r3, [pc, #76]	@ (800f334 <vTaskStartScheduler+0xdc>)
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f2ea:	f001 fab9 	bl	8010860 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f2ee:	e00f      	b.n	800f310 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f2f0:	697b      	ldr	r3, [r7, #20]
 800f2f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2f6:	d10b      	bne.n	800f310 <vTaskStartScheduler+0xb8>
	__asm volatile
 800f2f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2fc:	f383 8811 	msr	BASEPRI, r3
 800f300:	f3bf 8f6f 	isb	sy
 800f304:	f3bf 8f4f 	dsb	sy
 800f308:	60fb      	str	r3, [r7, #12]
}
 800f30a:	bf00      	nop
 800f30c:	bf00      	nop
 800f30e:	e7fd      	b.n	800f30c <vTaskStartScheduler+0xb4>
}
 800f310:	bf00      	nop
 800f312:	3718      	adds	r7, #24
 800f314:	46bd      	mov	sp, r7
 800f316:	bd80      	pop	{r7, pc}
 800f318:	08014734 	.word	0x08014734
 800f31c:	0800faad 	.word	0x0800faad
 800f320:	20002de8 	.word	0x20002de8
 800f324:	200028f0 	.word	0x200028f0
 800f328:	200002b4 	.word	0x200002b4
 800f32c:	20002de4 	.word	0x20002de4
 800f330:	20002dd0 	.word	0x20002dd0
 800f334:	20002dc8 	.word	0x20002dc8

0800f338 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f338:	b480      	push	{r7}
 800f33a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f33c:	4b04      	ldr	r3, [pc, #16]	@ (800f350 <vTaskSuspendAll+0x18>)
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	3301      	adds	r3, #1
 800f342:	4a03      	ldr	r2, [pc, #12]	@ (800f350 <vTaskSuspendAll+0x18>)
 800f344:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f346:	bf00      	nop
 800f348:	46bd      	mov	sp, r7
 800f34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f34e:	4770      	bx	lr
 800f350:	20002dec 	.word	0x20002dec

0800f354 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f354:	b580      	push	{r7, lr}
 800f356:	b084      	sub	sp, #16
 800f358:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f35a:	2300      	movs	r3, #0
 800f35c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f35e:	2300      	movs	r3, #0
 800f360:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f362:	4b42      	ldr	r3, [pc, #264]	@ (800f46c <xTaskResumeAll+0x118>)
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d10b      	bne.n	800f382 <xTaskResumeAll+0x2e>
	__asm volatile
 800f36a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f36e:	f383 8811 	msr	BASEPRI, r3
 800f372:	f3bf 8f6f 	isb	sy
 800f376:	f3bf 8f4f 	dsb	sy
 800f37a:	603b      	str	r3, [r7, #0]
}
 800f37c:	bf00      	nop
 800f37e:	bf00      	nop
 800f380:	e7fd      	b.n	800f37e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f382:	f001 fb11 	bl	80109a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f386:	4b39      	ldr	r3, [pc, #228]	@ (800f46c <xTaskResumeAll+0x118>)
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	3b01      	subs	r3, #1
 800f38c:	4a37      	ldr	r2, [pc, #220]	@ (800f46c <xTaskResumeAll+0x118>)
 800f38e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f390:	4b36      	ldr	r3, [pc, #216]	@ (800f46c <xTaskResumeAll+0x118>)
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d162      	bne.n	800f45e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f398:	4b35      	ldr	r3, [pc, #212]	@ (800f470 <xTaskResumeAll+0x11c>)
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d05e      	beq.n	800f45e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f3a0:	e02f      	b.n	800f402 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f3a2:	4b34      	ldr	r3, [pc, #208]	@ (800f474 <xTaskResumeAll+0x120>)
 800f3a4:	68db      	ldr	r3, [r3, #12]
 800f3a6:	68db      	ldr	r3, [r3, #12]
 800f3a8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	3318      	adds	r3, #24
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	f7fe fea4 	bl	800e0fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	3304      	adds	r3, #4
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	f7fe fe9f 	bl	800e0fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f3c2:	4b2d      	ldr	r3, [pc, #180]	@ (800f478 <xTaskResumeAll+0x124>)
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	429a      	cmp	r2, r3
 800f3c8:	d903      	bls.n	800f3d2 <xTaskResumeAll+0x7e>
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3ce:	4a2a      	ldr	r2, [pc, #168]	@ (800f478 <xTaskResumeAll+0x124>)
 800f3d0:	6013      	str	r3, [r2, #0]
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f3d6:	4613      	mov	r3, r2
 800f3d8:	009b      	lsls	r3, r3, #2
 800f3da:	4413      	add	r3, r2
 800f3dc:	009b      	lsls	r3, r3, #2
 800f3de:	4a27      	ldr	r2, [pc, #156]	@ (800f47c <xTaskResumeAll+0x128>)
 800f3e0:	441a      	add	r2, r3
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	3304      	adds	r3, #4
 800f3e6:	4619      	mov	r1, r3
 800f3e8:	4610      	mov	r0, r2
 800f3ea:	f7fe fe2a 	bl	800e042 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f3f2:	4b23      	ldr	r3, [pc, #140]	@ (800f480 <xTaskResumeAll+0x12c>)
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3f8:	429a      	cmp	r2, r3
 800f3fa:	d302      	bcc.n	800f402 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800f3fc:	4b21      	ldr	r3, [pc, #132]	@ (800f484 <xTaskResumeAll+0x130>)
 800f3fe:	2201      	movs	r2, #1
 800f400:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f402:	4b1c      	ldr	r3, [pc, #112]	@ (800f474 <xTaskResumeAll+0x120>)
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	2b00      	cmp	r3, #0
 800f408:	d1cb      	bne.n	800f3a2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d001      	beq.n	800f414 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f410:	f000 fc08 	bl	800fc24 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f414:	4b1c      	ldr	r3, [pc, #112]	@ (800f488 <xTaskResumeAll+0x134>)
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d010      	beq.n	800f442 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f420:	f000 f846 	bl	800f4b0 <xTaskIncrementTick>
 800f424:	4603      	mov	r3, r0
 800f426:	2b00      	cmp	r3, #0
 800f428:	d002      	beq.n	800f430 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800f42a:	4b16      	ldr	r3, [pc, #88]	@ (800f484 <xTaskResumeAll+0x130>)
 800f42c:	2201      	movs	r2, #1
 800f42e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	3b01      	subs	r3, #1
 800f434:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d1f1      	bne.n	800f420 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800f43c:	4b12      	ldr	r3, [pc, #72]	@ (800f488 <xTaskResumeAll+0x134>)
 800f43e:	2200      	movs	r2, #0
 800f440:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f442:	4b10      	ldr	r3, [pc, #64]	@ (800f484 <xTaskResumeAll+0x130>)
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	2b00      	cmp	r3, #0
 800f448:	d009      	beq.n	800f45e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f44a:	2301      	movs	r3, #1
 800f44c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f44e:	4b0f      	ldr	r3, [pc, #60]	@ (800f48c <xTaskResumeAll+0x138>)
 800f450:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f454:	601a      	str	r2, [r3, #0]
 800f456:	f3bf 8f4f 	dsb	sy
 800f45a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f45e:	f001 fad5 	bl	8010a0c <vPortExitCritical>

	return xAlreadyYielded;
 800f462:	68bb      	ldr	r3, [r7, #8]
}
 800f464:	4618      	mov	r0, r3
 800f466:	3710      	adds	r7, #16
 800f468:	46bd      	mov	sp, r7
 800f46a:	bd80      	pop	{r7, pc}
 800f46c:	20002dec 	.word	0x20002dec
 800f470:	20002dc4 	.word	0x20002dc4
 800f474:	20002d84 	.word	0x20002d84
 800f478:	20002dcc 	.word	0x20002dcc
 800f47c:	200028f4 	.word	0x200028f4
 800f480:	200028f0 	.word	0x200028f0
 800f484:	20002dd8 	.word	0x20002dd8
 800f488:	20002dd4 	.word	0x20002dd4
 800f48c:	e000ed04 	.word	0xe000ed04

0800f490 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f490:	b480      	push	{r7}
 800f492:	b083      	sub	sp, #12
 800f494:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f496:	4b05      	ldr	r3, [pc, #20]	@ (800f4ac <xTaskGetTickCount+0x1c>)
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f49c:	687b      	ldr	r3, [r7, #4]
}
 800f49e:	4618      	mov	r0, r3
 800f4a0:	370c      	adds	r7, #12
 800f4a2:	46bd      	mov	sp, r7
 800f4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a8:	4770      	bx	lr
 800f4aa:	bf00      	nop
 800f4ac:	20002dc8 	.word	0x20002dc8

0800f4b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f4b0:	b580      	push	{r7, lr}
 800f4b2:	b086      	sub	sp, #24
 800f4b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f4ba:	4b4f      	ldr	r3, [pc, #316]	@ (800f5f8 <xTaskIncrementTick+0x148>)
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	f040 8090 	bne.w	800f5e4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f4c4:	4b4d      	ldr	r3, [pc, #308]	@ (800f5fc <xTaskIncrementTick+0x14c>)
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	3301      	adds	r3, #1
 800f4ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f4cc:	4a4b      	ldr	r2, [pc, #300]	@ (800f5fc <xTaskIncrementTick+0x14c>)
 800f4ce:	693b      	ldr	r3, [r7, #16]
 800f4d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f4d2:	693b      	ldr	r3, [r7, #16]
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d121      	bne.n	800f51c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800f4d8:	4b49      	ldr	r3, [pc, #292]	@ (800f600 <xTaskIncrementTick+0x150>)
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d00b      	beq.n	800f4fa <xTaskIncrementTick+0x4a>
	__asm volatile
 800f4e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4e6:	f383 8811 	msr	BASEPRI, r3
 800f4ea:	f3bf 8f6f 	isb	sy
 800f4ee:	f3bf 8f4f 	dsb	sy
 800f4f2:	603b      	str	r3, [r7, #0]
}
 800f4f4:	bf00      	nop
 800f4f6:	bf00      	nop
 800f4f8:	e7fd      	b.n	800f4f6 <xTaskIncrementTick+0x46>
 800f4fa:	4b41      	ldr	r3, [pc, #260]	@ (800f600 <xTaskIncrementTick+0x150>)
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	60fb      	str	r3, [r7, #12]
 800f500:	4b40      	ldr	r3, [pc, #256]	@ (800f604 <xTaskIncrementTick+0x154>)
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	4a3e      	ldr	r2, [pc, #248]	@ (800f600 <xTaskIncrementTick+0x150>)
 800f506:	6013      	str	r3, [r2, #0]
 800f508:	4a3e      	ldr	r2, [pc, #248]	@ (800f604 <xTaskIncrementTick+0x154>)
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	6013      	str	r3, [r2, #0]
 800f50e:	4b3e      	ldr	r3, [pc, #248]	@ (800f608 <xTaskIncrementTick+0x158>)
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	3301      	adds	r3, #1
 800f514:	4a3c      	ldr	r2, [pc, #240]	@ (800f608 <xTaskIncrementTick+0x158>)
 800f516:	6013      	str	r3, [r2, #0]
 800f518:	f000 fb84 	bl	800fc24 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f51c:	4b3b      	ldr	r3, [pc, #236]	@ (800f60c <xTaskIncrementTick+0x15c>)
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	693a      	ldr	r2, [r7, #16]
 800f522:	429a      	cmp	r2, r3
 800f524:	d349      	bcc.n	800f5ba <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f526:	4b36      	ldr	r3, [pc, #216]	@ (800f600 <xTaskIncrementTick+0x150>)
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d104      	bne.n	800f53a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f530:	4b36      	ldr	r3, [pc, #216]	@ (800f60c <xTaskIncrementTick+0x15c>)
 800f532:	f04f 32ff 	mov.w	r2, #4294967295
 800f536:	601a      	str	r2, [r3, #0]
					break;
 800f538:	e03f      	b.n	800f5ba <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f53a:	4b31      	ldr	r3, [pc, #196]	@ (800f600 <xTaskIncrementTick+0x150>)
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	68db      	ldr	r3, [r3, #12]
 800f540:	68db      	ldr	r3, [r3, #12]
 800f542:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f544:	68bb      	ldr	r3, [r7, #8]
 800f546:	685b      	ldr	r3, [r3, #4]
 800f548:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f54a:	693a      	ldr	r2, [r7, #16]
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	429a      	cmp	r2, r3
 800f550:	d203      	bcs.n	800f55a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f552:	4a2e      	ldr	r2, [pc, #184]	@ (800f60c <xTaskIncrementTick+0x15c>)
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f558:	e02f      	b.n	800f5ba <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f55a:	68bb      	ldr	r3, [r7, #8]
 800f55c:	3304      	adds	r3, #4
 800f55e:	4618      	mov	r0, r3
 800f560:	f7fe fdcc 	bl	800e0fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f564:	68bb      	ldr	r3, [r7, #8]
 800f566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d004      	beq.n	800f576 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f56c:	68bb      	ldr	r3, [r7, #8]
 800f56e:	3318      	adds	r3, #24
 800f570:	4618      	mov	r0, r3
 800f572:	f7fe fdc3 	bl	800e0fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f576:	68bb      	ldr	r3, [r7, #8]
 800f578:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f57a:	4b25      	ldr	r3, [pc, #148]	@ (800f610 <xTaskIncrementTick+0x160>)
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	429a      	cmp	r2, r3
 800f580:	d903      	bls.n	800f58a <xTaskIncrementTick+0xda>
 800f582:	68bb      	ldr	r3, [r7, #8]
 800f584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f586:	4a22      	ldr	r2, [pc, #136]	@ (800f610 <xTaskIncrementTick+0x160>)
 800f588:	6013      	str	r3, [r2, #0]
 800f58a:	68bb      	ldr	r3, [r7, #8]
 800f58c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f58e:	4613      	mov	r3, r2
 800f590:	009b      	lsls	r3, r3, #2
 800f592:	4413      	add	r3, r2
 800f594:	009b      	lsls	r3, r3, #2
 800f596:	4a1f      	ldr	r2, [pc, #124]	@ (800f614 <xTaskIncrementTick+0x164>)
 800f598:	441a      	add	r2, r3
 800f59a:	68bb      	ldr	r3, [r7, #8]
 800f59c:	3304      	adds	r3, #4
 800f59e:	4619      	mov	r1, r3
 800f5a0:	4610      	mov	r0, r2
 800f5a2:	f7fe fd4e 	bl	800e042 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f5a6:	68bb      	ldr	r3, [r7, #8]
 800f5a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f5aa:	4b1b      	ldr	r3, [pc, #108]	@ (800f618 <xTaskIncrementTick+0x168>)
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5b0:	429a      	cmp	r2, r3
 800f5b2:	d3b8      	bcc.n	800f526 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800f5b4:	2301      	movs	r3, #1
 800f5b6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f5b8:	e7b5      	b.n	800f526 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f5ba:	4b17      	ldr	r3, [pc, #92]	@ (800f618 <xTaskIncrementTick+0x168>)
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f5c0:	4914      	ldr	r1, [pc, #80]	@ (800f614 <xTaskIncrementTick+0x164>)
 800f5c2:	4613      	mov	r3, r2
 800f5c4:	009b      	lsls	r3, r3, #2
 800f5c6:	4413      	add	r3, r2
 800f5c8:	009b      	lsls	r3, r3, #2
 800f5ca:	440b      	add	r3, r1
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	2b01      	cmp	r3, #1
 800f5d0:	d901      	bls.n	800f5d6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800f5d2:	2301      	movs	r3, #1
 800f5d4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f5d6:	4b11      	ldr	r3, [pc, #68]	@ (800f61c <xTaskIncrementTick+0x16c>)
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d007      	beq.n	800f5ee <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800f5de:	2301      	movs	r3, #1
 800f5e0:	617b      	str	r3, [r7, #20]
 800f5e2:	e004      	b.n	800f5ee <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f5e4:	4b0e      	ldr	r3, [pc, #56]	@ (800f620 <xTaskIncrementTick+0x170>)
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	3301      	adds	r3, #1
 800f5ea:	4a0d      	ldr	r2, [pc, #52]	@ (800f620 <xTaskIncrementTick+0x170>)
 800f5ec:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f5ee:	697b      	ldr	r3, [r7, #20]
}
 800f5f0:	4618      	mov	r0, r3
 800f5f2:	3718      	adds	r7, #24
 800f5f4:	46bd      	mov	sp, r7
 800f5f6:	bd80      	pop	{r7, pc}
 800f5f8:	20002dec 	.word	0x20002dec
 800f5fc:	20002dc8 	.word	0x20002dc8
 800f600:	20002d7c 	.word	0x20002d7c
 800f604:	20002d80 	.word	0x20002d80
 800f608:	20002ddc 	.word	0x20002ddc
 800f60c:	20002de4 	.word	0x20002de4
 800f610:	20002dcc 	.word	0x20002dcc
 800f614:	200028f4 	.word	0x200028f4
 800f618:	200028f0 	.word	0x200028f0
 800f61c:	20002dd8 	.word	0x20002dd8
 800f620:	20002dd4 	.word	0x20002dd4

0800f624 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f624:	b480      	push	{r7}
 800f626:	b085      	sub	sp, #20
 800f628:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f62a:	4b2b      	ldr	r3, [pc, #172]	@ (800f6d8 <vTaskSwitchContext+0xb4>)
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d003      	beq.n	800f63a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f632:	4b2a      	ldr	r3, [pc, #168]	@ (800f6dc <vTaskSwitchContext+0xb8>)
 800f634:	2201      	movs	r2, #1
 800f636:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f638:	e047      	b.n	800f6ca <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800f63a:	4b28      	ldr	r3, [pc, #160]	@ (800f6dc <vTaskSwitchContext+0xb8>)
 800f63c:	2200      	movs	r2, #0
 800f63e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f640:	4b27      	ldr	r3, [pc, #156]	@ (800f6e0 <vTaskSwitchContext+0xbc>)
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	60fb      	str	r3, [r7, #12]
 800f646:	e011      	b.n	800f66c <vTaskSwitchContext+0x48>
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d10b      	bne.n	800f666 <vTaskSwitchContext+0x42>
	__asm volatile
 800f64e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f652:	f383 8811 	msr	BASEPRI, r3
 800f656:	f3bf 8f6f 	isb	sy
 800f65a:	f3bf 8f4f 	dsb	sy
 800f65e:	607b      	str	r3, [r7, #4]
}
 800f660:	bf00      	nop
 800f662:	bf00      	nop
 800f664:	e7fd      	b.n	800f662 <vTaskSwitchContext+0x3e>
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	3b01      	subs	r3, #1
 800f66a:	60fb      	str	r3, [r7, #12]
 800f66c:	491d      	ldr	r1, [pc, #116]	@ (800f6e4 <vTaskSwitchContext+0xc0>)
 800f66e:	68fa      	ldr	r2, [r7, #12]
 800f670:	4613      	mov	r3, r2
 800f672:	009b      	lsls	r3, r3, #2
 800f674:	4413      	add	r3, r2
 800f676:	009b      	lsls	r3, r3, #2
 800f678:	440b      	add	r3, r1
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d0e3      	beq.n	800f648 <vTaskSwitchContext+0x24>
 800f680:	68fa      	ldr	r2, [r7, #12]
 800f682:	4613      	mov	r3, r2
 800f684:	009b      	lsls	r3, r3, #2
 800f686:	4413      	add	r3, r2
 800f688:	009b      	lsls	r3, r3, #2
 800f68a:	4a16      	ldr	r2, [pc, #88]	@ (800f6e4 <vTaskSwitchContext+0xc0>)
 800f68c:	4413      	add	r3, r2
 800f68e:	60bb      	str	r3, [r7, #8]
 800f690:	68bb      	ldr	r3, [r7, #8]
 800f692:	685b      	ldr	r3, [r3, #4]
 800f694:	685a      	ldr	r2, [r3, #4]
 800f696:	68bb      	ldr	r3, [r7, #8]
 800f698:	605a      	str	r2, [r3, #4]
 800f69a:	68bb      	ldr	r3, [r7, #8]
 800f69c:	685a      	ldr	r2, [r3, #4]
 800f69e:	68bb      	ldr	r3, [r7, #8]
 800f6a0:	3308      	adds	r3, #8
 800f6a2:	429a      	cmp	r2, r3
 800f6a4:	d104      	bne.n	800f6b0 <vTaskSwitchContext+0x8c>
 800f6a6:	68bb      	ldr	r3, [r7, #8]
 800f6a8:	685b      	ldr	r3, [r3, #4]
 800f6aa:	685a      	ldr	r2, [r3, #4]
 800f6ac:	68bb      	ldr	r3, [r7, #8]
 800f6ae:	605a      	str	r2, [r3, #4]
 800f6b0:	68bb      	ldr	r3, [r7, #8]
 800f6b2:	685b      	ldr	r3, [r3, #4]
 800f6b4:	68db      	ldr	r3, [r3, #12]
 800f6b6:	4a0c      	ldr	r2, [pc, #48]	@ (800f6e8 <vTaskSwitchContext+0xc4>)
 800f6b8:	6013      	str	r3, [r2, #0]
 800f6ba:	4a09      	ldr	r2, [pc, #36]	@ (800f6e0 <vTaskSwitchContext+0xbc>)
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f6c0:	4b09      	ldr	r3, [pc, #36]	@ (800f6e8 <vTaskSwitchContext+0xc4>)
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	3354      	adds	r3, #84	@ 0x54
 800f6c6:	4a09      	ldr	r2, [pc, #36]	@ (800f6ec <vTaskSwitchContext+0xc8>)
 800f6c8:	6013      	str	r3, [r2, #0]
}
 800f6ca:	bf00      	nop
 800f6cc:	3714      	adds	r7, #20
 800f6ce:	46bd      	mov	sp, r7
 800f6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d4:	4770      	bx	lr
 800f6d6:	bf00      	nop
 800f6d8:	20002dec 	.word	0x20002dec
 800f6dc:	20002dd8 	.word	0x20002dd8
 800f6e0:	20002dcc 	.word	0x20002dcc
 800f6e4:	200028f4 	.word	0x200028f4
 800f6e8:	200028f0 	.word	0x200028f0
 800f6ec:	200002b4 	.word	0x200002b4

0800f6f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f6f0:	b580      	push	{r7, lr}
 800f6f2:	b084      	sub	sp, #16
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	6078      	str	r0, [r7, #4]
 800f6f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d10b      	bne.n	800f718 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800f700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f704:	f383 8811 	msr	BASEPRI, r3
 800f708:	f3bf 8f6f 	isb	sy
 800f70c:	f3bf 8f4f 	dsb	sy
 800f710:	60fb      	str	r3, [r7, #12]
}
 800f712:	bf00      	nop
 800f714:	bf00      	nop
 800f716:	e7fd      	b.n	800f714 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f718:	4b07      	ldr	r3, [pc, #28]	@ (800f738 <vTaskPlaceOnEventList+0x48>)
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	3318      	adds	r3, #24
 800f71e:	4619      	mov	r1, r3
 800f720:	6878      	ldr	r0, [r7, #4]
 800f722:	f7fe fcb2 	bl	800e08a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f726:	2101      	movs	r1, #1
 800f728:	6838      	ldr	r0, [r7, #0]
 800f72a:	f000 fc41 	bl	800ffb0 <prvAddCurrentTaskToDelayedList>
}
 800f72e:	bf00      	nop
 800f730:	3710      	adds	r7, #16
 800f732:	46bd      	mov	sp, r7
 800f734:	bd80      	pop	{r7, pc}
 800f736:	bf00      	nop
 800f738:	200028f0 	.word	0x200028f0

0800f73c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800f73c:	b580      	push	{r7, lr}
 800f73e:	b086      	sub	sp, #24
 800f740:	af00      	add	r7, sp, #0
 800f742:	60f8      	str	r0, [r7, #12]
 800f744:	60b9      	str	r1, [r7, #8]
 800f746:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d10b      	bne.n	800f766 <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 800f74e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f752:	f383 8811 	msr	BASEPRI, r3
 800f756:	f3bf 8f6f 	isb	sy
 800f75a:	f3bf 8f4f 	dsb	sy
 800f75e:	617b      	str	r3, [r7, #20]
}
 800f760:	bf00      	nop
 800f762:	bf00      	nop
 800f764:	e7fd      	b.n	800f762 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800f766:	4b12      	ldr	r3, [pc, #72]	@ (800f7b0 <vTaskPlaceOnUnorderedEventList+0x74>)
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d10b      	bne.n	800f786 <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 800f76e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f772:	f383 8811 	msr	BASEPRI, r3
 800f776:	f3bf 8f6f 	isb	sy
 800f77a:	f3bf 8f4f 	dsb	sy
 800f77e:	613b      	str	r3, [r7, #16]
}
 800f780:	bf00      	nop
 800f782:	bf00      	nop
 800f784:	e7fd      	b.n	800f782 <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800f786:	4b0b      	ldr	r3, [pc, #44]	@ (800f7b4 <vTaskPlaceOnUnorderedEventList+0x78>)
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	68ba      	ldr	r2, [r7, #8]
 800f78c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f790:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f792:	4b08      	ldr	r3, [pc, #32]	@ (800f7b4 <vTaskPlaceOnUnorderedEventList+0x78>)
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	3318      	adds	r3, #24
 800f798:	4619      	mov	r1, r3
 800f79a:	68f8      	ldr	r0, [r7, #12]
 800f79c:	f7fe fc51 	bl	800e042 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f7a0:	2101      	movs	r1, #1
 800f7a2:	6878      	ldr	r0, [r7, #4]
 800f7a4:	f000 fc04 	bl	800ffb0 <prvAddCurrentTaskToDelayedList>
}
 800f7a8:	bf00      	nop
 800f7aa:	3718      	adds	r7, #24
 800f7ac:	46bd      	mov	sp, r7
 800f7ae:	bd80      	pop	{r7, pc}
 800f7b0:	20002dec 	.word	0x20002dec
 800f7b4:	200028f0 	.word	0x200028f0

0800f7b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	b086      	sub	sp, #24
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	60f8      	str	r0, [r7, #12]
 800f7c0:	60b9      	str	r1, [r7, #8]
 800f7c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d10b      	bne.n	800f7e2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800f7ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7ce:	f383 8811 	msr	BASEPRI, r3
 800f7d2:	f3bf 8f6f 	isb	sy
 800f7d6:	f3bf 8f4f 	dsb	sy
 800f7da:	617b      	str	r3, [r7, #20]
}
 800f7dc:	bf00      	nop
 800f7de:	bf00      	nop
 800f7e0:	e7fd      	b.n	800f7de <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f7e2:	4b0a      	ldr	r3, [pc, #40]	@ (800f80c <vTaskPlaceOnEventListRestricted+0x54>)
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	3318      	adds	r3, #24
 800f7e8:	4619      	mov	r1, r3
 800f7ea:	68f8      	ldr	r0, [r7, #12]
 800f7ec:	f7fe fc29 	bl	800e042 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d002      	beq.n	800f7fc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800f7f6:	f04f 33ff 	mov.w	r3, #4294967295
 800f7fa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f7fc:	6879      	ldr	r1, [r7, #4]
 800f7fe:	68b8      	ldr	r0, [r7, #8]
 800f800:	f000 fbd6 	bl	800ffb0 <prvAddCurrentTaskToDelayedList>
	}
 800f804:	bf00      	nop
 800f806:	3718      	adds	r7, #24
 800f808:	46bd      	mov	sp, r7
 800f80a:	bd80      	pop	{r7, pc}
 800f80c:	200028f0 	.word	0x200028f0

0800f810 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f810:	b580      	push	{r7, lr}
 800f812:	b086      	sub	sp, #24
 800f814:	af00      	add	r7, sp, #0
 800f816:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	68db      	ldr	r3, [r3, #12]
 800f81c:	68db      	ldr	r3, [r3, #12]
 800f81e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f820:	693b      	ldr	r3, [r7, #16]
 800f822:	2b00      	cmp	r3, #0
 800f824:	d10b      	bne.n	800f83e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800f826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f82a:	f383 8811 	msr	BASEPRI, r3
 800f82e:	f3bf 8f6f 	isb	sy
 800f832:	f3bf 8f4f 	dsb	sy
 800f836:	60fb      	str	r3, [r7, #12]
}
 800f838:	bf00      	nop
 800f83a:	bf00      	nop
 800f83c:	e7fd      	b.n	800f83a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f83e:	693b      	ldr	r3, [r7, #16]
 800f840:	3318      	adds	r3, #24
 800f842:	4618      	mov	r0, r3
 800f844:	f7fe fc5a 	bl	800e0fc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f848:	4b1d      	ldr	r3, [pc, #116]	@ (800f8c0 <xTaskRemoveFromEventList+0xb0>)
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d11d      	bne.n	800f88c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f850:	693b      	ldr	r3, [r7, #16]
 800f852:	3304      	adds	r3, #4
 800f854:	4618      	mov	r0, r3
 800f856:	f7fe fc51 	bl	800e0fc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f85a:	693b      	ldr	r3, [r7, #16]
 800f85c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f85e:	4b19      	ldr	r3, [pc, #100]	@ (800f8c4 <xTaskRemoveFromEventList+0xb4>)
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	429a      	cmp	r2, r3
 800f864:	d903      	bls.n	800f86e <xTaskRemoveFromEventList+0x5e>
 800f866:	693b      	ldr	r3, [r7, #16]
 800f868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f86a:	4a16      	ldr	r2, [pc, #88]	@ (800f8c4 <xTaskRemoveFromEventList+0xb4>)
 800f86c:	6013      	str	r3, [r2, #0]
 800f86e:	693b      	ldr	r3, [r7, #16]
 800f870:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f872:	4613      	mov	r3, r2
 800f874:	009b      	lsls	r3, r3, #2
 800f876:	4413      	add	r3, r2
 800f878:	009b      	lsls	r3, r3, #2
 800f87a:	4a13      	ldr	r2, [pc, #76]	@ (800f8c8 <xTaskRemoveFromEventList+0xb8>)
 800f87c:	441a      	add	r2, r3
 800f87e:	693b      	ldr	r3, [r7, #16]
 800f880:	3304      	adds	r3, #4
 800f882:	4619      	mov	r1, r3
 800f884:	4610      	mov	r0, r2
 800f886:	f7fe fbdc 	bl	800e042 <vListInsertEnd>
 800f88a:	e005      	b.n	800f898 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f88c:	693b      	ldr	r3, [r7, #16]
 800f88e:	3318      	adds	r3, #24
 800f890:	4619      	mov	r1, r3
 800f892:	480e      	ldr	r0, [pc, #56]	@ (800f8cc <xTaskRemoveFromEventList+0xbc>)
 800f894:	f7fe fbd5 	bl	800e042 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f898:	693b      	ldr	r3, [r7, #16]
 800f89a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f89c:	4b0c      	ldr	r3, [pc, #48]	@ (800f8d0 <xTaskRemoveFromEventList+0xc0>)
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f8a2:	429a      	cmp	r2, r3
 800f8a4:	d905      	bls.n	800f8b2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f8a6:	2301      	movs	r3, #1
 800f8a8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f8aa:	4b0a      	ldr	r3, [pc, #40]	@ (800f8d4 <xTaskRemoveFromEventList+0xc4>)
 800f8ac:	2201      	movs	r2, #1
 800f8ae:	601a      	str	r2, [r3, #0]
 800f8b0:	e001      	b.n	800f8b6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800f8b2:	2300      	movs	r3, #0
 800f8b4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f8b6:	697b      	ldr	r3, [r7, #20]
}
 800f8b8:	4618      	mov	r0, r3
 800f8ba:	3718      	adds	r7, #24
 800f8bc:	46bd      	mov	sp, r7
 800f8be:	bd80      	pop	{r7, pc}
 800f8c0:	20002dec 	.word	0x20002dec
 800f8c4:	20002dcc 	.word	0x20002dcc
 800f8c8:	200028f4 	.word	0x200028f4
 800f8cc:	20002d84 	.word	0x20002d84
 800f8d0:	200028f0 	.word	0x200028f0
 800f8d4:	20002dd8 	.word	0x20002dd8

0800f8d8 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b086      	sub	sp, #24
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	6078      	str	r0, [r7, #4]
 800f8e0:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800f8e2:	4b2a      	ldr	r3, [pc, #168]	@ (800f98c <vTaskRemoveFromUnorderedEventList+0xb4>)
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d10b      	bne.n	800f902 <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 800f8ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8ee:	f383 8811 	msr	BASEPRI, r3
 800f8f2:	f3bf 8f6f 	isb	sy
 800f8f6:	f3bf 8f4f 	dsb	sy
 800f8fa:	613b      	str	r3, [r7, #16]
}
 800f8fc:	bf00      	nop
 800f8fe:	bf00      	nop
 800f900:	e7fd      	b.n	800f8fe <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800f902:	683b      	ldr	r3, [r7, #0]
 800f904:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	68db      	ldr	r3, [r3, #12]
 800f910:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800f912:	697b      	ldr	r3, [r7, #20]
 800f914:	2b00      	cmp	r3, #0
 800f916:	d10b      	bne.n	800f930 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 800f918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f91c:	f383 8811 	msr	BASEPRI, r3
 800f920:	f3bf 8f6f 	isb	sy
 800f924:	f3bf 8f4f 	dsb	sy
 800f928:	60fb      	str	r3, [r7, #12]
}
 800f92a:	bf00      	nop
 800f92c:	bf00      	nop
 800f92e:	e7fd      	b.n	800f92c <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 800f930:	6878      	ldr	r0, [r7, #4]
 800f932:	f7fe fbe3 	bl	800e0fc <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f936:	697b      	ldr	r3, [r7, #20]
 800f938:	3304      	adds	r3, #4
 800f93a:	4618      	mov	r0, r3
 800f93c:	f7fe fbde 	bl	800e0fc <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800f940:	697b      	ldr	r3, [r7, #20]
 800f942:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f944:	4b12      	ldr	r3, [pc, #72]	@ (800f990 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	429a      	cmp	r2, r3
 800f94a:	d903      	bls.n	800f954 <vTaskRemoveFromUnorderedEventList+0x7c>
 800f94c:	697b      	ldr	r3, [r7, #20]
 800f94e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f950:	4a0f      	ldr	r2, [pc, #60]	@ (800f990 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800f952:	6013      	str	r3, [r2, #0]
 800f954:	697b      	ldr	r3, [r7, #20]
 800f956:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f958:	4613      	mov	r3, r2
 800f95a:	009b      	lsls	r3, r3, #2
 800f95c:	4413      	add	r3, r2
 800f95e:	009b      	lsls	r3, r3, #2
 800f960:	4a0c      	ldr	r2, [pc, #48]	@ (800f994 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800f962:	441a      	add	r2, r3
 800f964:	697b      	ldr	r3, [r7, #20]
 800f966:	3304      	adds	r3, #4
 800f968:	4619      	mov	r1, r3
 800f96a:	4610      	mov	r0, r2
 800f96c:	f7fe fb69 	bl	800e042 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f970:	697b      	ldr	r3, [r7, #20]
 800f972:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f974:	4b08      	ldr	r3, [pc, #32]	@ (800f998 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f97a:	429a      	cmp	r2, r3
 800f97c:	d902      	bls.n	800f984 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800f97e:	4b07      	ldr	r3, [pc, #28]	@ (800f99c <vTaskRemoveFromUnorderedEventList+0xc4>)
 800f980:	2201      	movs	r2, #1
 800f982:	601a      	str	r2, [r3, #0]
	}
}
 800f984:	bf00      	nop
 800f986:	3718      	adds	r7, #24
 800f988:	46bd      	mov	sp, r7
 800f98a:	bd80      	pop	{r7, pc}
 800f98c:	20002dec 	.word	0x20002dec
 800f990:	20002dcc 	.word	0x20002dcc
 800f994:	200028f4 	.word	0x200028f4
 800f998:	200028f0 	.word	0x200028f0
 800f99c:	20002dd8 	.word	0x20002dd8

0800f9a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f9a0:	b480      	push	{r7}
 800f9a2:	b083      	sub	sp, #12
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f9a8:	4b06      	ldr	r3, [pc, #24]	@ (800f9c4 <vTaskInternalSetTimeOutState+0x24>)
 800f9aa:	681a      	ldr	r2, [r3, #0]
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f9b0:	4b05      	ldr	r3, [pc, #20]	@ (800f9c8 <vTaskInternalSetTimeOutState+0x28>)
 800f9b2:	681a      	ldr	r2, [r3, #0]
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	605a      	str	r2, [r3, #4]
}
 800f9b8:	bf00      	nop
 800f9ba:	370c      	adds	r7, #12
 800f9bc:	46bd      	mov	sp, r7
 800f9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c2:	4770      	bx	lr
 800f9c4:	20002ddc 	.word	0x20002ddc
 800f9c8:	20002dc8 	.word	0x20002dc8

0800f9cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f9cc:	b580      	push	{r7, lr}
 800f9ce:	b088      	sub	sp, #32
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	6078      	str	r0, [r7, #4]
 800f9d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d10b      	bne.n	800f9f4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800f9dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9e0:	f383 8811 	msr	BASEPRI, r3
 800f9e4:	f3bf 8f6f 	isb	sy
 800f9e8:	f3bf 8f4f 	dsb	sy
 800f9ec:	613b      	str	r3, [r7, #16]
}
 800f9ee:	bf00      	nop
 800f9f0:	bf00      	nop
 800f9f2:	e7fd      	b.n	800f9f0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f9f4:	683b      	ldr	r3, [r7, #0]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d10b      	bne.n	800fa12 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800f9fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9fe:	f383 8811 	msr	BASEPRI, r3
 800fa02:	f3bf 8f6f 	isb	sy
 800fa06:	f3bf 8f4f 	dsb	sy
 800fa0a:	60fb      	str	r3, [r7, #12]
}
 800fa0c:	bf00      	nop
 800fa0e:	bf00      	nop
 800fa10:	e7fd      	b.n	800fa0e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800fa12:	f000 ffc9 	bl	80109a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800fa16:	4b1d      	ldr	r3, [pc, #116]	@ (800fa8c <xTaskCheckForTimeOut+0xc0>)
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	685b      	ldr	r3, [r3, #4]
 800fa20:	69ba      	ldr	r2, [r7, #24]
 800fa22:	1ad3      	subs	r3, r2, r3
 800fa24:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800fa26:	683b      	ldr	r3, [r7, #0]
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa2e:	d102      	bne.n	800fa36 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800fa30:	2300      	movs	r3, #0
 800fa32:	61fb      	str	r3, [r7, #28]
 800fa34:	e023      	b.n	800fa7e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	681a      	ldr	r2, [r3, #0]
 800fa3a:	4b15      	ldr	r3, [pc, #84]	@ (800fa90 <xTaskCheckForTimeOut+0xc4>)
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	429a      	cmp	r2, r3
 800fa40:	d007      	beq.n	800fa52 <xTaskCheckForTimeOut+0x86>
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	685b      	ldr	r3, [r3, #4]
 800fa46:	69ba      	ldr	r2, [r7, #24]
 800fa48:	429a      	cmp	r2, r3
 800fa4a:	d302      	bcc.n	800fa52 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800fa4c:	2301      	movs	r3, #1
 800fa4e:	61fb      	str	r3, [r7, #28]
 800fa50:	e015      	b.n	800fa7e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800fa52:	683b      	ldr	r3, [r7, #0]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	697a      	ldr	r2, [r7, #20]
 800fa58:	429a      	cmp	r2, r3
 800fa5a:	d20b      	bcs.n	800fa74 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800fa5c:	683b      	ldr	r3, [r7, #0]
 800fa5e:	681a      	ldr	r2, [r3, #0]
 800fa60:	697b      	ldr	r3, [r7, #20]
 800fa62:	1ad2      	subs	r2, r2, r3
 800fa64:	683b      	ldr	r3, [r7, #0]
 800fa66:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fa68:	6878      	ldr	r0, [r7, #4]
 800fa6a:	f7ff ff99 	bl	800f9a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800fa6e:	2300      	movs	r3, #0
 800fa70:	61fb      	str	r3, [r7, #28]
 800fa72:	e004      	b.n	800fa7e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800fa74:	683b      	ldr	r3, [r7, #0]
 800fa76:	2200      	movs	r2, #0
 800fa78:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800fa7a:	2301      	movs	r3, #1
 800fa7c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800fa7e:	f000 ffc5 	bl	8010a0c <vPortExitCritical>

	return xReturn;
 800fa82:	69fb      	ldr	r3, [r7, #28]
}
 800fa84:	4618      	mov	r0, r3
 800fa86:	3720      	adds	r7, #32
 800fa88:	46bd      	mov	sp, r7
 800fa8a:	bd80      	pop	{r7, pc}
 800fa8c:	20002dc8 	.word	0x20002dc8
 800fa90:	20002ddc 	.word	0x20002ddc

0800fa94 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fa94:	b480      	push	{r7}
 800fa96:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fa98:	4b03      	ldr	r3, [pc, #12]	@ (800faa8 <vTaskMissedYield+0x14>)
 800fa9a:	2201      	movs	r2, #1
 800fa9c:	601a      	str	r2, [r3, #0]
}
 800fa9e:	bf00      	nop
 800faa0:	46bd      	mov	sp, r7
 800faa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa6:	4770      	bx	lr
 800faa8:	20002dd8 	.word	0x20002dd8

0800faac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800faac:	b580      	push	{r7, lr}
 800faae:	b082      	sub	sp, #8
 800fab0:	af00      	add	r7, sp, #0
 800fab2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800fab4:	f000 f852 	bl	800fb5c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fab8:	4b06      	ldr	r3, [pc, #24]	@ (800fad4 <prvIdleTask+0x28>)
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	2b01      	cmp	r3, #1
 800fabe:	d9f9      	bls.n	800fab4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800fac0:	4b05      	ldr	r3, [pc, #20]	@ (800fad8 <prvIdleTask+0x2c>)
 800fac2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fac6:	601a      	str	r2, [r3, #0]
 800fac8:	f3bf 8f4f 	dsb	sy
 800facc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800fad0:	e7f0      	b.n	800fab4 <prvIdleTask+0x8>
 800fad2:	bf00      	nop
 800fad4:	200028f4 	.word	0x200028f4
 800fad8:	e000ed04 	.word	0xe000ed04

0800fadc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800fadc:	b580      	push	{r7, lr}
 800fade:	b082      	sub	sp, #8
 800fae0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fae2:	2300      	movs	r3, #0
 800fae4:	607b      	str	r3, [r7, #4]
 800fae6:	e00c      	b.n	800fb02 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fae8:	687a      	ldr	r2, [r7, #4]
 800faea:	4613      	mov	r3, r2
 800faec:	009b      	lsls	r3, r3, #2
 800faee:	4413      	add	r3, r2
 800faf0:	009b      	lsls	r3, r3, #2
 800faf2:	4a12      	ldr	r2, [pc, #72]	@ (800fb3c <prvInitialiseTaskLists+0x60>)
 800faf4:	4413      	add	r3, r2
 800faf6:	4618      	mov	r0, r3
 800faf8:	f7fe fa76 	bl	800dfe8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	3301      	adds	r3, #1
 800fb00:	607b      	str	r3, [r7, #4]
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	2b37      	cmp	r3, #55	@ 0x37
 800fb06:	d9ef      	bls.n	800fae8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800fb08:	480d      	ldr	r0, [pc, #52]	@ (800fb40 <prvInitialiseTaskLists+0x64>)
 800fb0a:	f7fe fa6d 	bl	800dfe8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fb0e:	480d      	ldr	r0, [pc, #52]	@ (800fb44 <prvInitialiseTaskLists+0x68>)
 800fb10:	f7fe fa6a 	bl	800dfe8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fb14:	480c      	ldr	r0, [pc, #48]	@ (800fb48 <prvInitialiseTaskLists+0x6c>)
 800fb16:	f7fe fa67 	bl	800dfe8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800fb1a:	480c      	ldr	r0, [pc, #48]	@ (800fb4c <prvInitialiseTaskLists+0x70>)
 800fb1c:	f7fe fa64 	bl	800dfe8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800fb20:	480b      	ldr	r0, [pc, #44]	@ (800fb50 <prvInitialiseTaskLists+0x74>)
 800fb22:	f7fe fa61 	bl	800dfe8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800fb26:	4b0b      	ldr	r3, [pc, #44]	@ (800fb54 <prvInitialiseTaskLists+0x78>)
 800fb28:	4a05      	ldr	r2, [pc, #20]	@ (800fb40 <prvInitialiseTaskLists+0x64>)
 800fb2a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800fb2c:	4b0a      	ldr	r3, [pc, #40]	@ (800fb58 <prvInitialiseTaskLists+0x7c>)
 800fb2e:	4a05      	ldr	r2, [pc, #20]	@ (800fb44 <prvInitialiseTaskLists+0x68>)
 800fb30:	601a      	str	r2, [r3, #0]
}
 800fb32:	bf00      	nop
 800fb34:	3708      	adds	r7, #8
 800fb36:	46bd      	mov	sp, r7
 800fb38:	bd80      	pop	{r7, pc}
 800fb3a:	bf00      	nop
 800fb3c:	200028f4 	.word	0x200028f4
 800fb40:	20002d54 	.word	0x20002d54
 800fb44:	20002d68 	.word	0x20002d68
 800fb48:	20002d84 	.word	0x20002d84
 800fb4c:	20002d98 	.word	0x20002d98
 800fb50:	20002db0 	.word	0x20002db0
 800fb54:	20002d7c 	.word	0x20002d7c
 800fb58:	20002d80 	.word	0x20002d80

0800fb5c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800fb5c:	b580      	push	{r7, lr}
 800fb5e:	b082      	sub	sp, #8
 800fb60:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fb62:	e019      	b.n	800fb98 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800fb64:	f000 ff20 	bl	80109a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb68:	4b10      	ldr	r3, [pc, #64]	@ (800fbac <prvCheckTasksWaitingTermination+0x50>)
 800fb6a:	68db      	ldr	r3, [r3, #12]
 800fb6c:	68db      	ldr	r3, [r3, #12]
 800fb6e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	3304      	adds	r3, #4
 800fb74:	4618      	mov	r0, r3
 800fb76:	f7fe fac1 	bl	800e0fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800fb7a:	4b0d      	ldr	r3, [pc, #52]	@ (800fbb0 <prvCheckTasksWaitingTermination+0x54>)
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	3b01      	subs	r3, #1
 800fb80:	4a0b      	ldr	r2, [pc, #44]	@ (800fbb0 <prvCheckTasksWaitingTermination+0x54>)
 800fb82:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800fb84:	4b0b      	ldr	r3, [pc, #44]	@ (800fbb4 <prvCheckTasksWaitingTermination+0x58>)
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	3b01      	subs	r3, #1
 800fb8a:	4a0a      	ldr	r2, [pc, #40]	@ (800fbb4 <prvCheckTasksWaitingTermination+0x58>)
 800fb8c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800fb8e:	f000 ff3d 	bl	8010a0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800fb92:	6878      	ldr	r0, [r7, #4]
 800fb94:	f000 f810 	bl	800fbb8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fb98:	4b06      	ldr	r3, [pc, #24]	@ (800fbb4 <prvCheckTasksWaitingTermination+0x58>)
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d1e1      	bne.n	800fb64 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800fba0:	bf00      	nop
 800fba2:	bf00      	nop
 800fba4:	3708      	adds	r7, #8
 800fba6:	46bd      	mov	sp, r7
 800fba8:	bd80      	pop	{r7, pc}
 800fbaa:	bf00      	nop
 800fbac:	20002d98 	.word	0x20002d98
 800fbb0:	20002dc4 	.word	0x20002dc4
 800fbb4:	20002dac 	.word	0x20002dac

0800fbb8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800fbb8:	b580      	push	{r7, lr}
 800fbba:	b084      	sub	sp, #16
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	3354      	adds	r3, #84	@ 0x54
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	f002 f857 	bl	8011c78 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d108      	bne.n	800fbe6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fbd8:	4618      	mov	r0, r3
 800fbda:	f001 f8d5 	bl	8010d88 <vPortFree>
				vPortFree( pxTCB );
 800fbde:	6878      	ldr	r0, [r7, #4]
 800fbe0:	f001 f8d2 	bl	8010d88 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800fbe4:	e019      	b.n	800fc1a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800fbec:	2b01      	cmp	r3, #1
 800fbee:	d103      	bne.n	800fbf8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800fbf0:	6878      	ldr	r0, [r7, #4]
 800fbf2:	f001 f8c9 	bl	8010d88 <vPortFree>
	}
 800fbf6:	e010      	b.n	800fc1a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800fbfe:	2b02      	cmp	r3, #2
 800fc00:	d00b      	beq.n	800fc1a <prvDeleteTCB+0x62>
	__asm volatile
 800fc02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc06:	f383 8811 	msr	BASEPRI, r3
 800fc0a:	f3bf 8f6f 	isb	sy
 800fc0e:	f3bf 8f4f 	dsb	sy
 800fc12:	60fb      	str	r3, [r7, #12]
}
 800fc14:	bf00      	nop
 800fc16:	bf00      	nop
 800fc18:	e7fd      	b.n	800fc16 <prvDeleteTCB+0x5e>
	}
 800fc1a:	bf00      	nop
 800fc1c:	3710      	adds	r7, #16
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	bd80      	pop	{r7, pc}
	...

0800fc24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800fc24:	b480      	push	{r7}
 800fc26:	b083      	sub	sp, #12
 800fc28:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fc2a:	4b0c      	ldr	r3, [pc, #48]	@ (800fc5c <prvResetNextTaskUnblockTime+0x38>)
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d104      	bne.n	800fc3e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800fc34:	4b0a      	ldr	r3, [pc, #40]	@ (800fc60 <prvResetNextTaskUnblockTime+0x3c>)
 800fc36:	f04f 32ff 	mov.w	r2, #4294967295
 800fc3a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800fc3c:	e008      	b.n	800fc50 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fc3e:	4b07      	ldr	r3, [pc, #28]	@ (800fc5c <prvResetNextTaskUnblockTime+0x38>)
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	68db      	ldr	r3, [r3, #12]
 800fc44:	68db      	ldr	r3, [r3, #12]
 800fc46:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	685b      	ldr	r3, [r3, #4]
 800fc4c:	4a04      	ldr	r2, [pc, #16]	@ (800fc60 <prvResetNextTaskUnblockTime+0x3c>)
 800fc4e:	6013      	str	r3, [r2, #0]
}
 800fc50:	bf00      	nop
 800fc52:	370c      	adds	r7, #12
 800fc54:	46bd      	mov	sp, r7
 800fc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5a:	4770      	bx	lr
 800fc5c:	20002d7c 	.word	0x20002d7c
 800fc60:	20002de4 	.word	0x20002de4

0800fc64 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800fc64:	b480      	push	{r7}
 800fc66:	b083      	sub	sp, #12
 800fc68:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800fc6a:	4b0b      	ldr	r3, [pc, #44]	@ (800fc98 <xTaskGetSchedulerState+0x34>)
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d102      	bne.n	800fc78 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fc72:	2301      	movs	r3, #1
 800fc74:	607b      	str	r3, [r7, #4]
 800fc76:	e008      	b.n	800fc8a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fc78:	4b08      	ldr	r3, [pc, #32]	@ (800fc9c <xTaskGetSchedulerState+0x38>)
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d102      	bne.n	800fc86 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800fc80:	2302      	movs	r3, #2
 800fc82:	607b      	str	r3, [r7, #4]
 800fc84:	e001      	b.n	800fc8a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800fc86:	2300      	movs	r3, #0
 800fc88:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800fc8a:	687b      	ldr	r3, [r7, #4]
	}
 800fc8c:	4618      	mov	r0, r3
 800fc8e:	370c      	adds	r7, #12
 800fc90:	46bd      	mov	sp, r7
 800fc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc96:	4770      	bx	lr
 800fc98:	20002dd0 	.word	0x20002dd0
 800fc9c:	20002dec 	.word	0x20002dec

0800fca0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800fca0:	b580      	push	{r7, lr}
 800fca2:	b084      	sub	sp, #16
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800fcac:	2300      	movs	r3, #0
 800fcae:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d051      	beq.n	800fd5a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800fcb6:	68bb      	ldr	r3, [r7, #8]
 800fcb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fcba:	4b2a      	ldr	r3, [pc, #168]	@ (800fd64 <xTaskPriorityInherit+0xc4>)
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fcc0:	429a      	cmp	r2, r3
 800fcc2:	d241      	bcs.n	800fd48 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fcc4:	68bb      	ldr	r3, [r7, #8]
 800fcc6:	699b      	ldr	r3, [r3, #24]
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	db06      	blt.n	800fcda <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fccc:	4b25      	ldr	r3, [pc, #148]	@ (800fd64 <xTaskPriorityInherit+0xc4>)
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fcd2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800fcd6:	68bb      	ldr	r3, [r7, #8]
 800fcd8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800fcda:	68bb      	ldr	r3, [r7, #8]
 800fcdc:	6959      	ldr	r1, [r3, #20]
 800fcde:	68bb      	ldr	r3, [r7, #8]
 800fce0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fce2:	4613      	mov	r3, r2
 800fce4:	009b      	lsls	r3, r3, #2
 800fce6:	4413      	add	r3, r2
 800fce8:	009b      	lsls	r3, r3, #2
 800fcea:	4a1f      	ldr	r2, [pc, #124]	@ (800fd68 <xTaskPriorityInherit+0xc8>)
 800fcec:	4413      	add	r3, r2
 800fcee:	4299      	cmp	r1, r3
 800fcf0:	d122      	bne.n	800fd38 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fcf2:	68bb      	ldr	r3, [r7, #8]
 800fcf4:	3304      	adds	r3, #4
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	f7fe fa00 	bl	800e0fc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fcfc:	4b19      	ldr	r3, [pc, #100]	@ (800fd64 <xTaskPriorityInherit+0xc4>)
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd02:	68bb      	ldr	r3, [r7, #8]
 800fd04:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800fd06:	68bb      	ldr	r3, [r7, #8]
 800fd08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd0a:	4b18      	ldr	r3, [pc, #96]	@ (800fd6c <xTaskPriorityInherit+0xcc>)
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	429a      	cmp	r2, r3
 800fd10:	d903      	bls.n	800fd1a <xTaskPriorityInherit+0x7a>
 800fd12:	68bb      	ldr	r3, [r7, #8]
 800fd14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd16:	4a15      	ldr	r2, [pc, #84]	@ (800fd6c <xTaskPriorityInherit+0xcc>)
 800fd18:	6013      	str	r3, [r2, #0]
 800fd1a:	68bb      	ldr	r3, [r7, #8]
 800fd1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd1e:	4613      	mov	r3, r2
 800fd20:	009b      	lsls	r3, r3, #2
 800fd22:	4413      	add	r3, r2
 800fd24:	009b      	lsls	r3, r3, #2
 800fd26:	4a10      	ldr	r2, [pc, #64]	@ (800fd68 <xTaskPriorityInherit+0xc8>)
 800fd28:	441a      	add	r2, r3
 800fd2a:	68bb      	ldr	r3, [r7, #8]
 800fd2c:	3304      	adds	r3, #4
 800fd2e:	4619      	mov	r1, r3
 800fd30:	4610      	mov	r0, r2
 800fd32:	f7fe f986 	bl	800e042 <vListInsertEnd>
 800fd36:	e004      	b.n	800fd42 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fd38:	4b0a      	ldr	r3, [pc, #40]	@ (800fd64 <xTaskPriorityInherit+0xc4>)
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd3e:	68bb      	ldr	r3, [r7, #8]
 800fd40:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800fd42:	2301      	movs	r3, #1
 800fd44:	60fb      	str	r3, [r7, #12]
 800fd46:	e008      	b.n	800fd5a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800fd48:	68bb      	ldr	r3, [r7, #8]
 800fd4a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fd4c:	4b05      	ldr	r3, [pc, #20]	@ (800fd64 <xTaskPriorityInherit+0xc4>)
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd52:	429a      	cmp	r2, r3
 800fd54:	d201      	bcs.n	800fd5a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800fd56:	2301      	movs	r3, #1
 800fd58:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fd5a:	68fb      	ldr	r3, [r7, #12]
	}
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	3710      	adds	r7, #16
 800fd60:	46bd      	mov	sp, r7
 800fd62:	bd80      	pop	{r7, pc}
 800fd64:	200028f0 	.word	0x200028f0
 800fd68:	200028f4 	.word	0x200028f4
 800fd6c:	20002dcc 	.word	0x20002dcc

0800fd70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800fd70:	b580      	push	{r7, lr}
 800fd72:	b086      	sub	sp, #24
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800fd7c:	2300      	movs	r3, #0
 800fd7e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d058      	beq.n	800fe38 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800fd86:	4b2f      	ldr	r3, [pc, #188]	@ (800fe44 <xTaskPriorityDisinherit+0xd4>)
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	693a      	ldr	r2, [r7, #16]
 800fd8c:	429a      	cmp	r2, r3
 800fd8e:	d00b      	beq.n	800fda8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800fd90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd94:	f383 8811 	msr	BASEPRI, r3
 800fd98:	f3bf 8f6f 	isb	sy
 800fd9c:	f3bf 8f4f 	dsb	sy
 800fda0:	60fb      	str	r3, [r7, #12]
}
 800fda2:	bf00      	nop
 800fda4:	bf00      	nop
 800fda6:	e7fd      	b.n	800fda4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800fda8:	693b      	ldr	r3, [r7, #16]
 800fdaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d10b      	bne.n	800fdc8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800fdb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdb4:	f383 8811 	msr	BASEPRI, r3
 800fdb8:	f3bf 8f6f 	isb	sy
 800fdbc:	f3bf 8f4f 	dsb	sy
 800fdc0:	60bb      	str	r3, [r7, #8]
}
 800fdc2:	bf00      	nop
 800fdc4:	bf00      	nop
 800fdc6:	e7fd      	b.n	800fdc4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800fdc8:	693b      	ldr	r3, [r7, #16]
 800fdca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fdcc:	1e5a      	subs	r2, r3, #1
 800fdce:	693b      	ldr	r3, [r7, #16]
 800fdd0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800fdd2:	693b      	ldr	r3, [r7, #16]
 800fdd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fdd6:	693b      	ldr	r3, [r7, #16]
 800fdd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fdda:	429a      	cmp	r2, r3
 800fddc:	d02c      	beq.n	800fe38 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800fdde:	693b      	ldr	r3, [r7, #16]
 800fde0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d128      	bne.n	800fe38 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fde6:	693b      	ldr	r3, [r7, #16]
 800fde8:	3304      	adds	r3, #4
 800fdea:	4618      	mov	r0, r3
 800fdec:	f7fe f986 	bl	800e0fc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800fdf0:	693b      	ldr	r3, [r7, #16]
 800fdf2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fdf4:	693b      	ldr	r3, [r7, #16]
 800fdf6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fdf8:	693b      	ldr	r3, [r7, #16]
 800fdfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fdfc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800fe00:	693b      	ldr	r3, [r7, #16]
 800fe02:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800fe04:	693b      	ldr	r3, [r7, #16]
 800fe06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe08:	4b0f      	ldr	r3, [pc, #60]	@ (800fe48 <xTaskPriorityDisinherit+0xd8>)
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	429a      	cmp	r2, r3
 800fe0e:	d903      	bls.n	800fe18 <xTaskPriorityDisinherit+0xa8>
 800fe10:	693b      	ldr	r3, [r7, #16]
 800fe12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe14:	4a0c      	ldr	r2, [pc, #48]	@ (800fe48 <xTaskPriorityDisinherit+0xd8>)
 800fe16:	6013      	str	r3, [r2, #0]
 800fe18:	693b      	ldr	r3, [r7, #16]
 800fe1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe1c:	4613      	mov	r3, r2
 800fe1e:	009b      	lsls	r3, r3, #2
 800fe20:	4413      	add	r3, r2
 800fe22:	009b      	lsls	r3, r3, #2
 800fe24:	4a09      	ldr	r2, [pc, #36]	@ (800fe4c <xTaskPriorityDisinherit+0xdc>)
 800fe26:	441a      	add	r2, r3
 800fe28:	693b      	ldr	r3, [r7, #16]
 800fe2a:	3304      	adds	r3, #4
 800fe2c:	4619      	mov	r1, r3
 800fe2e:	4610      	mov	r0, r2
 800fe30:	f7fe f907 	bl	800e042 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800fe34:	2301      	movs	r3, #1
 800fe36:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fe38:	697b      	ldr	r3, [r7, #20]
	}
 800fe3a:	4618      	mov	r0, r3
 800fe3c:	3718      	adds	r7, #24
 800fe3e:	46bd      	mov	sp, r7
 800fe40:	bd80      	pop	{r7, pc}
 800fe42:	bf00      	nop
 800fe44:	200028f0 	.word	0x200028f0
 800fe48:	20002dcc 	.word	0x20002dcc
 800fe4c:	200028f4 	.word	0x200028f4

0800fe50 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800fe50:	b580      	push	{r7, lr}
 800fe52:	b088      	sub	sp, #32
 800fe54:	af00      	add	r7, sp, #0
 800fe56:	6078      	str	r0, [r7, #4]
 800fe58:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800fe5e:	2301      	movs	r3, #1
 800fe60:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d06c      	beq.n	800ff42 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800fe68:	69bb      	ldr	r3, [r7, #24]
 800fe6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d10b      	bne.n	800fe88 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800fe70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe74:	f383 8811 	msr	BASEPRI, r3
 800fe78:	f3bf 8f6f 	isb	sy
 800fe7c:	f3bf 8f4f 	dsb	sy
 800fe80:	60fb      	str	r3, [r7, #12]
}
 800fe82:	bf00      	nop
 800fe84:	bf00      	nop
 800fe86:	e7fd      	b.n	800fe84 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800fe88:	69bb      	ldr	r3, [r7, #24]
 800fe8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fe8c:	683a      	ldr	r2, [r7, #0]
 800fe8e:	429a      	cmp	r2, r3
 800fe90:	d902      	bls.n	800fe98 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800fe92:	683b      	ldr	r3, [r7, #0]
 800fe94:	61fb      	str	r3, [r7, #28]
 800fe96:	e002      	b.n	800fe9e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800fe98:	69bb      	ldr	r3, [r7, #24]
 800fe9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fe9c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800fe9e:	69bb      	ldr	r3, [r7, #24]
 800fea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fea2:	69fa      	ldr	r2, [r7, #28]
 800fea4:	429a      	cmp	r2, r3
 800fea6:	d04c      	beq.n	800ff42 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800fea8:	69bb      	ldr	r3, [r7, #24]
 800feaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800feac:	697a      	ldr	r2, [r7, #20]
 800feae:	429a      	cmp	r2, r3
 800feb0:	d147      	bne.n	800ff42 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800feb2:	4b26      	ldr	r3, [pc, #152]	@ (800ff4c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	69ba      	ldr	r2, [r7, #24]
 800feb8:	429a      	cmp	r2, r3
 800feba:	d10b      	bne.n	800fed4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800febc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fec0:	f383 8811 	msr	BASEPRI, r3
 800fec4:	f3bf 8f6f 	isb	sy
 800fec8:	f3bf 8f4f 	dsb	sy
 800fecc:	60bb      	str	r3, [r7, #8]
}
 800fece:	bf00      	nop
 800fed0:	bf00      	nop
 800fed2:	e7fd      	b.n	800fed0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800fed4:	69bb      	ldr	r3, [r7, #24]
 800fed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fed8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800feda:	69bb      	ldr	r3, [r7, #24]
 800fedc:	69fa      	ldr	r2, [r7, #28]
 800fede:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fee0:	69bb      	ldr	r3, [r7, #24]
 800fee2:	699b      	ldr	r3, [r3, #24]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	db04      	blt.n	800fef2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fee8:	69fb      	ldr	r3, [r7, #28]
 800feea:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800feee:	69bb      	ldr	r3, [r7, #24]
 800fef0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800fef2:	69bb      	ldr	r3, [r7, #24]
 800fef4:	6959      	ldr	r1, [r3, #20]
 800fef6:	693a      	ldr	r2, [r7, #16]
 800fef8:	4613      	mov	r3, r2
 800fefa:	009b      	lsls	r3, r3, #2
 800fefc:	4413      	add	r3, r2
 800fefe:	009b      	lsls	r3, r3, #2
 800ff00:	4a13      	ldr	r2, [pc, #76]	@ (800ff50 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ff02:	4413      	add	r3, r2
 800ff04:	4299      	cmp	r1, r3
 800ff06:	d11c      	bne.n	800ff42 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ff08:	69bb      	ldr	r3, [r7, #24]
 800ff0a:	3304      	adds	r3, #4
 800ff0c:	4618      	mov	r0, r3
 800ff0e:	f7fe f8f5 	bl	800e0fc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ff12:	69bb      	ldr	r3, [r7, #24]
 800ff14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ff16:	4b0f      	ldr	r3, [pc, #60]	@ (800ff54 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	429a      	cmp	r2, r3
 800ff1c:	d903      	bls.n	800ff26 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800ff1e:	69bb      	ldr	r3, [r7, #24]
 800ff20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff22:	4a0c      	ldr	r2, [pc, #48]	@ (800ff54 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ff24:	6013      	str	r3, [r2, #0]
 800ff26:	69bb      	ldr	r3, [r7, #24]
 800ff28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ff2a:	4613      	mov	r3, r2
 800ff2c:	009b      	lsls	r3, r3, #2
 800ff2e:	4413      	add	r3, r2
 800ff30:	009b      	lsls	r3, r3, #2
 800ff32:	4a07      	ldr	r2, [pc, #28]	@ (800ff50 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ff34:	441a      	add	r2, r3
 800ff36:	69bb      	ldr	r3, [r7, #24]
 800ff38:	3304      	adds	r3, #4
 800ff3a:	4619      	mov	r1, r3
 800ff3c:	4610      	mov	r0, r2
 800ff3e:	f7fe f880 	bl	800e042 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ff42:	bf00      	nop
 800ff44:	3720      	adds	r7, #32
 800ff46:	46bd      	mov	sp, r7
 800ff48:	bd80      	pop	{r7, pc}
 800ff4a:	bf00      	nop
 800ff4c:	200028f0 	.word	0x200028f0
 800ff50:	200028f4 	.word	0x200028f4
 800ff54:	20002dcc 	.word	0x20002dcc

0800ff58 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800ff58:	b480      	push	{r7}
 800ff5a:	b083      	sub	sp, #12
 800ff5c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800ff5e:	4b09      	ldr	r3, [pc, #36]	@ (800ff84 <uxTaskResetEventItemValue+0x2c>)
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	699b      	ldr	r3, [r3, #24]
 800ff64:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ff66:	4b07      	ldr	r3, [pc, #28]	@ (800ff84 <uxTaskResetEventItemValue+0x2c>)
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ff6c:	4b05      	ldr	r3, [pc, #20]	@ (800ff84 <uxTaskResetEventItemValue+0x2c>)
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800ff74:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800ff76:	687b      	ldr	r3, [r7, #4]
}
 800ff78:	4618      	mov	r0, r3
 800ff7a:	370c      	adds	r7, #12
 800ff7c:	46bd      	mov	sp, r7
 800ff7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff82:	4770      	bx	lr
 800ff84:	200028f0 	.word	0x200028f0

0800ff88 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ff88:	b480      	push	{r7}
 800ff8a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ff8c:	4b07      	ldr	r3, [pc, #28]	@ (800ffac <pvTaskIncrementMutexHeldCount+0x24>)
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d004      	beq.n	800ff9e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ff94:	4b05      	ldr	r3, [pc, #20]	@ (800ffac <pvTaskIncrementMutexHeldCount+0x24>)
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ff9a:	3201      	adds	r2, #1
 800ff9c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800ff9e:	4b03      	ldr	r3, [pc, #12]	@ (800ffac <pvTaskIncrementMutexHeldCount+0x24>)
 800ffa0:	681b      	ldr	r3, [r3, #0]
	}
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	46bd      	mov	sp, r7
 800ffa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffaa:	4770      	bx	lr
 800ffac:	200028f0 	.word	0x200028f0

0800ffb0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ffb0:	b580      	push	{r7, lr}
 800ffb2:	b084      	sub	sp, #16
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	6078      	str	r0, [r7, #4]
 800ffb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ffba:	4b21      	ldr	r3, [pc, #132]	@ (8010040 <prvAddCurrentTaskToDelayedList+0x90>)
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ffc0:	4b20      	ldr	r3, [pc, #128]	@ (8010044 <prvAddCurrentTaskToDelayedList+0x94>)
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	3304      	adds	r3, #4
 800ffc6:	4618      	mov	r0, r3
 800ffc8:	f7fe f898 	bl	800e0fc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffd2:	d10a      	bne.n	800ffea <prvAddCurrentTaskToDelayedList+0x3a>
 800ffd4:	683b      	ldr	r3, [r7, #0]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d007      	beq.n	800ffea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ffda:	4b1a      	ldr	r3, [pc, #104]	@ (8010044 <prvAddCurrentTaskToDelayedList+0x94>)
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	3304      	adds	r3, #4
 800ffe0:	4619      	mov	r1, r3
 800ffe2:	4819      	ldr	r0, [pc, #100]	@ (8010048 <prvAddCurrentTaskToDelayedList+0x98>)
 800ffe4:	f7fe f82d 	bl	800e042 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ffe8:	e026      	b.n	8010038 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ffea:	68fa      	ldr	r2, [r7, #12]
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	4413      	add	r3, r2
 800fff0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800fff2:	4b14      	ldr	r3, [pc, #80]	@ (8010044 <prvAddCurrentTaskToDelayedList+0x94>)
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	68ba      	ldr	r2, [r7, #8]
 800fff8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800fffa:	68ba      	ldr	r2, [r7, #8]
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	429a      	cmp	r2, r3
 8010000:	d209      	bcs.n	8010016 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010002:	4b12      	ldr	r3, [pc, #72]	@ (801004c <prvAddCurrentTaskToDelayedList+0x9c>)
 8010004:	681a      	ldr	r2, [r3, #0]
 8010006:	4b0f      	ldr	r3, [pc, #60]	@ (8010044 <prvAddCurrentTaskToDelayedList+0x94>)
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	3304      	adds	r3, #4
 801000c:	4619      	mov	r1, r3
 801000e:	4610      	mov	r0, r2
 8010010:	f7fe f83b 	bl	800e08a <vListInsert>
}
 8010014:	e010      	b.n	8010038 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010016:	4b0e      	ldr	r3, [pc, #56]	@ (8010050 <prvAddCurrentTaskToDelayedList+0xa0>)
 8010018:	681a      	ldr	r2, [r3, #0]
 801001a:	4b0a      	ldr	r3, [pc, #40]	@ (8010044 <prvAddCurrentTaskToDelayedList+0x94>)
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	3304      	adds	r3, #4
 8010020:	4619      	mov	r1, r3
 8010022:	4610      	mov	r0, r2
 8010024:	f7fe f831 	bl	800e08a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010028:	4b0a      	ldr	r3, [pc, #40]	@ (8010054 <prvAddCurrentTaskToDelayedList+0xa4>)
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	68ba      	ldr	r2, [r7, #8]
 801002e:	429a      	cmp	r2, r3
 8010030:	d202      	bcs.n	8010038 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010032:	4a08      	ldr	r2, [pc, #32]	@ (8010054 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010034:	68bb      	ldr	r3, [r7, #8]
 8010036:	6013      	str	r3, [r2, #0]
}
 8010038:	bf00      	nop
 801003a:	3710      	adds	r7, #16
 801003c:	46bd      	mov	sp, r7
 801003e:	bd80      	pop	{r7, pc}
 8010040:	20002dc8 	.word	0x20002dc8
 8010044:	200028f0 	.word	0x200028f0
 8010048:	20002db0 	.word	0x20002db0
 801004c:	20002d80 	.word	0x20002d80
 8010050:	20002d7c 	.word	0x20002d7c
 8010054:	20002de4 	.word	0x20002de4

08010058 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010058:	b580      	push	{r7, lr}
 801005a:	b08a      	sub	sp, #40	@ 0x28
 801005c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801005e:	2300      	movs	r3, #0
 8010060:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010062:	f000 fb13 	bl	801068c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010066:	4b1d      	ldr	r3, [pc, #116]	@ (80100dc <xTimerCreateTimerTask+0x84>)
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	2b00      	cmp	r3, #0
 801006c:	d021      	beq.n	80100b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801006e:	2300      	movs	r3, #0
 8010070:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010072:	2300      	movs	r3, #0
 8010074:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010076:	1d3a      	adds	r2, r7, #4
 8010078:	f107 0108 	add.w	r1, r7, #8
 801007c:	f107 030c 	add.w	r3, r7, #12
 8010080:	4618      	mov	r0, r3
 8010082:	f7fd fddb 	bl	800dc3c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010086:	6879      	ldr	r1, [r7, #4]
 8010088:	68bb      	ldr	r3, [r7, #8]
 801008a:	68fa      	ldr	r2, [r7, #12]
 801008c:	9202      	str	r2, [sp, #8]
 801008e:	9301      	str	r3, [sp, #4]
 8010090:	2337      	movs	r3, #55	@ 0x37
 8010092:	9300      	str	r3, [sp, #0]
 8010094:	2300      	movs	r3, #0
 8010096:	460a      	mov	r2, r1
 8010098:	4911      	ldr	r1, [pc, #68]	@ (80100e0 <xTimerCreateTimerTask+0x88>)
 801009a:	4812      	ldr	r0, [pc, #72]	@ (80100e4 <xTimerCreateTimerTask+0x8c>)
 801009c:	f7fe fee8 	bl	800ee70 <xTaskCreateStatic>
 80100a0:	4603      	mov	r3, r0
 80100a2:	4a11      	ldr	r2, [pc, #68]	@ (80100e8 <xTimerCreateTimerTask+0x90>)
 80100a4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80100a6:	4b10      	ldr	r3, [pc, #64]	@ (80100e8 <xTimerCreateTimerTask+0x90>)
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d001      	beq.n	80100b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80100ae:	2301      	movs	r3, #1
 80100b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80100b2:	697b      	ldr	r3, [r7, #20]
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d10b      	bne.n	80100d0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80100b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100bc:	f383 8811 	msr	BASEPRI, r3
 80100c0:	f3bf 8f6f 	isb	sy
 80100c4:	f3bf 8f4f 	dsb	sy
 80100c8:	613b      	str	r3, [r7, #16]
}
 80100ca:	bf00      	nop
 80100cc:	bf00      	nop
 80100ce:	e7fd      	b.n	80100cc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80100d0:	697b      	ldr	r3, [r7, #20]
}
 80100d2:	4618      	mov	r0, r3
 80100d4:	3718      	adds	r7, #24
 80100d6:	46bd      	mov	sp, r7
 80100d8:	bd80      	pop	{r7, pc}
 80100da:	bf00      	nop
 80100dc:	20002e20 	.word	0x20002e20
 80100e0:	0801473c 	.word	0x0801473c
 80100e4:	08010225 	.word	0x08010225
 80100e8:	20002e24 	.word	0x20002e24

080100ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80100ec:	b580      	push	{r7, lr}
 80100ee:	b08a      	sub	sp, #40	@ 0x28
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	60f8      	str	r0, [r7, #12]
 80100f4:	60b9      	str	r1, [r7, #8]
 80100f6:	607a      	str	r2, [r7, #4]
 80100f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80100fa:	2300      	movs	r3, #0
 80100fc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	2b00      	cmp	r3, #0
 8010102:	d10b      	bne.n	801011c <xTimerGenericCommand+0x30>
	__asm volatile
 8010104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010108:	f383 8811 	msr	BASEPRI, r3
 801010c:	f3bf 8f6f 	isb	sy
 8010110:	f3bf 8f4f 	dsb	sy
 8010114:	623b      	str	r3, [r7, #32]
}
 8010116:	bf00      	nop
 8010118:	bf00      	nop
 801011a:	e7fd      	b.n	8010118 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801011c:	4b19      	ldr	r3, [pc, #100]	@ (8010184 <xTimerGenericCommand+0x98>)
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	2b00      	cmp	r3, #0
 8010122:	d02a      	beq.n	801017a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010124:	68bb      	ldr	r3, [r7, #8]
 8010126:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010130:	68bb      	ldr	r3, [r7, #8]
 8010132:	2b05      	cmp	r3, #5
 8010134:	dc18      	bgt.n	8010168 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010136:	f7ff fd95 	bl	800fc64 <xTaskGetSchedulerState>
 801013a:	4603      	mov	r3, r0
 801013c:	2b02      	cmp	r3, #2
 801013e:	d109      	bne.n	8010154 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010140:	4b10      	ldr	r3, [pc, #64]	@ (8010184 <xTimerGenericCommand+0x98>)
 8010142:	6818      	ldr	r0, [r3, #0]
 8010144:	f107 0110 	add.w	r1, r7, #16
 8010148:	2300      	movs	r3, #0
 801014a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801014c:	f7fe f978 	bl	800e440 <xQueueGenericSend>
 8010150:	6278      	str	r0, [r7, #36]	@ 0x24
 8010152:	e012      	b.n	801017a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010154:	4b0b      	ldr	r3, [pc, #44]	@ (8010184 <xTimerGenericCommand+0x98>)
 8010156:	6818      	ldr	r0, [r3, #0]
 8010158:	f107 0110 	add.w	r1, r7, #16
 801015c:	2300      	movs	r3, #0
 801015e:	2200      	movs	r2, #0
 8010160:	f7fe f96e 	bl	800e440 <xQueueGenericSend>
 8010164:	6278      	str	r0, [r7, #36]	@ 0x24
 8010166:	e008      	b.n	801017a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010168:	4b06      	ldr	r3, [pc, #24]	@ (8010184 <xTimerGenericCommand+0x98>)
 801016a:	6818      	ldr	r0, [r3, #0]
 801016c:	f107 0110 	add.w	r1, r7, #16
 8010170:	2300      	movs	r3, #0
 8010172:	683a      	ldr	r2, [r7, #0]
 8010174:	f7fe fa66 	bl	800e644 <xQueueGenericSendFromISR>
 8010178:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801017a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801017c:	4618      	mov	r0, r3
 801017e:	3728      	adds	r7, #40	@ 0x28
 8010180:	46bd      	mov	sp, r7
 8010182:	bd80      	pop	{r7, pc}
 8010184:	20002e20 	.word	0x20002e20

08010188 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010188:	b580      	push	{r7, lr}
 801018a:	b088      	sub	sp, #32
 801018c:	af02      	add	r7, sp, #8
 801018e:	6078      	str	r0, [r7, #4]
 8010190:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010192:	4b23      	ldr	r3, [pc, #140]	@ (8010220 <prvProcessExpiredTimer+0x98>)
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	68db      	ldr	r3, [r3, #12]
 8010198:	68db      	ldr	r3, [r3, #12]
 801019a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801019c:	697b      	ldr	r3, [r7, #20]
 801019e:	3304      	adds	r3, #4
 80101a0:	4618      	mov	r0, r3
 80101a2:	f7fd ffab 	bl	800e0fc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80101a6:	697b      	ldr	r3, [r7, #20]
 80101a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80101ac:	f003 0304 	and.w	r3, r3, #4
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d023      	beq.n	80101fc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80101b4:	697b      	ldr	r3, [r7, #20]
 80101b6:	699a      	ldr	r2, [r3, #24]
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	18d1      	adds	r1, r2, r3
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	683a      	ldr	r2, [r7, #0]
 80101c0:	6978      	ldr	r0, [r7, #20]
 80101c2:	f000 f8d5 	bl	8010370 <prvInsertTimerInActiveList>
 80101c6:	4603      	mov	r3, r0
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d020      	beq.n	801020e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80101cc:	2300      	movs	r3, #0
 80101ce:	9300      	str	r3, [sp, #0]
 80101d0:	2300      	movs	r3, #0
 80101d2:	687a      	ldr	r2, [r7, #4]
 80101d4:	2100      	movs	r1, #0
 80101d6:	6978      	ldr	r0, [r7, #20]
 80101d8:	f7ff ff88 	bl	80100ec <xTimerGenericCommand>
 80101dc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80101de:	693b      	ldr	r3, [r7, #16]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d114      	bne.n	801020e <prvProcessExpiredTimer+0x86>
	__asm volatile
 80101e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101e8:	f383 8811 	msr	BASEPRI, r3
 80101ec:	f3bf 8f6f 	isb	sy
 80101f0:	f3bf 8f4f 	dsb	sy
 80101f4:	60fb      	str	r3, [r7, #12]
}
 80101f6:	bf00      	nop
 80101f8:	bf00      	nop
 80101fa:	e7fd      	b.n	80101f8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80101fc:	697b      	ldr	r3, [r7, #20]
 80101fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010202:	f023 0301 	bic.w	r3, r3, #1
 8010206:	b2da      	uxtb	r2, r3
 8010208:	697b      	ldr	r3, [r7, #20]
 801020a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801020e:	697b      	ldr	r3, [r7, #20]
 8010210:	6a1b      	ldr	r3, [r3, #32]
 8010212:	6978      	ldr	r0, [r7, #20]
 8010214:	4798      	blx	r3
}
 8010216:	bf00      	nop
 8010218:	3718      	adds	r7, #24
 801021a:	46bd      	mov	sp, r7
 801021c:	bd80      	pop	{r7, pc}
 801021e:	bf00      	nop
 8010220:	20002e18 	.word	0x20002e18

08010224 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010224:	b580      	push	{r7, lr}
 8010226:	b084      	sub	sp, #16
 8010228:	af00      	add	r7, sp, #0
 801022a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801022c:	f107 0308 	add.w	r3, r7, #8
 8010230:	4618      	mov	r0, r3
 8010232:	f000 f859 	bl	80102e8 <prvGetNextExpireTime>
 8010236:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010238:	68bb      	ldr	r3, [r7, #8]
 801023a:	4619      	mov	r1, r3
 801023c:	68f8      	ldr	r0, [r7, #12]
 801023e:	f000 f805 	bl	801024c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010242:	f000 f8d7 	bl	80103f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010246:	bf00      	nop
 8010248:	e7f0      	b.n	801022c <prvTimerTask+0x8>
	...

0801024c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801024c:	b580      	push	{r7, lr}
 801024e:	b084      	sub	sp, #16
 8010250:	af00      	add	r7, sp, #0
 8010252:	6078      	str	r0, [r7, #4]
 8010254:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010256:	f7ff f86f 	bl	800f338 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801025a:	f107 0308 	add.w	r3, r7, #8
 801025e:	4618      	mov	r0, r3
 8010260:	f000 f866 	bl	8010330 <prvSampleTimeNow>
 8010264:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010266:	68bb      	ldr	r3, [r7, #8]
 8010268:	2b00      	cmp	r3, #0
 801026a:	d130      	bne.n	80102ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801026c:	683b      	ldr	r3, [r7, #0]
 801026e:	2b00      	cmp	r3, #0
 8010270:	d10a      	bne.n	8010288 <prvProcessTimerOrBlockTask+0x3c>
 8010272:	687a      	ldr	r2, [r7, #4]
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	429a      	cmp	r2, r3
 8010278:	d806      	bhi.n	8010288 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801027a:	f7ff f86b 	bl	800f354 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801027e:	68f9      	ldr	r1, [r7, #12]
 8010280:	6878      	ldr	r0, [r7, #4]
 8010282:	f7ff ff81 	bl	8010188 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010286:	e024      	b.n	80102d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010288:	683b      	ldr	r3, [r7, #0]
 801028a:	2b00      	cmp	r3, #0
 801028c:	d008      	beq.n	80102a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801028e:	4b13      	ldr	r3, [pc, #76]	@ (80102dc <prvProcessTimerOrBlockTask+0x90>)
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	2b00      	cmp	r3, #0
 8010296:	d101      	bne.n	801029c <prvProcessTimerOrBlockTask+0x50>
 8010298:	2301      	movs	r3, #1
 801029a:	e000      	b.n	801029e <prvProcessTimerOrBlockTask+0x52>
 801029c:	2300      	movs	r3, #0
 801029e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80102a0:	4b0f      	ldr	r3, [pc, #60]	@ (80102e0 <prvProcessTimerOrBlockTask+0x94>)
 80102a2:	6818      	ldr	r0, [r3, #0]
 80102a4:	687a      	ldr	r2, [r7, #4]
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	1ad3      	subs	r3, r2, r3
 80102aa:	683a      	ldr	r2, [r7, #0]
 80102ac:	4619      	mov	r1, r3
 80102ae:	f7fe fdab 	bl	800ee08 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80102b2:	f7ff f84f 	bl	800f354 <xTaskResumeAll>
 80102b6:	4603      	mov	r3, r0
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d10a      	bne.n	80102d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80102bc:	4b09      	ldr	r3, [pc, #36]	@ (80102e4 <prvProcessTimerOrBlockTask+0x98>)
 80102be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80102c2:	601a      	str	r2, [r3, #0]
 80102c4:	f3bf 8f4f 	dsb	sy
 80102c8:	f3bf 8f6f 	isb	sy
}
 80102cc:	e001      	b.n	80102d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80102ce:	f7ff f841 	bl	800f354 <xTaskResumeAll>
}
 80102d2:	bf00      	nop
 80102d4:	3710      	adds	r7, #16
 80102d6:	46bd      	mov	sp, r7
 80102d8:	bd80      	pop	{r7, pc}
 80102da:	bf00      	nop
 80102dc:	20002e1c 	.word	0x20002e1c
 80102e0:	20002e20 	.word	0x20002e20
 80102e4:	e000ed04 	.word	0xe000ed04

080102e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80102e8:	b480      	push	{r7}
 80102ea:	b085      	sub	sp, #20
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80102f0:	4b0e      	ldr	r3, [pc, #56]	@ (801032c <prvGetNextExpireTime+0x44>)
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d101      	bne.n	80102fe <prvGetNextExpireTime+0x16>
 80102fa:	2201      	movs	r2, #1
 80102fc:	e000      	b.n	8010300 <prvGetNextExpireTime+0x18>
 80102fe:	2200      	movs	r2, #0
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	2b00      	cmp	r3, #0
 801030a:	d105      	bne.n	8010318 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801030c:	4b07      	ldr	r3, [pc, #28]	@ (801032c <prvGetNextExpireTime+0x44>)
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	68db      	ldr	r3, [r3, #12]
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	60fb      	str	r3, [r7, #12]
 8010316:	e001      	b.n	801031c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010318:	2300      	movs	r3, #0
 801031a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801031c:	68fb      	ldr	r3, [r7, #12]
}
 801031e:	4618      	mov	r0, r3
 8010320:	3714      	adds	r7, #20
 8010322:	46bd      	mov	sp, r7
 8010324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010328:	4770      	bx	lr
 801032a:	bf00      	nop
 801032c:	20002e18 	.word	0x20002e18

08010330 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010330:	b580      	push	{r7, lr}
 8010332:	b084      	sub	sp, #16
 8010334:	af00      	add	r7, sp, #0
 8010336:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010338:	f7ff f8aa 	bl	800f490 <xTaskGetTickCount>
 801033c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801033e:	4b0b      	ldr	r3, [pc, #44]	@ (801036c <prvSampleTimeNow+0x3c>)
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	68fa      	ldr	r2, [r7, #12]
 8010344:	429a      	cmp	r2, r3
 8010346:	d205      	bcs.n	8010354 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010348:	f000 f93a 	bl	80105c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	2201      	movs	r2, #1
 8010350:	601a      	str	r2, [r3, #0]
 8010352:	e002      	b.n	801035a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	2200      	movs	r2, #0
 8010358:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801035a:	4a04      	ldr	r2, [pc, #16]	@ (801036c <prvSampleTimeNow+0x3c>)
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010360:	68fb      	ldr	r3, [r7, #12]
}
 8010362:	4618      	mov	r0, r3
 8010364:	3710      	adds	r7, #16
 8010366:	46bd      	mov	sp, r7
 8010368:	bd80      	pop	{r7, pc}
 801036a:	bf00      	nop
 801036c:	20002e28 	.word	0x20002e28

08010370 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010370:	b580      	push	{r7, lr}
 8010372:	b086      	sub	sp, #24
 8010374:	af00      	add	r7, sp, #0
 8010376:	60f8      	str	r0, [r7, #12]
 8010378:	60b9      	str	r1, [r7, #8]
 801037a:	607a      	str	r2, [r7, #4]
 801037c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801037e:	2300      	movs	r3, #0
 8010380:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	68ba      	ldr	r2, [r7, #8]
 8010386:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	68fa      	ldr	r2, [r7, #12]
 801038c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801038e:	68ba      	ldr	r2, [r7, #8]
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	429a      	cmp	r2, r3
 8010394:	d812      	bhi.n	80103bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010396:	687a      	ldr	r2, [r7, #4]
 8010398:	683b      	ldr	r3, [r7, #0]
 801039a:	1ad2      	subs	r2, r2, r3
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	699b      	ldr	r3, [r3, #24]
 80103a0:	429a      	cmp	r2, r3
 80103a2:	d302      	bcc.n	80103aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80103a4:	2301      	movs	r3, #1
 80103a6:	617b      	str	r3, [r7, #20]
 80103a8:	e01b      	b.n	80103e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80103aa:	4b10      	ldr	r3, [pc, #64]	@ (80103ec <prvInsertTimerInActiveList+0x7c>)
 80103ac:	681a      	ldr	r2, [r3, #0]
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	3304      	adds	r3, #4
 80103b2:	4619      	mov	r1, r3
 80103b4:	4610      	mov	r0, r2
 80103b6:	f7fd fe68 	bl	800e08a <vListInsert>
 80103ba:	e012      	b.n	80103e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80103bc:	687a      	ldr	r2, [r7, #4]
 80103be:	683b      	ldr	r3, [r7, #0]
 80103c0:	429a      	cmp	r2, r3
 80103c2:	d206      	bcs.n	80103d2 <prvInsertTimerInActiveList+0x62>
 80103c4:	68ba      	ldr	r2, [r7, #8]
 80103c6:	683b      	ldr	r3, [r7, #0]
 80103c8:	429a      	cmp	r2, r3
 80103ca:	d302      	bcc.n	80103d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80103cc:	2301      	movs	r3, #1
 80103ce:	617b      	str	r3, [r7, #20]
 80103d0:	e007      	b.n	80103e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80103d2:	4b07      	ldr	r3, [pc, #28]	@ (80103f0 <prvInsertTimerInActiveList+0x80>)
 80103d4:	681a      	ldr	r2, [r3, #0]
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	3304      	adds	r3, #4
 80103da:	4619      	mov	r1, r3
 80103dc:	4610      	mov	r0, r2
 80103de:	f7fd fe54 	bl	800e08a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80103e2:	697b      	ldr	r3, [r7, #20]
}
 80103e4:	4618      	mov	r0, r3
 80103e6:	3718      	adds	r7, #24
 80103e8:	46bd      	mov	sp, r7
 80103ea:	bd80      	pop	{r7, pc}
 80103ec:	20002e1c 	.word	0x20002e1c
 80103f0:	20002e18 	.word	0x20002e18

080103f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80103f4:	b580      	push	{r7, lr}
 80103f6:	b08e      	sub	sp, #56	@ 0x38
 80103f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80103fa:	e0ce      	b.n	801059a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	2b00      	cmp	r3, #0
 8010400:	da19      	bge.n	8010436 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010402:	1d3b      	adds	r3, r7, #4
 8010404:	3304      	adds	r3, #4
 8010406:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801040a:	2b00      	cmp	r3, #0
 801040c:	d10b      	bne.n	8010426 <prvProcessReceivedCommands+0x32>
	__asm volatile
 801040e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010412:	f383 8811 	msr	BASEPRI, r3
 8010416:	f3bf 8f6f 	isb	sy
 801041a:	f3bf 8f4f 	dsb	sy
 801041e:	61fb      	str	r3, [r7, #28]
}
 8010420:	bf00      	nop
 8010422:	bf00      	nop
 8010424:	e7fd      	b.n	8010422 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801042c:	6850      	ldr	r0, [r2, #4]
 801042e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010430:	6892      	ldr	r2, [r2, #8]
 8010432:	4611      	mov	r1, r2
 8010434:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	2b00      	cmp	r3, #0
 801043a:	f2c0 80ae 	blt.w	801059a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010444:	695b      	ldr	r3, [r3, #20]
 8010446:	2b00      	cmp	r3, #0
 8010448:	d004      	beq.n	8010454 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801044a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801044c:	3304      	adds	r3, #4
 801044e:	4618      	mov	r0, r3
 8010450:	f7fd fe54 	bl	800e0fc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010454:	463b      	mov	r3, r7
 8010456:	4618      	mov	r0, r3
 8010458:	f7ff ff6a 	bl	8010330 <prvSampleTimeNow>
 801045c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	2b09      	cmp	r3, #9
 8010462:	f200 8097 	bhi.w	8010594 <prvProcessReceivedCommands+0x1a0>
 8010466:	a201      	add	r2, pc, #4	@ (adr r2, 801046c <prvProcessReceivedCommands+0x78>)
 8010468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801046c:	08010495 	.word	0x08010495
 8010470:	08010495 	.word	0x08010495
 8010474:	08010495 	.word	0x08010495
 8010478:	0801050b 	.word	0x0801050b
 801047c:	0801051f 	.word	0x0801051f
 8010480:	0801056b 	.word	0x0801056b
 8010484:	08010495 	.word	0x08010495
 8010488:	08010495 	.word	0x08010495
 801048c:	0801050b 	.word	0x0801050b
 8010490:	0801051f 	.word	0x0801051f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010496:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801049a:	f043 0301 	orr.w	r3, r3, #1
 801049e:	b2da      	uxtb	r2, r3
 80104a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80104a6:	68ba      	ldr	r2, [r7, #8]
 80104a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104aa:	699b      	ldr	r3, [r3, #24]
 80104ac:	18d1      	adds	r1, r2, r3
 80104ae:	68bb      	ldr	r3, [r7, #8]
 80104b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80104b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80104b4:	f7ff ff5c 	bl	8010370 <prvInsertTimerInActiveList>
 80104b8:	4603      	mov	r3, r0
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d06c      	beq.n	8010598 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80104be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104c0:	6a1b      	ldr	r3, [r3, #32]
 80104c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80104c4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80104c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80104cc:	f003 0304 	and.w	r3, r3, #4
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d061      	beq.n	8010598 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80104d4:	68ba      	ldr	r2, [r7, #8]
 80104d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104d8:	699b      	ldr	r3, [r3, #24]
 80104da:	441a      	add	r2, r3
 80104dc:	2300      	movs	r3, #0
 80104de:	9300      	str	r3, [sp, #0]
 80104e0:	2300      	movs	r3, #0
 80104e2:	2100      	movs	r1, #0
 80104e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80104e6:	f7ff fe01 	bl	80100ec <xTimerGenericCommand>
 80104ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80104ec:	6a3b      	ldr	r3, [r7, #32]
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d152      	bne.n	8010598 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80104f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80104f6:	f383 8811 	msr	BASEPRI, r3
 80104fa:	f3bf 8f6f 	isb	sy
 80104fe:	f3bf 8f4f 	dsb	sy
 8010502:	61bb      	str	r3, [r7, #24]
}
 8010504:	bf00      	nop
 8010506:	bf00      	nop
 8010508:	e7fd      	b.n	8010506 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801050a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801050c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010510:	f023 0301 	bic.w	r3, r3, #1
 8010514:	b2da      	uxtb	r2, r3
 8010516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010518:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 801051c:	e03d      	b.n	801059a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801051e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010520:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010524:	f043 0301 	orr.w	r3, r3, #1
 8010528:	b2da      	uxtb	r2, r3
 801052a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801052c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010530:	68ba      	ldr	r2, [r7, #8]
 8010532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010534:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010538:	699b      	ldr	r3, [r3, #24]
 801053a:	2b00      	cmp	r3, #0
 801053c:	d10b      	bne.n	8010556 <prvProcessReceivedCommands+0x162>
	__asm volatile
 801053e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010542:	f383 8811 	msr	BASEPRI, r3
 8010546:	f3bf 8f6f 	isb	sy
 801054a:	f3bf 8f4f 	dsb	sy
 801054e:	617b      	str	r3, [r7, #20]
}
 8010550:	bf00      	nop
 8010552:	bf00      	nop
 8010554:	e7fd      	b.n	8010552 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010558:	699a      	ldr	r2, [r3, #24]
 801055a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801055c:	18d1      	adds	r1, r2, r3
 801055e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010560:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010562:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010564:	f7ff ff04 	bl	8010370 <prvInsertTimerInActiveList>
					break;
 8010568:	e017      	b.n	801059a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801056a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801056c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010570:	f003 0302 	and.w	r3, r3, #2
 8010574:	2b00      	cmp	r3, #0
 8010576:	d103      	bne.n	8010580 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8010578:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801057a:	f000 fc05 	bl	8010d88 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801057e:	e00c      	b.n	801059a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010582:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010586:	f023 0301 	bic.w	r3, r3, #1
 801058a:	b2da      	uxtb	r2, r3
 801058c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801058e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8010592:	e002      	b.n	801059a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8010594:	bf00      	nop
 8010596:	e000      	b.n	801059a <prvProcessReceivedCommands+0x1a6>
					break;
 8010598:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801059a:	4b08      	ldr	r3, [pc, #32]	@ (80105bc <prvProcessReceivedCommands+0x1c8>)
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	1d39      	adds	r1, r7, #4
 80105a0:	2200      	movs	r2, #0
 80105a2:	4618      	mov	r0, r3
 80105a4:	f7fe f8ec 	bl	800e780 <xQueueReceive>
 80105a8:	4603      	mov	r3, r0
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	f47f af26 	bne.w	80103fc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80105b0:	bf00      	nop
 80105b2:	bf00      	nop
 80105b4:	3730      	adds	r7, #48	@ 0x30
 80105b6:	46bd      	mov	sp, r7
 80105b8:	bd80      	pop	{r7, pc}
 80105ba:	bf00      	nop
 80105bc:	20002e20 	.word	0x20002e20

080105c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80105c0:	b580      	push	{r7, lr}
 80105c2:	b088      	sub	sp, #32
 80105c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80105c6:	e049      	b.n	801065c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80105c8:	4b2e      	ldr	r3, [pc, #184]	@ (8010684 <prvSwitchTimerLists+0xc4>)
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	68db      	ldr	r3, [r3, #12]
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80105d2:	4b2c      	ldr	r3, [pc, #176]	@ (8010684 <prvSwitchTimerLists+0xc4>)
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	68db      	ldr	r3, [r3, #12]
 80105d8:	68db      	ldr	r3, [r3, #12]
 80105da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	3304      	adds	r3, #4
 80105e0:	4618      	mov	r0, r3
 80105e2:	f7fd fd8b 	bl	800e0fc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	6a1b      	ldr	r3, [r3, #32]
 80105ea:	68f8      	ldr	r0, [r7, #12]
 80105ec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80105f4:	f003 0304 	and.w	r3, r3, #4
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d02f      	beq.n	801065c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	699b      	ldr	r3, [r3, #24]
 8010600:	693a      	ldr	r2, [r7, #16]
 8010602:	4413      	add	r3, r2
 8010604:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010606:	68ba      	ldr	r2, [r7, #8]
 8010608:	693b      	ldr	r3, [r7, #16]
 801060a:	429a      	cmp	r2, r3
 801060c:	d90e      	bls.n	801062c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	68ba      	ldr	r2, [r7, #8]
 8010612:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	68fa      	ldr	r2, [r7, #12]
 8010618:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801061a:	4b1a      	ldr	r3, [pc, #104]	@ (8010684 <prvSwitchTimerLists+0xc4>)
 801061c:	681a      	ldr	r2, [r3, #0]
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	3304      	adds	r3, #4
 8010622:	4619      	mov	r1, r3
 8010624:	4610      	mov	r0, r2
 8010626:	f7fd fd30 	bl	800e08a <vListInsert>
 801062a:	e017      	b.n	801065c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801062c:	2300      	movs	r3, #0
 801062e:	9300      	str	r3, [sp, #0]
 8010630:	2300      	movs	r3, #0
 8010632:	693a      	ldr	r2, [r7, #16]
 8010634:	2100      	movs	r1, #0
 8010636:	68f8      	ldr	r0, [r7, #12]
 8010638:	f7ff fd58 	bl	80100ec <xTimerGenericCommand>
 801063c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	2b00      	cmp	r3, #0
 8010642:	d10b      	bne.n	801065c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8010644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010648:	f383 8811 	msr	BASEPRI, r3
 801064c:	f3bf 8f6f 	isb	sy
 8010650:	f3bf 8f4f 	dsb	sy
 8010654:	603b      	str	r3, [r7, #0]
}
 8010656:	bf00      	nop
 8010658:	bf00      	nop
 801065a:	e7fd      	b.n	8010658 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801065c:	4b09      	ldr	r3, [pc, #36]	@ (8010684 <prvSwitchTimerLists+0xc4>)
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	2b00      	cmp	r3, #0
 8010664:	d1b0      	bne.n	80105c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010666:	4b07      	ldr	r3, [pc, #28]	@ (8010684 <prvSwitchTimerLists+0xc4>)
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801066c:	4b06      	ldr	r3, [pc, #24]	@ (8010688 <prvSwitchTimerLists+0xc8>)
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	4a04      	ldr	r2, [pc, #16]	@ (8010684 <prvSwitchTimerLists+0xc4>)
 8010672:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010674:	4a04      	ldr	r2, [pc, #16]	@ (8010688 <prvSwitchTimerLists+0xc8>)
 8010676:	697b      	ldr	r3, [r7, #20]
 8010678:	6013      	str	r3, [r2, #0]
}
 801067a:	bf00      	nop
 801067c:	3718      	adds	r7, #24
 801067e:	46bd      	mov	sp, r7
 8010680:	bd80      	pop	{r7, pc}
 8010682:	bf00      	nop
 8010684:	20002e18 	.word	0x20002e18
 8010688:	20002e1c 	.word	0x20002e1c

0801068c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801068c:	b580      	push	{r7, lr}
 801068e:	b082      	sub	sp, #8
 8010690:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010692:	f000 f989 	bl	80109a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010696:	4b15      	ldr	r3, [pc, #84]	@ (80106ec <prvCheckForValidListAndQueue+0x60>)
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	2b00      	cmp	r3, #0
 801069c:	d120      	bne.n	80106e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801069e:	4814      	ldr	r0, [pc, #80]	@ (80106f0 <prvCheckForValidListAndQueue+0x64>)
 80106a0:	f7fd fca2 	bl	800dfe8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80106a4:	4813      	ldr	r0, [pc, #76]	@ (80106f4 <prvCheckForValidListAndQueue+0x68>)
 80106a6:	f7fd fc9f 	bl	800dfe8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80106aa:	4b13      	ldr	r3, [pc, #76]	@ (80106f8 <prvCheckForValidListAndQueue+0x6c>)
 80106ac:	4a10      	ldr	r2, [pc, #64]	@ (80106f0 <prvCheckForValidListAndQueue+0x64>)
 80106ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80106b0:	4b12      	ldr	r3, [pc, #72]	@ (80106fc <prvCheckForValidListAndQueue+0x70>)
 80106b2:	4a10      	ldr	r2, [pc, #64]	@ (80106f4 <prvCheckForValidListAndQueue+0x68>)
 80106b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80106b6:	2300      	movs	r3, #0
 80106b8:	9300      	str	r3, [sp, #0]
 80106ba:	4b11      	ldr	r3, [pc, #68]	@ (8010700 <prvCheckForValidListAndQueue+0x74>)
 80106bc:	4a11      	ldr	r2, [pc, #68]	@ (8010704 <prvCheckForValidListAndQueue+0x78>)
 80106be:	2110      	movs	r1, #16
 80106c0:	200a      	movs	r0, #10
 80106c2:	f7fd fdaf 	bl	800e224 <xQueueGenericCreateStatic>
 80106c6:	4603      	mov	r3, r0
 80106c8:	4a08      	ldr	r2, [pc, #32]	@ (80106ec <prvCheckForValidListAndQueue+0x60>)
 80106ca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80106cc:	4b07      	ldr	r3, [pc, #28]	@ (80106ec <prvCheckForValidListAndQueue+0x60>)
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d005      	beq.n	80106e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80106d4:	4b05      	ldr	r3, [pc, #20]	@ (80106ec <prvCheckForValidListAndQueue+0x60>)
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	490b      	ldr	r1, [pc, #44]	@ (8010708 <prvCheckForValidListAndQueue+0x7c>)
 80106da:	4618      	mov	r0, r3
 80106dc:	f7fe fb6a 	bl	800edb4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80106e0:	f000 f994 	bl	8010a0c <vPortExitCritical>
}
 80106e4:	bf00      	nop
 80106e6:	46bd      	mov	sp, r7
 80106e8:	bd80      	pop	{r7, pc}
 80106ea:	bf00      	nop
 80106ec:	20002e20 	.word	0x20002e20
 80106f0:	20002df0 	.word	0x20002df0
 80106f4:	20002e04 	.word	0x20002e04
 80106f8:	20002e18 	.word	0x20002e18
 80106fc:	20002e1c 	.word	0x20002e1c
 8010700:	20002ecc 	.word	0x20002ecc
 8010704:	20002e2c 	.word	0x20002e2c
 8010708:	08014744 	.word	0x08014744

0801070c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801070c:	b580      	push	{r7, lr}
 801070e:	b08a      	sub	sp, #40	@ 0x28
 8010710:	af00      	add	r7, sp, #0
 8010712:	60f8      	str	r0, [r7, #12]
 8010714:	60b9      	str	r1, [r7, #8]
 8010716:	607a      	str	r2, [r7, #4]
 8010718:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 801071a:	f06f 0301 	mvn.w	r3, #1
 801071e:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8010724:	68bb      	ldr	r3, [r7, #8]
 8010726:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801072c:	4b06      	ldr	r3, [pc, #24]	@ (8010748 <xTimerPendFunctionCallFromISR+0x3c>)
 801072e:	6818      	ldr	r0, [r3, #0]
 8010730:	f107 0114 	add.w	r1, r7, #20
 8010734:	2300      	movs	r3, #0
 8010736:	683a      	ldr	r2, [r7, #0]
 8010738:	f7fd ff84 	bl	800e644 <xQueueGenericSendFromISR>
 801073c:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 801073e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8010740:	4618      	mov	r0, r3
 8010742:	3728      	adds	r7, #40	@ 0x28
 8010744:	46bd      	mov	sp, r7
 8010746:	bd80      	pop	{r7, pc}
 8010748:	20002e20 	.word	0x20002e20

0801074c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801074c:	b480      	push	{r7}
 801074e:	b085      	sub	sp, #20
 8010750:	af00      	add	r7, sp, #0
 8010752:	60f8      	str	r0, [r7, #12]
 8010754:	60b9      	str	r1, [r7, #8]
 8010756:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	3b04      	subs	r3, #4
 801075c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8010764:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	3b04      	subs	r3, #4
 801076a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801076c:	68bb      	ldr	r3, [r7, #8]
 801076e:	f023 0201 	bic.w	r2, r3, #1
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	3b04      	subs	r3, #4
 801077a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801077c:	4a0c      	ldr	r2, [pc, #48]	@ (80107b0 <pxPortInitialiseStack+0x64>)
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	3b14      	subs	r3, #20
 8010786:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010788:	687a      	ldr	r2, [r7, #4]
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	3b04      	subs	r3, #4
 8010792:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	f06f 0202 	mvn.w	r2, #2
 801079a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	3b20      	subs	r3, #32
 80107a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80107a2:	68fb      	ldr	r3, [r7, #12]
}
 80107a4:	4618      	mov	r0, r3
 80107a6:	3714      	adds	r7, #20
 80107a8:	46bd      	mov	sp, r7
 80107aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ae:	4770      	bx	lr
 80107b0:	080107b5 	.word	0x080107b5

080107b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80107b4:	b480      	push	{r7}
 80107b6:	b085      	sub	sp, #20
 80107b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80107ba:	2300      	movs	r3, #0
 80107bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80107be:	4b13      	ldr	r3, [pc, #76]	@ (801080c <prvTaskExitError+0x58>)
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107c6:	d00b      	beq.n	80107e0 <prvTaskExitError+0x2c>
	__asm volatile
 80107c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107cc:	f383 8811 	msr	BASEPRI, r3
 80107d0:	f3bf 8f6f 	isb	sy
 80107d4:	f3bf 8f4f 	dsb	sy
 80107d8:	60fb      	str	r3, [r7, #12]
}
 80107da:	bf00      	nop
 80107dc:	bf00      	nop
 80107de:	e7fd      	b.n	80107dc <prvTaskExitError+0x28>
	__asm volatile
 80107e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107e4:	f383 8811 	msr	BASEPRI, r3
 80107e8:	f3bf 8f6f 	isb	sy
 80107ec:	f3bf 8f4f 	dsb	sy
 80107f0:	60bb      	str	r3, [r7, #8]
}
 80107f2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80107f4:	bf00      	nop
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d0fc      	beq.n	80107f6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80107fc:	bf00      	nop
 80107fe:	bf00      	nop
 8010800:	3714      	adds	r7, #20
 8010802:	46bd      	mov	sp, r7
 8010804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010808:	4770      	bx	lr
 801080a:	bf00      	nop
 801080c:	200002a4 	.word	0x200002a4

08010810 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010810:	4b07      	ldr	r3, [pc, #28]	@ (8010830 <pxCurrentTCBConst2>)
 8010812:	6819      	ldr	r1, [r3, #0]
 8010814:	6808      	ldr	r0, [r1, #0]
 8010816:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801081a:	f380 8809 	msr	PSP, r0
 801081e:	f3bf 8f6f 	isb	sy
 8010822:	f04f 0000 	mov.w	r0, #0
 8010826:	f380 8811 	msr	BASEPRI, r0
 801082a:	4770      	bx	lr
 801082c:	f3af 8000 	nop.w

08010830 <pxCurrentTCBConst2>:
 8010830:	200028f0 	.word	0x200028f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010834:	bf00      	nop
 8010836:	bf00      	nop

08010838 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010838:	4808      	ldr	r0, [pc, #32]	@ (801085c <prvPortStartFirstTask+0x24>)
 801083a:	6800      	ldr	r0, [r0, #0]
 801083c:	6800      	ldr	r0, [r0, #0]
 801083e:	f380 8808 	msr	MSP, r0
 8010842:	f04f 0000 	mov.w	r0, #0
 8010846:	f380 8814 	msr	CONTROL, r0
 801084a:	b662      	cpsie	i
 801084c:	b661      	cpsie	f
 801084e:	f3bf 8f4f 	dsb	sy
 8010852:	f3bf 8f6f 	isb	sy
 8010856:	df00      	svc	0
 8010858:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801085a:	bf00      	nop
 801085c:	e000ed08 	.word	0xe000ed08

08010860 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010860:	b580      	push	{r7, lr}
 8010862:	b086      	sub	sp, #24
 8010864:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010866:	4b47      	ldr	r3, [pc, #284]	@ (8010984 <xPortStartScheduler+0x124>)
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	4a47      	ldr	r2, [pc, #284]	@ (8010988 <xPortStartScheduler+0x128>)
 801086c:	4293      	cmp	r3, r2
 801086e:	d10b      	bne.n	8010888 <xPortStartScheduler+0x28>
	__asm volatile
 8010870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010874:	f383 8811 	msr	BASEPRI, r3
 8010878:	f3bf 8f6f 	isb	sy
 801087c:	f3bf 8f4f 	dsb	sy
 8010880:	613b      	str	r3, [r7, #16]
}
 8010882:	bf00      	nop
 8010884:	bf00      	nop
 8010886:	e7fd      	b.n	8010884 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010888:	4b3e      	ldr	r3, [pc, #248]	@ (8010984 <xPortStartScheduler+0x124>)
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	4a3f      	ldr	r2, [pc, #252]	@ (801098c <xPortStartScheduler+0x12c>)
 801088e:	4293      	cmp	r3, r2
 8010890:	d10b      	bne.n	80108aa <xPortStartScheduler+0x4a>
	__asm volatile
 8010892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010896:	f383 8811 	msr	BASEPRI, r3
 801089a:	f3bf 8f6f 	isb	sy
 801089e:	f3bf 8f4f 	dsb	sy
 80108a2:	60fb      	str	r3, [r7, #12]
}
 80108a4:	bf00      	nop
 80108a6:	bf00      	nop
 80108a8:	e7fd      	b.n	80108a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80108aa:	4b39      	ldr	r3, [pc, #228]	@ (8010990 <xPortStartScheduler+0x130>)
 80108ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80108ae:	697b      	ldr	r3, [r7, #20]
 80108b0:	781b      	ldrb	r3, [r3, #0]
 80108b2:	b2db      	uxtb	r3, r3
 80108b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80108b6:	697b      	ldr	r3, [r7, #20]
 80108b8:	22ff      	movs	r2, #255	@ 0xff
 80108ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80108bc:	697b      	ldr	r3, [r7, #20]
 80108be:	781b      	ldrb	r3, [r3, #0]
 80108c0:	b2db      	uxtb	r3, r3
 80108c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80108c4:	78fb      	ldrb	r3, [r7, #3]
 80108c6:	b2db      	uxtb	r3, r3
 80108c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80108cc:	b2da      	uxtb	r2, r3
 80108ce:	4b31      	ldr	r3, [pc, #196]	@ (8010994 <xPortStartScheduler+0x134>)
 80108d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80108d2:	4b31      	ldr	r3, [pc, #196]	@ (8010998 <xPortStartScheduler+0x138>)
 80108d4:	2207      	movs	r2, #7
 80108d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80108d8:	e009      	b.n	80108ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80108da:	4b2f      	ldr	r3, [pc, #188]	@ (8010998 <xPortStartScheduler+0x138>)
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	3b01      	subs	r3, #1
 80108e0:	4a2d      	ldr	r2, [pc, #180]	@ (8010998 <xPortStartScheduler+0x138>)
 80108e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80108e4:	78fb      	ldrb	r3, [r7, #3]
 80108e6:	b2db      	uxtb	r3, r3
 80108e8:	005b      	lsls	r3, r3, #1
 80108ea:	b2db      	uxtb	r3, r3
 80108ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80108ee:	78fb      	ldrb	r3, [r7, #3]
 80108f0:	b2db      	uxtb	r3, r3
 80108f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80108f6:	2b80      	cmp	r3, #128	@ 0x80
 80108f8:	d0ef      	beq.n	80108da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80108fa:	4b27      	ldr	r3, [pc, #156]	@ (8010998 <xPortStartScheduler+0x138>)
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	f1c3 0307 	rsb	r3, r3, #7
 8010902:	2b04      	cmp	r3, #4
 8010904:	d00b      	beq.n	801091e <xPortStartScheduler+0xbe>
	__asm volatile
 8010906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801090a:	f383 8811 	msr	BASEPRI, r3
 801090e:	f3bf 8f6f 	isb	sy
 8010912:	f3bf 8f4f 	dsb	sy
 8010916:	60bb      	str	r3, [r7, #8]
}
 8010918:	bf00      	nop
 801091a:	bf00      	nop
 801091c:	e7fd      	b.n	801091a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801091e:	4b1e      	ldr	r3, [pc, #120]	@ (8010998 <xPortStartScheduler+0x138>)
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	021b      	lsls	r3, r3, #8
 8010924:	4a1c      	ldr	r2, [pc, #112]	@ (8010998 <xPortStartScheduler+0x138>)
 8010926:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010928:	4b1b      	ldr	r3, [pc, #108]	@ (8010998 <xPortStartScheduler+0x138>)
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8010930:	4a19      	ldr	r2, [pc, #100]	@ (8010998 <xPortStartScheduler+0x138>)
 8010932:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	b2da      	uxtb	r2, r3
 8010938:	697b      	ldr	r3, [r7, #20]
 801093a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801093c:	4b17      	ldr	r3, [pc, #92]	@ (801099c <xPortStartScheduler+0x13c>)
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	4a16      	ldr	r2, [pc, #88]	@ (801099c <xPortStartScheduler+0x13c>)
 8010942:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8010946:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010948:	4b14      	ldr	r3, [pc, #80]	@ (801099c <xPortStartScheduler+0x13c>)
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	4a13      	ldr	r2, [pc, #76]	@ (801099c <xPortStartScheduler+0x13c>)
 801094e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8010952:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010954:	f000 f8da 	bl	8010b0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010958:	4b11      	ldr	r3, [pc, #68]	@ (80109a0 <xPortStartScheduler+0x140>)
 801095a:	2200      	movs	r2, #0
 801095c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801095e:	f000 f8f9 	bl	8010b54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010962:	4b10      	ldr	r3, [pc, #64]	@ (80109a4 <xPortStartScheduler+0x144>)
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	4a0f      	ldr	r2, [pc, #60]	@ (80109a4 <xPortStartScheduler+0x144>)
 8010968:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801096c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801096e:	f7ff ff63 	bl	8010838 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010972:	f7fe fe57 	bl	800f624 <vTaskSwitchContext>
	prvTaskExitError();
 8010976:	f7ff ff1d 	bl	80107b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801097a:	2300      	movs	r3, #0
}
 801097c:	4618      	mov	r0, r3
 801097e:	3718      	adds	r7, #24
 8010980:	46bd      	mov	sp, r7
 8010982:	bd80      	pop	{r7, pc}
 8010984:	e000ed00 	.word	0xe000ed00
 8010988:	410fc271 	.word	0x410fc271
 801098c:	410fc270 	.word	0x410fc270
 8010990:	e000e400 	.word	0xe000e400
 8010994:	20002f1c 	.word	0x20002f1c
 8010998:	20002f20 	.word	0x20002f20
 801099c:	e000ed20 	.word	0xe000ed20
 80109a0:	200002a4 	.word	0x200002a4
 80109a4:	e000ef34 	.word	0xe000ef34

080109a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80109a8:	b480      	push	{r7}
 80109aa:	b083      	sub	sp, #12
 80109ac:	af00      	add	r7, sp, #0
	__asm volatile
 80109ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109b2:	f383 8811 	msr	BASEPRI, r3
 80109b6:	f3bf 8f6f 	isb	sy
 80109ba:	f3bf 8f4f 	dsb	sy
 80109be:	607b      	str	r3, [r7, #4]
}
 80109c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80109c2:	4b10      	ldr	r3, [pc, #64]	@ (8010a04 <vPortEnterCritical+0x5c>)
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	3301      	adds	r3, #1
 80109c8:	4a0e      	ldr	r2, [pc, #56]	@ (8010a04 <vPortEnterCritical+0x5c>)
 80109ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80109cc:	4b0d      	ldr	r3, [pc, #52]	@ (8010a04 <vPortEnterCritical+0x5c>)
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	2b01      	cmp	r3, #1
 80109d2:	d110      	bne.n	80109f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80109d4:	4b0c      	ldr	r3, [pc, #48]	@ (8010a08 <vPortEnterCritical+0x60>)
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	b2db      	uxtb	r3, r3
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d00b      	beq.n	80109f6 <vPortEnterCritical+0x4e>
	__asm volatile
 80109de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109e2:	f383 8811 	msr	BASEPRI, r3
 80109e6:	f3bf 8f6f 	isb	sy
 80109ea:	f3bf 8f4f 	dsb	sy
 80109ee:	603b      	str	r3, [r7, #0]
}
 80109f0:	bf00      	nop
 80109f2:	bf00      	nop
 80109f4:	e7fd      	b.n	80109f2 <vPortEnterCritical+0x4a>
	}
}
 80109f6:	bf00      	nop
 80109f8:	370c      	adds	r7, #12
 80109fa:	46bd      	mov	sp, r7
 80109fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a00:	4770      	bx	lr
 8010a02:	bf00      	nop
 8010a04:	200002a4 	.word	0x200002a4
 8010a08:	e000ed04 	.word	0xe000ed04

08010a0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010a0c:	b480      	push	{r7}
 8010a0e:	b083      	sub	sp, #12
 8010a10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010a12:	4b12      	ldr	r3, [pc, #72]	@ (8010a5c <vPortExitCritical+0x50>)
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d10b      	bne.n	8010a32 <vPortExitCritical+0x26>
	__asm volatile
 8010a1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a1e:	f383 8811 	msr	BASEPRI, r3
 8010a22:	f3bf 8f6f 	isb	sy
 8010a26:	f3bf 8f4f 	dsb	sy
 8010a2a:	607b      	str	r3, [r7, #4]
}
 8010a2c:	bf00      	nop
 8010a2e:	bf00      	nop
 8010a30:	e7fd      	b.n	8010a2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010a32:	4b0a      	ldr	r3, [pc, #40]	@ (8010a5c <vPortExitCritical+0x50>)
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	3b01      	subs	r3, #1
 8010a38:	4a08      	ldr	r2, [pc, #32]	@ (8010a5c <vPortExitCritical+0x50>)
 8010a3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010a3c:	4b07      	ldr	r3, [pc, #28]	@ (8010a5c <vPortExitCritical+0x50>)
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d105      	bne.n	8010a50 <vPortExitCritical+0x44>
 8010a44:	2300      	movs	r3, #0
 8010a46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010a48:	683b      	ldr	r3, [r7, #0]
 8010a4a:	f383 8811 	msr	BASEPRI, r3
}
 8010a4e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010a50:	bf00      	nop
 8010a52:	370c      	adds	r7, #12
 8010a54:	46bd      	mov	sp, r7
 8010a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a5a:	4770      	bx	lr
 8010a5c:	200002a4 	.word	0x200002a4

08010a60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010a60:	f3ef 8009 	mrs	r0, PSP
 8010a64:	f3bf 8f6f 	isb	sy
 8010a68:	4b15      	ldr	r3, [pc, #84]	@ (8010ac0 <pxCurrentTCBConst>)
 8010a6a:	681a      	ldr	r2, [r3, #0]
 8010a6c:	f01e 0f10 	tst.w	lr, #16
 8010a70:	bf08      	it	eq
 8010a72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010a76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a7a:	6010      	str	r0, [r2, #0]
 8010a7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010a80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8010a84:	f380 8811 	msr	BASEPRI, r0
 8010a88:	f3bf 8f4f 	dsb	sy
 8010a8c:	f3bf 8f6f 	isb	sy
 8010a90:	f7fe fdc8 	bl	800f624 <vTaskSwitchContext>
 8010a94:	f04f 0000 	mov.w	r0, #0
 8010a98:	f380 8811 	msr	BASEPRI, r0
 8010a9c:	bc09      	pop	{r0, r3}
 8010a9e:	6819      	ldr	r1, [r3, #0]
 8010aa0:	6808      	ldr	r0, [r1, #0]
 8010aa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010aa6:	f01e 0f10 	tst.w	lr, #16
 8010aaa:	bf08      	it	eq
 8010aac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010ab0:	f380 8809 	msr	PSP, r0
 8010ab4:	f3bf 8f6f 	isb	sy
 8010ab8:	4770      	bx	lr
 8010aba:	bf00      	nop
 8010abc:	f3af 8000 	nop.w

08010ac0 <pxCurrentTCBConst>:
 8010ac0:	200028f0 	.word	0x200028f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010ac4:	bf00      	nop
 8010ac6:	bf00      	nop

08010ac8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010ac8:	b580      	push	{r7, lr}
 8010aca:	b082      	sub	sp, #8
 8010acc:	af00      	add	r7, sp, #0
	__asm volatile
 8010ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ad2:	f383 8811 	msr	BASEPRI, r3
 8010ad6:	f3bf 8f6f 	isb	sy
 8010ada:	f3bf 8f4f 	dsb	sy
 8010ade:	607b      	str	r3, [r7, #4]
}
 8010ae0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010ae2:	f7fe fce5 	bl	800f4b0 <xTaskIncrementTick>
 8010ae6:	4603      	mov	r3, r0
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d003      	beq.n	8010af4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010aec:	4b06      	ldr	r3, [pc, #24]	@ (8010b08 <xPortSysTickHandler+0x40>)
 8010aee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010af2:	601a      	str	r2, [r3, #0]
 8010af4:	2300      	movs	r3, #0
 8010af6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010af8:	683b      	ldr	r3, [r7, #0]
 8010afa:	f383 8811 	msr	BASEPRI, r3
}
 8010afe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010b00:	bf00      	nop
 8010b02:	3708      	adds	r7, #8
 8010b04:	46bd      	mov	sp, r7
 8010b06:	bd80      	pop	{r7, pc}
 8010b08:	e000ed04 	.word	0xe000ed04

08010b0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010b0c:	b480      	push	{r7}
 8010b0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010b10:	4b0b      	ldr	r3, [pc, #44]	@ (8010b40 <vPortSetupTimerInterrupt+0x34>)
 8010b12:	2200      	movs	r2, #0
 8010b14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010b16:	4b0b      	ldr	r3, [pc, #44]	@ (8010b44 <vPortSetupTimerInterrupt+0x38>)
 8010b18:	2200      	movs	r2, #0
 8010b1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8010b48 <vPortSetupTimerInterrupt+0x3c>)
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	4a0a      	ldr	r2, [pc, #40]	@ (8010b4c <vPortSetupTimerInterrupt+0x40>)
 8010b22:	fba2 2303 	umull	r2, r3, r2, r3
 8010b26:	099b      	lsrs	r3, r3, #6
 8010b28:	4a09      	ldr	r2, [pc, #36]	@ (8010b50 <vPortSetupTimerInterrupt+0x44>)
 8010b2a:	3b01      	subs	r3, #1
 8010b2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010b2e:	4b04      	ldr	r3, [pc, #16]	@ (8010b40 <vPortSetupTimerInterrupt+0x34>)
 8010b30:	2207      	movs	r2, #7
 8010b32:	601a      	str	r2, [r3, #0]
}
 8010b34:	bf00      	nop
 8010b36:	46bd      	mov	sp, r7
 8010b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b3c:	4770      	bx	lr
 8010b3e:	bf00      	nop
 8010b40:	e000e010 	.word	0xe000e010
 8010b44:	e000e018 	.word	0xe000e018
 8010b48:	20000298 	.word	0x20000298
 8010b4c:	10624dd3 	.word	0x10624dd3
 8010b50:	e000e014 	.word	0xe000e014

08010b54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010b54:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8010b64 <vPortEnableVFP+0x10>
 8010b58:	6801      	ldr	r1, [r0, #0]
 8010b5a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8010b5e:	6001      	str	r1, [r0, #0]
 8010b60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010b62:	bf00      	nop
 8010b64:	e000ed88 	.word	0xe000ed88

08010b68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010b68:	b480      	push	{r7}
 8010b6a:	b085      	sub	sp, #20
 8010b6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010b6e:	f3ef 8305 	mrs	r3, IPSR
 8010b72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	2b0f      	cmp	r3, #15
 8010b78:	d915      	bls.n	8010ba6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010b7a:	4a18      	ldr	r2, [pc, #96]	@ (8010bdc <vPortValidateInterruptPriority+0x74>)
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	4413      	add	r3, r2
 8010b80:	781b      	ldrb	r3, [r3, #0]
 8010b82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010b84:	4b16      	ldr	r3, [pc, #88]	@ (8010be0 <vPortValidateInterruptPriority+0x78>)
 8010b86:	781b      	ldrb	r3, [r3, #0]
 8010b88:	7afa      	ldrb	r2, [r7, #11]
 8010b8a:	429a      	cmp	r2, r3
 8010b8c:	d20b      	bcs.n	8010ba6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8010b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b92:	f383 8811 	msr	BASEPRI, r3
 8010b96:	f3bf 8f6f 	isb	sy
 8010b9a:	f3bf 8f4f 	dsb	sy
 8010b9e:	607b      	str	r3, [r7, #4]
}
 8010ba0:	bf00      	nop
 8010ba2:	bf00      	nop
 8010ba4:	e7fd      	b.n	8010ba2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010ba6:	4b0f      	ldr	r3, [pc, #60]	@ (8010be4 <vPortValidateInterruptPriority+0x7c>)
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8010bae:	4b0e      	ldr	r3, [pc, #56]	@ (8010be8 <vPortValidateInterruptPriority+0x80>)
 8010bb0:	681b      	ldr	r3, [r3, #0]
 8010bb2:	429a      	cmp	r2, r3
 8010bb4:	d90b      	bls.n	8010bce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8010bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010bba:	f383 8811 	msr	BASEPRI, r3
 8010bbe:	f3bf 8f6f 	isb	sy
 8010bc2:	f3bf 8f4f 	dsb	sy
 8010bc6:	603b      	str	r3, [r7, #0]
}
 8010bc8:	bf00      	nop
 8010bca:	bf00      	nop
 8010bcc:	e7fd      	b.n	8010bca <vPortValidateInterruptPriority+0x62>
	}
 8010bce:	bf00      	nop
 8010bd0:	3714      	adds	r7, #20
 8010bd2:	46bd      	mov	sp, r7
 8010bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd8:	4770      	bx	lr
 8010bda:	bf00      	nop
 8010bdc:	e000e3f0 	.word	0xe000e3f0
 8010be0:	20002f1c 	.word	0x20002f1c
 8010be4:	e000ed0c 	.word	0xe000ed0c
 8010be8:	20002f20 	.word	0x20002f20

08010bec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010bec:	b580      	push	{r7, lr}
 8010bee:	b08a      	sub	sp, #40	@ 0x28
 8010bf0:	af00      	add	r7, sp, #0
 8010bf2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010bf4:	2300      	movs	r3, #0
 8010bf6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010bf8:	f7fe fb9e 	bl	800f338 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010bfc:	4b5c      	ldr	r3, [pc, #368]	@ (8010d70 <pvPortMalloc+0x184>)
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d101      	bne.n	8010c08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010c04:	f000 f924 	bl	8010e50 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010c08:	4b5a      	ldr	r3, [pc, #360]	@ (8010d74 <pvPortMalloc+0x188>)
 8010c0a:	681a      	ldr	r2, [r3, #0]
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	4013      	ands	r3, r2
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	f040 8095 	bne.w	8010d40 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d01e      	beq.n	8010c5a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8010c1c:	2208      	movs	r2, #8
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	4413      	add	r3, r2
 8010c22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	f003 0307 	and.w	r3, r3, #7
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d015      	beq.n	8010c5a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	f023 0307 	bic.w	r3, r3, #7
 8010c34:	3308      	adds	r3, #8
 8010c36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	f003 0307 	and.w	r3, r3, #7
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d00b      	beq.n	8010c5a <pvPortMalloc+0x6e>
	__asm volatile
 8010c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c46:	f383 8811 	msr	BASEPRI, r3
 8010c4a:	f3bf 8f6f 	isb	sy
 8010c4e:	f3bf 8f4f 	dsb	sy
 8010c52:	617b      	str	r3, [r7, #20]
}
 8010c54:	bf00      	nop
 8010c56:	bf00      	nop
 8010c58:	e7fd      	b.n	8010c56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d06f      	beq.n	8010d40 <pvPortMalloc+0x154>
 8010c60:	4b45      	ldr	r3, [pc, #276]	@ (8010d78 <pvPortMalloc+0x18c>)
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	687a      	ldr	r2, [r7, #4]
 8010c66:	429a      	cmp	r2, r3
 8010c68:	d86a      	bhi.n	8010d40 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010c6a:	4b44      	ldr	r3, [pc, #272]	@ (8010d7c <pvPortMalloc+0x190>)
 8010c6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010c6e:	4b43      	ldr	r3, [pc, #268]	@ (8010d7c <pvPortMalloc+0x190>)
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010c74:	e004      	b.n	8010c80 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8010c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c82:	685b      	ldr	r3, [r3, #4]
 8010c84:	687a      	ldr	r2, [r7, #4]
 8010c86:	429a      	cmp	r2, r3
 8010c88:	d903      	bls.n	8010c92 <pvPortMalloc+0xa6>
 8010c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d1f1      	bne.n	8010c76 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010c92:	4b37      	ldr	r3, [pc, #220]	@ (8010d70 <pvPortMalloc+0x184>)
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010c98:	429a      	cmp	r2, r3
 8010c9a:	d051      	beq.n	8010d40 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010c9c:	6a3b      	ldr	r3, [r7, #32]
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	2208      	movs	r2, #8
 8010ca2:	4413      	add	r3, r2
 8010ca4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ca8:	681a      	ldr	r2, [r3, #0]
 8010caa:	6a3b      	ldr	r3, [r7, #32]
 8010cac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cb0:	685a      	ldr	r2, [r3, #4]
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	1ad2      	subs	r2, r2, r3
 8010cb6:	2308      	movs	r3, #8
 8010cb8:	005b      	lsls	r3, r3, #1
 8010cba:	429a      	cmp	r2, r3
 8010cbc:	d920      	bls.n	8010d00 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010cbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	4413      	add	r3, r2
 8010cc4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010cc6:	69bb      	ldr	r3, [r7, #24]
 8010cc8:	f003 0307 	and.w	r3, r3, #7
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d00b      	beq.n	8010ce8 <pvPortMalloc+0xfc>
	__asm volatile
 8010cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010cd4:	f383 8811 	msr	BASEPRI, r3
 8010cd8:	f3bf 8f6f 	isb	sy
 8010cdc:	f3bf 8f4f 	dsb	sy
 8010ce0:	613b      	str	r3, [r7, #16]
}
 8010ce2:	bf00      	nop
 8010ce4:	bf00      	nop
 8010ce6:	e7fd      	b.n	8010ce4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cea:	685a      	ldr	r2, [r3, #4]
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	1ad2      	subs	r2, r2, r3
 8010cf0:	69bb      	ldr	r3, [r7, #24]
 8010cf2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cf6:	687a      	ldr	r2, [r7, #4]
 8010cf8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010cfa:	69b8      	ldr	r0, [r7, #24]
 8010cfc:	f000 f90a 	bl	8010f14 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010d00:	4b1d      	ldr	r3, [pc, #116]	@ (8010d78 <pvPortMalloc+0x18c>)
 8010d02:	681a      	ldr	r2, [r3, #0]
 8010d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d06:	685b      	ldr	r3, [r3, #4]
 8010d08:	1ad3      	subs	r3, r2, r3
 8010d0a:	4a1b      	ldr	r2, [pc, #108]	@ (8010d78 <pvPortMalloc+0x18c>)
 8010d0c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010d0e:	4b1a      	ldr	r3, [pc, #104]	@ (8010d78 <pvPortMalloc+0x18c>)
 8010d10:	681a      	ldr	r2, [r3, #0]
 8010d12:	4b1b      	ldr	r3, [pc, #108]	@ (8010d80 <pvPortMalloc+0x194>)
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	429a      	cmp	r2, r3
 8010d18:	d203      	bcs.n	8010d22 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010d1a:	4b17      	ldr	r3, [pc, #92]	@ (8010d78 <pvPortMalloc+0x18c>)
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	4a18      	ldr	r2, [pc, #96]	@ (8010d80 <pvPortMalloc+0x194>)
 8010d20:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d24:	685a      	ldr	r2, [r3, #4]
 8010d26:	4b13      	ldr	r3, [pc, #76]	@ (8010d74 <pvPortMalloc+0x188>)
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	431a      	orrs	r2, r3
 8010d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d2e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d32:	2200      	movs	r2, #0
 8010d34:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010d36:	4b13      	ldr	r3, [pc, #76]	@ (8010d84 <pvPortMalloc+0x198>)
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	3301      	adds	r3, #1
 8010d3c:	4a11      	ldr	r2, [pc, #68]	@ (8010d84 <pvPortMalloc+0x198>)
 8010d3e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010d40:	f7fe fb08 	bl	800f354 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010d44:	69fb      	ldr	r3, [r7, #28]
 8010d46:	f003 0307 	and.w	r3, r3, #7
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d00b      	beq.n	8010d66 <pvPortMalloc+0x17a>
	__asm volatile
 8010d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d52:	f383 8811 	msr	BASEPRI, r3
 8010d56:	f3bf 8f6f 	isb	sy
 8010d5a:	f3bf 8f4f 	dsb	sy
 8010d5e:	60fb      	str	r3, [r7, #12]
}
 8010d60:	bf00      	nop
 8010d62:	bf00      	nop
 8010d64:	e7fd      	b.n	8010d62 <pvPortMalloc+0x176>
	return pvReturn;
 8010d66:	69fb      	ldr	r3, [r7, #28]
}
 8010d68:	4618      	mov	r0, r3
 8010d6a:	3728      	adds	r7, #40	@ 0x28
 8010d6c:	46bd      	mov	sp, r7
 8010d6e:	bd80      	pop	{r7, pc}
 8010d70:	2000cb6c 	.word	0x2000cb6c
 8010d74:	2000cb80 	.word	0x2000cb80
 8010d78:	2000cb70 	.word	0x2000cb70
 8010d7c:	2000cb64 	.word	0x2000cb64
 8010d80:	2000cb74 	.word	0x2000cb74
 8010d84:	2000cb78 	.word	0x2000cb78

08010d88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010d88:	b580      	push	{r7, lr}
 8010d8a:	b086      	sub	sp, #24
 8010d8c:	af00      	add	r7, sp, #0
 8010d8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d04f      	beq.n	8010e3a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010d9a:	2308      	movs	r3, #8
 8010d9c:	425b      	negs	r3, r3
 8010d9e:	697a      	ldr	r2, [r7, #20]
 8010da0:	4413      	add	r3, r2
 8010da2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010da4:	697b      	ldr	r3, [r7, #20]
 8010da6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010da8:	693b      	ldr	r3, [r7, #16]
 8010daa:	685a      	ldr	r2, [r3, #4]
 8010dac:	4b25      	ldr	r3, [pc, #148]	@ (8010e44 <vPortFree+0xbc>)
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	4013      	ands	r3, r2
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d10b      	bne.n	8010dce <vPortFree+0x46>
	__asm volatile
 8010db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010dba:	f383 8811 	msr	BASEPRI, r3
 8010dbe:	f3bf 8f6f 	isb	sy
 8010dc2:	f3bf 8f4f 	dsb	sy
 8010dc6:	60fb      	str	r3, [r7, #12]
}
 8010dc8:	bf00      	nop
 8010dca:	bf00      	nop
 8010dcc:	e7fd      	b.n	8010dca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010dce:	693b      	ldr	r3, [r7, #16]
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d00b      	beq.n	8010dee <vPortFree+0x66>
	__asm volatile
 8010dd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010dda:	f383 8811 	msr	BASEPRI, r3
 8010dde:	f3bf 8f6f 	isb	sy
 8010de2:	f3bf 8f4f 	dsb	sy
 8010de6:	60bb      	str	r3, [r7, #8]
}
 8010de8:	bf00      	nop
 8010dea:	bf00      	nop
 8010dec:	e7fd      	b.n	8010dea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010dee:	693b      	ldr	r3, [r7, #16]
 8010df0:	685a      	ldr	r2, [r3, #4]
 8010df2:	4b14      	ldr	r3, [pc, #80]	@ (8010e44 <vPortFree+0xbc>)
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	4013      	ands	r3, r2
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d01e      	beq.n	8010e3a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010dfc:	693b      	ldr	r3, [r7, #16]
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d11a      	bne.n	8010e3a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010e04:	693b      	ldr	r3, [r7, #16]
 8010e06:	685a      	ldr	r2, [r3, #4]
 8010e08:	4b0e      	ldr	r3, [pc, #56]	@ (8010e44 <vPortFree+0xbc>)
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	43db      	mvns	r3, r3
 8010e0e:	401a      	ands	r2, r3
 8010e10:	693b      	ldr	r3, [r7, #16]
 8010e12:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010e14:	f7fe fa90 	bl	800f338 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010e18:	693b      	ldr	r3, [r7, #16]
 8010e1a:	685a      	ldr	r2, [r3, #4]
 8010e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8010e48 <vPortFree+0xc0>)
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	4413      	add	r3, r2
 8010e22:	4a09      	ldr	r2, [pc, #36]	@ (8010e48 <vPortFree+0xc0>)
 8010e24:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010e26:	6938      	ldr	r0, [r7, #16]
 8010e28:	f000 f874 	bl	8010f14 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010e2c:	4b07      	ldr	r3, [pc, #28]	@ (8010e4c <vPortFree+0xc4>)
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	3301      	adds	r3, #1
 8010e32:	4a06      	ldr	r2, [pc, #24]	@ (8010e4c <vPortFree+0xc4>)
 8010e34:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010e36:	f7fe fa8d 	bl	800f354 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010e3a:	bf00      	nop
 8010e3c:	3718      	adds	r7, #24
 8010e3e:	46bd      	mov	sp, r7
 8010e40:	bd80      	pop	{r7, pc}
 8010e42:	bf00      	nop
 8010e44:	2000cb80 	.word	0x2000cb80
 8010e48:	2000cb70 	.word	0x2000cb70
 8010e4c:	2000cb7c 	.word	0x2000cb7c

08010e50 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010e50:	b480      	push	{r7}
 8010e52:	b085      	sub	sp, #20
 8010e54:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010e56:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8010e5a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010e5c:	4b27      	ldr	r3, [pc, #156]	@ (8010efc <prvHeapInit+0xac>)
 8010e5e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010e60:	68fb      	ldr	r3, [r7, #12]
 8010e62:	f003 0307 	and.w	r3, r3, #7
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d00c      	beq.n	8010e84 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	3307      	adds	r3, #7
 8010e6e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	f023 0307 	bic.w	r3, r3, #7
 8010e76:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010e78:	68ba      	ldr	r2, [r7, #8]
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	1ad3      	subs	r3, r2, r3
 8010e7e:	4a1f      	ldr	r2, [pc, #124]	@ (8010efc <prvHeapInit+0xac>)
 8010e80:	4413      	add	r3, r2
 8010e82:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010e88:	4a1d      	ldr	r2, [pc, #116]	@ (8010f00 <prvHeapInit+0xb0>)
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010e8e:	4b1c      	ldr	r3, [pc, #112]	@ (8010f00 <prvHeapInit+0xb0>)
 8010e90:	2200      	movs	r2, #0
 8010e92:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	68ba      	ldr	r2, [r7, #8]
 8010e98:	4413      	add	r3, r2
 8010e9a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010e9c:	2208      	movs	r2, #8
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	1a9b      	subs	r3, r3, r2
 8010ea2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	f023 0307 	bic.w	r3, r3, #7
 8010eaa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	4a15      	ldr	r2, [pc, #84]	@ (8010f04 <prvHeapInit+0xb4>)
 8010eb0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010eb2:	4b14      	ldr	r3, [pc, #80]	@ (8010f04 <prvHeapInit+0xb4>)
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	2200      	movs	r2, #0
 8010eb8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010eba:	4b12      	ldr	r3, [pc, #72]	@ (8010f04 <prvHeapInit+0xb4>)
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	2200      	movs	r2, #0
 8010ec0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010ec6:	683b      	ldr	r3, [r7, #0]
 8010ec8:	68fa      	ldr	r2, [r7, #12]
 8010eca:	1ad2      	subs	r2, r2, r3
 8010ecc:	683b      	ldr	r3, [r7, #0]
 8010ece:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8010f04 <prvHeapInit+0xb4>)
 8010ed2:	681a      	ldr	r2, [r3, #0]
 8010ed4:	683b      	ldr	r3, [r7, #0]
 8010ed6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010ed8:	683b      	ldr	r3, [r7, #0]
 8010eda:	685b      	ldr	r3, [r3, #4]
 8010edc:	4a0a      	ldr	r2, [pc, #40]	@ (8010f08 <prvHeapInit+0xb8>)
 8010ede:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010ee0:	683b      	ldr	r3, [r7, #0]
 8010ee2:	685b      	ldr	r3, [r3, #4]
 8010ee4:	4a09      	ldr	r2, [pc, #36]	@ (8010f0c <prvHeapInit+0xbc>)
 8010ee6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010ee8:	4b09      	ldr	r3, [pc, #36]	@ (8010f10 <prvHeapInit+0xc0>)
 8010eea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8010eee:	601a      	str	r2, [r3, #0]
}
 8010ef0:	bf00      	nop
 8010ef2:	3714      	adds	r7, #20
 8010ef4:	46bd      	mov	sp, r7
 8010ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010efa:	4770      	bx	lr
 8010efc:	20002f24 	.word	0x20002f24
 8010f00:	2000cb64 	.word	0x2000cb64
 8010f04:	2000cb6c 	.word	0x2000cb6c
 8010f08:	2000cb74 	.word	0x2000cb74
 8010f0c:	2000cb70 	.word	0x2000cb70
 8010f10:	2000cb80 	.word	0x2000cb80

08010f14 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010f14:	b480      	push	{r7}
 8010f16:	b085      	sub	sp, #20
 8010f18:	af00      	add	r7, sp, #0
 8010f1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010f1c:	4b28      	ldr	r3, [pc, #160]	@ (8010fc0 <prvInsertBlockIntoFreeList+0xac>)
 8010f1e:	60fb      	str	r3, [r7, #12]
 8010f20:	e002      	b.n	8010f28 <prvInsertBlockIntoFreeList+0x14>
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	60fb      	str	r3, [r7, #12]
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	687a      	ldr	r2, [r7, #4]
 8010f2e:	429a      	cmp	r2, r3
 8010f30:	d8f7      	bhi.n	8010f22 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	685b      	ldr	r3, [r3, #4]
 8010f3a:	68ba      	ldr	r2, [r7, #8]
 8010f3c:	4413      	add	r3, r2
 8010f3e:	687a      	ldr	r2, [r7, #4]
 8010f40:	429a      	cmp	r2, r3
 8010f42:	d108      	bne.n	8010f56 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010f44:	68fb      	ldr	r3, [r7, #12]
 8010f46:	685a      	ldr	r2, [r3, #4]
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	685b      	ldr	r3, [r3, #4]
 8010f4c:	441a      	add	r2, r3
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	685b      	ldr	r3, [r3, #4]
 8010f5e:	68ba      	ldr	r2, [r7, #8]
 8010f60:	441a      	add	r2, r3
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	429a      	cmp	r2, r3
 8010f68:	d118      	bne.n	8010f9c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010f6a:	68fb      	ldr	r3, [r7, #12]
 8010f6c:	681a      	ldr	r2, [r3, #0]
 8010f6e:	4b15      	ldr	r3, [pc, #84]	@ (8010fc4 <prvInsertBlockIntoFreeList+0xb0>)
 8010f70:	681b      	ldr	r3, [r3, #0]
 8010f72:	429a      	cmp	r2, r3
 8010f74:	d00d      	beq.n	8010f92 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	685a      	ldr	r2, [r3, #4]
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	685b      	ldr	r3, [r3, #4]
 8010f80:	441a      	add	r2, r3
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	681a      	ldr	r2, [r3, #0]
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	601a      	str	r2, [r3, #0]
 8010f90:	e008      	b.n	8010fa4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010f92:	4b0c      	ldr	r3, [pc, #48]	@ (8010fc4 <prvInsertBlockIntoFreeList+0xb0>)
 8010f94:	681a      	ldr	r2, [r3, #0]
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	601a      	str	r2, [r3, #0]
 8010f9a:	e003      	b.n	8010fa4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	681a      	ldr	r2, [r3, #0]
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010fa4:	68fa      	ldr	r2, [r7, #12]
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	429a      	cmp	r2, r3
 8010faa:	d002      	beq.n	8010fb2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	687a      	ldr	r2, [r7, #4]
 8010fb0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010fb2:	bf00      	nop
 8010fb4:	3714      	adds	r7, #20
 8010fb6:	46bd      	mov	sp, r7
 8010fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fbc:	4770      	bx	lr
 8010fbe:	bf00      	nop
 8010fc0:	2000cb64 	.word	0x2000cb64
 8010fc4:	2000cb6c 	.word	0x2000cb6c

08010fc8 <atoi>:
 8010fc8:	220a      	movs	r2, #10
 8010fca:	2100      	movs	r1, #0
 8010fcc:	f000 b87a 	b.w	80110c4 <strtol>

08010fd0 <_strtol_l.constprop.0>:
 8010fd0:	2b24      	cmp	r3, #36	@ 0x24
 8010fd2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010fd6:	4686      	mov	lr, r0
 8010fd8:	4690      	mov	r8, r2
 8010fda:	d801      	bhi.n	8010fe0 <_strtol_l.constprop.0+0x10>
 8010fdc:	2b01      	cmp	r3, #1
 8010fde:	d106      	bne.n	8010fee <_strtol_l.constprop.0+0x1e>
 8010fe0:	f000 fed6 	bl	8011d90 <__errno>
 8010fe4:	2316      	movs	r3, #22
 8010fe6:	6003      	str	r3, [r0, #0]
 8010fe8:	2000      	movs	r0, #0
 8010fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010fee:	4834      	ldr	r0, [pc, #208]	@ (80110c0 <_strtol_l.constprop.0+0xf0>)
 8010ff0:	460d      	mov	r5, r1
 8010ff2:	462a      	mov	r2, r5
 8010ff4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010ff8:	5d06      	ldrb	r6, [r0, r4]
 8010ffa:	f016 0608 	ands.w	r6, r6, #8
 8010ffe:	d1f8      	bne.n	8010ff2 <_strtol_l.constprop.0+0x22>
 8011000:	2c2d      	cmp	r4, #45	@ 0x2d
 8011002:	d12d      	bne.n	8011060 <_strtol_l.constprop.0+0x90>
 8011004:	782c      	ldrb	r4, [r5, #0]
 8011006:	2601      	movs	r6, #1
 8011008:	1c95      	adds	r5, r2, #2
 801100a:	f033 0210 	bics.w	r2, r3, #16
 801100e:	d109      	bne.n	8011024 <_strtol_l.constprop.0+0x54>
 8011010:	2c30      	cmp	r4, #48	@ 0x30
 8011012:	d12a      	bne.n	801106a <_strtol_l.constprop.0+0x9a>
 8011014:	782a      	ldrb	r2, [r5, #0]
 8011016:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801101a:	2a58      	cmp	r2, #88	@ 0x58
 801101c:	d125      	bne.n	801106a <_strtol_l.constprop.0+0x9a>
 801101e:	786c      	ldrb	r4, [r5, #1]
 8011020:	2310      	movs	r3, #16
 8011022:	3502      	adds	r5, #2
 8011024:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8011028:	f10c 3cff 	add.w	ip, ip, #4294967295
 801102c:	2200      	movs	r2, #0
 801102e:	fbbc f9f3 	udiv	r9, ip, r3
 8011032:	4610      	mov	r0, r2
 8011034:	fb03 ca19 	mls	sl, r3, r9, ip
 8011038:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801103c:	2f09      	cmp	r7, #9
 801103e:	d81b      	bhi.n	8011078 <_strtol_l.constprop.0+0xa8>
 8011040:	463c      	mov	r4, r7
 8011042:	42a3      	cmp	r3, r4
 8011044:	dd27      	ble.n	8011096 <_strtol_l.constprop.0+0xc6>
 8011046:	1c57      	adds	r7, r2, #1
 8011048:	d007      	beq.n	801105a <_strtol_l.constprop.0+0x8a>
 801104a:	4581      	cmp	r9, r0
 801104c:	d320      	bcc.n	8011090 <_strtol_l.constprop.0+0xc0>
 801104e:	d101      	bne.n	8011054 <_strtol_l.constprop.0+0x84>
 8011050:	45a2      	cmp	sl, r4
 8011052:	db1d      	blt.n	8011090 <_strtol_l.constprop.0+0xc0>
 8011054:	fb00 4003 	mla	r0, r0, r3, r4
 8011058:	2201      	movs	r2, #1
 801105a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801105e:	e7eb      	b.n	8011038 <_strtol_l.constprop.0+0x68>
 8011060:	2c2b      	cmp	r4, #43	@ 0x2b
 8011062:	bf04      	itt	eq
 8011064:	782c      	ldrbeq	r4, [r5, #0]
 8011066:	1c95      	addeq	r5, r2, #2
 8011068:	e7cf      	b.n	801100a <_strtol_l.constprop.0+0x3a>
 801106a:	2b00      	cmp	r3, #0
 801106c:	d1da      	bne.n	8011024 <_strtol_l.constprop.0+0x54>
 801106e:	2c30      	cmp	r4, #48	@ 0x30
 8011070:	bf0c      	ite	eq
 8011072:	2308      	moveq	r3, #8
 8011074:	230a      	movne	r3, #10
 8011076:	e7d5      	b.n	8011024 <_strtol_l.constprop.0+0x54>
 8011078:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801107c:	2f19      	cmp	r7, #25
 801107e:	d801      	bhi.n	8011084 <_strtol_l.constprop.0+0xb4>
 8011080:	3c37      	subs	r4, #55	@ 0x37
 8011082:	e7de      	b.n	8011042 <_strtol_l.constprop.0+0x72>
 8011084:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8011088:	2f19      	cmp	r7, #25
 801108a:	d804      	bhi.n	8011096 <_strtol_l.constprop.0+0xc6>
 801108c:	3c57      	subs	r4, #87	@ 0x57
 801108e:	e7d8      	b.n	8011042 <_strtol_l.constprop.0+0x72>
 8011090:	f04f 32ff 	mov.w	r2, #4294967295
 8011094:	e7e1      	b.n	801105a <_strtol_l.constprop.0+0x8a>
 8011096:	1c53      	adds	r3, r2, #1
 8011098:	d108      	bne.n	80110ac <_strtol_l.constprop.0+0xdc>
 801109a:	2322      	movs	r3, #34	@ 0x22
 801109c:	f8ce 3000 	str.w	r3, [lr]
 80110a0:	4660      	mov	r0, ip
 80110a2:	f1b8 0f00 	cmp.w	r8, #0
 80110a6:	d0a0      	beq.n	8010fea <_strtol_l.constprop.0+0x1a>
 80110a8:	1e69      	subs	r1, r5, #1
 80110aa:	e006      	b.n	80110ba <_strtol_l.constprop.0+0xea>
 80110ac:	b106      	cbz	r6, 80110b0 <_strtol_l.constprop.0+0xe0>
 80110ae:	4240      	negs	r0, r0
 80110b0:	f1b8 0f00 	cmp.w	r8, #0
 80110b4:	d099      	beq.n	8010fea <_strtol_l.constprop.0+0x1a>
 80110b6:	2a00      	cmp	r2, #0
 80110b8:	d1f6      	bne.n	80110a8 <_strtol_l.constprop.0+0xd8>
 80110ba:	f8c8 1000 	str.w	r1, [r8]
 80110be:	e794      	b.n	8010fea <_strtol_l.constprop.0+0x1a>
 80110c0:	08014fd5 	.word	0x08014fd5

080110c4 <strtol>:
 80110c4:	4613      	mov	r3, r2
 80110c6:	460a      	mov	r2, r1
 80110c8:	4601      	mov	r1, r0
 80110ca:	4802      	ldr	r0, [pc, #8]	@ (80110d4 <strtol+0x10>)
 80110cc:	6800      	ldr	r0, [r0, #0]
 80110ce:	f7ff bf7f 	b.w	8010fd0 <_strtol_l.constprop.0>
 80110d2:	bf00      	nop
 80110d4:	200002b4 	.word	0x200002b4

080110d8 <__cvt>:
 80110d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80110dc:	ec57 6b10 	vmov	r6, r7, d0
 80110e0:	2f00      	cmp	r7, #0
 80110e2:	460c      	mov	r4, r1
 80110e4:	4619      	mov	r1, r3
 80110e6:	463b      	mov	r3, r7
 80110e8:	bfbb      	ittet	lt
 80110ea:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80110ee:	461f      	movlt	r7, r3
 80110f0:	2300      	movge	r3, #0
 80110f2:	232d      	movlt	r3, #45	@ 0x2d
 80110f4:	700b      	strb	r3, [r1, #0]
 80110f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80110f8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80110fc:	4691      	mov	r9, r2
 80110fe:	f023 0820 	bic.w	r8, r3, #32
 8011102:	bfbc      	itt	lt
 8011104:	4632      	movlt	r2, r6
 8011106:	4616      	movlt	r6, r2
 8011108:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801110c:	d005      	beq.n	801111a <__cvt+0x42>
 801110e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8011112:	d100      	bne.n	8011116 <__cvt+0x3e>
 8011114:	3401      	adds	r4, #1
 8011116:	2102      	movs	r1, #2
 8011118:	e000      	b.n	801111c <__cvt+0x44>
 801111a:	2103      	movs	r1, #3
 801111c:	ab03      	add	r3, sp, #12
 801111e:	9301      	str	r3, [sp, #4]
 8011120:	ab02      	add	r3, sp, #8
 8011122:	9300      	str	r3, [sp, #0]
 8011124:	ec47 6b10 	vmov	d0, r6, r7
 8011128:	4653      	mov	r3, sl
 801112a:	4622      	mov	r2, r4
 801112c:	f000 ff1c 	bl	8011f68 <_dtoa_r>
 8011130:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8011134:	4605      	mov	r5, r0
 8011136:	d119      	bne.n	801116c <__cvt+0x94>
 8011138:	f019 0f01 	tst.w	r9, #1
 801113c:	d00e      	beq.n	801115c <__cvt+0x84>
 801113e:	eb00 0904 	add.w	r9, r0, r4
 8011142:	2200      	movs	r2, #0
 8011144:	2300      	movs	r3, #0
 8011146:	4630      	mov	r0, r6
 8011148:	4639      	mov	r1, r7
 801114a:	f7ef fcbd 	bl	8000ac8 <__aeabi_dcmpeq>
 801114e:	b108      	cbz	r0, 8011154 <__cvt+0x7c>
 8011150:	f8cd 900c 	str.w	r9, [sp, #12]
 8011154:	2230      	movs	r2, #48	@ 0x30
 8011156:	9b03      	ldr	r3, [sp, #12]
 8011158:	454b      	cmp	r3, r9
 801115a:	d31e      	bcc.n	801119a <__cvt+0xc2>
 801115c:	9b03      	ldr	r3, [sp, #12]
 801115e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011160:	1b5b      	subs	r3, r3, r5
 8011162:	4628      	mov	r0, r5
 8011164:	6013      	str	r3, [r2, #0]
 8011166:	b004      	add	sp, #16
 8011168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801116c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8011170:	eb00 0904 	add.w	r9, r0, r4
 8011174:	d1e5      	bne.n	8011142 <__cvt+0x6a>
 8011176:	7803      	ldrb	r3, [r0, #0]
 8011178:	2b30      	cmp	r3, #48	@ 0x30
 801117a:	d10a      	bne.n	8011192 <__cvt+0xba>
 801117c:	2200      	movs	r2, #0
 801117e:	2300      	movs	r3, #0
 8011180:	4630      	mov	r0, r6
 8011182:	4639      	mov	r1, r7
 8011184:	f7ef fca0 	bl	8000ac8 <__aeabi_dcmpeq>
 8011188:	b918      	cbnz	r0, 8011192 <__cvt+0xba>
 801118a:	f1c4 0401 	rsb	r4, r4, #1
 801118e:	f8ca 4000 	str.w	r4, [sl]
 8011192:	f8da 3000 	ldr.w	r3, [sl]
 8011196:	4499      	add	r9, r3
 8011198:	e7d3      	b.n	8011142 <__cvt+0x6a>
 801119a:	1c59      	adds	r1, r3, #1
 801119c:	9103      	str	r1, [sp, #12]
 801119e:	701a      	strb	r2, [r3, #0]
 80111a0:	e7d9      	b.n	8011156 <__cvt+0x7e>

080111a2 <__exponent>:
 80111a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80111a4:	2900      	cmp	r1, #0
 80111a6:	bfba      	itte	lt
 80111a8:	4249      	neglt	r1, r1
 80111aa:	232d      	movlt	r3, #45	@ 0x2d
 80111ac:	232b      	movge	r3, #43	@ 0x2b
 80111ae:	2909      	cmp	r1, #9
 80111b0:	7002      	strb	r2, [r0, #0]
 80111b2:	7043      	strb	r3, [r0, #1]
 80111b4:	dd29      	ble.n	801120a <__exponent+0x68>
 80111b6:	f10d 0307 	add.w	r3, sp, #7
 80111ba:	461d      	mov	r5, r3
 80111bc:	270a      	movs	r7, #10
 80111be:	461a      	mov	r2, r3
 80111c0:	fbb1 f6f7 	udiv	r6, r1, r7
 80111c4:	fb07 1416 	mls	r4, r7, r6, r1
 80111c8:	3430      	adds	r4, #48	@ 0x30
 80111ca:	f802 4c01 	strb.w	r4, [r2, #-1]
 80111ce:	460c      	mov	r4, r1
 80111d0:	2c63      	cmp	r4, #99	@ 0x63
 80111d2:	f103 33ff 	add.w	r3, r3, #4294967295
 80111d6:	4631      	mov	r1, r6
 80111d8:	dcf1      	bgt.n	80111be <__exponent+0x1c>
 80111da:	3130      	adds	r1, #48	@ 0x30
 80111dc:	1e94      	subs	r4, r2, #2
 80111de:	f803 1c01 	strb.w	r1, [r3, #-1]
 80111e2:	1c41      	adds	r1, r0, #1
 80111e4:	4623      	mov	r3, r4
 80111e6:	42ab      	cmp	r3, r5
 80111e8:	d30a      	bcc.n	8011200 <__exponent+0x5e>
 80111ea:	f10d 0309 	add.w	r3, sp, #9
 80111ee:	1a9b      	subs	r3, r3, r2
 80111f0:	42ac      	cmp	r4, r5
 80111f2:	bf88      	it	hi
 80111f4:	2300      	movhi	r3, #0
 80111f6:	3302      	adds	r3, #2
 80111f8:	4403      	add	r3, r0
 80111fa:	1a18      	subs	r0, r3, r0
 80111fc:	b003      	add	sp, #12
 80111fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011200:	f813 6b01 	ldrb.w	r6, [r3], #1
 8011204:	f801 6f01 	strb.w	r6, [r1, #1]!
 8011208:	e7ed      	b.n	80111e6 <__exponent+0x44>
 801120a:	2330      	movs	r3, #48	@ 0x30
 801120c:	3130      	adds	r1, #48	@ 0x30
 801120e:	7083      	strb	r3, [r0, #2]
 8011210:	70c1      	strb	r1, [r0, #3]
 8011212:	1d03      	adds	r3, r0, #4
 8011214:	e7f1      	b.n	80111fa <__exponent+0x58>
	...

08011218 <_printf_float>:
 8011218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801121c:	b08d      	sub	sp, #52	@ 0x34
 801121e:	460c      	mov	r4, r1
 8011220:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8011224:	4616      	mov	r6, r2
 8011226:	461f      	mov	r7, r3
 8011228:	4605      	mov	r5, r0
 801122a:	f000 fd11 	bl	8011c50 <_localeconv_r>
 801122e:	6803      	ldr	r3, [r0, #0]
 8011230:	9304      	str	r3, [sp, #16]
 8011232:	4618      	mov	r0, r3
 8011234:	f7ef f81c 	bl	8000270 <strlen>
 8011238:	2300      	movs	r3, #0
 801123a:	930a      	str	r3, [sp, #40]	@ 0x28
 801123c:	f8d8 3000 	ldr.w	r3, [r8]
 8011240:	9005      	str	r0, [sp, #20]
 8011242:	3307      	adds	r3, #7
 8011244:	f023 0307 	bic.w	r3, r3, #7
 8011248:	f103 0208 	add.w	r2, r3, #8
 801124c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8011250:	f8d4 b000 	ldr.w	fp, [r4]
 8011254:	f8c8 2000 	str.w	r2, [r8]
 8011258:	e9d3 8900 	ldrd	r8, r9, [r3]
 801125c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8011260:	9307      	str	r3, [sp, #28]
 8011262:	f8cd 8018 	str.w	r8, [sp, #24]
 8011266:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801126a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801126e:	4b9c      	ldr	r3, [pc, #624]	@ (80114e0 <_printf_float+0x2c8>)
 8011270:	f04f 32ff 	mov.w	r2, #4294967295
 8011274:	f7ef fc5a 	bl	8000b2c <__aeabi_dcmpun>
 8011278:	bb70      	cbnz	r0, 80112d8 <_printf_float+0xc0>
 801127a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801127e:	4b98      	ldr	r3, [pc, #608]	@ (80114e0 <_printf_float+0x2c8>)
 8011280:	f04f 32ff 	mov.w	r2, #4294967295
 8011284:	f7ef fc34 	bl	8000af0 <__aeabi_dcmple>
 8011288:	bb30      	cbnz	r0, 80112d8 <_printf_float+0xc0>
 801128a:	2200      	movs	r2, #0
 801128c:	2300      	movs	r3, #0
 801128e:	4640      	mov	r0, r8
 8011290:	4649      	mov	r1, r9
 8011292:	f7ef fc23 	bl	8000adc <__aeabi_dcmplt>
 8011296:	b110      	cbz	r0, 801129e <_printf_float+0x86>
 8011298:	232d      	movs	r3, #45	@ 0x2d
 801129a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801129e:	4a91      	ldr	r2, [pc, #580]	@ (80114e4 <_printf_float+0x2cc>)
 80112a0:	4b91      	ldr	r3, [pc, #580]	@ (80114e8 <_printf_float+0x2d0>)
 80112a2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80112a6:	bf94      	ite	ls
 80112a8:	4690      	movls	r8, r2
 80112aa:	4698      	movhi	r8, r3
 80112ac:	2303      	movs	r3, #3
 80112ae:	6123      	str	r3, [r4, #16]
 80112b0:	f02b 0304 	bic.w	r3, fp, #4
 80112b4:	6023      	str	r3, [r4, #0]
 80112b6:	f04f 0900 	mov.w	r9, #0
 80112ba:	9700      	str	r7, [sp, #0]
 80112bc:	4633      	mov	r3, r6
 80112be:	aa0b      	add	r2, sp, #44	@ 0x2c
 80112c0:	4621      	mov	r1, r4
 80112c2:	4628      	mov	r0, r5
 80112c4:	f000 f9d2 	bl	801166c <_printf_common>
 80112c8:	3001      	adds	r0, #1
 80112ca:	f040 808d 	bne.w	80113e8 <_printf_float+0x1d0>
 80112ce:	f04f 30ff 	mov.w	r0, #4294967295
 80112d2:	b00d      	add	sp, #52	@ 0x34
 80112d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112d8:	4642      	mov	r2, r8
 80112da:	464b      	mov	r3, r9
 80112dc:	4640      	mov	r0, r8
 80112de:	4649      	mov	r1, r9
 80112e0:	f7ef fc24 	bl	8000b2c <__aeabi_dcmpun>
 80112e4:	b140      	cbz	r0, 80112f8 <_printf_float+0xe0>
 80112e6:	464b      	mov	r3, r9
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	bfbc      	itt	lt
 80112ec:	232d      	movlt	r3, #45	@ 0x2d
 80112ee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80112f2:	4a7e      	ldr	r2, [pc, #504]	@ (80114ec <_printf_float+0x2d4>)
 80112f4:	4b7e      	ldr	r3, [pc, #504]	@ (80114f0 <_printf_float+0x2d8>)
 80112f6:	e7d4      	b.n	80112a2 <_printf_float+0x8a>
 80112f8:	6863      	ldr	r3, [r4, #4]
 80112fa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80112fe:	9206      	str	r2, [sp, #24]
 8011300:	1c5a      	adds	r2, r3, #1
 8011302:	d13b      	bne.n	801137c <_printf_float+0x164>
 8011304:	2306      	movs	r3, #6
 8011306:	6063      	str	r3, [r4, #4]
 8011308:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801130c:	2300      	movs	r3, #0
 801130e:	6022      	str	r2, [r4, #0]
 8011310:	9303      	str	r3, [sp, #12]
 8011312:	ab0a      	add	r3, sp, #40	@ 0x28
 8011314:	e9cd a301 	strd	sl, r3, [sp, #4]
 8011318:	ab09      	add	r3, sp, #36	@ 0x24
 801131a:	9300      	str	r3, [sp, #0]
 801131c:	6861      	ldr	r1, [r4, #4]
 801131e:	ec49 8b10 	vmov	d0, r8, r9
 8011322:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8011326:	4628      	mov	r0, r5
 8011328:	f7ff fed6 	bl	80110d8 <__cvt>
 801132c:	9b06      	ldr	r3, [sp, #24]
 801132e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011330:	2b47      	cmp	r3, #71	@ 0x47
 8011332:	4680      	mov	r8, r0
 8011334:	d129      	bne.n	801138a <_printf_float+0x172>
 8011336:	1cc8      	adds	r0, r1, #3
 8011338:	db02      	blt.n	8011340 <_printf_float+0x128>
 801133a:	6863      	ldr	r3, [r4, #4]
 801133c:	4299      	cmp	r1, r3
 801133e:	dd41      	ble.n	80113c4 <_printf_float+0x1ac>
 8011340:	f1aa 0a02 	sub.w	sl, sl, #2
 8011344:	fa5f fa8a 	uxtb.w	sl, sl
 8011348:	3901      	subs	r1, #1
 801134a:	4652      	mov	r2, sl
 801134c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8011350:	9109      	str	r1, [sp, #36]	@ 0x24
 8011352:	f7ff ff26 	bl	80111a2 <__exponent>
 8011356:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011358:	1813      	adds	r3, r2, r0
 801135a:	2a01      	cmp	r2, #1
 801135c:	4681      	mov	r9, r0
 801135e:	6123      	str	r3, [r4, #16]
 8011360:	dc02      	bgt.n	8011368 <_printf_float+0x150>
 8011362:	6822      	ldr	r2, [r4, #0]
 8011364:	07d2      	lsls	r2, r2, #31
 8011366:	d501      	bpl.n	801136c <_printf_float+0x154>
 8011368:	3301      	adds	r3, #1
 801136a:	6123      	str	r3, [r4, #16]
 801136c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8011370:	2b00      	cmp	r3, #0
 8011372:	d0a2      	beq.n	80112ba <_printf_float+0xa2>
 8011374:	232d      	movs	r3, #45	@ 0x2d
 8011376:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801137a:	e79e      	b.n	80112ba <_printf_float+0xa2>
 801137c:	9a06      	ldr	r2, [sp, #24]
 801137e:	2a47      	cmp	r2, #71	@ 0x47
 8011380:	d1c2      	bne.n	8011308 <_printf_float+0xf0>
 8011382:	2b00      	cmp	r3, #0
 8011384:	d1c0      	bne.n	8011308 <_printf_float+0xf0>
 8011386:	2301      	movs	r3, #1
 8011388:	e7bd      	b.n	8011306 <_printf_float+0xee>
 801138a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801138e:	d9db      	bls.n	8011348 <_printf_float+0x130>
 8011390:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8011394:	d118      	bne.n	80113c8 <_printf_float+0x1b0>
 8011396:	2900      	cmp	r1, #0
 8011398:	6863      	ldr	r3, [r4, #4]
 801139a:	dd0b      	ble.n	80113b4 <_printf_float+0x19c>
 801139c:	6121      	str	r1, [r4, #16]
 801139e:	b913      	cbnz	r3, 80113a6 <_printf_float+0x18e>
 80113a0:	6822      	ldr	r2, [r4, #0]
 80113a2:	07d0      	lsls	r0, r2, #31
 80113a4:	d502      	bpl.n	80113ac <_printf_float+0x194>
 80113a6:	3301      	adds	r3, #1
 80113a8:	440b      	add	r3, r1
 80113aa:	6123      	str	r3, [r4, #16]
 80113ac:	65a1      	str	r1, [r4, #88]	@ 0x58
 80113ae:	f04f 0900 	mov.w	r9, #0
 80113b2:	e7db      	b.n	801136c <_printf_float+0x154>
 80113b4:	b913      	cbnz	r3, 80113bc <_printf_float+0x1a4>
 80113b6:	6822      	ldr	r2, [r4, #0]
 80113b8:	07d2      	lsls	r2, r2, #31
 80113ba:	d501      	bpl.n	80113c0 <_printf_float+0x1a8>
 80113bc:	3302      	adds	r3, #2
 80113be:	e7f4      	b.n	80113aa <_printf_float+0x192>
 80113c0:	2301      	movs	r3, #1
 80113c2:	e7f2      	b.n	80113aa <_printf_float+0x192>
 80113c4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80113c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80113ca:	4299      	cmp	r1, r3
 80113cc:	db05      	blt.n	80113da <_printf_float+0x1c2>
 80113ce:	6823      	ldr	r3, [r4, #0]
 80113d0:	6121      	str	r1, [r4, #16]
 80113d2:	07d8      	lsls	r0, r3, #31
 80113d4:	d5ea      	bpl.n	80113ac <_printf_float+0x194>
 80113d6:	1c4b      	adds	r3, r1, #1
 80113d8:	e7e7      	b.n	80113aa <_printf_float+0x192>
 80113da:	2900      	cmp	r1, #0
 80113dc:	bfd4      	ite	le
 80113de:	f1c1 0202 	rsble	r2, r1, #2
 80113e2:	2201      	movgt	r2, #1
 80113e4:	4413      	add	r3, r2
 80113e6:	e7e0      	b.n	80113aa <_printf_float+0x192>
 80113e8:	6823      	ldr	r3, [r4, #0]
 80113ea:	055a      	lsls	r2, r3, #21
 80113ec:	d407      	bmi.n	80113fe <_printf_float+0x1e6>
 80113ee:	6923      	ldr	r3, [r4, #16]
 80113f0:	4642      	mov	r2, r8
 80113f2:	4631      	mov	r1, r6
 80113f4:	4628      	mov	r0, r5
 80113f6:	47b8      	blx	r7
 80113f8:	3001      	adds	r0, #1
 80113fa:	d12b      	bne.n	8011454 <_printf_float+0x23c>
 80113fc:	e767      	b.n	80112ce <_printf_float+0xb6>
 80113fe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8011402:	f240 80dd 	bls.w	80115c0 <_printf_float+0x3a8>
 8011406:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801140a:	2200      	movs	r2, #0
 801140c:	2300      	movs	r3, #0
 801140e:	f7ef fb5b 	bl	8000ac8 <__aeabi_dcmpeq>
 8011412:	2800      	cmp	r0, #0
 8011414:	d033      	beq.n	801147e <_printf_float+0x266>
 8011416:	4a37      	ldr	r2, [pc, #220]	@ (80114f4 <_printf_float+0x2dc>)
 8011418:	2301      	movs	r3, #1
 801141a:	4631      	mov	r1, r6
 801141c:	4628      	mov	r0, r5
 801141e:	47b8      	blx	r7
 8011420:	3001      	adds	r0, #1
 8011422:	f43f af54 	beq.w	80112ce <_printf_float+0xb6>
 8011426:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801142a:	4543      	cmp	r3, r8
 801142c:	db02      	blt.n	8011434 <_printf_float+0x21c>
 801142e:	6823      	ldr	r3, [r4, #0]
 8011430:	07d8      	lsls	r0, r3, #31
 8011432:	d50f      	bpl.n	8011454 <_printf_float+0x23c>
 8011434:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011438:	4631      	mov	r1, r6
 801143a:	4628      	mov	r0, r5
 801143c:	47b8      	blx	r7
 801143e:	3001      	adds	r0, #1
 8011440:	f43f af45 	beq.w	80112ce <_printf_float+0xb6>
 8011444:	f04f 0900 	mov.w	r9, #0
 8011448:	f108 38ff 	add.w	r8, r8, #4294967295
 801144c:	f104 0a1a 	add.w	sl, r4, #26
 8011450:	45c8      	cmp	r8, r9
 8011452:	dc09      	bgt.n	8011468 <_printf_float+0x250>
 8011454:	6823      	ldr	r3, [r4, #0]
 8011456:	079b      	lsls	r3, r3, #30
 8011458:	f100 8103 	bmi.w	8011662 <_printf_float+0x44a>
 801145c:	68e0      	ldr	r0, [r4, #12]
 801145e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011460:	4298      	cmp	r0, r3
 8011462:	bfb8      	it	lt
 8011464:	4618      	movlt	r0, r3
 8011466:	e734      	b.n	80112d2 <_printf_float+0xba>
 8011468:	2301      	movs	r3, #1
 801146a:	4652      	mov	r2, sl
 801146c:	4631      	mov	r1, r6
 801146e:	4628      	mov	r0, r5
 8011470:	47b8      	blx	r7
 8011472:	3001      	adds	r0, #1
 8011474:	f43f af2b 	beq.w	80112ce <_printf_float+0xb6>
 8011478:	f109 0901 	add.w	r9, r9, #1
 801147c:	e7e8      	b.n	8011450 <_printf_float+0x238>
 801147e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011480:	2b00      	cmp	r3, #0
 8011482:	dc39      	bgt.n	80114f8 <_printf_float+0x2e0>
 8011484:	4a1b      	ldr	r2, [pc, #108]	@ (80114f4 <_printf_float+0x2dc>)
 8011486:	2301      	movs	r3, #1
 8011488:	4631      	mov	r1, r6
 801148a:	4628      	mov	r0, r5
 801148c:	47b8      	blx	r7
 801148e:	3001      	adds	r0, #1
 8011490:	f43f af1d 	beq.w	80112ce <_printf_float+0xb6>
 8011494:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8011498:	ea59 0303 	orrs.w	r3, r9, r3
 801149c:	d102      	bne.n	80114a4 <_printf_float+0x28c>
 801149e:	6823      	ldr	r3, [r4, #0]
 80114a0:	07d9      	lsls	r1, r3, #31
 80114a2:	d5d7      	bpl.n	8011454 <_printf_float+0x23c>
 80114a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80114a8:	4631      	mov	r1, r6
 80114aa:	4628      	mov	r0, r5
 80114ac:	47b8      	blx	r7
 80114ae:	3001      	adds	r0, #1
 80114b0:	f43f af0d 	beq.w	80112ce <_printf_float+0xb6>
 80114b4:	f04f 0a00 	mov.w	sl, #0
 80114b8:	f104 0b1a 	add.w	fp, r4, #26
 80114bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80114be:	425b      	negs	r3, r3
 80114c0:	4553      	cmp	r3, sl
 80114c2:	dc01      	bgt.n	80114c8 <_printf_float+0x2b0>
 80114c4:	464b      	mov	r3, r9
 80114c6:	e793      	b.n	80113f0 <_printf_float+0x1d8>
 80114c8:	2301      	movs	r3, #1
 80114ca:	465a      	mov	r2, fp
 80114cc:	4631      	mov	r1, r6
 80114ce:	4628      	mov	r0, r5
 80114d0:	47b8      	blx	r7
 80114d2:	3001      	adds	r0, #1
 80114d4:	f43f aefb 	beq.w	80112ce <_printf_float+0xb6>
 80114d8:	f10a 0a01 	add.w	sl, sl, #1
 80114dc:	e7ee      	b.n	80114bc <_printf_float+0x2a4>
 80114de:	bf00      	nop
 80114e0:	7fefffff 	.word	0x7fefffff
 80114e4:	080150d5 	.word	0x080150d5
 80114e8:	080150d9 	.word	0x080150d9
 80114ec:	080150dd 	.word	0x080150dd
 80114f0:	080150e1 	.word	0x080150e1
 80114f4:	080150e5 	.word	0x080150e5
 80114f8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80114fa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80114fe:	4553      	cmp	r3, sl
 8011500:	bfa8      	it	ge
 8011502:	4653      	movge	r3, sl
 8011504:	2b00      	cmp	r3, #0
 8011506:	4699      	mov	r9, r3
 8011508:	dc36      	bgt.n	8011578 <_printf_float+0x360>
 801150a:	f04f 0b00 	mov.w	fp, #0
 801150e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011512:	f104 021a 	add.w	r2, r4, #26
 8011516:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011518:	9306      	str	r3, [sp, #24]
 801151a:	eba3 0309 	sub.w	r3, r3, r9
 801151e:	455b      	cmp	r3, fp
 8011520:	dc31      	bgt.n	8011586 <_printf_float+0x36e>
 8011522:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011524:	459a      	cmp	sl, r3
 8011526:	dc3a      	bgt.n	801159e <_printf_float+0x386>
 8011528:	6823      	ldr	r3, [r4, #0]
 801152a:	07da      	lsls	r2, r3, #31
 801152c:	d437      	bmi.n	801159e <_printf_float+0x386>
 801152e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011530:	ebaa 0903 	sub.w	r9, sl, r3
 8011534:	9b06      	ldr	r3, [sp, #24]
 8011536:	ebaa 0303 	sub.w	r3, sl, r3
 801153a:	4599      	cmp	r9, r3
 801153c:	bfa8      	it	ge
 801153e:	4699      	movge	r9, r3
 8011540:	f1b9 0f00 	cmp.w	r9, #0
 8011544:	dc33      	bgt.n	80115ae <_printf_float+0x396>
 8011546:	f04f 0800 	mov.w	r8, #0
 801154a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801154e:	f104 0b1a 	add.w	fp, r4, #26
 8011552:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011554:	ebaa 0303 	sub.w	r3, sl, r3
 8011558:	eba3 0309 	sub.w	r3, r3, r9
 801155c:	4543      	cmp	r3, r8
 801155e:	f77f af79 	ble.w	8011454 <_printf_float+0x23c>
 8011562:	2301      	movs	r3, #1
 8011564:	465a      	mov	r2, fp
 8011566:	4631      	mov	r1, r6
 8011568:	4628      	mov	r0, r5
 801156a:	47b8      	blx	r7
 801156c:	3001      	adds	r0, #1
 801156e:	f43f aeae 	beq.w	80112ce <_printf_float+0xb6>
 8011572:	f108 0801 	add.w	r8, r8, #1
 8011576:	e7ec      	b.n	8011552 <_printf_float+0x33a>
 8011578:	4642      	mov	r2, r8
 801157a:	4631      	mov	r1, r6
 801157c:	4628      	mov	r0, r5
 801157e:	47b8      	blx	r7
 8011580:	3001      	adds	r0, #1
 8011582:	d1c2      	bne.n	801150a <_printf_float+0x2f2>
 8011584:	e6a3      	b.n	80112ce <_printf_float+0xb6>
 8011586:	2301      	movs	r3, #1
 8011588:	4631      	mov	r1, r6
 801158a:	4628      	mov	r0, r5
 801158c:	9206      	str	r2, [sp, #24]
 801158e:	47b8      	blx	r7
 8011590:	3001      	adds	r0, #1
 8011592:	f43f ae9c 	beq.w	80112ce <_printf_float+0xb6>
 8011596:	9a06      	ldr	r2, [sp, #24]
 8011598:	f10b 0b01 	add.w	fp, fp, #1
 801159c:	e7bb      	b.n	8011516 <_printf_float+0x2fe>
 801159e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80115a2:	4631      	mov	r1, r6
 80115a4:	4628      	mov	r0, r5
 80115a6:	47b8      	blx	r7
 80115a8:	3001      	adds	r0, #1
 80115aa:	d1c0      	bne.n	801152e <_printf_float+0x316>
 80115ac:	e68f      	b.n	80112ce <_printf_float+0xb6>
 80115ae:	9a06      	ldr	r2, [sp, #24]
 80115b0:	464b      	mov	r3, r9
 80115b2:	4442      	add	r2, r8
 80115b4:	4631      	mov	r1, r6
 80115b6:	4628      	mov	r0, r5
 80115b8:	47b8      	blx	r7
 80115ba:	3001      	adds	r0, #1
 80115bc:	d1c3      	bne.n	8011546 <_printf_float+0x32e>
 80115be:	e686      	b.n	80112ce <_printf_float+0xb6>
 80115c0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80115c4:	f1ba 0f01 	cmp.w	sl, #1
 80115c8:	dc01      	bgt.n	80115ce <_printf_float+0x3b6>
 80115ca:	07db      	lsls	r3, r3, #31
 80115cc:	d536      	bpl.n	801163c <_printf_float+0x424>
 80115ce:	2301      	movs	r3, #1
 80115d0:	4642      	mov	r2, r8
 80115d2:	4631      	mov	r1, r6
 80115d4:	4628      	mov	r0, r5
 80115d6:	47b8      	blx	r7
 80115d8:	3001      	adds	r0, #1
 80115da:	f43f ae78 	beq.w	80112ce <_printf_float+0xb6>
 80115de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80115e2:	4631      	mov	r1, r6
 80115e4:	4628      	mov	r0, r5
 80115e6:	47b8      	blx	r7
 80115e8:	3001      	adds	r0, #1
 80115ea:	f43f ae70 	beq.w	80112ce <_printf_float+0xb6>
 80115ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80115f2:	2200      	movs	r2, #0
 80115f4:	2300      	movs	r3, #0
 80115f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80115fa:	f7ef fa65 	bl	8000ac8 <__aeabi_dcmpeq>
 80115fe:	b9c0      	cbnz	r0, 8011632 <_printf_float+0x41a>
 8011600:	4653      	mov	r3, sl
 8011602:	f108 0201 	add.w	r2, r8, #1
 8011606:	4631      	mov	r1, r6
 8011608:	4628      	mov	r0, r5
 801160a:	47b8      	blx	r7
 801160c:	3001      	adds	r0, #1
 801160e:	d10c      	bne.n	801162a <_printf_float+0x412>
 8011610:	e65d      	b.n	80112ce <_printf_float+0xb6>
 8011612:	2301      	movs	r3, #1
 8011614:	465a      	mov	r2, fp
 8011616:	4631      	mov	r1, r6
 8011618:	4628      	mov	r0, r5
 801161a:	47b8      	blx	r7
 801161c:	3001      	adds	r0, #1
 801161e:	f43f ae56 	beq.w	80112ce <_printf_float+0xb6>
 8011622:	f108 0801 	add.w	r8, r8, #1
 8011626:	45d0      	cmp	r8, sl
 8011628:	dbf3      	blt.n	8011612 <_printf_float+0x3fa>
 801162a:	464b      	mov	r3, r9
 801162c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8011630:	e6df      	b.n	80113f2 <_printf_float+0x1da>
 8011632:	f04f 0800 	mov.w	r8, #0
 8011636:	f104 0b1a 	add.w	fp, r4, #26
 801163a:	e7f4      	b.n	8011626 <_printf_float+0x40e>
 801163c:	2301      	movs	r3, #1
 801163e:	4642      	mov	r2, r8
 8011640:	e7e1      	b.n	8011606 <_printf_float+0x3ee>
 8011642:	2301      	movs	r3, #1
 8011644:	464a      	mov	r2, r9
 8011646:	4631      	mov	r1, r6
 8011648:	4628      	mov	r0, r5
 801164a:	47b8      	blx	r7
 801164c:	3001      	adds	r0, #1
 801164e:	f43f ae3e 	beq.w	80112ce <_printf_float+0xb6>
 8011652:	f108 0801 	add.w	r8, r8, #1
 8011656:	68e3      	ldr	r3, [r4, #12]
 8011658:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801165a:	1a5b      	subs	r3, r3, r1
 801165c:	4543      	cmp	r3, r8
 801165e:	dcf0      	bgt.n	8011642 <_printf_float+0x42a>
 8011660:	e6fc      	b.n	801145c <_printf_float+0x244>
 8011662:	f04f 0800 	mov.w	r8, #0
 8011666:	f104 0919 	add.w	r9, r4, #25
 801166a:	e7f4      	b.n	8011656 <_printf_float+0x43e>

0801166c <_printf_common>:
 801166c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011670:	4616      	mov	r6, r2
 8011672:	4698      	mov	r8, r3
 8011674:	688a      	ldr	r2, [r1, #8]
 8011676:	690b      	ldr	r3, [r1, #16]
 8011678:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801167c:	4293      	cmp	r3, r2
 801167e:	bfb8      	it	lt
 8011680:	4613      	movlt	r3, r2
 8011682:	6033      	str	r3, [r6, #0]
 8011684:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011688:	4607      	mov	r7, r0
 801168a:	460c      	mov	r4, r1
 801168c:	b10a      	cbz	r2, 8011692 <_printf_common+0x26>
 801168e:	3301      	adds	r3, #1
 8011690:	6033      	str	r3, [r6, #0]
 8011692:	6823      	ldr	r3, [r4, #0]
 8011694:	0699      	lsls	r1, r3, #26
 8011696:	bf42      	ittt	mi
 8011698:	6833      	ldrmi	r3, [r6, #0]
 801169a:	3302      	addmi	r3, #2
 801169c:	6033      	strmi	r3, [r6, #0]
 801169e:	6825      	ldr	r5, [r4, #0]
 80116a0:	f015 0506 	ands.w	r5, r5, #6
 80116a4:	d106      	bne.n	80116b4 <_printf_common+0x48>
 80116a6:	f104 0a19 	add.w	sl, r4, #25
 80116aa:	68e3      	ldr	r3, [r4, #12]
 80116ac:	6832      	ldr	r2, [r6, #0]
 80116ae:	1a9b      	subs	r3, r3, r2
 80116b0:	42ab      	cmp	r3, r5
 80116b2:	dc26      	bgt.n	8011702 <_printf_common+0x96>
 80116b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80116b8:	6822      	ldr	r2, [r4, #0]
 80116ba:	3b00      	subs	r3, #0
 80116bc:	bf18      	it	ne
 80116be:	2301      	movne	r3, #1
 80116c0:	0692      	lsls	r2, r2, #26
 80116c2:	d42b      	bmi.n	801171c <_printf_common+0xb0>
 80116c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80116c8:	4641      	mov	r1, r8
 80116ca:	4638      	mov	r0, r7
 80116cc:	47c8      	blx	r9
 80116ce:	3001      	adds	r0, #1
 80116d0:	d01e      	beq.n	8011710 <_printf_common+0xa4>
 80116d2:	6823      	ldr	r3, [r4, #0]
 80116d4:	6922      	ldr	r2, [r4, #16]
 80116d6:	f003 0306 	and.w	r3, r3, #6
 80116da:	2b04      	cmp	r3, #4
 80116dc:	bf02      	ittt	eq
 80116de:	68e5      	ldreq	r5, [r4, #12]
 80116e0:	6833      	ldreq	r3, [r6, #0]
 80116e2:	1aed      	subeq	r5, r5, r3
 80116e4:	68a3      	ldr	r3, [r4, #8]
 80116e6:	bf0c      	ite	eq
 80116e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80116ec:	2500      	movne	r5, #0
 80116ee:	4293      	cmp	r3, r2
 80116f0:	bfc4      	itt	gt
 80116f2:	1a9b      	subgt	r3, r3, r2
 80116f4:	18ed      	addgt	r5, r5, r3
 80116f6:	2600      	movs	r6, #0
 80116f8:	341a      	adds	r4, #26
 80116fa:	42b5      	cmp	r5, r6
 80116fc:	d11a      	bne.n	8011734 <_printf_common+0xc8>
 80116fe:	2000      	movs	r0, #0
 8011700:	e008      	b.n	8011714 <_printf_common+0xa8>
 8011702:	2301      	movs	r3, #1
 8011704:	4652      	mov	r2, sl
 8011706:	4641      	mov	r1, r8
 8011708:	4638      	mov	r0, r7
 801170a:	47c8      	blx	r9
 801170c:	3001      	adds	r0, #1
 801170e:	d103      	bne.n	8011718 <_printf_common+0xac>
 8011710:	f04f 30ff 	mov.w	r0, #4294967295
 8011714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011718:	3501      	adds	r5, #1
 801171a:	e7c6      	b.n	80116aa <_printf_common+0x3e>
 801171c:	18e1      	adds	r1, r4, r3
 801171e:	1c5a      	adds	r2, r3, #1
 8011720:	2030      	movs	r0, #48	@ 0x30
 8011722:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011726:	4422      	add	r2, r4
 8011728:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801172c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011730:	3302      	adds	r3, #2
 8011732:	e7c7      	b.n	80116c4 <_printf_common+0x58>
 8011734:	2301      	movs	r3, #1
 8011736:	4622      	mov	r2, r4
 8011738:	4641      	mov	r1, r8
 801173a:	4638      	mov	r0, r7
 801173c:	47c8      	blx	r9
 801173e:	3001      	adds	r0, #1
 8011740:	d0e6      	beq.n	8011710 <_printf_common+0xa4>
 8011742:	3601      	adds	r6, #1
 8011744:	e7d9      	b.n	80116fa <_printf_common+0x8e>
	...

08011748 <_printf_i>:
 8011748:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801174c:	7e0f      	ldrb	r7, [r1, #24]
 801174e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011750:	2f78      	cmp	r7, #120	@ 0x78
 8011752:	4691      	mov	r9, r2
 8011754:	4680      	mov	r8, r0
 8011756:	460c      	mov	r4, r1
 8011758:	469a      	mov	sl, r3
 801175a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801175e:	d807      	bhi.n	8011770 <_printf_i+0x28>
 8011760:	2f62      	cmp	r7, #98	@ 0x62
 8011762:	d80a      	bhi.n	801177a <_printf_i+0x32>
 8011764:	2f00      	cmp	r7, #0
 8011766:	f000 80d2 	beq.w	801190e <_printf_i+0x1c6>
 801176a:	2f58      	cmp	r7, #88	@ 0x58
 801176c:	f000 80b9 	beq.w	80118e2 <_printf_i+0x19a>
 8011770:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011774:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011778:	e03a      	b.n	80117f0 <_printf_i+0xa8>
 801177a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801177e:	2b15      	cmp	r3, #21
 8011780:	d8f6      	bhi.n	8011770 <_printf_i+0x28>
 8011782:	a101      	add	r1, pc, #4	@ (adr r1, 8011788 <_printf_i+0x40>)
 8011784:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011788:	080117e1 	.word	0x080117e1
 801178c:	080117f5 	.word	0x080117f5
 8011790:	08011771 	.word	0x08011771
 8011794:	08011771 	.word	0x08011771
 8011798:	08011771 	.word	0x08011771
 801179c:	08011771 	.word	0x08011771
 80117a0:	080117f5 	.word	0x080117f5
 80117a4:	08011771 	.word	0x08011771
 80117a8:	08011771 	.word	0x08011771
 80117ac:	08011771 	.word	0x08011771
 80117b0:	08011771 	.word	0x08011771
 80117b4:	080118f5 	.word	0x080118f5
 80117b8:	0801181f 	.word	0x0801181f
 80117bc:	080118af 	.word	0x080118af
 80117c0:	08011771 	.word	0x08011771
 80117c4:	08011771 	.word	0x08011771
 80117c8:	08011917 	.word	0x08011917
 80117cc:	08011771 	.word	0x08011771
 80117d0:	0801181f 	.word	0x0801181f
 80117d4:	08011771 	.word	0x08011771
 80117d8:	08011771 	.word	0x08011771
 80117dc:	080118b7 	.word	0x080118b7
 80117e0:	6833      	ldr	r3, [r6, #0]
 80117e2:	1d1a      	adds	r2, r3, #4
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	6032      	str	r2, [r6, #0]
 80117e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80117ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80117f0:	2301      	movs	r3, #1
 80117f2:	e09d      	b.n	8011930 <_printf_i+0x1e8>
 80117f4:	6833      	ldr	r3, [r6, #0]
 80117f6:	6820      	ldr	r0, [r4, #0]
 80117f8:	1d19      	adds	r1, r3, #4
 80117fa:	6031      	str	r1, [r6, #0]
 80117fc:	0606      	lsls	r6, r0, #24
 80117fe:	d501      	bpl.n	8011804 <_printf_i+0xbc>
 8011800:	681d      	ldr	r5, [r3, #0]
 8011802:	e003      	b.n	801180c <_printf_i+0xc4>
 8011804:	0645      	lsls	r5, r0, #25
 8011806:	d5fb      	bpl.n	8011800 <_printf_i+0xb8>
 8011808:	f9b3 5000 	ldrsh.w	r5, [r3]
 801180c:	2d00      	cmp	r5, #0
 801180e:	da03      	bge.n	8011818 <_printf_i+0xd0>
 8011810:	232d      	movs	r3, #45	@ 0x2d
 8011812:	426d      	negs	r5, r5
 8011814:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011818:	4859      	ldr	r0, [pc, #356]	@ (8011980 <_printf_i+0x238>)
 801181a:	230a      	movs	r3, #10
 801181c:	e011      	b.n	8011842 <_printf_i+0xfa>
 801181e:	6821      	ldr	r1, [r4, #0]
 8011820:	6833      	ldr	r3, [r6, #0]
 8011822:	0608      	lsls	r0, r1, #24
 8011824:	f853 5b04 	ldr.w	r5, [r3], #4
 8011828:	d402      	bmi.n	8011830 <_printf_i+0xe8>
 801182a:	0649      	lsls	r1, r1, #25
 801182c:	bf48      	it	mi
 801182e:	b2ad      	uxthmi	r5, r5
 8011830:	2f6f      	cmp	r7, #111	@ 0x6f
 8011832:	4853      	ldr	r0, [pc, #332]	@ (8011980 <_printf_i+0x238>)
 8011834:	6033      	str	r3, [r6, #0]
 8011836:	bf14      	ite	ne
 8011838:	230a      	movne	r3, #10
 801183a:	2308      	moveq	r3, #8
 801183c:	2100      	movs	r1, #0
 801183e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011842:	6866      	ldr	r6, [r4, #4]
 8011844:	60a6      	str	r6, [r4, #8]
 8011846:	2e00      	cmp	r6, #0
 8011848:	bfa2      	ittt	ge
 801184a:	6821      	ldrge	r1, [r4, #0]
 801184c:	f021 0104 	bicge.w	r1, r1, #4
 8011850:	6021      	strge	r1, [r4, #0]
 8011852:	b90d      	cbnz	r5, 8011858 <_printf_i+0x110>
 8011854:	2e00      	cmp	r6, #0
 8011856:	d04b      	beq.n	80118f0 <_printf_i+0x1a8>
 8011858:	4616      	mov	r6, r2
 801185a:	fbb5 f1f3 	udiv	r1, r5, r3
 801185e:	fb03 5711 	mls	r7, r3, r1, r5
 8011862:	5dc7      	ldrb	r7, [r0, r7]
 8011864:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011868:	462f      	mov	r7, r5
 801186a:	42bb      	cmp	r3, r7
 801186c:	460d      	mov	r5, r1
 801186e:	d9f4      	bls.n	801185a <_printf_i+0x112>
 8011870:	2b08      	cmp	r3, #8
 8011872:	d10b      	bne.n	801188c <_printf_i+0x144>
 8011874:	6823      	ldr	r3, [r4, #0]
 8011876:	07df      	lsls	r7, r3, #31
 8011878:	d508      	bpl.n	801188c <_printf_i+0x144>
 801187a:	6923      	ldr	r3, [r4, #16]
 801187c:	6861      	ldr	r1, [r4, #4]
 801187e:	4299      	cmp	r1, r3
 8011880:	bfde      	ittt	le
 8011882:	2330      	movle	r3, #48	@ 0x30
 8011884:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011888:	f106 36ff 	addle.w	r6, r6, #4294967295
 801188c:	1b92      	subs	r2, r2, r6
 801188e:	6122      	str	r2, [r4, #16]
 8011890:	f8cd a000 	str.w	sl, [sp]
 8011894:	464b      	mov	r3, r9
 8011896:	aa03      	add	r2, sp, #12
 8011898:	4621      	mov	r1, r4
 801189a:	4640      	mov	r0, r8
 801189c:	f7ff fee6 	bl	801166c <_printf_common>
 80118a0:	3001      	adds	r0, #1
 80118a2:	d14a      	bne.n	801193a <_printf_i+0x1f2>
 80118a4:	f04f 30ff 	mov.w	r0, #4294967295
 80118a8:	b004      	add	sp, #16
 80118aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118ae:	6823      	ldr	r3, [r4, #0]
 80118b0:	f043 0320 	orr.w	r3, r3, #32
 80118b4:	6023      	str	r3, [r4, #0]
 80118b6:	4833      	ldr	r0, [pc, #204]	@ (8011984 <_printf_i+0x23c>)
 80118b8:	2778      	movs	r7, #120	@ 0x78
 80118ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80118be:	6823      	ldr	r3, [r4, #0]
 80118c0:	6831      	ldr	r1, [r6, #0]
 80118c2:	061f      	lsls	r7, r3, #24
 80118c4:	f851 5b04 	ldr.w	r5, [r1], #4
 80118c8:	d402      	bmi.n	80118d0 <_printf_i+0x188>
 80118ca:	065f      	lsls	r7, r3, #25
 80118cc:	bf48      	it	mi
 80118ce:	b2ad      	uxthmi	r5, r5
 80118d0:	6031      	str	r1, [r6, #0]
 80118d2:	07d9      	lsls	r1, r3, #31
 80118d4:	bf44      	itt	mi
 80118d6:	f043 0320 	orrmi.w	r3, r3, #32
 80118da:	6023      	strmi	r3, [r4, #0]
 80118dc:	b11d      	cbz	r5, 80118e6 <_printf_i+0x19e>
 80118de:	2310      	movs	r3, #16
 80118e0:	e7ac      	b.n	801183c <_printf_i+0xf4>
 80118e2:	4827      	ldr	r0, [pc, #156]	@ (8011980 <_printf_i+0x238>)
 80118e4:	e7e9      	b.n	80118ba <_printf_i+0x172>
 80118e6:	6823      	ldr	r3, [r4, #0]
 80118e8:	f023 0320 	bic.w	r3, r3, #32
 80118ec:	6023      	str	r3, [r4, #0]
 80118ee:	e7f6      	b.n	80118de <_printf_i+0x196>
 80118f0:	4616      	mov	r6, r2
 80118f2:	e7bd      	b.n	8011870 <_printf_i+0x128>
 80118f4:	6833      	ldr	r3, [r6, #0]
 80118f6:	6825      	ldr	r5, [r4, #0]
 80118f8:	6961      	ldr	r1, [r4, #20]
 80118fa:	1d18      	adds	r0, r3, #4
 80118fc:	6030      	str	r0, [r6, #0]
 80118fe:	062e      	lsls	r6, r5, #24
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	d501      	bpl.n	8011908 <_printf_i+0x1c0>
 8011904:	6019      	str	r1, [r3, #0]
 8011906:	e002      	b.n	801190e <_printf_i+0x1c6>
 8011908:	0668      	lsls	r0, r5, #25
 801190a:	d5fb      	bpl.n	8011904 <_printf_i+0x1bc>
 801190c:	8019      	strh	r1, [r3, #0]
 801190e:	2300      	movs	r3, #0
 8011910:	6123      	str	r3, [r4, #16]
 8011912:	4616      	mov	r6, r2
 8011914:	e7bc      	b.n	8011890 <_printf_i+0x148>
 8011916:	6833      	ldr	r3, [r6, #0]
 8011918:	1d1a      	adds	r2, r3, #4
 801191a:	6032      	str	r2, [r6, #0]
 801191c:	681e      	ldr	r6, [r3, #0]
 801191e:	6862      	ldr	r2, [r4, #4]
 8011920:	2100      	movs	r1, #0
 8011922:	4630      	mov	r0, r6
 8011924:	f7ee fc54 	bl	80001d0 <memchr>
 8011928:	b108      	cbz	r0, 801192e <_printf_i+0x1e6>
 801192a:	1b80      	subs	r0, r0, r6
 801192c:	6060      	str	r0, [r4, #4]
 801192e:	6863      	ldr	r3, [r4, #4]
 8011930:	6123      	str	r3, [r4, #16]
 8011932:	2300      	movs	r3, #0
 8011934:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011938:	e7aa      	b.n	8011890 <_printf_i+0x148>
 801193a:	6923      	ldr	r3, [r4, #16]
 801193c:	4632      	mov	r2, r6
 801193e:	4649      	mov	r1, r9
 8011940:	4640      	mov	r0, r8
 8011942:	47d0      	blx	sl
 8011944:	3001      	adds	r0, #1
 8011946:	d0ad      	beq.n	80118a4 <_printf_i+0x15c>
 8011948:	6823      	ldr	r3, [r4, #0]
 801194a:	079b      	lsls	r3, r3, #30
 801194c:	d413      	bmi.n	8011976 <_printf_i+0x22e>
 801194e:	68e0      	ldr	r0, [r4, #12]
 8011950:	9b03      	ldr	r3, [sp, #12]
 8011952:	4298      	cmp	r0, r3
 8011954:	bfb8      	it	lt
 8011956:	4618      	movlt	r0, r3
 8011958:	e7a6      	b.n	80118a8 <_printf_i+0x160>
 801195a:	2301      	movs	r3, #1
 801195c:	4632      	mov	r2, r6
 801195e:	4649      	mov	r1, r9
 8011960:	4640      	mov	r0, r8
 8011962:	47d0      	blx	sl
 8011964:	3001      	adds	r0, #1
 8011966:	d09d      	beq.n	80118a4 <_printf_i+0x15c>
 8011968:	3501      	adds	r5, #1
 801196a:	68e3      	ldr	r3, [r4, #12]
 801196c:	9903      	ldr	r1, [sp, #12]
 801196e:	1a5b      	subs	r3, r3, r1
 8011970:	42ab      	cmp	r3, r5
 8011972:	dcf2      	bgt.n	801195a <_printf_i+0x212>
 8011974:	e7eb      	b.n	801194e <_printf_i+0x206>
 8011976:	2500      	movs	r5, #0
 8011978:	f104 0619 	add.w	r6, r4, #25
 801197c:	e7f5      	b.n	801196a <_printf_i+0x222>
 801197e:	bf00      	nop
 8011980:	080150e7 	.word	0x080150e7
 8011984:	080150f8 	.word	0x080150f8

08011988 <std>:
 8011988:	2300      	movs	r3, #0
 801198a:	b510      	push	{r4, lr}
 801198c:	4604      	mov	r4, r0
 801198e:	e9c0 3300 	strd	r3, r3, [r0]
 8011992:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011996:	6083      	str	r3, [r0, #8]
 8011998:	8181      	strh	r1, [r0, #12]
 801199a:	6643      	str	r3, [r0, #100]	@ 0x64
 801199c:	81c2      	strh	r2, [r0, #14]
 801199e:	6183      	str	r3, [r0, #24]
 80119a0:	4619      	mov	r1, r3
 80119a2:	2208      	movs	r2, #8
 80119a4:	305c      	adds	r0, #92	@ 0x5c
 80119a6:	f000 f914 	bl	8011bd2 <memset>
 80119aa:	4b0d      	ldr	r3, [pc, #52]	@ (80119e0 <std+0x58>)
 80119ac:	6263      	str	r3, [r4, #36]	@ 0x24
 80119ae:	4b0d      	ldr	r3, [pc, #52]	@ (80119e4 <std+0x5c>)
 80119b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80119b2:	4b0d      	ldr	r3, [pc, #52]	@ (80119e8 <std+0x60>)
 80119b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80119b6:	4b0d      	ldr	r3, [pc, #52]	@ (80119ec <std+0x64>)
 80119b8:	6323      	str	r3, [r4, #48]	@ 0x30
 80119ba:	4b0d      	ldr	r3, [pc, #52]	@ (80119f0 <std+0x68>)
 80119bc:	6224      	str	r4, [r4, #32]
 80119be:	429c      	cmp	r4, r3
 80119c0:	d006      	beq.n	80119d0 <std+0x48>
 80119c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80119c6:	4294      	cmp	r4, r2
 80119c8:	d002      	beq.n	80119d0 <std+0x48>
 80119ca:	33d0      	adds	r3, #208	@ 0xd0
 80119cc:	429c      	cmp	r4, r3
 80119ce:	d105      	bne.n	80119dc <std+0x54>
 80119d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80119d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80119d8:	f000 ba04 	b.w	8011de4 <__retarget_lock_init_recursive>
 80119dc:	bd10      	pop	{r4, pc}
 80119de:	bf00      	nop
 80119e0:	08011b4d 	.word	0x08011b4d
 80119e4:	08011b6f 	.word	0x08011b6f
 80119e8:	08011ba7 	.word	0x08011ba7
 80119ec:	08011bcb 	.word	0x08011bcb
 80119f0:	2000cb84 	.word	0x2000cb84

080119f4 <stdio_exit_handler>:
 80119f4:	4a02      	ldr	r2, [pc, #8]	@ (8011a00 <stdio_exit_handler+0xc>)
 80119f6:	4903      	ldr	r1, [pc, #12]	@ (8011a04 <stdio_exit_handler+0x10>)
 80119f8:	4803      	ldr	r0, [pc, #12]	@ (8011a08 <stdio_exit_handler+0x14>)
 80119fa:	f000 b869 	b.w	8011ad0 <_fwalk_sglue>
 80119fe:	bf00      	nop
 8011a00:	200002a8 	.word	0x200002a8
 8011a04:	080137ad 	.word	0x080137ad
 8011a08:	200002b8 	.word	0x200002b8

08011a0c <cleanup_stdio>:
 8011a0c:	6841      	ldr	r1, [r0, #4]
 8011a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8011a40 <cleanup_stdio+0x34>)
 8011a10:	4299      	cmp	r1, r3
 8011a12:	b510      	push	{r4, lr}
 8011a14:	4604      	mov	r4, r0
 8011a16:	d001      	beq.n	8011a1c <cleanup_stdio+0x10>
 8011a18:	f001 fec8 	bl	80137ac <_fflush_r>
 8011a1c:	68a1      	ldr	r1, [r4, #8]
 8011a1e:	4b09      	ldr	r3, [pc, #36]	@ (8011a44 <cleanup_stdio+0x38>)
 8011a20:	4299      	cmp	r1, r3
 8011a22:	d002      	beq.n	8011a2a <cleanup_stdio+0x1e>
 8011a24:	4620      	mov	r0, r4
 8011a26:	f001 fec1 	bl	80137ac <_fflush_r>
 8011a2a:	68e1      	ldr	r1, [r4, #12]
 8011a2c:	4b06      	ldr	r3, [pc, #24]	@ (8011a48 <cleanup_stdio+0x3c>)
 8011a2e:	4299      	cmp	r1, r3
 8011a30:	d004      	beq.n	8011a3c <cleanup_stdio+0x30>
 8011a32:	4620      	mov	r0, r4
 8011a34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a38:	f001 beb8 	b.w	80137ac <_fflush_r>
 8011a3c:	bd10      	pop	{r4, pc}
 8011a3e:	bf00      	nop
 8011a40:	2000cb84 	.word	0x2000cb84
 8011a44:	2000cbec 	.word	0x2000cbec
 8011a48:	2000cc54 	.word	0x2000cc54

08011a4c <global_stdio_init.part.0>:
 8011a4c:	b510      	push	{r4, lr}
 8011a4e:	4b0b      	ldr	r3, [pc, #44]	@ (8011a7c <global_stdio_init.part.0+0x30>)
 8011a50:	4c0b      	ldr	r4, [pc, #44]	@ (8011a80 <global_stdio_init.part.0+0x34>)
 8011a52:	4a0c      	ldr	r2, [pc, #48]	@ (8011a84 <global_stdio_init.part.0+0x38>)
 8011a54:	601a      	str	r2, [r3, #0]
 8011a56:	4620      	mov	r0, r4
 8011a58:	2200      	movs	r2, #0
 8011a5a:	2104      	movs	r1, #4
 8011a5c:	f7ff ff94 	bl	8011988 <std>
 8011a60:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011a64:	2201      	movs	r2, #1
 8011a66:	2109      	movs	r1, #9
 8011a68:	f7ff ff8e 	bl	8011988 <std>
 8011a6c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011a70:	2202      	movs	r2, #2
 8011a72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a76:	2112      	movs	r1, #18
 8011a78:	f7ff bf86 	b.w	8011988 <std>
 8011a7c:	2000ccbc 	.word	0x2000ccbc
 8011a80:	2000cb84 	.word	0x2000cb84
 8011a84:	080119f5 	.word	0x080119f5

08011a88 <__sfp_lock_acquire>:
 8011a88:	4801      	ldr	r0, [pc, #4]	@ (8011a90 <__sfp_lock_acquire+0x8>)
 8011a8a:	f000 b9ac 	b.w	8011de6 <__retarget_lock_acquire_recursive>
 8011a8e:	bf00      	nop
 8011a90:	2000ccc5 	.word	0x2000ccc5

08011a94 <__sfp_lock_release>:
 8011a94:	4801      	ldr	r0, [pc, #4]	@ (8011a9c <__sfp_lock_release+0x8>)
 8011a96:	f000 b9a7 	b.w	8011de8 <__retarget_lock_release_recursive>
 8011a9a:	bf00      	nop
 8011a9c:	2000ccc5 	.word	0x2000ccc5

08011aa0 <__sinit>:
 8011aa0:	b510      	push	{r4, lr}
 8011aa2:	4604      	mov	r4, r0
 8011aa4:	f7ff fff0 	bl	8011a88 <__sfp_lock_acquire>
 8011aa8:	6a23      	ldr	r3, [r4, #32]
 8011aaa:	b11b      	cbz	r3, 8011ab4 <__sinit+0x14>
 8011aac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ab0:	f7ff bff0 	b.w	8011a94 <__sfp_lock_release>
 8011ab4:	4b04      	ldr	r3, [pc, #16]	@ (8011ac8 <__sinit+0x28>)
 8011ab6:	6223      	str	r3, [r4, #32]
 8011ab8:	4b04      	ldr	r3, [pc, #16]	@ (8011acc <__sinit+0x2c>)
 8011aba:	681b      	ldr	r3, [r3, #0]
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d1f5      	bne.n	8011aac <__sinit+0xc>
 8011ac0:	f7ff ffc4 	bl	8011a4c <global_stdio_init.part.0>
 8011ac4:	e7f2      	b.n	8011aac <__sinit+0xc>
 8011ac6:	bf00      	nop
 8011ac8:	08011a0d 	.word	0x08011a0d
 8011acc:	2000ccbc 	.word	0x2000ccbc

08011ad0 <_fwalk_sglue>:
 8011ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ad4:	4607      	mov	r7, r0
 8011ad6:	4688      	mov	r8, r1
 8011ad8:	4614      	mov	r4, r2
 8011ada:	2600      	movs	r6, #0
 8011adc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011ae0:	f1b9 0901 	subs.w	r9, r9, #1
 8011ae4:	d505      	bpl.n	8011af2 <_fwalk_sglue+0x22>
 8011ae6:	6824      	ldr	r4, [r4, #0]
 8011ae8:	2c00      	cmp	r4, #0
 8011aea:	d1f7      	bne.n	8011adc <_fwalk_sglue+0xc>
 8011aec:	4630      	mov	r0, r6
 8011aee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011af2:	89ab      	ldrh	r3, [r5, #12]
 8011af4:	2b01      	cmp	r3, #1
 8011af6:	d907      	bls.n	8011b08 <_fwalk_sglue+0x38>
 8011af8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011afc:	3301      	adds	r3, #1
 8011afe:	d003      	beq.n	8011b08 <_fwalk_sglue+0x38>
 8011b00:	4629      	mov	r1, r5
 8011b02:	4638      	mov	r0, r7
 8011b04:	47c0      	blx	r8
 8011b06:	4306      	orrs	r6, r0
 8011b08:	3568      	adds	r5, #104	@ 0x68
 8011b0a:	e7e9      	b.n	8011ae0 <_fwalk_sglue+0x10>

08011b0c <siprintf>:
 8011b0c:	b40e      	push	{r1, r2, r3}
 8011b0e:	b500      	push	{lr}
 8011b10:	b09c      	sub	sp, #112	@ 0x70
 8011b12:	ab1d      	add	r3, sp, #116	@ 0x74
 8011b14:	9002      	str	r0, [sp, #8]
 8011b16:	9006      	str	r0, [sp, #24]
 8011b18:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011b1c:	4809      	ldr	r0, [pc, #36]	@ (8011b44 <siprintf+0x38>)
 8011b1e:	9107      	str	r1, [sp, #28]
 8011b20:	9104      	str	r1, [sp, #16]
 8011b22:	4909      	ldr	r1, [pc, #36]	@ (8011b48 <siprintf+0x3c>)
 8011b24:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b28:	9105      	str	r1, [sp, #20]
 8011b2a:	6800      	ldr	r0, [r0, #0]
 8011b2c:	9301      	str	r3, [sp, #4]
 8011b2e:	a902      	add	r1, sp, #8
 8011b30:	f001 fcbc 	bl	80134ac <_svfiprintf_r>
 8011b34:	9b02      	ldr	r3, [sp, #8]
 8011b36:	2200      	movs	r2, #0
 8011b38:	701a      	strb	r2, [r3, #0]
 8011b3a:	b01c      	add	sp, #112	@ 0x70
 8011b3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011b40:	b003      	add	sp, #12
 8011b42:	4770      	bx	lr
 8011b44:	200002b4 	.word	0x200002b4
 8011b48:	ffff0208 	.word	0xffff0208

08011b4c <__sread>:
 8011b4c:	b510      	push	{r4, lr}
 8011b4e:	460c      	mov	r4, r1
 8011b50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b54:	f000 f8f8 	bl	8011d48 <_read_r>
 8011b58:	2800      	cmp	r0, #0
 8011b5a:	bfab      	itete	ge
 8011b5c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011b5e:	89a3      	ldrhlt	r3, [r4, #12]
 8011b60:	181b      	addge	r3, r3, r0
 8011b62:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011b66:	bfac      	ite	ge
 8011b68:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011b6a:	81a3      	strhlt	r3, [r4, #12]
 8011b6c:	bd10      	pop	{r4, pc}

08011b6e <__swrite>:
 8011b6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b72:	461f      	mov	r7, r3
 8011b74:	898b      	ldrh	r3, [r1, #12]
 8011b76:	05db      	lsls	r3, r3, #23
 8011b78:	4605      	mov	r5, r0
 8011b7a:	460c      	mov	r4, r1
 8011b7c:	4616      	mov	r6, r2
 8011b7e:	d505      	bpl.n	8011b8c <__swrite+0x1e>
 8011b80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b84:	2302      	movs	r3, #2
 8011b86:	2200      	movs	r2, #0
 8011b88:	f000 f8cc 	bl	8011d24 <_lseek_r>
 8011b8c:	89a3      	ldrh	r3, [r4, #12]
 8011b8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011b92:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011b96:	81a3      	strh	r3, [r4, #12]
 8011b98:	4632      	mov	r2, r6
 8011b9a:	463b      	mov	r3, r7
 8011b9c:	4628      	mov	r0, r5
 8011b9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011ba2:	f000 b8e3 	b.w	8011d6c <_write_r>

08011ba6 <__sseek>:
 8011ba6:	b510      	push	{r4, lr}
 8011ba8:	460c      	mov	r4, r1
 8011baa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011bae:	f000 f8b9 	bl	8011d24 <_lseek_r>
 8011bb2:	1c43      	adds	r3, r0, #1
 8011bb4:	89a3      	ldrh	r3, [r4, #12]
 8011bb6:	bf15      	itete	ne
 8011bb8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011bba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011bbe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011bc2:	81a3      	strheq	r3, [r4, #12]
 8011bc4:	bf18      	it	ne
 8011bc6:	81a3      	strhne	r3, [r4, #12]
 8011bc8:	bd10      	pop	{r4, pc}

08011bca <__sclose>:
 8011bca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011bce:	f000 b843 	b.w	8011c58 <_close_r>

08011bd2 <memset>:
 8011bd2:	4402      	add	r2, r0
 8011bd4:	4603      	mov	r3, r0
 8011bd6:	4293      	cmp	r3, r2
 8011bd8:	d100      	bne.n	8011bdc <memset+0xa>
 8011bda:	4770      	bx	lr
 8011bdc:	f803 1b01 	strb.w	r1, [r3], #1
 8011be0:	e7f9      	b.n	8011bd6 <memset+0x4>

08011be2 <strchr>:
 8011be2:	b2c9      	uxtb	r1, r1
 8011be4:	4603      	mov	r3, r0
 8011be6:	4618      	mov	r0, r3
 8011be8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011bec:	b112      	cbz	r2, 8011bf4 <strchr+0x12>
 8011bee:	428a      	cmp	r2, r1
 8011bf0:	d1f9      	bne.n	8011be6 <strchr+0x4>
 8011bf2:	4770      	bx	lr
 8011bf4:	2900      	cmp	r1, #0
 8011bf6:	bf18      	it	ne
 8011bf8:	2000      	movne	r0, #0
 8011bfa:	4770      	bx	lr

08011bfc <strncpy>:
 8011bfc:	b510      	push	{r4, lr}
 8011bfe:	3901      	subs	r1, #1
 8011c00:	4603      	mov	r3, r0
 8011c02:	b132      	cbz	r2, 8011c12 <strncpy+0x16>
 8011c04:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011c08:	f803 4b01 	strb.w	r4, [r3], #1
 8011c0c:	3a01      	subs	r2, #1
 8011c0e:	2c00      	cmp	r4, #0
 8011c10:	d1f7      	bne.n	8011c02 <strncpy+0x6>
 8011c12:	441a      	add	r2, r3
 8011c14:	2100      	movs	r1, #0
 8011c16:	4293      	cmp	r3, r2
 8011c18:	d100      	bne.n	8011c1c <strncpy+0x20>
 8011c1a:	bd10      	pop	{r4, pc}
 8011c1c:	f803 1b01 	strb.w	r1, [r3], #1
 8011c20:	e7f9      	b.n	8011c16 <strncpy+0x1a>

08011c22 <strstr>:
 8011c22:	780a      	ldrb	r2, [r1, #0]
 8011c24:	b570      	push	{r4, r5, r6, lr}
 8011c26:	b96a      	cbnz	r2, 8011c44 <strstr+0x22>
 8011c28:	bd70      	pop	{r4, r5, r6, pc}
 8011c2a:	429a      	cmp	r2, r3
 8011c2c:	d109      	bne.n	8011c42 <strstr+0x20>
 8011c2e:	460c      	mov	r4, r1
 8011c30:	4605      	mov	r5, r0
 8011c32:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d0f6      	beq.n	8011c28 <strstr+0x6>
 8011c3a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8011c3e:	429e      	cmp	r6, r3
 8011c40:	d0f7      	beq.n	8011c32 <strstr+0x10>
 8011c42:	3001      	adds	r0, #1
 8011c44:	7803      	ldrb	r3, [r0, #0]
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d1ef      	bne.n	8011c2a <strstr+0x8>
 8011c4a:	4618      	mov	r0, r3
 8011c4c:	e7ec      	b.n	8011c28 <strstr+0x6>
	...

08011c50 <_localeconv_r>:
 8011c50:	4800      	ldr	r0, [pc, #0]	@ (8011c54 <_localeconv_r+0x4>)
 8011c52:	4770      	bx	lr
 8011c54:	200003f4 	.word	0x200003f4

08011c58 <_close_r>:
 8011c58:	b538      	push	{r3, r4, r5, lr}
 8011c5a:	4d06      	ldr	r5, [pc, #24]	@ (8011c74 <_close_r+0x1c>)
 8011c5c:	2300      	movs	r3, #0
 8011c5e:	4604      	mov	r4, r0
 8011c60:	4608      	mov	r0, r1
 8011c62:	602b      	str	r3, [r5, #0]
 8011c64:	f7f6 fe7e 	bl	8008964 <_close>
 8011c68:	1c43      	adds	r3, r0, #1
 8011c6a:	d102      	bne.n	8011c72 <_close_r+0x1a>
 8011c6c:	682b      	ldr	r3, [r5, #0]
 8011c6e:	b103      	cbz	r3, 8011c72 <_close_r+0x1a>
 8011c70:	6023      	str	r3, [r4, #0]
 8011c72:	bd38      	pop	{r3, r4, r5, pc}
 8011c74:	2000ccc0 	.word	0x2000ccc0

08011c78 <_reclaim_reent>:
 8011c78:	4b29      	ldr	r3, [pc, #164]	@ (8011d20 <_reclaim_reent+0xa8>)
 8011c7a:	681b      	ldr	r3, [r3, #0]
 8011c7c:	4283      	cmp	r3, r0
 8011c7e:	b570      	push	{r4, r5, r6, lr}
 8011c80:	4604      	mov	r4, r0
 8011c82:	d04b      	beq.n	8011d1c <_reclaim_reent+0xa4>
 8011c84:	69c3      	ldr	r3, [r0, #28]
 8011c86:	b1ab      	cbz	r3, 8011cb4 <_reclaim_reent+0x3c>
 8011c88:	68db      	ldr	r3, [r3, #12]
 8011c8a:	b16b      	cbz	r3, 8011ca8 <_reclaim_reent+0x30>
 8011c8c:	2500      	movs	r5, #0
 8011c8e:	69e3      	ldr	r3, [r4, #28]
 8011c90:	68db      	ldr	r3, [r3, #12]
 8011c92:	5959      	ldr	r1, [r3, r5]
 8011c94:	2900      	cmp	r1, #0
 8011c96:	d13b      	bne.n	8011d10 <_reclaim_reent+0x98>
 8011c98:	3504      	adds	r5, #4
 8011c9a:	2d80      	cmp	r5, #128	@ 0x80
 8011c9c:	d1f7      	bne.n	8011c8e <_reclaim_reent+0x16>
 8011c9e:	69e3      	ldr	r3, [r4, #28]
 8011ca0:	4620      	mov	r0, r4
 8011ca2:	68d9      	ldr	r1, [r3, #12]
 8011ca4:	f000 ff24 	bl	8012af0 <_free_r>
 8011ca8:	69e3      	ldr	r3, [r4, #28]
 8011caa:	6819      	ldr	r1, [r3, #0]
 8011cac:	b111      	cbz	r1, 8011cb4 <_reclaim_reent+0x3c>
 8011cae:	4620      	mov	r0, r4
 8011cb0:	f000 ff1e 	bl	8012af0 <_free_r>
 8011cb4:	6961      	ldr	r1, [r4, #20]
 8011cb6:	b111      	cbz	r1, 8011cbe <_reclaim_reent+0x46>
 8011cb8:	4620      	mov	r0, r4
 8011cba:	f000 ff19 	bl	8012af0 <_free_r>
 8011cbe:	69e1      	ldr	r1, [r4, #28]
 8011cc0:	b111      	cbz	r1, 8011cc8 <_reclaim_reent+0x50>
 8011cc2:	4620      	mov	r0, r4
 8011cc4:	f000 ff14 	bl	8012af0 <_free_r>
 8011cc8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8011cca:	b111      	cbz	r1, 8011cd2 <_reclaim_reent+0x5a>
 8011ccc:	4620      	mov	r0, r4
 8011cce:	f000 ff0f 	bl	8012af0 <_free_r>
 8011cd2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011cd4:	b111      	cbz	r1, 8011cdc <_reclaim_reent+0x64>
 8011cd6:	4620      	mov	r0, r4
 8011cd8:	f000 ff0a 	bl	8012af0 <_free_r>
 8011cdc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8011cde:	b111      	cbz	r1, 8011ce6 <_reclaim_reent+0x6e>
 8011ce0:	4620      	mov	r0, r4
 8011ce2:	f000 ff05 	bl	8012af0 <_free_r>
 8011ce6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8011ce8:	b111      	cbz	r1, 8011cf0 <_reclaim_reent+0x78>
 8011cea:	4620      	mov	r0, r4
 8011cec:	f000 ff00 	bl	8012af0 <_free_r>
 8011cf0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8011cf2:	b111      	cbz	r1, 8011cfa <_reclaim_reent+0x82>
 8011cf4:	4620      	mov	r0, r4
 8011cf6:	f000 fefb 	bl	8012af0 <_free_r>
 8011cfa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8011cfc:	b111      	cbz	r1, 8011d04 <_reclaim_reent+0x8c>
 8011cfe:	4620      	mov	r0, r4
 8011d00:	f000 fef6 	bl	8012af0 <_free_r>
 8011d04:	6a23      	ldr	r3, [r4, #32]
 8011d06:	b14b      	cbz	r3, 8011d1c <_reclaim_reent+0xa4>
 8011d08:	4620      	mov	r0, r4
 8011d0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011d0e:	4718      	bx	r3
 8011d10:	680e      	ldr	r6, [r1, #0]
 8011d12:	4620      	mov	r0, r4
 8011d14:	f000 feec 	bl	8012af0 <_free_r>
 8011d18:	4631      	mov	r1, r6
 8011d1a:	e7bb      	b.n	8011c94 <_reclaim_reent+0x1c>
 8011d1c:	bd70      	pop	{r4, r5, r6, pc}
 8011d1e:	bf00      	nop
 8011d20:	200002b4 	.word	0x200002b4

08011d24 <_lseek_r>:
 8011d24:	b538      	push	{r3, r4, r5, lr}
 8011d26:	4d07      	ldr	r5, [pc, #28]	@ (8011d44 <_lseek_r+0x20>)
 8011d28:	4604      	mov	r4, r0
 8011d2a:	4608      	mov	r0, r1
 8011d2c:	4611      	mov	r1, r2
 8011d2e:	2200      	movs	r2, #0
 8011d30:	602a      	str	r2, [r5, #0]
 8011d32:	461a      	mov	r2, r3
 8011d34:	f7f6 fe3d 	bl	80089b2 <_lseek>
 8011d38:	1c43      	adds	r3, r0, #1
 8011d3a:	d102      	bne.n	8011d42 <_lseek_r+0x1e>
 8011d3c:	682b      	ldr	r3, [r5, #0]
 8011d3e:	b103      	cbz	r3, 8011d42 <_lseek_r+0x1e>
 8011d40:	6023      	str	r3, [r4, #0]
 8011d42:	bd38      	pop	{r3, r4, r5, pc}
 8011d44:	2000ccc0 	.word	0x2000ccc0

08011d48 <_read_r>:
 8011d48:	b538      	push	{r3, r4, r5, lr}
 8011d4a:	4d07      	ldr	r5, [pc, #28]	@ (8011d68 <_read_r+0x20>)
 8011d4c:	4604      	mov	r4, r0
 8011d4e:	4608      	mov	r0, r1
 8011d50:	4611      	mov	r1, r2
 8011d52:	2200      	movs	r2, #0
 8011d54:	602a      	str	r2, [r5, #0]
 8011d56:	461a      	mov	r2, r3
 8011d58:	f7f6 fdcb 	bl	80088f2 <_read>
 8011d5c:	1c43      	adds	r3, r0, #1
 8011d5e:	d102      	bne.n	8011d66 <_read_r+0x1e>
 8011d60:	682b      	ldr	r3, [r5, #0]
 8011d62:	b103      	cbz	r3, 8011d66 <_read_r+0x1e>
 8011d64:	6023      	str	r3, [r4, #0]
 8011d66:	bd38      	pop	{r3, r4, r5, pc}
 8011d68:	2000ccc0 	.word	0x2000ccc0

08011d6c <_write_r>:
 8011d6c:	b538      	push	{r3, r4, r5, lr}
 8011d6e:	4d07      	ldr	r5, [pc, #28]	@ (8011d8c <_write_r+0x20>)
 8011d70:	4604      	mov	r4, r0
 8011d72:	4608      	mov	r0, r1
 8011d74:	4611      	mov	r1, r2
 8011d76:	2200      	movs	r2, #0
 8011d78:	602a      	str	r2, [r5, #0]
 8011d7a:	461a      	mov	r2, r3
 8011d7c:	f7f6 fdd6 	bl	800892c <_write>
 8011d80:	1c43      	adds	r3, r0, #1
 8011d82:	d102      	bne.n	8011d8a <_write_r+0x1e>
 8011d84:	682b      	ldr	r3, [r5, #0]
 8011d86:	b103      	cbz	r3, 8011d8a <_write_r+0x1e>
 8011d88:	6023      	str	r3, [r4, #0]
 8011d8a:	bd38      	pop	{r3, r4, r5, pc}
 8011d8c:	2000ccc0 	.word	0x2000ccc0

08011d90 <__errno>:
 8011d90:	4b01      	ldr	r3, [pc, #4]	@ (8011d98 <__errno+0x8>)
 8011d92:	6818      	ldr	r0, [r3, #0]
 8011d94:	4770      	bx	lr
 8011d96:	bf00      	nop
 8011d98:	200002b4 	.word	0x200002b4

08011d9c <__libc_init_array>:
 8011d9c:	b570      	push	{r4, r5, r6, lr}
 8011d9e:	4d0d      	ldr	r5, [pc, #52]	@ (8011dd4 <__libc_init_array+0x38>)
 8011da0:	4c0d      	ldr	r4, [pc, #52]	@ (8011dd8 <__libc_init_array+0x3c>)
 8011da2:	1b64      	subs	r4, r4, r5
 8011da4:	10a4      	asrs	r4, r4, #2
 8011da6:	2600      	movs	r6, #0
 8011da8:	42a6      	cmp	r6, r4
 8011daa:	d109      	bne.n	8011dc0 <__libc_init_array+0x24>
 8011dac:	4d0b      	ldr	r5, [pc, #44]	@ (8011ddc <__libc_init_array+0x40>)
 8011dae:	4c0c      	ldr	r4, [pc, #48]	@ (8011de0 <__libc_init_array+0x44>)
 8011db0:	f002 f86e 	bl	8013e90 <_init>
 8011db4:	1b64      	subs	r4, r4, r5
 8011db6:	10a4      	asrs	r4, r4, #2
 8011db8:	2600      	movs	r6, #0
 8011dba:	42a6      	cmp	r6, r4
 8011dbc:	d105      	bne.n	8011dca <__libc_init_array+0x2e>
 8011dbe:	bd70      	pop	{r4, r5, r6, pc}
 8011dc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8011dc4:	4798      	blx	r3
 8011dc6:	3601      	adds	r6, #1
 8011dc8:	e7ee      	b.n	8011da8 <__libc_init_array+0xc>
 8011dca:	f855 3b04 	ldr.w	r3, [r5], #4
 8011dce:	4798      	blx	r3
 8011dd0:	3601      	adds	r6, #1
 8011dd2:	e7f2      	b.n	8011dba <__libc_init_array+0x1e>
 8011dd4:	08015b28 	.word	0x08015b28
 8011dd8:	08015b28 	.word	0x08015b28
 8011ddc:	08015b28 	.word	0x08015b28
 8011de0:	08015b3c 	.word	0x08015b3c

08011de4 <__retarget_lock_init_recursive>:
 8011de4:	4770      	bx	lr

08011de6 <__retarget_lock_acquire_recursive>:
 8011de6:	4770      	bx	lr

08011de8 <__retarget_lock_release_recursive>:
 8011de8:	4770      	bx	lr

08011dea <strcpy>:
 8011dea:	4603      	mov	r3, r0
 8011dec:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011df0:	f803 2b01 	strb.w	r2, [r3], #1
 8011df4:	2a00      	cmp	r2, #0
 8011df6:	d1f9      	bne.n	8011dec <strcpy+0x2>
 8011df8:	4770      	bx	lr

08011dfa <memcpy>:
 8011dfa:	440a      	add	r2, r1
 8011dfc:	4291      	cmp	r1, r2
 8011dfe:	f100 33ff 	add.w	r3, r0, #4294967295
 8011e02:	d100      	bne.n	8011e06 <memcpy+0xc>
 8011e04:	4770      	bx	lr
 8011e06:	b510      	push	{r4, lr}
 8011e08:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011e0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011e10:	4291      	cmp	r1, r2
 8011e12:	d1f9      	bne.n	8011e08 <memcpy+0xe>
 8011e14:	bd10      	pop	{r4, pc}
	...

08011e18 <__assert_func>:
 8011e18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011e1a:	4614      	mov	r4, r2
 8011e1c:	461a      	mov	r2, r3
 8011e1e:	4b09      	ldr	r3, [pc, #36]	@ (8011e44 <__assert_func+0x2c>)
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	4605      	mov	r5, r0
 8011e24:	68d8      	ldr	r0, [r3, #12]
 8011e26:	b954      	cbnz	r4, 8011e3e <__assert_func+0x26>
 8011e28:	4b07      	ldr	r3, [pc, #28]	@ (8011e48 <__assert_func+0x30>)
 8011e2a:	461c      	mov	r4, r3
 8011e2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011e30:	9100      	str	r1, [sp, #0]
 8011e32:	462b      	mov	r3, r5
 8011e34:	4905      	ldr	r1, [pc, #20]	@ (8011e4c <__assert_func+0x34>)
 8011e36:	f001 fce1 	bl	80137fc <fiprintf>
 8011e3a:	f001 fdaf 	bl	801399c <abort>
 8011e3e:	4b04      	ldr	r3, [pc, #16]	@ (8011e50 <__assert_func+0x38>)
 8011e40:	e7f4      	b.n	8011e2c <__assert_func+0x14>
 8011e42:	bf00      	nop
 8011e44:	200002b4 	.word	0x200002b4
 8011e48:	08015144 	.word	0x08015144
 8011e4c:	08015116 	.word	0x08015116
 8011e50:	08015109 	.word	0x08015109

08011e54 <quorem>:
 8011e54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e58:	6903      	ldr	r3, [r0, #16]
 8011e5a:	690c      	ldr	r4, [r1, #16]
 8011e5c:	42a3      	cmp	r3, r4
 8011e5e:	4607      	mov	r7, r0
 8011e60:	db7e      	blt.n	8011f60 <quorem+0x10c>
 8011e62:	3c01      	subs	r4, #1
 8011e64:	f101 0814 	add.w	r8, r1, #20
 8011e68:	00a3      	lsls	r3, r4, #2
 8011e6a:	f100 0514 	add.w	r5, r0, #20
 8011e6e:	9300      	str	r3, [sp, #0]
 8011e70:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011e74:	9301      	str	r3, [sp, #4]
 8011e76:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011e7a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011e7e:	3301      	adds	r3, #1
 8011e80:	429a      	cmp	r2, r3
 8011e82:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011e86:	fbb2 f6f3 	udiv	r6, r2, r3
 8011e8a:	d32e      	bcc.n	8011eea <quorem+0x96>
 8011e8c:	f04f 0a00 	mov.w	sl, #0
 8011e90:	46c4      	mov	ip, r8
 8011e92:	46ae      	mov	lr, r5
 8011e94:	46d3      	mov	fp, sl
 8011e96:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011e9a:	b298      	uxth	r0, r3
 8011e9c:	fb06 a000 	mla	r0, r6, r0, sl
 8011ea0:	0c02      	lsrs	r2, r0, #16
 8011ea2:	0c1b      	lsrs	r3, r3, #16
 8011ea4:	fb06 2303 	mla	r3, r6, r3, r2
 8011ea8:	f8de 2000 	ldr.w	r2, [lr]
 8011eac:	b280      	uxth	r0, r0
 8011eae:	b292      	uxth	r2, r2
 8011eb0:	1a12      	subs	r2, r2, r0
 8011eb2:	445a      	add	r2, fp
 8011eb4:	f8de 0000 	ldr.w	r0, [lr]
 8011eb8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011ebc:	b29b      	uxth	r3, r3
 8011ebe:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8011ec2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8011ec6:	b292      	uxth	r2, r2
 8011ec8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8011ecc:	45e1      	cmp	r9, ip
 8011ece:	f84e 2b04 	str.w	r2, [lr], #4
 8011ed2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8011ed6:	d2de      	bcs.n	8011e96 <quorem+0x42>
 8011ed8:	9b00      	ldr	r3, [sp, #0]
 8011eda:	58eb      	ldr	r3, [r5, r3]
 8011edc:	b92b      	cbnz	r3, 8011eea <quorem+0x96>
 8011ede:	9b01      	ldr	r3, [sp, #4]
 8011ee0:	3b04      	subs	r3, #4
 8011ee2:	429d      	cmp	r5, r3
 8011ee4:	461a      	mov	r2, r3
 8011ee6:	d32f      	bcc.n	8011f48 <quorem+0xf4>
 8011ee8:	613c      	str	r4, [r7, #16]
 8011eea:	4638      	mov	r0, r7
 8011eec:	f001 f97a 	bl	80131e4 <__mcmp>
 8011ef0:	2800      	cmp	r0, #0
 8011ef2:	db25      	blt.n	8011f40 <quorem+0xec>
 8011ef4:	4629      	mov	r1, r5
 8011ef6:	2000      	movs	r0, #0
 8011ef8:	f858 2b04 	ldr.w	r2, [r8], #4
 8011efc:	f8d1 c000 	ldr.w	ip, [r1]
 8011f00:	fa1f fe82 	uxth.w	lr, r2
 8011f04:	fa1f f38c 	uxth.w	r3, ip
 8011f08:	eba3 030e 	sub.w	r3, r3, lr
 8011f0c:	4403      	add	r3, r0
 8011f0e:	0c12      	lsrs	r2, r2, #16
 8011f10:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8011f14:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8011f18:	b29b      	uxth	r3, r3
 8011f1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011f1e:	45c1      	cmp	r9, r8
 8011f20:	f841 3b04 	str.w	r3, [r1], #4
 8011f24:	ea4f 4022 	mov.w	r0, r2, asr #16
 8011f28:	d2e6      	bcs.n	8011ef8 <quorem+0xa4>
 8011f2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011f2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011f32:	b922      	cbnz	r2, 8011f3e <quorem+0xea>
 8011f34:	3b04      	subs	r3, #4
 8011f36:	429d      	cmp	r5, r3
 8011f38:	461a      	mov	r2, r3
 8011f3a:	d30b      	bcc.n	8011f54 <quorem+0x100>
 8011f3c:	613c      	str	r4, [r7, #16]
 8011f3e:	3601      	adds	r6, #1
 8011f40:	4630      	mov	r0, r6
 8011f42:	b003      	add	sp, #12
 8011f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f48:	6812      	ldr	r2, [r2, #0]
 8011f4a:	3b04      	subs	r3, #4
 8011f4c:	2a00      	cmp	r2, #0
 8011f4e:	d1cb      	bne.n	8011ee8 <quorem+0x94>
 8011f50:	3c01      	subs	r4, #1
 8011f52:	e7c6      	b.n	8011ee2 <quorem+0x8e>
 8011f54:	6812      	ldr	r2, [r2, #0]
 8011f56:	3b04      	subs	r3, #4
 8011f58:	2a00      	cmp	r2, #0
 8011f5a:	d1ef      	bne.n	8011f3c <quorem+0xe8>
 8011f5c:	3c01      	subs	r4, #1
 8011f5e:	e7ea      	b.n	8011f36 <quorem+0xe2>
 8011f60:	2000      	movs	r0, #0
 8011f62:	e7ee      	b.n	8011f42 <quorem+0xee>
 8011f64:	0000      	movs	r0, r0
	...

08011f68 <_dtoa_r>:
 8011f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f6c:	69c7      	ldr	r7, [r0, #28]
 8011f6e:	b099      	sub	sp, #100	@ 0x64
 8011f70:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011f74:	ec55 4b10 	vmov	r4, r5, d0
 8011f78:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8011f7a:	9109      	str	r1, [sp, #36]	@ 0x24
 8011f7c:	4683      	mov	fp, r0
 8011f7e:	920e      	str	r2, [sp, #56]	@ 0x38
 8011f80:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011f82:	b97f      	cbnz	r7, 8011fa4 <_dtoa_r+0x3c>
 8011f84:	2010      	movs	r0, #16
 8011f86:	f000 fdfd 	bl	8012b84 <malloc>
 8011f8a:	4602      	mov	r2, r0
 8011f8c:	f8cb 001c 	str.w	r0, [fp, #28]
 8011f90:	b920      	cbnz	r0, 8011f9c <_dtoa_r+0x34>
 8011f92:	4ba7      	ldr	r3, [pc, #668]	@ (8012230 <_dtoa_r+0x2c8>)
 8011f94:	21ef      	movs	r1, #239	@ 0xef
 8011f96:	48a7      	ldr	r0, [pc, #668]	@ (8012234 <_dtoa_r+0x2cc>)
 8011f98:	f7ff ff3e 	bl	8011e18 <__assert_func>
 8011f9c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8011fa0:	6007      	str	r7, [r0, #0]
 8011fa2:	60c7      	str	r7, [r0, #12]
 8011fa4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011fa8:	6819      	ldr	r1, [r3, #0]
 8011faa:	b159      	cbz	r1, 8011fc4 <_dtoa_r+0x5c>
 8011fac:	685a      	ldr	r2, [r3, #4]
 8011fae:	604a      	str	r2, [r1, #4]
 8011fb0:	2301      	movs	r3, #1
 8011fb2:	4093      	lsls	r3, r2
 8011fb4:	608b      	str	r3, [r1, #8]
 8011fb6:	4658      	mov	r0, fp
 8011fb8:	f000 feda 	bl	8012d70 <_Bfree>
 8011fbc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011fc0:	2200      	movs	r2, #0
 8011fc2:	601a      	str	r2, [r3, #0]
 8011fc4:	1e2b      	subs	r3, r5, #0
 8011fc6:	bfb9      	ittee	lt
 8011fc8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8011fcc:	9303      	strlt	r3, [sp, #12]
 8011fce:	2300      	movge	r3, #0
 8011fd0:	6033      	strge	r3, [r6, #0]
 8011fd2:	9f03      	ldr	r7, [sp, #12]
 8011fd4:	4b98      	ldr	r3, [pc, #608]	@ (8012238 <_dtoa_r+0x2d0>)
 8011fd6:	bfbc      	itt	lt
 8011fd8:	2201      	movlt	r2, #1
 8011fda:	6032      	strlt	r2, [r6, #0]
 8011fdc:	43bb      	bics	r3, r7
 8011fde:	d112      	bne.n	8012006 <_dtoa_r+0x9e>
 8011fe0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8011fe2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8011fe6:	6013      	str	r3, [r2, #0]
 8011fe8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011fec:	4323      	orrs	r3, r4
 8011fee:	f000 854d 	beq.w	8012a8c <_dtoa_r+0xb24>
 8011ff2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011ff4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801224c <_dtoa_r+0x2e4>
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	f000 854f 	beq.w	8012a9c <_dtoa_r+0xb34>
 8011ffe:	f10a 0303 	add.w	r3, sl, #3
 8012002:	f000 bd49 	b.w	8012a98 <_dtoa_r+0xb30>
 8012006:	ed9d 7b02 	vldr	d7, [sp, #8]
 801200a:	2200      	movs	r2, #0
 801200c:	ec51 0b17 	vmov	r0, r1, d7
 8012010:	2300      	movs	r3, #0
 8012012:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8012016:	f7ee fd57 	bl	8000ac8 <__aeabi_dcmpeq>
 801201a:	4680      	mov	r8, r0
 801201c:	b158      	cbz	r0, 8012036 <_dtoa_r+0xce>
 801201e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012020:	2301      	movs	r3, #1
 8012022:	6013      	str	r3, [r2, #0]
 8012024:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012026:	b113      	cbz	r3, 801202e <_dtoa_r+0xc6>
 8012028:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801202a:	4b84      	ldr	r3, [pc, #528]	@ (801223c <_dtoa_r+0x2d4>)
 801202c:	6013      	str	r3, [r2, #0]
 801202e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8012250 <_dtoa_r+0x2e8>
 8012032:	f000 bd33 	b.w	8012a9c <_dtoa_r+0xb34>
 8012036:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801203a:	aa16      	add	r2, sp, #88	@ 0x58
 801203c:	a917      	add	r1, sp, #92	@ 0x5c
 801203e:	4658      	mov	r0, fp
 8012040:	f001 f980 	bl	8013344 <__d2b>
 8012044:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8012048:	4681      	mov	r9, r0
 801204a:	2e00      	cmp	r6, #0
 801204c:	d077      	beq.n	801213e <_dtoa_r+0x1d6>
 801204e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012050:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8012054:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012058:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801205c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8012060:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8012064:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8012068:	4619      	mov	r1, r3
 801206a:	2200      	movs	r2, #0
 801206c:	4b74      	ldr	r3, [pc, #464]	@ (8012240 <_dtoa_r+0x2d8>)
 801206e:	f7ee f90b 	bl	8000288 <__aeabi_dsub>
 8012072:	a369      	add	r3, pc, #420	@ (adr r3, 8012218 <_dtoa_r+0x2b0>)
 8012074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012078:	f7ee fabe 	bl	80005f8 <__aeabi_dmul>
 801207c:	a368      	add	r3, pc, #416	@ (adr r3, 8012220 <_dtoa_r+0x2b8>)
 801207e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012082:	f7ee f903 	bl	800028c <__adddf3>
 8012086:	4604      	mov	r4, r0
 8012088:	4630      	mov	r0, r6
 801208a:	460d      	mov	r5, r1
 801208c:	f7ee fa4a 	bl	8000524 <__aeabi_i2d>
 8012090:	a365      	add	r3, pc, #404	@ (adr r3, 8012228 <_dtoa_r+0x2c0>)
 8012092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012096:	f7ee faaf 	bl	80005f8 <__aeabi_dmul>
 801209a:	4602      	mov	r2, r0
 801209c:	460b      	mov	r3, r1
 801209e:	4620      	mov	r0, r4
 80120a0:	4629      	mov	r1, r5
 80120a2:	f7ee f8f3 	bl	800028c <__adddf3>
 80120a6:	4604      	mov	r4, r0
 80120a8:	460d      	mov	r5, r1
 80120aa:	f7ee fd55 	bl	8000b58 <__aeabi_d2iz>
 80120ae:	2200      	movs	r2, #0
 80120b0:	4607      	mov	r7, r0
 80120b2:	2300      	movs	r3, #0
 80120b4:	4620      	mov	r0, r4
 80120b6:	4629      	mov	r1, r5
 80120b8:	f7ee fd10 	bl	8000adc <__aeabi_dcmplt>
 80120bc:	b140      	cbz	r0, 80120d0 <_dtoa_r+0x168>
 80120be:	4638      	mov	r0, r7
 80120c0:	f7ee fa30 	bl	8000524 <__aeabi_i2d>
 80120c4:	4622      	mov	r2, r4
 80120c6:	462b      	mov	r3, r5
 80120c8:	f7ee fcfe 	bl	8000ac8 <__aeabi_dcmpeq>
 80120cc:	b900      	cbnz	r0, 80120d0 <_dtoa_r+0x168>
 80120ce:	3f01      	subs	r7, #1
 80120d0:	2f16      	cmp	r7, #22
 80120d2:	d851      	bhi.n	8012178 <_dtoa_r+0x210>
 80120d4:	4b5b      	ldr	r3, [pc, #364]	@ (8012244 <_dtoa_r+0x2dc>)
 80120d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80120da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80120e2:	f7ee fcfb 	bl	8000adc <__aeabi_dcmplt>
 80120e6:	2800      	cmp	r0, #0
 80120e8:	d048      	beq.n	801217c <_dtoa_r+0x214>
 80120ea:	3f01      	subs	r7, #1
 80120ec:	2300      	movs	r3, #0
 80120ee:	9312      	str	r3, [sp, #72]	@ 0x48
 80120f0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80120f2:	1b9b      	subs	r3, r3, r6
 80120f4:	1e5a      	subs	r2, r3, #1
 80120f6:	bf44      	itt	mi
 80120f8:	f1c3 0801 	rsbmi	r8, r3, #1
 80120fc:	2300      	movmi	r3, #0
 80120fe:	9208      	str	r2, [sp, #32]
 8012100:	bf54      	ite	pl
 8012102:	f04f 0800 	movpl.w	r8, #0
 8012106:	9308      	strmi	r3, [sp, #32]
 8012108:	2f00      	cmp	r7, #0
 801210a:	db39      	blt.n	8012180 <_dtoa_r+0x218>
 801210c:	9b08      	ldr	r3, [sp, #32]
 801210e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8012110:	443b      	add	r3, r7
 8012112:	9308      	str	r3, [sp, #32]
 8012114:	2300      	movs	r3, #0
 8012116:	930a      	str	r3, [sp, #40]	@ 0x28
 8012118:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801211a:	2b09      	cmp	r3, #9
 801211c:	d864      	bhi.n	80121e8 <_dtoa_r+0x280>
 801211e:	2b05      	cmp	r3, #5
 8012120:	bfc4      	itt	gt
 8012122:	3b04      	subgt	r3, #4
 8012124:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8012126:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012128:	f1a3 0302 	sub.w	r3, r3, #2
 801212c:	bfcc      	ite	gt
 801212e:	2400      	movgt	r4, #0
 8012130:	2401      	movle	r4, #1
 8012132:	2b03      	cmp	r3, #3
 8012134:	d863      	bhi.n	80121fe <_dtoa_r+0x296>
 8012136:	e8df f003 	tbb	[pc, r3]
 801213a:	372a      	.short	0x372a
 801213c:	5535      	.short	0x5535
 801213e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8012142:	441e      	add	r6, r3
 8012144:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8012148:	2b20      	cmp	r3, #32
 801214a:	bfc1      	itttt	gt
 801214c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8012150:	409f      	lslgt	r7, r3
 8012152:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8012156:	fa24 f303 	lsrgt.w	r3, r4, r3
 801215a:	bfd6      	itet	le
 801215c:	f1c3 0320 	rsble	r3, r3, #32
 8012160:	ea47 0003 	orrgt.w	r0, r7, r3
 8012164:	fa04 f003 	lslle.w	r0, r4, r3
 8012168:	f7ee f9cc 	bl	8000504 <__aeabi_ui2d>
 801216c:	2201      	movs	r2, #1
 801216e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8012172:	3e01      	subs	r6, #1
 8012174:	9214      	str	r2, [sp, #80]	@ 0x50
 8012176:	e777      	b.n	8012068 <_dtoa_r+0x100>
 8012178:	2301      	movs	r3, #1
 801217a:	e7b8      	b.n	80120ee <_dtoa_r+0x186>
 801217c:	9012      	str	r0, [sp, #72]	@ 0x48
 801217e:	e7b7      	b.n	80120f0 <_dtoa_r+0x188>
 8012180:	427b      	negs	r3, r7
 8012182:	930a      	str	r3, [sp, #40]	@ 0x28
 8012184:	2300      	movs	r3, #0
 8012186:	eba8 0807 	sub.w	r8, r8, r7
 801218a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801218c:	e7c4      	b.n	8012118 <_dtoa_r+0x1b0>
 801218e:	2300      	movs	r3, #0
 8012190:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012192:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012194:	2b00      	cmp	r3, #0
 8012196:	dc35      	bgt.n	8012204 <_dtoa_r+0x29c>
 8012198:	2301      	movs	r3, #1
 801219a:	9300      	str	r3, [sp, #0]
 801219c:	9307      	str	r3, [sp, #28]
 801219e:	461a      	mov	r2, r3
 80121a0:	920e      	str	r2, [sp, #56]	@ 0x38
 80121a2:	e00b      	b.n	80121bc <_dtoa_r+0x254>
 80121a4:	2301      	movs	r3, #1
 80121a6:	e7f3      	b.n	8012190 <_dtoa_r+0x228>
 80121a8:	2300      	movs	r3, #0
 80121aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80121ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80121ae:	18fb      	adds	r3, r7, r3
 80121b0:	9300      	str	r3, [sp, #0]
 80121b2:	3301      	adds	r3, #1
 80121b4:	2b01      	cmp	r3, #1
 80121b6:	9307      	str	r3, [sp, #28]
 80121b8:	bfb8      	it	lt
 80121ba:	2301      	movlt	r3, #1
 80121bc:	f8db 001c 	ldr.w	r0, [fp, #28]
 80121c0:	2100      	movs	r1, #0
 80121c2:	2204      	movs	r2, #4
 80121c4:	f102 0514 	add.w	r5, r2, #20
 80121c8:	429d      	cmp	r5, r3
 80121ca:	d91f      	bls.n	801220c <_dtoa_r+0x2a4>
 80121cc:	6041      	str	r1, [r0, #4]
 80121ce:	4658      	mov	r0, fp
 80121d0:	f000 fd8e 	bl	8012cf0 <_Balloc>
 80121d4:	4682      	mov	sl, r0
 80121d6:	2800      	cmp	r0, #0
 80121d8:	d13c      	bne.n	8012254 <_dtoa_r+0x2ec>
 80121da:	4b1b      	ldr	r3, [pc, #108]	@ (8012248 <_dtoa_r+0x2e0>)
 80121dc:	4602      	mov	r2, r0
 80121de:	f240 11af 	movw	r1, #431	@ 0x1af
 80121e2:	e6d8      	b.n	8011f96 <_dtoa_r+0x2e>
 80121e4:	2301      	movs	r3, #1
 80121e6:	e7e0      	b.n	80121aa <_dtoa_r+0x242>
 80121e8:	2401      	movs	r4, #1
 80121ea:	2300      	movs	r3, #0
 80121ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80121ee:	940b      	str	r4, [sp, #44]	@ 0x2c
 80121f0:	f04f 33ff 	mov.w	r3, #4294967295
 80121f4:	9300      	str	r3, [sp, #0]
 80121f6:	9307      	str	r3, [sp, #28]
 80121f8:	2200      	movs	r2, #0
 80121fa:	2312      	movs	r3, #18
 80121fc:	e7d0      	b.n	80121a0 <_dtoa_r+0x238>
 80121fe:	2301      	movs	r3, #1
 8012200:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012202:	e7f5      	b.n	80121f0 <_dtoa_r+0x288>
 8012204:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012206:	9300      	str	r3, [sp, #0]
 8012208:	9307      	str	r3, [sp, #28]
 801220a:	e7d7      	b.n	80121bc <_dtoa_r+0x254>
 801220c:	3101      	adds	r1, #1
 801220e:	0052      	lsls	r2, r2, #1
 8012210:	e7d8      	b.n	80121c4 <_dtoa_r+0x25c>
 8012212:	bf00      	nop
 8012214:	f3af 8000 	nop.w
 8012218:	636f4361 	.word	0x636f4361
 801221c:	3fd287a7 	.word	0x3fd287a7
 8012220:	8b60c8b3 	.word	0x8b60c8b3
 8012224:	3fc68a28 	.word	0x3fc68a28
 8012228:	509f79fb 	.word	0x509f79fb
 801222c:	3fd34413 	.word	0x3fd34413
 8012230:	08015152 	.word	0x08015152
 8012234:	08015169 	.word	0x08015169
 8012238:	7ff00000 	.word	0x7ff00000
 801223c:	080150e6 	.word	0x080150e6
 8012240:	3ff80000 	.word	0x3ff80000
 8012244:	08015260 	.word	0x08015260
 8012248:	080151c1 	.word	0x080151c1
 801224c:	0801514e 	.word	0x0801514e
 8012250:	080150e5 	.word	0x080150e5
 8012254:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012258:	6018      	str	r0, [r3, #0]
 801225a:	9b07      	ldr	r3, [sp, #28]
 801225c:	2b0e      	cmp	r3, #14
 801225e:	f200 80a4 	bhi.w	80123aa <_dtoa_r+0x442>
 8012262:	2c00      	cmp	r4, #0
 8012264:	f000 80a1 	beq.w	80123aa <_dtoa_r+0x442>
 8012268:	2f00      	cmp	r7, #0
 801226a:	dd33      	ble.n	80122d4 <_dtoa_r+0x36c>
 801226c:	4bad      	ldr	r3, [pc, #692]	@ (8012524 <_dtoa_r+0x5bc>)
 801226e:	f007 020f 	and.w	r2, r7, #15
 8012272:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012276:	ed93 7b00 	vldr	d7, [r3]
 801227a:	05f8      	lsls	r0, r7, #23
 801227c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012280:	ea4f 1427 	mov.w	r4, r7, asr #4
 8012284:	d516      	bpl.n	80122b4 <_dtoa_r+0x34c>
 8012286:	4ba8      	ldr	r3, [pc, #672]	@ (8012528 <_dtoa_r+0x5c0>)
 8012288:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801228c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012290:	f7ee fadc 	bl	800084c <__aeabi_ddiv>
 8012294:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012298:	f004 040f 	and.w	r4, r4, #15
 801229c:	2603      	movs	r6, #3
 801229e:	4da2      	ldr	r5, [pc, #648]	@ (8012528 <_dtoa_r+0x5c0>)
 80122a0:	b954      	cbnz	r4, 80122b8 <_dtoa_r+0x350>
 80122a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80122a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80122aa:	f7ee facf 	bl	800084c <__aeabi_ddiv>
 80122ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80122b2:	e028      	b.n	8012306 <_dtoa_r+0x39e>
 80122b4:	2602      	movs	r6, #2
 80122b6:	e7f2      	b.n	801229e <_dtoa_r+0x336>
 80122b8:	07e1      	lsls	r1, r4, #31
 80122ba:	d508      	bpl.n	80122ce <_dtoa_r+0x366>
 80122bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80122c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80122c4:	f7ee f998 	bl	80005f8 <__aeabi_dmul>
 80122c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80122cc:	3601      	adds	r6, #1
 80122ce:	1064      	asrs	r4, r4, #1
 80122d0:	3508      	adds	r5, #8
 80122d2:	e7e5      	b.n	80122a0 <_dtoa_r+0x338>
 80122d4:	f000 80d2 	beq.w	801247c <_dtoa_r+0x514>
 80122d8:	427c      	negs	r4, r7
 80122da:	4b92      	ldr	r3, [pc, #584]	@ (8012524 <_dtoa_r+0x5bc>)
 80122dc:	4d92      	ldr	r5, [pc, #584]	@ (8012528 <_dtoa_r+0x5c0>)
 80122de:	f004 020f 	and.w	r2, r4, #15
 80122e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80122e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80122ee:	f7ee f983 	bl	80005f8 <__aeabi_dmul>
 80122f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80122f6:	1124      	asrs	r4, r4, #4
 80122f8:	2300      	movs	r3, #0
 80122fa:	2602      	movs	r6, #2
 80122fc:	2c00      	cmp	r4, #0
 80122fe:	f040 80b2 	bne.w	8012466 <_dtoa_r+0x4fe>
 8012302:	2b00      	cmp	r3, #0
 8012304:	d1d3      	bne.n	80122ae <_dtoa_r+0x346>
 8012306:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012308:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801230c:	2b00      	cmp	r3, #0
 801230e:	f000 80b7 	beq.w	8012480 <_dtoa_r+0x518>
 8012312:	4b86      	ldr	r3, [pc, #536]	@ (801252c <_dtoa_r+0x5c4>)
 8012314:	2200      	movs	r2, #0
 8012316:	4620      	mov	r0, r4
 8012318:	4629      	mov	r1, r5
 801231a:	f7ee fbdf 	bl	8000adc <__aeabi_dcmplt>
 801231e:	2800      	cmp	r0, #0
 8012320:	f000 80ae 	beq.w	8012480 <_dtoa_r+0x518>
 8012324:	9b07      	ldr	r3, [sp, #28]
 8012326:	2b00      	cmp	r3, #0
 8012328:	f000 80aa 	beq.w	8012480 <_dtoa_r+0x518>
 801232c:	9b00      	ldr	r3, [sp, #0]
 801232e:	2b00      	cmp	r3, #0
 8012330:	dd37      	ble.n	80123a2 <_dtoa_r+0x43a>
 8012332:	1e7b      	subs	r3, r7, #1
 8012334:	9304      	str	r3, [sp, #16]
 8012336:	4620      	mov	r0, r4
 8012338:	4b7d      	ldr	r3, [pc, #500]	@ (8012530 <_dtoa_r+0x5c8>)
 801233a:	2200      	movs	r2, #0
 801233c:	4629      	mov	r1, r5
 801233e:	f7ee f95b 	bl	80005f8 <__aeabi_dmul>
 8012342:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012346:	9c00      	ldr	r4, [sp, #0]
 8012348:	3601      	adds	r6, #1
 801234a:	4630      	mov	r0, r6
 801234c:	f7ee f8ea 	bl	8000524 <__aeabi_i2d>
 8012350:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012354:	f7ee f950 	bl	80005f8 <__aeabi_dmul>
 8012358:	4b76      	ldr	r3, [pc, #472]	@ (8012534 <_dtoa_r+0x5cc>)
 801235a:	2200      	movs	r2, #0
 801235c:	f7ed ff96 	bl	800028c <__adddf3>
 8012360:	4605      	mov	r5, r0
 8012362:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8012366:	2c00      	cmp	r4, #0
 8012368:	f040 808d 	bne.w	8012486 <_dtoa_r+0x51e>
 801236c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012370:	4b71      	ldr	r3, [pc, #452]	@ (8012538 <_dtoa_r+0x5d0>)
 8012372:	2200      	movs	r2, #0
 8012374:	f7ed ff88 	bl	8000288 <__aeabi_dsub>
 8012378:	4602      	mov	r2, r0
 801237a:	460b      	mov	r3, r1
 801237c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012380:	462a      	mov	r2, r5
 8012382:	4633      	mov	r3, r6
 8012384:	f7ee fbc8 	bl	8000b18 <__aeabi_dcmpgt>
 8012388:	2800      	cmp	r0, #0
 801238a:	f040 828b 	bne.w	80128a4 <_dtoa_r+0x93c>
 801238e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012392:	462a      	mov	r2, r5
 8012394:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8012398:	f7ee fba0 	bl	8000adc <__aeabi_dcmplt>
 801239c:	2800      	cmp	r0, #0
 801239e:	f040 8128 	bne.w	80125f2 <_dtoa_r+0x68a>
 80123a2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80123a6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80123aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	f2c0 815a 	blt.w	8012666 <_dtoa_r+0x6fe>
 80123b2:	2f0e      	cmp	r7, #14
 80123b4:	f300 8157 	bgt.w	8012666 <_dtoa_r+0x6fe>
 80123b8:	4b5a      	ldr	r3, [pc, #360]	@ (8012524 <_dtoa_r+0x5bc>)
 80123ba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80123be:	ed93 7b00 	vldr	d7, [r3]
 80123c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	ed8d 7b00 	vstr	d7, [sp]
 80123ca:	da03      	bge.n	80123d4 <_dtoa_r+0x46c>
 80123cc:	9b07      	ldr	r3, [sp, #28]
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	f340 8101 	ble.w	80125d6 <_dtoa_r+0x66e>
 80123d4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80123d8:	4656      	mov	r6, sl
 80123da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80123de:	4620      	mov	r0, r4
 80123e0:	4629      	mov	r1, r5
 80123e2:	f7ee fa33 	bl	800084c <__aeabi_ddiv>
 80123e6:	f7ee fbb7 	bl	8000b58 <__aeabi_d2iz>
 80123ea:	4680      	mov	r8, r0
 80123ec:	f7ee f89a 	bl	8000524 <__aeabi_i2d>
 80123f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80123f4:	f7ee f900 	bl	80005f8 <__aeabi_dmul>
 80123f8:	4602      	mov	r2, r0
 80123fa:	460b      	mov	r3, r1
 80123fc:	4620      	mov	r0, r4
 80123fe:	4629      	mov	r1, r5
 8012400:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8012404:	f7ed ff40 	bl	8000288 <__aeabi_dsub>
 8012408:	f806 4b01 	strb.w	r4, [r6], #1
 801240c:	9d07      	ldr	r5, [sp, #28]
 801240e:	eba6 040a 	sub.w	r4, r6, sl
 8012412:	42a5      	cmp	r5, r4
 8012414:	4602      	mov	r2, r0
 8012416:	460b      	mov	r3, r1
 8012418:	f040 8117 	bne.w	801264a <_dtoa_r+0x6e2>
 801241c:	f7ed ff36 	bl	800028c <__adddf3>
 8012420:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012424:	4604      	mov	r4, r0
 8012426:	460d      	mov	r5, r1
 8012428:	f7ee fb76 	bl	8000b18 <__aeabi_dcmpgt>
 801242c:	2800      	cmp	r0, #0
 801242e:	f040 80f9 	bne.w	8012624 <_dtoa_r+0x6bc>
 8012432:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012436:	4620      	mov	r0, r4
 8012438:	4629      	mov	r1, r5
 801243a:	f7ee fb45 	bl	8000ac8 <__aeabi_dcmpeq>
 801243e:	b118      	cbz	r0, 8012448 <_dtoa_r+0x4e0>
 8012440:	f018 0f01 	tst.w	r8, #1
 8012444:	f040 80ee 	bne.w	8012624 <_dtoa_r+0x6bc>
 8012448:	4649      	mov	r1, r9
 801244a:	4658      	mov	r0, fp
 801244c:	f000 fc90 	bl	8012d70 <_Bfree>
 8012450:	2300      	movs	r3, #0
 8012452:	7033      	strb	r3, [r6, #0]
 8012454:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012456:	3701      	adds	r7, #1
 8012458:	601f      	str	r7, [r3, #0]
 801245a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801245c:	2b00      	cmp	r3, #0
 801245e:	f000 831d 	beq.w	8012a9c <_dtoa_r+0xb34>
 8012462:	601e      	str	r6, [r3, #0]
 8012464:	e31a      	b.n	8012a9c <_dtoa_r+0xb34>
 8012466:	07e2      	lsls	r2, r4, #31
 8012468:	d505      	bpl.n	8012476 <_dtoa_r+0x50e>
 801246a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801246e:	f7ee f8c3 	bl	80005f8 <__aeabi_dmul>
 8012472:	3601      	adds	r6, #1
 8012474:	2301      	movs	r3, #1
 8012476:	1064      	asrs	r4, r4, #1
 8012478:	3508      	adds	r5, #8
 801247a:	e73f      	b.n	80122fc <_dtoa_r+0x394>
 801247c:	2602      	movs	r6, #2
 801247e:	e742      	b.n	8012306 <_dtoa_r+0x39e>
 8012480:	9c07      	ldr	r4, [sp, #28]
 8012482:	9704      	str	r7, [sp, #16]
 8012484:	e761      	b.n	801234a <_dtoa_r+0x3e2>
 8012486:	4b27      	ldr	r3, [pc, #156]	@ (8012524 <_dtoa_r+0x5bc>)
 8012488:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801248a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801248e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012492:	4454      	add	r4, sl
 8012494:	2900      	cmp	r1, #0
 8012496:	d053      	beq.n	8012540 <_dtoa_r+0x5d8>
 8012498:	4928      	ldr	r1, [pc, #160]	@ (801253c <_dtoa_r+0x5d4>)
 801249a:	2000      	movs	r0, #0
 801249c:	f7ee f9d6 	bl	800084c <__aeabi_ddiv>
 80124a0:	4633      	mov	r3, r6
 80124a2:	462a      	mov	r2, r5
 80124a4:	f7ed fef0 	bl	8000288 <__aeabi_dsub>
 80124a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80124ac:	4656      	mov	r6, sl
 80124ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80124b2:	f7ee fb51 	bl	8000b58 <__aeabi_d2iz>
 80124b6:	4605      	mov	r5, r0
 80124b8:	f7ee f834 	bl	8000524 <__aeabi_i2d>
 80124bc:	4602      	mov	r2, r0
 80124be:	460b      	mov	r3, r1
 80124c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80124c4:	f7ed fee0 	bl	8000288 <__aeabi_dsub>
 80124c8:	3530      	adds	r5, #48	@ 0x30
 80124ca:	4602      	mov	r2, r0
 80124cc:	460b      	mov	r3, r1
 80124ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80124d2:	f806 5b01 	strb.w	r5, [r6], #1
 80124d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80124da:	f7ee faff 	bl	8000adc <__aeabi_dcmplt>
 80124de:	2800      	cmp	r0, #0
 80124e0:	d171      	bne.n	80125c6 <_dtoa_r+0x65e>
 80124e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80124e6:	4911      	ldr	r1, [pc, #68]	@ (801252c <_dtoa_r+0x5c4>)
 80124e8:	2000      	movs	r0, #0
 80124ea:	f7ed fecd 	bl	8000288 <__aeabi_dsub>
 80124ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80124f2:	f7ee faf3 	bl	8000adc <__aeabi_dcmplt>
 80124f6:	2800      	cmp	r0, #0
 80124f8:	f040 8095 	bne.w	8012626 <_dtoa_r+0x6be>
 80124fc:	42a6      	cmp	r6, r4
 80124fe:	f43f af50 	beq.w	80123a2 <_dtoa_r+0x43a>
 8012502:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8012506:	4b0a      	ldr	r3, [pc, #40]	@ (8012530 <_dtoa_r+0x5c8>)
 8012508:	2200      	movs	r2, #0
 801250a:	f7ee f875 	bl	80005f8 <__aeabi_dmul>
 801250e:	4b08      	ldr	r3, [pc, #32]	@ (8012530 <_dtoa_r+0x5c8>)
 8012510:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8012514:	2200      	movs	r2, #0
 8012516:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801251a:	f7ee f86d 	bl	80005f8 <__aeabi_dmul>
 801251e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012522:	e7c4      	b.n	80124ae <_dtoa_r+0x546>
 8012524:	08015260 	.word	0x08015260
 8012528:	08015238 	.word	0x08015238
 801252c:	3ff00000 	.word	0x3ff00000
 8012530:	40240000 	.word	0x40240000
 8012534:	401c0000 	.word	0x401c0000
 8012538:	40140000 	.word	0x40140000
 801253c:	3fe00000 	.word	0x3fe00000
 8012540:	4631      	mov	r1, r6
 8012542:	4628      	mov	r0, r5
 8012544:	f7ee f858 	bl	80005f8 <__aeabi_dmul>
 8012548:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801254c:	9415      	str	r4, [sp, #84]	@ 0x54
 801254e:	4656      	mov	r6, sl
 8012550:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012554:	f7ee fb00 	bl	8000b58 <__aeabi_d2iz>
 8012558:	4605      	mov	r5, r0
 801255a:	f7ed ffe3 	bl	8000524 <__aeabi_i2d>
 801255e:	4602      	mov	r2, r0
 8012560:	460b      	mov	r3, r1
 8012562:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012566:	f7ed fe8f 	bl	8000288 <__aeabi_dsub>
 801256a:	3530      	adds	r5, #48	@ 0x30
 801256c:	f806 5b01 	strb.w	r5, [r6], #1
 8012570:	4602      	mov	r2, r0
 8012572:	460b      	mov	r3, r1
 8012574:	42a6      	cmp	r6, r4
 8012576:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801257a:	f04f 0200 	mov.w	r2, #0
 801257e:	d124      	bne.n	80125ca <_dtoa_r+0x662>
 8012580:	4bac      	ldr	r3, [pc, #688]	@ (8012834 <_dtoa_r+0x8cc>)
 8012582:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8012586:	f7ed fe81 	bl	800028c <__adddf3>
 801258a:	4602      	mov	r2, r0
 801258c:	460b      	mov	r3, r1
 801258e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012592:	f7ee fac1 	bl	8000b18 <__aeabi_dcmpgt>
 8012596:	2800      	cmp	r0, #0
 8012598:	d145      	bne.n	8012626 <_dtoa_r+0x6be>
 801259a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801259e:	49a5      	ldr	r1, [pc, #660]	@ (8012834 <_dtoa_r+0x8cc>)
 80125a0:	2000      	movs	r0, #0
 80125a2:	f7ed fe71 	bl	8000288 <__aeabi_dsub>
 80125a6:	4602      	mov	r2, r0
 80125a8:	460b      	mov	r3, r1
 80125aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80125ae:	f7ee fa95 	bl	8000adc <__aeabi_dcmplt>
 80125b2:	2800      	cmp	r0, #0
 80125b4:	f43f aef5 	beq.w	80123a2 <_dtoa_r+0x43a>
 80125b8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80125ba:	1e73      	subs	r3, r6, #1
 80125bc:	9315      	str	r3, [sp, #84]	@ 0x54
 80125be:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80125c2:	2b30      	cmp	r3, #48	@ 0x30
 80125c4:	d0f8      	beq.n	80125b8 <_dtoa_r+0x650>
 80125c6:	9f04      	ldr	r7, [sp, #16]
 80125c8:	e73e      	b.n	8012448 <_dtoa_r+0x4e0>
 80125ca:	4b9b      	ldr	r3, [pc, #620]	@ (8012838 <_dtoa_r+0x8d0>)
 80125cc:	f7ee f814 	bl	80005f8 <__aeabi_dmul>
 80125d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80125d4:	e7bc      	b.n	8012550 <_dtoa_r+0x5e8>
 80125d6:	d10c      	bne.n	80125f2 <_dtoa_r+0x68a>
 80125d8:	4b98      	ldr	r3, [pc, #608]	@ (801283c <_dtoa_r+0x8d4>)
 80125da:	2200      	movs	r2, #0
 80125dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80125e0:	f7ee f80a 	bl	80005f8 <__aeabi_dmul>
 80125e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80125e8:	f7ee fa8c 	bl	8000b04 <__aeabi_dcmpge>
 80125ec:	2800      	cmp	r0, #0
 80125ee:	f000 8157 	beq.w	80128a0 <_dtoa_r+0x938>
 80125f2:	2400      	movs	r4, #0
 80125f4:	4625      	mov	r5, r4
 80125f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80125f8:	43db      	mvns	r3, r3
 80125fa:	9304      	str	r3, [sp, #16]
 80125fc:	4656      	mov	r6, sl
 80125fe:	2700      	movs	r7, #0
 8012600:	4621      	mov	r1, r4
 8012602:	4658      	mov	r0, fp
 8012604:	f000 fbb4 	bl	8012d70 <_Bfree>
 8012608:	2d00      	cmp	r5, #0
 801260a:	d0dc      	beq.n	80125c6 <_dtoa_r+0x65e>
 801260c:	b12f      	cbz	r7, 801261a <_dtoa_r+0x6b2>
 801260e:	42af      	cmp	r7, r5
 8012610:	d003      	beq.n	801261a <_dtoa_r+0x6b2>
 8012612:	4639      	mov	r1, r7
 8012614:	4658      	mov	r0, fp
 8012616:	f000 fbab 	bl	8012d70 <_Bfree>
 801261a:	4629      	mov	r1, r5
 801261c:	4658      	mov	r0, fp
 801261e:	f000 fba7 	bl	8012d70 <_Bfree>
 8012622:	e7d0      	b.n	80125c6 <_dtoa_r+0x65e>
 8012624:	9704      	str	r7, [sp, #16]
 8012626:	4633      	mov	r3, r6
 8012628:	461e      	mov	r6, r3
 801262a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801262e:	2a39      	cmp	r2, #57	@ 0x39
 8012630:	d107      	bne.n	8012642 <_dtoa_r+0x6da>
 8012632:	459a      	cmp	sl, r3
 8012634:	d1f8      	bne.n	8012628 <_dtoa_r+0x6c0>
 8012636:	9a04      	ldr	r2, [sp, #16]
 8012638:	3201      	adds	r2, #1
 801263a:	9204      	str	r2, [sp, #16]
 801263c:	2230      	movs	r2, #48	@ 0x30
 801263e:	f88a 2000 	strb.w	r2, [sl]
 8012642:	781a      	ldrb	r2, [r3, #0]
 8012644:	3201      	adds	r2, #1
 8012646:	701a      	strb	r2, [r3, #0]
 8012648:	e7bd      	b.n	80125c6 <_dtoa_r+0x65e>
 801264a:	4b7b      	ldr	r3, [pc, #492]	@ (8012838 <_dtoa_r+0x8d0>)
 801264c:	2200      	movs	r2, #0
 801264e:	f7ed ffd3 	bl	80005f8 <__aeabi_dmul>
 8012652:	2200      	movs	r2, #0
 8012654:	2300      	movs	r3, #0
 8012656:	4604      	mov	r4, r0
 8012658:	460d      	mov	r5, r1
 801265a:	f7ee fa35 	bl	8000ac8 <__aeabi_dcmpeq>
 801265e:	2800      	cmp	r0, #0
 8012660:	f43f aebb 	beq.w	80123da <_dtoa_r+0x472>
 8012664:	e6f0      	b.n	8012448 <_dtoa_r+0x4e0>
 8012666:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012668:	2a00      	cmp	r2, #0
 801266a:	f000 80db 	beq.w	8012824 <_dtoa_r+0x8bc>
 801266e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012670:	2a01      	cmp	r2, #1
 8012672:	f300 80bf 	bgt.w	80127f4 <_dtoa_r+0x88c>
 8012676:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8012678:	2a00      	cmp	r2, #0
 801267a:	f000 80b7 	beq.w	80127ec <_dtoa_r+0x884>
 801267e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8012682:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8012684:	4646      	mov	r6, r8
 8012686:	9a08      	ldr	r2, [sp, #32]
 8012688:	2101      	movs	r1, #1
 801268a:	441a      	add	r2, r3
 801268c:	4658      	mov	r0, fp
 801268e:	4498      	add	r8, r3
 8012690:	9208      	str	r2, [sp, #32]
 8012692:	f000 fc21 	bl	8012ed8 <__i2b>
 8012696:	4605      	mov	r5, r0
 8012698:	b15e      	cbz	r6, 80126b2 <_dtoa_r+0x74a>
 801269a:	9b08      	ldr	r3, [sp, #32]
 801269c:	2b00      	cmp	r3, #0
 801269e:	dd08      	ble.n	80126b2 <_dtoa_r+0x74a>
 80126a0:	42b3      	cmp	r3, r6
 80126a2:	9a08      	ldr	r2, [sp, #32]
 80126a4:	bfa8      	it	ge
 80126a6:	4633      	movge	r3, r6
 80126a8:	eba8 0803 	sub.w	r8, r8, r3
 80126ac:	1af6      	subs	r6, r6, r3
 80126ae:	1ad3      	subs	r3, r2, r3
 80126b0:	9308      	str	r3, [sp, #32]
 80126b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80126b4:	b1f3      	cbz	r3, 80126f4 <_dtoa_r+0x78c>
 80126b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	f000 80b7 	beq.w	801282c <_dtoa_r+0x8c4>
 80126be:	b18c      	cbz	r4, 80126e4 <_dtoa_r+0x77c>
 80126c0:	4629      	mov	r1, r5
 80126c2:	4622      	mov	r2, r4
 80126c4:	4658      	mov	r0, fp
 80126c6:	f000 fcc7 	bl	8013058 <__pow5mult>
 80126ca:	464a      	mov	r2, r9
 80126cc:	4601      	mov	r1, r0
 80126ce:	4605      	mov	r5, r0
 80126d0:	4658      	mov	r0, fp
 80126d2:	f000 fc17 	bl	8012f04 <__multiply>
 80126d6:	4649      	mov	r1, r9
 80126d8:	9004      	str	r0, [sp, #16]
 80126da:	4658      	mov	r0, fp
 80126dc:	f000 fb48 	bl	8012d70 <_Bfree>
 80126e0:	9b04      	ldr	r3, [sp, #16]
 80126e2:	4699      	mov	r9, r3
 80126e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80126e6:	1b1a      	subs	r2, r3, r4
 80126e8:	d004      	beq.n	80126f4 <_dtoa_r+0x78c>
 80126ea:	4649      	mov	r1, r9
 80126ec:	4658      	mov	r0, fp
 80126ee:	f000 fcb3 	bl	8013058 <__pow5mult>
 80126f2:	4681      	mov	r9, r0
 80126f4:	2101      	movs	r1, #1
 80126f6:	4658      	mov	r0, fp
 80126f8:	f000 fbee 	bl	8012ed8 <__i2b>
 80126fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80126fe:	4604      	mov	r4, r0
 8012700:	2b00      	cmp	r3, #0
 8012702:	f000 81cf 	beq.w	8012aa4 <_dtoa_r+0xb3c>
 8012706:	461a      	mov	r2, r3
 8012708:	4601      	mov	r1, r0
 801270a:	4658      	mov	r0, fp
 801270c:	f000 fca4 	bl	8013058 <__pow5mult>
 8012710:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012712:	2b01      	cmp	r3, #1
 8012714:	4604      	mov	r4, r0
 8012716:	f300 8095 	bgt.w	8012844 <_dtoa_r+0x8dc>
 801271a:	9b02      	ldr	r3, [sp, #8]
 801271c:	2b00      	cmp	r3, #0
 801271e:	f040 8087 	bne.w	8012830 <_dtoa_r+0x8c8>
 8012722:	9b03      	ldr	r3, [sp, #12]
 8012724:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012728:	2b00      	cmp	r3, #0
 801272a:	f040 8089 	bne.w	8012840 <_dtoa_r+0x8d8>
 801272e:	9b03      	ldr	r3, [sp, #12]
 8012730:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012734:	0d1b      	lsrs	r3, r3, #20
 8012736:	051b      	lsls	r3, r3, #20
 8012738:	b12b      	cbz	r3, 8012746 <_dtoa_r+0x7de>
 801273a:	9b08      	ldr	r3, [sp, #32]
 801273c:	3301      	adds	r3, #1
 801273e:	9308      	str	r3, [sp, #32]
 8012740:	f108 0801 	add.w	r8, r8, #1
 8012744:	2301      	movs	r3, #1
 8012746:	930a      	str	r3, [sp, #40]	@ 0x28
 8012748:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801274a:	2b00      	cmp	r3, #0
 801274c:	f000 81b0 	beq.w	8012ab0 <_dtoa_r+0xb48>
 8012750:	6923      	ldr	r3, [r4, #16]
 8012752:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012756:	6918      	ldr	r0, [r3, #16]
 8012758:	f000 fb72 	bl	8012e40 <__hi0bits>
 801275c:	f1c0 0020 	rsb	r0, r0, #32
 8012760:	9b08      	ldr	r3, [sp, #32]
 8012762:	4418      	add	r0, r3
 8012764:	f010 001f 	ands.w	r0, r0, #31
 8012768:	d077      	beq.n	801285a <_dtoa_r+0x8f2>
 801276a:	f1c0 0320 	rsb	r3, r0, #32
 801276e:	2b04      	cmp	r3, #4
 8012770:	dd6b      	ble.n	801284a <_dtoa_r+0x8e2>
 8012772:	9b08      	ldr	r3, [sp, #32]
 8012774:	f1c0 001c 	rsb	r0, r0, #28
 8012778:	4403      	add	r3, r0
 801277a:	4480      	add	r8, r0
 801277c:	4406      	add	r6, r0
 801277e:	9308      	str	r3, [sp, #32]
 8012780:	f1b8 0f00 	cmp.w	r8, #0
 8012784:	dd05      	ble.n	8012792 <_dtoa_r+0x82a>
 8012786:	4649      	mov	r1, r9
 8012788:	4642      	mov	r2, r8
 801278a:	4658      	mov	r0, fp
 801278c:	f000 fcbe 	bl	801310c <__lshift>
 8012790:	4681      	mov	r9, r0
 8012792:	9b08      	ldr	r3, [sp, #32]
 8012794:	2b00      	cmp	r3, #0
 8012796:	dd05      	ble.n	80127a4 <_dtoa_r+0x83c>
 8012798:	4621      	mov	r1, r4
 801279a:	461a      	mov	r2, r3
 801279c:	4658      	mov	r0, fp
 801279e:	f000 fcb5 	bl	801310c <__lshift>
 80127a2:	4604      	mov	r4, r0
 80127a4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	d059      	beq.n	801285e <_dtoa_r+0x8f6>
 80127aa:	4621      	mov	r1, r4
 80127ac:	4648      	mov	r0, r9
 80127ae:	f000 fd19 	bl	80131e4 <__mcmp>
 80127b2:	2800      	cmp	r0, #0
 80127b4:	da53      	bge.n	801285e <_dtoa_r+0x8f6>
 80127b6:	1e7b      	subs	r3, r7, #1
 80127b8:	9304      	str	r3, [sp, #16]
 80127ba:	4649      	mov	r1, r9
 80127bc:	2300      	movs	r3, #0
 80127be:	220a      	movs	r2, #10
 80127c0:	4658      	mov	r0, fp
 80127c2:	f000 faf7 	bl	8012db4 <__multadd>
 80127c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80127c8:	4681      	mov	r9, r0
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	f000 8172 	beq.w	8012ab4 <_dtoa_r+0xb4c>
 80127d0:	2300      	movs	r3, #0
 80127d2:	4629      	mov	r1, r5
 80127d4:	220a      	movs	r2, #10
 80127d6:	4658      	mov	r0, fp
 80127d8:	f000 faec 	bl	8012db4 <__multadd>
 80127dc:	9b00      	ldr	r3, [sp, #0]
 80127de:	2b00      	cmp	r3, #0
 80127e0:	4605      	mov	r5, r0
 80127e2:	dc67      	bgt.n	80128b4 <_dtoa_r+0x94c>
 80127e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80127e6:	2b02      	cmp	r3, #2
 80127e8:	dc41      	bgt.n	801286e <_dtoa_r+0x906>
 80127ea:	e063      	b.n	80128b4 <_dtoa_r+0x94c>
 80127ec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80127ee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80127f2:	e746      	b.n	8012682 <_dtoa_r+0x71a>
 80127f4:	9b07      	ldr	r3, [sp, #28]
 80127f6:	1e5c      	subs	r4, r3, #1
 80127f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80127fa:	42a3      	cmp	r3, r4
 80127fc:	bfbf      	itttt	lt
 80127fe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8012800:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8012802:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8012804:	1ae3      	sublt	r3, r4, r3
 8012806:	bfb4      	ite	lt
 8012808:	18d2      	addlt	r2, r2, r3
 801280a:	1b1c      	subge	r4, r3, r4
 801280c:	9b07      	ldr	r3, [sp, #28]
 801280e:	bfbc      	itt	lt
 8012810:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8012812:	2400      	movlt	r4, #0
 8012814:	2b00      	cmp	r3, #0
 8012816:	bfb5      	itete	lt
 8012818:	eba8 0603 	sublt.w	r6, r8, r3
 801281c:	9b07      	ldrge	r3, [sp, #28]
 801281e:	2300      	movlt	r3, #0
 8012820:	4646      	movge	r6, r8
 8012822:	e730      	b.n	8012686 <_dtoa_r+0x71e>
 8012824:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8012826:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8012828:	4646      	mov	r6, r8
 801282a:	e735      	b.n	8012698 <_dtoa_r+0x730>
 801282c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801282e:	e75c      	b.n	80126ea <_dtoa_r+0x782>
 8012830:	2300      	movs	r3, #0
 8012832:	e788      	b.n	8012746 <_dtoa_r+0x7de>
 8012834:	3fe00000 	.word	0x3fe00000
 8012838:	40240000 	.word	0x40240000
 801283c:	40140000 	.word	0x40140000
 8012840:	9b02      	ldr	r3, [sp, #8]
 8012842:	e780      	b.n	8012746 <_dtoa_r+0x7de>
 8012844:	2300      	movs	r3, #0
 8012846:	930a      	str	r3, [sp, #40]	@ 0x28
 8012848:	e782      	b.n	8012750 <_dtoa_r+0x7e8>
 801284a:	d099      	beq.n	8012780 <_dtoa_r+0x818>
 801284c:	9a08      	ldr	r2, [sp, #32]
 801284e:	331c      	adds	r3, #28
 8012850:	441a      	add	r2, r3
 8012852:	4498      	add	r8, r3
 8012854:	441e      	add	r6, r3
 8012856:	9208      	str	r2, [sp, #32]
 8012858:	e792      	b.n	8012780 <_dtoa_r+0x818>
 801285a:	4603      	mov	r3, r0
 801285c:	e7f6      	b.n	801284c <_dtoa_r+0x8e4>
 801285e:	9b07      	ldr	r3, [sp, #28]
 8012860:	9704      	str	r7, [sp, #16]
 8012862:	2b00      	cmp	r3, #0
 8012864:	dc20      	bgt.n	80128a8 <_dtoa_r+0x940>
 8012866:	9300      	str	r3, [sp, #0]
 8012868:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801286a:	2b02      	cmp	r3, #2
 801286c:	dd1e      	ble.n	80128ac <_dtoa_r+0x944>
 801286e:	9b00      	ldr	r3, [sp, #0]
 8012870:	2b00      	cmp	r3, #0
 8012872:	f47f aec0 	bne.w	80125f6 <_dtoa_r+0x68e>
 8012876:	4621      	mov	r1, r4
 8012878:	2205      	movs	r2, #5
 801287a:	4658      	mov	r0, fp
 801287c:	f000 fa9a 	bl	8012db4 <__multadd>
 8012880:	4601      	mov	r1, r0
 8012882:	4604      	mov	r4, r0
 8012884:	4648      	mov	r0, r9
 8012886:	f000 fcad 	bl	80131e4 <__mcmp>
 801288a:	2800      	cmp	r0, #0
 801288c:	f77f aeb3 	ble.w	80125f6 <_dtoa_r+0x68e>
 8012890:	4656      	mov	r6, sl
 8012892:	2331      	movs	r3, #49	@ 0x31
 8012894:	f806 3b01 	strb.w	r3, [r6], #1
 8012898:	9b04      	ldr	r3, [sp, #16]
 801289a:	3301      	adds	r3, #1
 801289c:	9304      	str	r3, [sp, #16]
 801289e:	e6ae      	b.n	80125fe <_dtoa_r+0x696>
 80128a0:	9c07      	ldr	r4, [sp, #28]
 80128a2:	9704      	str	r7, [sp, #16]
 80128a4:	4625      	mov	r5, r4
 80128a6:	e7f3      	b.n	8012890 <_dtoa_r+0x928>
 80128a8:	9b07      	ldr	r3, [sp, #28]
 80128aa:	9300      	str	r3, [sp, #0]
 80128ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	f000 8104 	beq.w	8012abc <_dtoa_r+0xb54>
 80128b4:	2e00      	cmp	r6, #0
 80128b6:	dd05      	ble.n	80128c4 <_dtoa_r+0x95c>
 80128b8:	4629      	mov	r1, r5
 80128ba:	4632      	mov	r2, r6
 80128bc:	4658      	mov	r0, fp
 80128be:	f000 fc25 	bl	801310c <__lshift>
 80128c2:	4605      	mov	r5, r0
 80128c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d05a      	beq.n	8012980 <_dtoa_r+0xa18>
 80128ca:	6869      	ldr	r1, [r5, #4]
 80128cc:	4658      	mov	r0, fp
 80128ce:	f000 fa0f 	bl	8012cf0 <_Balloc>
 80128d2:	4606      	mov	r6, r0
 80128d4:	b928      	cbnz	r0, 80128e2 <_dtoa_r+0x97a>
 80128d6:	4b84      	ldr	r3, [pc, #528]	@ (8012ae8 <_dtoa_r+0xb80>)
 80128d8:	4602      	mov	r2, r0
 80128da:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80128de:	f7ff bb5a 	b.w	8011f96 <_dtoa_r+0x2e>
 80128e2:	692a      	ldr	r2, [r5, #16]
 80128e4:	3202      	adds	r2, #2
 80128e6:	0092      	lsls	r2, r2, #2
 80128e8:	f105 010c 	add.w	r1, r5, #12
 80128ec:	300c      	adds	r0, #12
 80128ee:	f7ff fa84 	bl	8011dfa <memcpy>
 80128f2:	2201      	movs	r2, #1
 80128f4:	4631      	mov	r1, r6
 80128f6:	4658      	mov	r0, fp
 80128f8:	f000 fc08 	bl	801310c <__lshift>
 80128fc:	f10a 0301 	add.w	r3, sl, #1
 8012900:	9307      	str	r3, [sp, #28]
 8012902:	9b00      	ldr	r3, [sp, #0]
 8012904:	4453      	add	r3, sl
 8012906:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012908:	9b02      	ldr	r3, [sp, #8]
 801290a:	f003 0301 	and.w	r3, r3, #1
 801290e:	462f      	mov	r7, r5
 8012910:	930a      	str	r3, [sp, #40]	@ 0x28
 8012912:	4605      	mov	r5, r0
 8012914:	9b07      	ldr	r3, [sp, #28]
 8012916:	4621      	mov	r1, r4
 8012918:	3b01      	subs	r3, #1
 801291a:	4648      	mov	r0, r9
 801291c:	9300      	str	r3, [sp, #0]
 801291e:	f7ff fa99 	bl	8011e54 <quorem>
 8012922:	4639      	mov	r1, r7
 8012924:	9002      	str	r0, [sp, #8]
 8012926:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801292a:	4648      	mov	r0, r9
 801292c:	f000 fc5a 	bl	80131e4 <__mcmp>
 8012930:	462a      	mov	r2, r5
 8012932:	9008      	str	r0, [sp, #32]
 8012934:	4621      	mov	r1, r4
 8012936:	4658      	mov	r0, fp
 8012938:	f000 fc70 	bl	801321c <__mdiff>
 801293c:	68c2      	ldr	r2, [r0, #12]
 801293e:	4606      	mov	r6, r0
 8012940:	bb02      	cbnz	r2, 8012984 <_dtoa_r+0xa1c>
 8012942:	4601      	mov	r1, r0
 8012944:	4648      	mov	r0, r9
 8012946:	f000 fc4d 	bl	80131e4 <__mcmp>
 801294a:	4602      	mov	r2, r0
 801294c:	4631      	mov	r1, r6
 801294e:	4658      	mov	r0, fp
 8012950:	920e      	str	r2, [sp, #56]	@ 0x38
 8012952:	f000 fa0d 	bl	8012d70 <_Bfree>
 8012956:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012958:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801295a:	9e07      	ldr	r6, [sp, #28]
 801295c:	ea43 0102 	orr.w	r1, r3, r2
 8012960:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012962:	4319      	orrs	r1, r3
 8012964:	d110      	bne.n	8012988 <_dtoa_r+0xa20>
 8012966:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801296a:	d029      	beq.n	80129c0 <_dtoa_r+0xa58>
 801296c:	9b08      	ldr	r3, [sp, #32]
 801296e:	2b00      	cmp	r3, #0
 8012970:	dd02      	ble.n	8012978 <_dtoa_r+0xa10>
 8012972:	9b02      	ldr	r3, [sp, #8]
 8012974:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8012978:	9b00      	ldr	r3, [sp, #0]
 801297a:	f883 8000 	strb.w	r8, [r3]
 801297e:	e63f      	b.n	8012600 <_dtoa_r+0x698>
 8012980:	4628      	mov	r0, r5
 8012982:	e7bb      	b.n	80128fc <_dtoa_r+0x994>
 8012984:	2201      	movs	r2, #1
 8012986:	e7e1      	b.n	801294c <_dtoa_r+0x9e4>
 8012988:	9b08      	ldr	r3, [sp, #32]
 801298a:	2b00      	cmp	r3, #0
 801298c:	db04      	blt.n	8012998 <_dtoa_r+0xa30>
 801298e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012990:	430b      	orrs	r3, r1
 8012992:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012994:	430b      	orrs	r3, r1
 8012996:	d120      	bne.n	80129da <_dtoa_r+0xa72>
 8012998:	2a00      	cmp	r2, #0
 801299a:	dded      	ble.n	8012978 <_dtoa_r+0xa10>
 801299c:	4649      	mov	r1, r9
 801299e:	2201      	movs	r2, #1
 80129a0:	4658      	mov	r0, fp
 80129a2:	f000 fbb3 	bl	801310c <__lshift>
 80129a6:	4621      	mov	r1, r4
 80129a8:	4681      	mov	r9, r0
 80129aa:	f000 fc1b 	bl	80131e4 <__mcmp>
 80129ae:	2800      	cmp	r0, #0
 80129b0:	dc03      	bgt.n	80129ba <_dtoa_r+0xa52>
 80129b2:	d1e1      	bne.n	8012978 <_dtoa_r+0xa10>
 80129b4:	f018 0f01 	tst.w	r8, #1
 80129b8:	d0de      	beq.n	8012978 <_dtoa_r+0xa10>
 80129ba:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80129be:	d1d8      	bne.n	8012972 <_dtoa_r+0xa0a>
 80129c0:	9a00      	ldr	r2, [sp, #0]
 80129c2:	2339      	movs	r3, #57	@ 0x39
 80129c4:	7013      	strb	r3, [r2, #0]
 80129c6:	4633      	mov	r3, r6
 80129c8:	461e      	mov	r6, r3
 80129ca:	3b01      	subs	r3, #1
 80129cc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80129d0:	2a39      	cmp	r2, #57	@ 0x39
 80129d2:	d052      	beq.n	8012a7a <_dtoa_r+0xb12>
 80129d4:	3201      	adds	r2, #1
 80129d6:	701a      	strb	r2, [r3, #0]
 80129d8:	e612      	b.n	8012600 <_dtoa_r+0x698>
 80129da:	2a00      	cmp	r2, #0
 80129dc:	dd07      	ble.n	80129ee <_dtoa_r+0xa86>
 80129de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80129e2:	d0ed      	beq.n	80129c0 <_dtoa_r+0xa58>
 80129e4:	9a00      	ldr	r2, [sp, #0]
 80129e6:	f108 0301 	add.w	r3, r8, #1
 80129ea:	7013      	strb	r3, [r2, #0]
 80129ec:	e608      	b.n	8012600 <_dtoa_r+0x698>
 80129ee:	9b07      	ldr	r3, [sp, #28]
 80129f0:	9a07      	ldr	r2, [sp, #28]
 80129f2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80129f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80129f8:	4293      	cmp	r3, r2
 80129fa:	d028      	beq.n	8012a4e <_dtoa_r+0xae6>
 80129fc:	4649      	mov	r1, r9
 80129fe:	2300      	movs	r3, #0
 8012a00:	220a      	movs	r2, #10
 8012a02:	4658      	mov	r0, fp
 8012a04:	f000 f9d6 	bl	8012db4 <__multadd>
 8012a08:	42af      	cmp	r7, r5
 8012a0a:	4681      	mov	r9, r0
 8012a0c:	f04f 0300 	mov.w	r3, #0
 8012a10:	f04f 020a 	mov.w	r2, #10
 8012a14:	4639      	mov	r1, r7
 8012a16:	4658      	mov	r0, fp
 8012a18:	d107      	bne.n	8012a2a <_dtoa_r+0xac2>
 8012a1a:	f000 f9cb 	bl	8012db4 <__multadd>
 8012a1e:	4607      	mov	r7, r0
 8012a20:	4605      	mov	r5, r0
 8012a22:	9b07      	ldr	r3, [sp, #28]
 8012a24:	3301      	adds	r3, #1
 8012a26:	9307      	str	r3, [sp, #28]
 8012a28:	e774      	b.n	8012914 <_dtoa_r+0x9ac>
 8012a2a:	f000 f9c3 	bl	8012db4 <__multadd>
 8012a2e:	4629      	mov	r1, r5
 8012a30:	4607      	mov	r7, r0
 8012a32:	2300      	movs	r3, #0
 8012a34:	220a      	movs	r2, #10
 8012a36:	4658      	mov	r0, fp
 8012a38:	f000 f9bc 	bl	8012db4 <__multadd>
 8012a3c:	4605      	mov	r5, r0
 8012a3e:	e7f0      	b.n	8012a22 <_dtoa_r+0xaba>
 8012a40:	9b00      	ldr	r3, [sp, #0]
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	bfcc      	ite	gt
 8012a46:	461e      	movgt	r6, r3
 8012a48:	2601      	movle	r6, #1
 8012a4a:	4456      	add	r6, sl
 8012a4c:	2700      	movs	r7, #0
 8012a4e:	4649      	mov	r1, r9
 8012a50:	2201      	movs	r2, #1
 8012a52:	4658      	mov	r0, fp
 8012a54:	f000 fb5a 	bl	801310c <__lshift>
 8012a58:	4621      	mov	r1, r4
 8012a5a:	4681      	mov	r9, r0
 8012a5c:	f000 fbc2 	bl	80131e4 <__mcmp>
 8012a60:	2800      	cmp	r0, #0
 8012a62:	dcb0      	bgt.n	80129c6 <_dtoa_r+0xa5e>
 8012a64:	d102      	bne.n	8012a6c <_dtoa_r+0xb04>
 8012a66:	f018 0f01 	tst.w	r8, #1
 8012a6a:	d1ac      	bne.n	80129c6 <_dtoa_r+0xa5e>
 8012a6c:	4633      	mov	r3, r6
 8012a6e:	461e      	mov	r6, r3
 8012a70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012a74:	2a30      	cmp	r2, #48	@ 0x30
 8012a76:	d0fa      	beq.n	8012a6e <_dtoa_r+0xb06>
 8012a78:	e5c2      	b.n	8012600 <_dtoa_r+0x698>
 8012a7a:	459a      	cmp	sl, r3
 8012a7c:	d1a4      	bne.n	80129c8 <_dtoa_r+0xa60>
 8012a7e:	9b04      	ldr	r3, [sp, #16]
 8012a80:	3301      	adds	r3, #1
 8012a82:	9304      	str	r3, [sp, #16]
 8012a84:	2331      	movs	r3, #49	@ 0x31
 8012a86:	f88a 3000 	strb.w	r3, [sl]
 8012a8a:	e5b9      	b.n	8012600 <_dtoa_r+0x698>
 8012a8c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012a8e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8012aec <_dtoa_r+0xb84>
 8012a92:	b11b      	cbz	r3, 8012a9c <_dtoa_r+0xb34>
 8012a94:	f10a 0308 	add.w	r3, sl, #8
 8012a98:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8012a9a:	6013      	str	r3, [r2, #0]
 8012a9c:	4650      	mov	r0, sl
 8012a9e:	b019      	add	sp, #100	@ 0x64
 8012aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012aa4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012aa6:	2b01      	cmp	r3, #1
 8012aa8:	f77f ae37 	ble.w	801271a <_dtoa_r+0x7b2>
 8012aac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012aae:	930a      	str	r3, [sp, #40]	@ 0x28
 8012ab0:	2001      	movs	r0, #1
 8012ab2:	e655      	b.n	8012760 <_dtoa_r+0x7f8>
 8012ab4:	9b00      	ldr	r3, [sp, #0]
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	f77f aed6 	ble.w	8012868 <_dtoa_r+0x900>
 8012abc:	4656      	mov	r6, sl
 8012abe:	4621      	mov	r1, r4
 8012ac0:	4648      	mov	r0, r9
 8012ac2:	f7ff f9c7 	bl	8011e54 <quorem>
 8012ac6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8012aca:	f806 8b01 	strb.w	r8, [r6], #1
 8012ace:	9b00      	ldr	r3, [sp, #0]
 8012ad0:	eba6 020a 	sub.w	r2, r6, sl
 8012ad4:	4293      	cmp	r3, r2
 8012ad6:	ddb3      	ble.n	8012a40 <_dtoa_r+0xad8>
 8012ad8:	4649      	mov	r1, r9
 8012ada:	2300      	movs	r3, #0
 8012adc:	220a      	movs	r2, #10
 8012ade:	4658      	mov	r0, fp
 8012ae0:	f000 f968 	bl	8012db4 <__multadd>
 8012ae4:	4681      	mov	r9, r0
 8012ae6:	e7ea      	b.n	8012abe <_dtoa_r+0xb56>
 8012ae8:	080151c1 	.word	0x080151c1
 8012aec:	08015145 	.word	0x08015145

08012af0 <_free_r>:
 8012af0:	b538      	push	{r3, r4, r5, lr}
 8012af2:	4605      	mov	r5, r0
 8012af4:	2900      	cmp	r1, #0
 8012af6:	d041      	beq.n	8012b7c <_free_r+0x8c>
 8012af8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012afc:	1f0c      	subs	r4, r1, #4
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	bfb8      	it	lt
 8012b02:	18e4      	addlt	r4, r4, r3
 8012b04:	f000 f8e8 	bl	8012cd8 <__malloc_lock>
 8012b08:	4a1d      	ldr	r2, [pc, #116]	@ (8012b80 <_free_r+0x90>)
 8012b0a:	6813      	ldr	r3, [r2, #0]
 8012b0c:	b933      	cbnz	r3, 8012b1c <_free_r+0x2c>
 8012b0e:	6063      	str	r3, [r4, #4]
 8012b10:	6014      	str	r4, [r2, #0]
 8012b12:	4628      	mov	r0, r5
 8012b14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012b18:	f000 b8e4 	b.w	8012ce4 <__malloc_unlock>
 8012b1c:	42a3      	cmp	r3, r4
 8012b1e:	d908      	bls.n	8012b32 <_free_r+0x42>
 8012b20:	6820      	ldr	r0, [r4, #0]
 8012b22:	1821      	adds	r1, r4, r0
 8012b24:	428b      	cmp	r3, r1
 8012b26:	bf01      	itttt	eq
 8012b28:	6819      	ldreq	r1, [r3, #0]
 8012b2a:	685b      	ldreq	r3, [r3, #4]
 8012b2c:	1809      	addeq	r1, r1, r0
 8012b2e:	6021      	streq	r1, [r4, #0]
 8012b30:	e7ed      	b.n	8012b0e <_free_r+0x1e>
 8012b32:	461a      	mov	r2, r3
 8012b34:	685b      	ldr	r3, [r3, #4]
 8012b36:	b10b      	cbz	r3, 8012b3c <_free_r+0x4c>
 8012b38:	42a3      	cmp	r3, r4
 8012b3a:	d9fa      	bls.n	8012b32 <_free_r+0x42>
 8012b3c:	6811      	ldr	r1, [r2, #0]
 8012b3e:	1850      	adds	r0, r2, r1
 8012b40:	42a0      	cmp	r0, r4
 8012b42:	d10b      	bne.n	8012b5c <_free_r+0x6c>
 8012b44:	6820      	ldr	r0, [r4, #0]
 8012b46:	4401      	add	r1, r0
 8012b48:	1850      	adds	r0, r2, r1
 8012b4a:	4283      	cmp	r3, r0
 8012b4c:	6011      	str	r1, [r2, #0]
 8012b4e:	d1e0      	bne.n	8012b12 <_free_r+0x22>
 8012b50:	6818      	ldr	r0, [r3, #0]
 8012b52:	685b      	ldr	r3, [r3, #4]
 8012b54:	6053      	str	r3, [r2, #4]
 8012b56:	4408      	add	r0, r1
 8012b58:	6010      	str	r0, [r2, #0]
 8012b5a:	e7da      	b.n	8012b12 <_free_r+0x22>
 8012b5c:	d902      	bls.n	8012b64 <_free_r+0x74>
 8012b5e:	230c      	movs	r3, #12
 8012b60:	602b      	str	r3, [r5, #0]
 8012b62:	e7d6      	b.n	8012b12 <_free_r+0x22>
 8012b64:	6820      	ldr	r0, [r4, #0]
 8012b66:	1821      	adds	r1, r4, r0
 8012b68:	428b      	cmp	r3, r1
 8012b6a:	bf04      	itt	eq
 8012b6c:	6819      	ldreq	r1, [r3, #0]
 8012b6e:	685b      	ldreq	r3, [r3, #4]
 8012b70:	6063      	str	r3, [r4, #4]
 8012b72:	bf04      	itt	eq
 8012b74:	1809      	addeq	r1, r1, r0
 8012b76:	6021      	streq	r1, [r4, #0]
 8012b78:	6054      	str	r4, [r2, #4]
 8012b7a:	e7ca      	b.n	8012b12 <_free_r+0x22>
 8012b7c:	bd38      	pop	{r3, r4, r5, pc}
 8012b7e:	bf00      	nop
 8012b80:	2000cccc 	.word	0x2000cccc

08012b84 <malloc>:
 8012b84:	4b02      	ldr	r3, [pc, #8]	@ (8012b90 <malloc+0xc>)
 8012b86:	4601      	mov	r1, r0
 8012b88:	6818      	ldr	r0, [r3, #0]
 8012b8a:	f000 b825 	b.w	8012bd8 <_malloc_r>
 8012b8e:	bf00      	nop
 8012b90:	200002b4 	.word	0x200002b4

08012b94 <sbrk_aligned>:
 8012b94:	b570      	push	{r4, r5, r6, lr}
 8012b96:	4e0f      	ldr	r6, [pc, #60]	@ (8012bd4 <sbrk_aligned+0x40>)
 8012b98:	460c      	mov	r4, r1
 8012b9a:	6831      	ldr	r1, [r6, #0]
 8012b9c:	4605      	mov	r5, r0
 8012b9e:	b911      	cbnz	r1, 8012ba6 <sbrk_aligned+0x12>
 8012ba0:	f000 feec 	bl	801397c <_sbrk_r>
 8012ba4:	6030      	str	r0, [r6, #0]
 8012ba6:	4621      	mov	r1, r4
 8012ba8:	4628      	mov	r0, r5
 8012baa:	f000 fee7 	bl	801397c <_sbrk_r>
 8012bae:	1c43      	adds	r3, r0, #1
 8012bb0:	d103      	bne.n	8012bba <sbrk_aligned+0x26>
 8012bb2:	f04f 34ff 	mov.w	r4, #4294967295
 8012bb6:	4620      	mov	r0, r4
 8012bb8:	bd70      	pop	{r4, r5, r6, pc}
 8012bba:	1cc4      	adds	r4, r0, #3
 8012bbc:	f024 0403 	bic.w	r4, r4, #3
 8012bc0:	42a0      	cmp	r0, r4
 8012bc2:	d0f8      	beq.n	8012bb6 <sbrk_aligned+0x22>
 8012bc4:	1a21      	subs	r1, r4, r0
 8012bc6:	4628      	mov	r0, r5
 8012bc8:	f000 fed8 	bl	801397c <_sbrk_r>
 8012bcc:	3001      	adds	r0, #1
 8012bce:	d1f2      	bne.n	8012bb6 <sbrk_aligned+0x22>
 8012bd0:	e7ef      	b.n	8012bb2 <sbrk_aligned+0x1e>
 8012bd2:	bf00      	nop
 8012bd4:	2000ccc8 	.word	0x2000ccc8

08012bd8 <_malloc_r>:
 8012bd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012bdc:	1ccd      	adds	r5, r1, #3
 8012bde:	f025 0503 	bic.w	r5, r5, #3
 8012be2:	3508      	adds	r5, #8
 8012be4:	2d0c      	cmp	r5, #12
 8012be6:	bf38      	it	cc
 8012be8:	250c      	movcc	r5, #12
 8012bea:	2d00      	cmp	r5, #0
 8012bec:	4606      	mov	r6, r0
 8012bee:	db01      	blt.n	8012bf4 <_malloc_r+0x1c>
 8012bf0:	42a9      	cmp	r1, r5
 8012bf2:	d904      	bls.n	8012bfe <_malloc_r+0x26>
 8012bf4:	230c      	movs	r3, #12
 8012bf6:	6033      	str	r3, [r6, #0]
 8012bf8:	2000      	movs	r0, #0
 8012bfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012bfe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012cd4 <_malloc_r+0xfc>
 8012c02:	f000 f869 	bl	8012cd8 <__malloc_lock>
 8012c06:	f8d8 3000 	ldr.w	r3, [r8]
 8012c0a:	461c      	mov	r4, r3
 8012c0c:	bb44      	cbnz	r4, 8012c60 <_malloc_r+0x88>
 8012c0e:	4629      	mov	r1, r5
 8012c10:	4630      	mov	r0, r6
 8012c12:	f7ff ffbf 	bl	8012b94 <sbrk_aligned>
 8012c16:	1c43      	adds	r3, r0, #1
 8012c18:	4604      	mov	r4, r0
 8012c1a:	d158      	bne.n	8012cce <_malloc_r+0xf6>
 8012c1c:	f8d8 4000 	ldr.w	r4, [r8]
 8012c20:	4627      	mov	r7, r4
 8012c22:	2f00      	cmp	r7, #0
 8012c24:	d143      	bne.n	8012cae <_malloc_r+0xd6>
 8012c26:	2c00      	cmp	r4, #0
 8012c28:	d04b      	beq.n	8012cc2 <_malloc_r+0xea>
 8012c2a:	6823      	ldr	r3, [r4, #0]
 8012c2c:	4639      	mov	r1, r7
 8012c2e:	4630      	mov	r0, r6
 8012c30:	eb04 0903 	add.w	r9, r4, r3
 8012c34:	f000 fea2 	bl	801397c <_sbrk_r>
 8012c38:	4581      	cmp	r9, r0
 8012c3a:	d142      	bne.n	8012cc2 <_malloc_r+0xea>
 8012c3c:	6821      	ldr	r1, [r4, #0]
 8012c3e:	1a6d      	subs	r5, r5, r1
 8012c40:	4629      	mov	r1, r5
 8012c42:	4630      	mov	r0, r6
 8012c44:	f7ff ffa6 	bl	8012b94 <sbrk_aligned>
 8012c48:	3001      	adds	r0, #1
 8012c4a:	d03a      	beq.n	8012cc2 <_malloc_r+0xea>
 8012c4c:	6823      	ldr	r3, [r4, #0]
 8012c4e:	442b      	add	r3, r5
 8012c50:	6023      	str	r3, [r4, #0]
 8012c52:	f8d8 3000 	ldr.w	r3, [r8]
 8012c56:	685a      	ldr	r2, [r3, #4]
 8012c58:	bb62      	cbnz	r2, 8012cb4 <_malloc_r+0xdc>
 8012c5a:	f8c8 7000 	str.w	r7, [r8]
 8012c5e:	e00f      	b.n	8012c80 <_malloc_r+0xa8>
 8012c60:	6822      	ldr	r2, [r4, #0]
 8012c62:	1b52      	subs	r2, r2, r5
 8012c64:	d420      	bmi.n	8012ca8 <_malloc_r+0xd0>
 8012c66:	2a0b      	cmp	r2, #11
 8012c68:	d917      	bls.n	8012c9a <_malloc_r+0xc2>
 8012c6a:	1961      	adds	r1, r4, r5
 8012c6c:	42a3      	cmp	r3, r4
 8012c6e:	6025      	str	r5, [r4, #0]
 8012c70:	bf18      	it	ne
 8012c72:	6059      	strne	r1, [r3, #4]
 8012c74:	6863      	ldr	r3, [r4, #4]
 8012c76:	bf08      	it	eq
 8012c78:	f8c8 1000 	streq.w	r1, [r8]
 8012c7c:	5162      	str	r2, [r4, r5]
 8012c7e:	604b      	str	r3, [r1, #4]
 8012c80:	4630      	mov	r0, r6
 8012c82:	f000 f82f 	bl	8012ce4 <__malloc_unlock>
 8012c86:	f104 000b 	add.w	r0, r4, #11
 8012c8a:	1d23      	adds	r3, r4, #4
 8012c8c:	f020 0007 	bic.w	r0, r0, #7
 8012c90:	1ac2      	subs	r2, r0, r3
 8012c92:	bf1c      	itt	ne
 8012c94:	1a1b      	subne	r3, r3, r0
 8012c96:	50a3      	strne	r3, [r4, r2]
 8012c98:	e7af      	b.n	8012bfa <_malloc_r+0x22>
 8012c9a:	6862      	ldr	r2, [r4, #4]
 8012c9c:	42a3      	cmp	r3, r4
 8012c9e:	bf0c      	ite	eq
 8012ca0:	f8c8 2000 	streq.w	r2, [r8]
 8012ca4:	605a      	strne	r2, [r3, #4]
 8012ca6:	e7eb      	b.n	8012c80 <_malloc_r+0xa8>
 8012ca8:	4623      	mov	r3, r4
 8012caa:	6864      	ldr	r4, [r4, #4]
 8012cac:	e7ae      	b.n	8012c0c <_malloc_r+0x34>
 8012cae:	463c      	mov	r4, r7
 8012cb0:	687f      	ldr	r7, [r7, #4]
 8012cb2:	e7b6      	b.n	8012c22 <_malloc_r+0x4a>
 8012cb4:	461a      	mov	r2, r3
 8012cb6:	685b      	ldr	r3, [r3, #4]
 8012cb8:	42a3      	cmp	r3, r4
 8012cba:	d1fb      	bne.n	8012cb4 <_malloc_r+0xdc>
 8012cbc:	2300      	movs	r3, #0
 8012cbe:	6053      	str	r3, [r2, #4]
 8012cc0:	e7de      	b.n	8012c80 <_malloc_r+0xa8>
 8012cc2:	230c      	movs	r3, #12
 8012cc4:	6033      	str	r3, [r6, #0]
 8012cc6:	4630      	mov	r0, r6
 8012cc8:	f000 f80c 	bl	8012ce4 <__malloc_unlock>
 8012ccc:	e794      	b.n	8012bf8 <_malloc_r+0x20>
 8012cce:	6005      	str	r5, [r0, #0]
 8012cd0:	e7d6      	b.n	8012c80 <_malloc_r+0xa8>
 8012cd2:	bf00      	nop
 8012cd4:	2000cccc 	.word	0x2000cccc

08012cd8 <__malloc_lock>:
 8012cd8:	4801      	ldr	r0, [pc, #4]	@ (8012ce0 <__malloc_lock+0x8>)
 8012cda:	f7ff b884 	b.w	8011de6 <__retarget_lock_acquire_recursive>
 8012cde:	bf00      	nop
 8012ce0:	2000ccc4 	.word	0x2000ccc4

08012ce4 <__malloc_unlock>:
 8012ce4:	4801      	ldr	r0, [pc, #4]	@ (8012cec <__malloc_unlock+0x8>)
 8012ce6:	f7ff b87f 	b.w	8011de8 <__retarget_lock_release_recursive>
 8012cea:	bf00      	nop
 8012cec:	2000ccc4 	.word	0x2000ccc4

08012cf0 <_Balloc>:
 8012cf0:	b570      	push	{r4, r5, r6, lr}
 8012cf2:	69c6      	ldr	r6, [r0, #28]
 8012cf4:	4604      	mov	r4, r0
 8012cf6:	460d      	mov	r5, r1
 8012cf8:	b976      	cbnz	r6, 8012d18 <_Balloc+0x28>
 8012cfa:	2010      	movs	r0, #16
 8012cfc:	f7ff ff42 	bl	8012b84 <malloc>
 8012d00:	4602      	mov	r2, r0
 8012d02:	61e0      	str	r0, [r4, #28]
 8012d04:	b920      	cbnz	r0, 8012d10 <_Balloc+0x20>
 8012d06:	4b18      	ldr	r3, [pc, #96]	@ (8012d68 <_Balloc+0x78>)
 8012d08:	4818      	ldr	r0, [pc, #96]	@ (8012d6c <_Balloc+0x7c>)
 8012d0a:	216b      	movs	r1, #107	@ 0x6b
 8012d0c:	f7ff f884 	bl	8011e18 <__assert_func>
 8012d10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012d14:	6006      	str	r6, [r0, #0]
 8012d16:	60c6      	str	r6, [r0, #12]
 8012d18:	69e6      	ldr	r6, [r4, #28]
 8012d1a:	68f3      	ldr	r3, [r6, #12]
 8012d1c:	b183      	cbz	r3, 8012d40 <_Balloc+0x50>
 8012d1e:	69e3      	ldr	r3, [r4, #28]
 8012d20:	68db      	ldr	r3, [r3, #12]
 8012d22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012d26:	b9b8      	cbnz	r0, 8012d58 <_Balloc+0x68>
 8012d28:	2101      	movs	r1, #1
 8012d2a:	fa01 f605 	lsl.w	r6, r1, r5
 8012d2e:	1d72      	adds	r2, r6, #5
 8012d30:	0092      	lsls	r2, r2, #2
 8012d32:	4620      	mov	r0, r4
 8012d34:	f000 fe39 	bl	80139aa <_calloc_r>
 8012d38:	b160      	cbz	r0, 8012d54 <_Balloc+0x64>
 8012d3a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012d3e:	e00e      	b.n	8012d5e <_Balloc+0x6e>
 8012d40:	2221      	movs	r2, #33	@ 0x21
 8012d42:	2104      	movs	r1, #4
 8012d44:	4620      	mov	r0, r4
 8012d46:	f000 fe30 	bl	80139aa <_calloc_r>
 8012d4a:	69e3      	ldr	r3, [r4, #28]
 8012d4c:	60f0      	str	r0, [r6, #12]
 8012d4e:	68db      	ldr	r3, [r3, #12]
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d1e4      	bne.n	8012d1e <_Balloc+0x2e>
 8012d54:	2000      	movs	r0, #0
 8012d56:	bd70      	pop	{r4, r5, r6, pc}
 8012d58:	6802      	ldr	r2, [r0, #0]
 8012d5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012d5e:	2300      	movs	r3, #0
 8012d60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012d64:	e7f7      	b.n	8012d56 <_Balloc+0x66>
 8012d66:	bf00      	nop
 8012d68:	08015152 	.word	0x08015152
 8012d6c:	080151d2 	.word	0x080151d2

08012d70 <_Bfree>:
 8012d70:	b570      	push	{r4, r5, r6, lr}
 8012d72:	69c6      	ldr	r6, [r0, #28]
 8012d74:	4605      	mov	r5, r0
 8012d76:	460c      	mov	r4, r1
 8012d78:	b976      	cbnz	r6, 8012d98 <_Bfree+0x28>
 8012d7a:	2010      	movs	r0, #16
 8012d7c:	f7ff ff02 	bl	8012b84 <malloc>
 8012d80:	4602      	mov	r2, r0
 8012d82:	61e8      	str	r0, [r5, #28]
 8012d84:	b920      	cbnz	r0, 8012d90 <_Bfree+0x20>
 8012d86:	4b09      	ldr	r3, [pc, #36]	@ (8012dac <_Bfree+0x3c>)
 8012d88:	4809      	ldr	r0, [pc, #36]	@ (8012db0 <_Bfree+0x40>)
 8012d8a:	218f      	movs	r1, #143	@ 0x8f
 8012d8c:	f7ff f844 	bl	8011e18 <__assert_func>
 8012d90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012d94:	6006      	str	r6, [r0, #0]
 8012d96:	60c6      	str	r6, [r0, #12]
 8012d98:	b13c      	cbz	r4, 8012daa <_Bfree+0x3a>
 8012d9a:	69eb      	ldr	r3, [r5, #28]
 8012d9c:	6862      	ldr	r2, [r4, #4]
 8012d9e:	68db      	ldr	r3, [r3, #12]
 8012da0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012da4:	6021      	str	r1, [r4, #0]
 8012da6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012daa:	bd70      	pop	{r4, r5, r6, pc}
 8012dac:	08015152 	.word	0x08015152
 8012db0:	080151d2 	.word	0x080151d2

08012db4 <__multadd>:
 8012db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012db8:	690d      	ldr	r5, [r1, #16]
 8012dba:	4607      	mov	r7, r0
 8012dbc:	460c      	mov	r4, r1
 8012dbe:	461e      	mov	r6, r3
 8012dc0:	f101 0c14 	add.w	ip, r1, #20
 8012dc4:	2000      	movs	r0, #0
 8012dc6:	f8dc 3000 	ldr.w	r3, [ip]
 8012dca:	b299      	uxth	r1, r3
 8012dcc:	fb02 6101 	mla	r1, r2, r1, r6
 8012dd0:	0c1e      	lsrs	r6, r3, #16
 8012dd2:	0c0b      	lsrs	r3, r1, #16
 8012dd4:	fb02 3306 	mla	r3, r2, r6, r3
 8012dd8:	b289      	uxth	r1, r1
 8012dda:	3001      	adds	r0, #1
 8012ddc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012de0:	4285      	cmp	r5, r0
 8012de2:	f84c 1b04 	str.w	r1, [ip], #4
 8012de6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012dea:	dcec      	bgt.n	8012dc6 <__multadd+0x12>
 8012dec:	b30e      	cbz	r6, 8012e32 <__multadd+0x7e>
 8012dee:	68a3      	ldr	r3, [r4, #8]
 8012df0:	42ab      	cmp	r3, r5
 8012df2:	dc19      	bgt.n	8012e28 <__multadd+0x74>
 8012df4:	6861      	ldr	r1, [r4, #4]
 8012df6:	4638      	mov	r0, r7
 8012df8:	3101      	adds	r1, #1
 8012dfa:	f7ff ff79 	bl	8012cf0 <_Balloc>
 8012dfe:	4680      	mov	r8, r0
 8012e00:	b928      	cbnz	r0, 8012e0e <__multadd+0x5a>
 8012e02:	4602      	mov	r2, r0
 8012e04:	4b0c      	ldr	r3, [pc, #48]	@ (8012e38 <__multadd+0x84>)
 8012e06:	480d      	ldr	r0, [pc, #52]	@ (8012e3c <__multadd+0x88>)
 8012e08:	21ba      	movs	r1, #186	@ 0xba
 8012e0a:	f7ff f805 	bl	8011e18 <__assert_func>
 8012e0e:	6922      	ldr	r2, [r4, #16]
 8012e10:	3202      	adds	r2, #2
 8012e12:	f104 010c 	add.w	r1, r4, #12
 8012e16:	0092      	lsls	r2, r2, #2
 8012e18:	300c      	adds	r0, #12
 8012e1a:	f7fe ffee 	bl	8011dfa <memcpy>
 8012e1e:	4621      	mov	r1, r4
 8012e20:	4638      	mov	r0, r7
 8012e22:	f7ff ffa5 	bl	8012d70 <_Bfree>
 8012e26:	4644      	mov	r4, r8
 8012e28:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012e2c:	3501      	adds	r5, #1
 8012e2e:	615e      	str	r6, [r3, #20]
 8012e30:	6125      	str	r5, [r4, #16]
 8012e32:	4620      	mov	r0, r4
 8012e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e38:	080151c1 	.word	0x080151c1
 8012e3c:	080151d2 	.word	0x080151d2

08012e40 <__hi0bits>:
 8012e40:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8012e44:	4603      	mov	r3, r0
 8012e46:	bf36      	itet	cc
 8012e48:	0403      	lslcc	r3, r0, #16
 8012e4a:	2000      	movcs	r0, #0
 8012e4c:	2010      	movcc	r0, #16
 8012e4e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012e52:	bf3c      	itt	cc
 8012e54:	021b      	lslcc	r3, r3, #8
 8012e56:	3008      	addcc	r0, #8
 8012e58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012e5c:	bf3c      	itt	cc
 8012e5e:	011b      	lslcc	r3, r3, #4
 8012e60:	3004      	addcc	r0, #4
 8012e62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012e66:	bf3c      	itt	cc
 8012e68:	009b      	lslcc	r3, r3, #2
 8012e6a:	3002      	addcc	r0, #2
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	db05      	blt.n	8012e7c <__hi0bits+0x3c>
 8012e70:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8012e74:	f100 0001 	add.w	r0, r0, #1
 8012e78:	bf08      	it	eq
 8012e7a:	2020      	moveq	r0, #32
 8012e7c:	4770      	bx	lr

08012e7e <__lo0bits>:
 8012e7e:	6803      	ldr	r3, [r0, #0]
 8012e80:	4602      	mov	r2, r0
 8012e82:	f013 0007 	ands.w	r0, r3, #7
 8012e86:	d00b      	beq.n	8012ea0 <__lo0bits+0x22>
 8012e88:	07d9      	lsls	r1, r3, #31
 8012e8a:	d421      	bmi.n	8012ed0 <__lo0bits+0x52>
 8012e8c:	0798      	lsls	r0, r3, #30
 8012e8e:	bf49      	itett	mi
 8012e90:	085b      	lsrmi	r3, r3, #1
 8012e92:	089b      	lsrpl	r3, r3, #2
 8012e94:	2001      	movmi	r0, #1
 8012e96:	6013      	strmi	r3, [r2, #0]
 8012e98:	bf5c      	itt	pl
 8012e9a:	6013      	strpl	r3, [r2, #0]
 8012e9c:	2002      	movpl	r0, #2
 8012e9e:	4770      	bx	lr
 8012ea0:	b299      	uxth	r1, r3
 8012ea2:	b909      	cbnz	r1, 8012ea8 <__lo0bits+0x2a>
 8012ea4:	0c1b      	lsrs	r3, r3, #16
 8012ea6:	2010      	movs	r0, #16
 8012ea8:	b2d9      	uxtb	r1, r3
 8012eaa:	b909      	cbnz	r1, 8012eb0 <__lo0bits+0x32>
 8012eac:	3008      	adds	r0, #8
 8012eae:	0a1b      	lsrs	r3, r3, #8
 8012eb0:	0719      	lsls	r1, r3, #28
 8012eb2:	bf04      	itt	eq
 8012eb4:	091b      	lsreq	r3, r3, #4
 8012eb6:	3004      	addeq	r0, #4
 8012eb8:	0799      	lsls	r1, r3, #30
 8012eba:	bf04      	itt	eq
 8012ebc:	089b      	lsreq	r3, r3, #2
 8012ebe:	3002      	addeq	r0, #2
 8012ec0:	07d9      	lsls	r1, r3, #31
 8012ec2:	d403      	bmi.n	8012ecc <__lo0bits+0x4e>
 8012ec4:	085b      	lsrs	r3, r3, #1
 8012ec6:	f100 0001 	add.w	r0, r0, #1
 8012eca:	d003      	beq.n	8012ed4 <__lo0bits+0x56>
 8012ecc:	6013      	str	r3, [r2, #0]
 8012ece:	4770      	bx	lr
 8012ed0:	2000      	movs	r0, #0
 8012ed2:	4770      	bx	lr
 8012ed4:	2020      	movs	r0, #32
 8012ed6:	4770      	bx	lr

08012ed8 <__i2b>:
 8012ed8:	b510      	push	{r4, lr}
 8012eda:	460c      	mov	r4, r1
 8012edc:	2101      	movs	r1, #1
 8012ede:	f7ff ff07 	bl	8012cf0 <_Balloc>
 8012ee2:	4602      	mov	r2, r0
 8012ee4:	b928      	cbnz	r0, 8012ef2 <__i2b+0x1a>
 8012ee6:	4b05      	ldr	r3, [pc, #20]	@ (8012efc <__i2b+0x24>)
 8012ee8:	4805      	ldr	r0, [pc, #20]	@ (8012f00 <__i2b+0x28>)
 8012eea:	f240 1145 	movw	r1, #325	@ 0x145
 8012eee:	f7fe ff93 	bl	8011e18 <__assert_func>
 8012ef2:	2301      	movs	r3, #1
 8012ef4:	6144      	str	r4, [r0, #20]
 8012ef6:	6103      	str	r3, [r0, #16]
 8012ef8:	bd10      	pop	{r4, pc}
 8012efa:	bf00      	nop
 8012efc:	080151c1 	.word	0x080151c1
 8012f00:	080151d2 	.word	0x080151d2

08012f04 <__multiply>:
 8012f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f08:	4614      	mov	r4, r2
 8012f0a:	690a      	ldr	r2, [r1, #16]
 8012f0c:	6923      	ldr	r3, [r4, #16]
 8012f0e:	429a      	cmp	r2, r3
 8012f10:	bfa8      	it	ge
 8012f12:	4623      	movge	r3, r4
 8012f14:	460f      	mov	r7, r1
 8012f16:	bfa4      	itt	ge
 8012f18:	460c      	movge	r4, r1
 8012f1a:	461f      	movge	r7, r3
 8012f1c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8012f20:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8012f24:	68a3      	ldr	r3, [r4, #8]
 8012f26:	6861      	ldr	r1, [r4, #4]
 8012f28:	eb0a 0609 	add.w	r6, sl, r9
 8012f2c:	42b3      	cmp	r3, r6
 8012f2e:	b085      	sub	sp, #20
 8012f30:	bfb8      	it	lt
 8012f32:	3101      	addlt	r1, #1
 8012f34:	f7ff fedc 	bl	8012cf0 <_Balloc>
 8012f38:	b930      	cbnz	r0, 8012f48 <__multiply+0x44>
 8012f3a:	4602      	mov	r2, r0
 8012f3c:	4b44      	ldr	r3, [pc, #272]	@ (8013050 <__multiply+0x14c>)
 8012f3e:	4845      	ldr	r0, [pc, #276]	@ (8013054 <__multiply+0x150>)
 8012f40:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8012f44:	f7fe ff68 	bl	8011e18 <__assert_func>
 8012f48:	f100 0514 	add.w	r5, r0, #20
 8012f4c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012f50:	462b      	mov	r3, r5
 8012f52:	2200      	movs	r2, #0
 8012f54:	4543      	cmp	r3, r8
 8012f56:	d321      	bcc.n	8012f9c <__multiply+0x98>
 8012f58:	f107 0114 	add.w	r1, r7, #20
 8012f5c:	f104 0214 	add.w	r2, r4, #20
 8012f60:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8012f64:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8012f68:	9302      	str	r3, [sp, #8]
 8012f6a:	1b13      	subs	r3, r2, r4
 8012f6c:	3b15      	subs	r3, #21
 8012f6e:	f023 0303 	bic.w	r3, r3, #3
 8012f72:	3304      	adds	r3, #4
 8012f74:	f104 0715 	add.w	r7, r4, #21
 8012f78:	42ba      	cmp	r2, r7
 8012f7a:	bf38      	it	cc
 8012f7c:	2304      	movcc	r3, #4
 8012f7e:	9301      	str	r3, [sp, #4]
 8012f80:	9b02      	ldr	r3, [sp, #8]
 8012f82:	9103      	str	r1, [sp, #12]
 8012f84:	428b      	cmp	r3, r1
 8012f86:	d80c      	bhi.n	8012fa2 <__multiply+0x9e>
 8012f88:	2e00      	cmp	r6, #0
 8012f8a:	dd03      	ble.n	8012f94 <__multiply+0x90>
 8012f8c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d05b      	beq.n	801304c <__multiply+0x148>
 8012f94:	6106      	str	r6, [r0, #16]
 8012f96:	b005      	add	sp, #20
 8012f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f9c:	f843 2b04 	str.w	r2, [r3], #4
 8012fa0:	e7d8      	b.n	8012f54 <__multiply+0x50>
 8012fa2:	f8b1 a000 	ldrh.w	sl, [r1]
 8012fa6:	f1ba 0f00 	cmp.w	sl, #0
 8012faa:	d024      	beq.n	8012ff6 <__multiply+0xf2>
 8012fac:	f104 0e14 	add.w	lr, r4, #20
 8012fb0:	46a9      	mov	r9, r5
 8012fb2:	f04f 0c00 	mov.w	ip, #0
 8012fb6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012fba:	f8d9 3000 	ldr.w	r3, [r9]
 8012fbe:	fa1f fb87 	uxth.w	fp, r7
 8012fc2:	b29b      	uxth	r3, r3
 8012fc4:	fb0a 330b 	mla	r3, sl, fp, r3
 8012fc8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8012fcc:	f8d9 7000 	ldr.w	r7, [r9]
 8012fd0:	4463      	add	r3, ip
 8012fd2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012fd6:	fb0a c70b 	mla	r7, sl, fp, ip
 8012fda:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8012fde:	b29b      	uxth	r3, r3
 8012fe0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012fe4:	4572      	cmp	r2, lr
 8012fe6:	f849 3b04 	str.w	r3, [r9], #4
 8012fea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012fee:	d8e2      	bhi.n	8012fb6 <__multiply+0xb2>
 8012ff0:	9b01      	ldr	r3, [sp, #4]
 8012ff2:	f845 c003 	str.w	ip, [r5, r3]
 8012ff6:	9b03      	ldr	r3, [sp, #12]
 8012ff8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8012ffc:	3104      	adds	r1, #4
 8012ffe:	f1b9 0f00 	cmp.w	r9, #0
 8013002:	d021      	beq.n	8013048 <__multiply+0x144>
 8013004:	682b      	ldr	r3, [r5, #0]
 8013006:	f104 0c14 	add.w	ip, r4, #20
 801300a:	46ae      	mov	lr, r5
 801300c:	f04f 0a00 	mov.w	sl, #0
 8013010:	f8bc b000 	ldrh.w	fp, [ip]
 8013014:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8013018:	fb09 770b 	mla	r7, r9, fp, r7
 801301c:	4457      	add	r7, sl
 801301e:	b29b      	uxth	r3, r3
 8013020:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013024:	f84e 3b04 	str.w	r3, [lr], #4
 8013028:	f85c 3b04 	ldr.w	r3, [ip], #4
 801302c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013030:	f8be 3000 	ldrh.w	r3, [lr]
 8013034:	fb09 330a 	mla	r3, r9, sl, r3
 8013038:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801303c:	4562      	cmp	r2, ip
 801303e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013042:	d8e5      	bhi.n	8013010 <__multiply+0x10c>
 8013044:	9f01      	ldr	r7, [sp, #4]
 8013046:	51eb      	str	r3, [r5, r7]
 8013048:	3504      	adds	r5, #4
 801304a:	e799      	b.n	8012f80 <__multiply+0x7c>
 801304c:	3e01      	subs	r6, #1
 801304e:	e79b      	b.n	8012f88 <__multiply+0x84>
 8013050:	080151c1 	.word	0x080151c1
 8013054:	080151d2 	.word	0x080151d2

08013058 <__pow5mult>:
 8013058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801305c:	4615      	mov	r5, r2
 801305e:	f012 0203 	ands.w	r2, r2, #3
 8013062:	4607      	mov	r7, r0
 8013064:	460e      	mov	r6, r1
 8013066:	d007      	beq.n	8013078 <__pow5mult+0x20>
 8013068:	4c25      	ldr	r4, [pc, #148]	@ (8013100 <__pow5mult+0xa8>)
 801306a:	3a01      	subs	r2, #1
 801306c:	2300      	movs	r3, #0
 801306e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013072:	f7ff fe9f 	bl	8012db4 <__multadd>
 8013076:	4606      	mov	r6, r0
 8013078:	10ad      	asrs	r5, r5, #2
 801307a:	d03d      	beq.n	80130f8 <__pow5mult+0xa0>
 801307c:	69fc      	ldr	r4, [r7, #28]
 801307e:	b97c      	cbnz	r4, 80130a0 <__pow5mult+0x48>
 8013080:	2010      	movs	r0, #16
 8013082:	f7ff fd7f 	bl	8012b84 <malloc>
 8013086:	4602      	mov	r2, r0
 8013088:	61f8      	str	r0, [r7, #28]
 801308a:	b928      	cbnz	r0, 8013098 <__pow5mult+0x40>
 801308c:	4b1d      	ldr	r3, [pc, #116]	@ (8013104 <__pow5mult+0xac>)
 801308e:	481e      	ldr	r0, [pc, #120]	@ (8013108 <__pow5mult+0xb0>)
 8013090:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8013094:	f7fe fec0 	bl	8011e18 <__assert_func>
 8013098:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801309c:	6004      	str	r4, [r0, #0]
 801309e:	60c4      	str	r4, [r0, #12]
 80130a0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80130a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80130a8:	b94c      	cbnz	r4, 80130be <__pow5mult+0x66>
 80130aa:	f240 2171 	movw	r1, #625	@ 0x271
 80130ae:	4638      	mov	r0, r7
 80130b0:	f7ff ff12 	bl	8012ed8 <__i2b>
 80130b4:	2300      	movs	r3, #0
 80130b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80130ba:	4604      	mov	r4, r0
 80130bc:	6003      	str	r3, [r0, #0]
 80130be:	f04f 0900 	mov.w	r9, #0
 80130c2:	07eb      	lsls	r3, r5, #31
 80130c4:	d50a      	bpl.n	80130dc <__pow5mult+0x84>
 80130c6:	4631      	mov	r1, r6
 80130c8:	4622      	mov	r2, r4
 80130ca:	4638      	mov	r0, r7
 80130cc:	f7ff ff1a 	bl	8012f04 <__multiply>
 80130d0:	4631      	mov	r1, r6
 80130d2:	4680      	mov	r8, r0
 80130d4:	4638      	mov	r0, r7
 80130d6:	f7ff fe4b 	bl	8012d70 <_Bfree>
 80130da:	4646      	mov	r6, r8
 80130dc:	106d      	asrs	r5, r5, #1
 80130de:	d00b      	beq.n	80130f8 <__pow5mult+0xa0>
 80130e0:	6820      	ldr	r0, [r4, #0]
 80130e2:	b938      	cbnz	r0, 80130f4 <__pow5mult+0x9c>
 80130e4:	4622      	mov	r2, r4
 80130e6:	4621      	mov	r1, r4
 80130e8:	4638      	mov	r0, r7
 80130ea:	f7ff ff0b 	bl	8012f04 <__multiply>
 80130ee:	6020      	str	r0, [r4, #0]
 80130f0:	f8c0 9000 	str.w	r9, [r0]
 80130f4:	4604      	mov	r4, r0
 80130f6:	e7e4      	b.n	80130c2 <__pow5mult+0x6a>
 80130f8:	4630      	mov	r0, r6
 80130fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80130fe:	bf00      	nop
 8013100:	0801522c 	.word	0x0801522c
 8013104:	08015152 	.word	0x08015152
 8013108:	080151d2 	.word	0x080151d2

0801310c <__lshift>:
 801310c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013110:	460c      	mov	r4, r1
 8013112:	6849      	ldr	r1, [r1, #4]
 8013114:	6923      	ldr	r3, [r4, #16]
 8013116:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801311a:	68a3      	ldr	r3, [r4, #8]
 801311c:	4607      	mov	r7, r0
 801311e:	4691      	mov	r9, r2
 8013120:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013124:	f108 0601 	add.w	r6, r8, #1
 8013128:	42b3      	cmp	r3, r6
 801312a:	db0b      	blt.n	8013144 <__lshift+0x38>
 801312c:	4638      	mov	r0, r7
 801312e:	f7ff fddf 	bl	8012cf0 <_Balloc>
 8013132:	4605      	mov	r5, r0
 8013134:	b948      	cbnz	r0, 801314a <__lshift+0x3e>
 8013136:	4602      	mov	r2, r0
 8013138:	4b28      	ldr	r3, [pc, #160]	@ (80131dc <__lshift+0xd0>)
 801313a:	4829      	ldr	r0, [pc, #164]	@ (80131e0 <__lshift+0xd4>)
 801313c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8013140:	f7fe fe6a 	bl	8011e18 <__assert_func>
 8013144:	3101      	adds	r1, #1
 8013146:	005b      	lsls	r3, r3, #1
 8013148:	e7ee      	b.n	8013128 <__lshift+0x1c>
 801314a:	2300      	movs	r3, #0
 801314c:	f100 0114 	add.w	r1, r0, #20
 8013150:	f100 0210 	add.w	r2, r0, #16
 8013154:	4618      	mov	r0, r3
 8013156:	4553      	cmp	r3, sl
 8013158:	db33      	blt.n	80131c2 <__lshift+0xb6>
 801315a:	6920      	ldr	r0, [r4, #16]
 801315c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013160:	f104 0314 	add.w	r3, r4, #20
 8013164:	f019 091f 	ands.w	r9, r9, #31
 8013168:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801316c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013170:	d02b      	beq.n	80131ca <__lshift+0xbe>
 8013172:	f1c9 0e20 	rsb	lr, r9, #32
 8013176:	468a      	mov	sl, r1
 8013178:	2200      	movs	r2, #0
 801317a:	6818      	ldr	r0, [r3, #0]
 801317c:	fa00 f009 	lsl.w	r0, r0, r9
 8013180:	4310      	orrs	r0, r2
 8013182:	f84a 0b04 	str.w	r0, [sl], #4
 8013186:	f853 2b04 	ldr.w	r2, [r3], #4
 801318a:	459c      	cmp	ip, r3
 801318c:	fa22 f20e 	lsr.w	r2, r2, lr
 8013190:	d8f3      	bhi.n	801317a <__lshift+0x6e>
 8013192:	ebac 0304 	sub.w	r3, ip, r4
 8013196:	3b15      	subs	r3, #21
 8013198:	f023 0303 	bic.w	r3, r3, #3
 801319c:	3304      	adds	r3, #4
 801319e:	f104 0015 	add.w	r0, r4, #21
 80131a2:	4584      	cmp	ip, r0
 80131a4:	bf38      	it	cc
 80131a6:	2304      	movcc	r3, #4
 80131a8:	50ca      	str	r2, [r1, r3]
 80131aa:	b10a      	cbz	r2, 80131b0 <__lshift+0xa4>
 80131ac:	f108 0602 	add.w	r6, r8, #2
 80131b0:	3e01      	subs	r6, #1
 80131b2:	4638      	mov	r0, r7
 80131b4:	612e      	str	r6, [r5, #16]
 80131b6:	4621      	mov	r1, r4
 80131b8:	f7ff fdda 	bl	8012d70 <_Bfree>
 80131bc:	4628      	mov	r0, r5
 80131be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80131c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80131c6:	3301      	adds	r3, #1
 80131c8:	e7c5      	b.n	8013156 <__lshift+0x4a>
 80131ca:	3904      	subs	r1, #4
 80131cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80131d0:	f841 2f04 	str.w	r2, [r1, #4]!
 80131d4:	459c      	cmp	ip, r3
 80131d6:	d8f9      	bhi.n	80131cc <__lshift+0xc0>
 80131d8:	e7ea      	b.n	80131b0 <__lshift+0xa4>
 80131da:	bf00      	nop
 80131dc:	080151c1 	.word	0x080151c1
 80131e0:	080151d2 	.word	0x080151d2

080131e4 <__mcmp>:
 80131e4:	690a      	ldr	r2, [r1, #16]
 80131e6:	4603      	mov	r3, r0
 80131e8:	6900      	ldr	r0, [r0, #16]
 80131ea:	1a80      	subs	r0, r0, r2
 80131ec:	b530      	push	{r4, r5, lr}
 80131ee:	d10e      	bne.n	801320e <__mcmp+0x2a>
 80131f0:	3314      	adds	r3, #20
 80131f2:	3114      	adds	r1, #20
 80131f4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80131f8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80131fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013200:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013204:	4295      	cmp	r5, r2
 8013206:	d003      	beq.n	8013210 <__mcmp+0x2c>
 8013208:	d205      	bcs.n	8013216 <__mcmp+0x32>
 801320a:	f04f 30ff 	mov.w	r0, #4294967295
 801320e:	bd30      	pop	{r4, r5, pc}
 8013210:	42a3      	cmp	r3, r4
 8013212:	d3f3      	bcc.n	80131fc <__mcmp+0x18>
 8013214:	e7fb      	b.n	801320e <__mcmp+0x2a>
 8013216:	2001      	movs	r0, #1
 8013218:	e7f9      	b.n	801320e <__mcmp+0x2a>
	...

0801321c <__mdiff>:
 801321c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013220:	4689      	mov	r9, r1
 8013222:	4606      	mov	r6, r0
 8013224:	4611      	mov	r1, r2
 8013226:	4648      	mov	r0, r9
 8013228:	4614      	mov	r4, r2
 801322a:	f7ff ffdb 	bl	80131e4 <__mcmp>
 801322e:	1e05      	subs	r5, r0, #0
 8013230:	d112      	bne.n	8013258 <__mdiff+0x3c>
 8013232:	4629      	mov	r1, r5
 8013234:	4630      	mov	r0, r6
 8013236:	f7ff fd5b 	bl	8012cf0 <_Balloc>
 801323a:	4602      	mov	r2, r0
 801323c:	b928      	cbnz	r0, 801324a <__mdiff+0x2e>
 801323e:	4b3f      	ldr	r3, [pc, #252]	@ (801333c <__mdiff+0x120>)
 8013240:	f240 2137 	movw	r1, #567	@ 0x237
 8013244:	483e      	ldr	r0, [pc, #248]	@ (8013340 <__mdiff+0x124>)
 8013246:	f7fe fde7 	bl	8011e18 <__assert_func>
 801324a:	2301      	movs	r3, #1
 801324c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013250:	4610      	mov	r0, r2
 8013252:	b003      	add	sp, #12
 8013254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013258:	bfbc      	itt	lt
 801325a:	464b      	movlt	r3, r9
 801325c:	46a1      	movlt	r9, r4
 801325e:	4630      	mov	r0, r6
 8013260:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8013264:	bfba      	itte	lt
 8013266:	461c      	movlt	r4, r3
 8013268:	2501      	movlt	r5, #1
 801326a:	2500      	movge	r5, #0
 801326c:	f7ff fd40 	bl	8012cf0 <_Balloc>
 8013270:	4602      	mov	r2, r0
 8013272:	b918      	cbnz	r0, 801327c <__mdiff+0x60>
 8013274:	4b31      	ldr	r3, [pc, #196]	@ (801333c <__mdiff+0x120>)
 8013276:	f240 2145 	movw	r1, #581	@ 0x245
 801327a:	e7e3      	b.n	8013244 <__mdiff+0x28>
 801327c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8013280:	6926      	ldr	r6, [r4, #16]
 8013282:	60c5      	str	r5, [r0, #12]
 8013284:	f109 0310 	add.w	r3, r9, #16
 8013288:	f109 0514 	add.w	r5, r9, #20
 801328c:	f104 0e14 	add.w	lr, r4, #20
 8013290:	f100 0b14 	add.w	fp, r0, #20
 8013294:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8013298:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801329c:	9301      	str	r3, [sp, #4]
 801329e:	46d9      	mov	r9, fp
 80132a0:	f04f 0c00 	mov.w	ip, #0
 80132a4:	9b01      	ldr	r3, [sp, #4]
 80132a6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80132aa:	f853 af04 	ldr.w	sl, [r3, #4]!
 80132ae:	9301      	str	r3, [sp, #4]
 80132b0:	fa1f f38a 	uxth.w	r3, sl
 80132b4:	4619      	mov	r1, r3
 80132b6:	b283      	uxth	r3, r0
 80132b8:	1acb      	subs	r3, r1, r3
 80132ba:	0c00      	lsrs	r0, r0, #16
 80132bc:	4463      	add	r3, ip
 80132be:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80132c2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80132c6:	b29b      	uxth	r3, r3
 80132c8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80132cc:	4576      	cmp	r6, lr
 80132ce:	f849 3b04 	str.w	r3, [r9], #4
 80132d2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80132d6:	d8e5      	bhi.n	80132a4 <__mdiff+0x88>
 80132d8:	1b33      	subs	r3, r6, r4
 80132da:	3b15      	subs	r3, #21
 80132dc:	f023 0303 	bic.w	r3, r3, #3
 80132e0:	3415      	adds	r4, #21
 80132e2:	3304      	adds	r3, #4
 80132e4:	42a6      	cmp	r6, r4
 80132e6:	bf38      	it	cc
 80132e8:	2304      	movcc	r3, #4
 80132ea:	441d      	add	r5, r3
 80132ec:	445b      	add	r3, fp
 80132ee:	461e      	mov	r6, r3
 80132f0:	462c      	mov	r4, r5
 80132f2:	4544      	cmp	r4, r8
 80132f4:	d30e      	bcc.n	8013314 <__mdiff+0xf8>
 80132f6:	f108 0103 	add.w	r1, r8, #3
 80132fa:	1b49      	subs	r1, r1, r5
 80132fc:	f021 0103 	bic.w	r1, r1, #3
 8013300:	3d03      	subs	r5, #3
 8013302:	45a8      	cmp	r8, r5
 8013304:	bf38      	it	cc
 8013306:	2100      	movcc	r1, #0
 8013308:	440b      	add	r3, r1
 801330a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801330e:	b191      	cbz	r1, 8013336 <__mdiff+0x11a>
 8013310:	6117      	str	r7, [r2, #16]
 8013312:	e79d      	b.n	8013250 <__mdiff+0x34>
 8013314:	f854 1b04 	ldr.w	r1, [r4], #4
 8013318:	46e6      	mov	lr, ip
 801331a:	0c08      	lsrs	r0, r1, #16
 801331c:	fa1c fc81 	uxtah	ip, ip, r1
 8013320:	4471      	add	r1, lr
 8013322:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8013326:	b289      	uxth	r1, r1
 8013328:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801332c:	f846 1b04 	str.w	r1, [r6], #4
 8013330:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013334:	e7dd      	b.n	80132f2 <__mdiff+0xd6>
 8013336:	3f01      	subs	r7, #1
 8013338:	e7e7      	b.n	801330a <__mdiff+0xee>
 801333a:	bf00      	nop
 801333c:	080151c1 	.word	0x080151c1
 8013340:	080151d2 	.word	0x080151d2

08013344 <__d2b>:
 8013344:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013348:	460f      	mov	r7, r1
 801334a:	2101      	movs	r1, #1
 801334c:	ec59 8b10 	vmov	r8, r9, d0
 8013350:	4616      	mov	r6, r2
 8013352:	f7ff fccd 	bl	8012cf0 <_Balloc>
 8013356:	4604      	mov	r4, r0
 8013358:	b930      	cbnz	r0, 8013368 <__d2b+0x24>
 801335a:	4602      	mov	r2, r0
 801335c:	4b23      	ldr	r3, [pc, #140]	@ (80133ec <__d2b+0xa8>)
 801335e:	4824      	ldr	r0, [pc, #144]	@ (80133f0 <__d2b+0xac>)
 8013360:	f240 310f 	movw	r1, #783	@ 0x30f
 8013364:	f7fe fd58 	bl	8011e18 <__assert_func>
 8013368:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801336c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013370:	b10d      	cbz	r5, 8013376 <__d2b+0x32>
 8013372:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013376:	9301      	str	r3, [sp, #4]
 8013378:	f1b8 0300 	subs.w	r3, r8, #0
 801337c:	d023      	beq.n	80133c6 <__d2b+0x82>
 801337e:	4668      	mov	r0, sp
 8013380:	9300      	str	r3, [sp, #0]
 8013382:	f7ff fd7c 	bl	8012e7e <__lo0bits>
 8013386:	e9dd 1200 	ldrd	r1, r2, [sp]
 801338a:	b1d0      	cbz	r0, 80133c2 <__d2b+0x7e>
 801338c:	f1c0 0320 	rsb	r3, r0, #32
 8013390:	fa02 f303 	lsl.w	r3, r2, r3
 8013394:	430b      	orrs	r3, r1
 8013396:	40c2      	lsrs	r2, r0
 8013398:	6163      	str	r3, [r4, #20]
 801339a:	9201      	str	r2, [sp, #4]
 801339c:	9b01      	ldr	r3, [sp, #4]
 801339e:	61a3      	str	r3, [r4, #24]
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	bf0c      	ite	eq
 80133a4:	2201      	moveq	r2, #1
 80133a6:	2202      	movne	r2, #2
 80133a8:	6122      	str	r2, [r4, #16]
 80133aa:	b1a5      	cbz	r5, 80133d6 <__d2b+0x92>
 80133ac:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80133b0:	4405      	add	r5, r0
 80133b2:	603d      	str	r5, [r7, #0]
 80133b4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80133b8:	6030      	str	r0, [r6, #0]
 80133ba:	4620      	mov	r0, r4
 80133bc:	b003      	add	sp, #12
 80133be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80133c2:	6161      	str	r1, [r4, #20]
 80133c4:	e7ea      	b.n	801339c <__d2b+0x58>
 80133c6:	a801      	add	r0, sp, #4
 80133c8:	f7ff fd59 	bl	8012e7e <__lo0bits>
 80133cc:	9b01      	ldr	r3, [sp, #4]
 80133ce:	6163      	str	r3, [r4, #20]
 80133d0:	3020      	adds	r0, #32
 80133d2:	2201      	movs	r2, #1
 80133d4:	e7e8      	b.n	80133a8 <__d2b+0x64>
 80133d6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80133da:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80133de:	6038      	str	r0, [r7, #0]
 80133e0:	6918      	ldr	r0, [r3, #16]
 80133e2:	f7ff fd2d 	bl	8012e40 <__hi0bits>
 80133e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80133ea:	e7e5      	b.n	80133b8 <__d2b+0x74>
 80133ec:	080151c1 	.word	0x080151c1
 80133f0:	080151d2 	.word	0x080151d2

080133f4 <__ssputs_r>:
 80133f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80133f8:	688e      	ldr	r6, [r1, #8]
 80133fa:	461f      	mov	r7, r3
 80133fc:	42be      	cmp	r6, r7
 80133fe:	680b      	ldr	r3, [r1, #0]
 8013400:	4682      	mov	sl, r0
 8013402:	460c      	mov	r4, r1
 8013404:	4690      	mov	r8, r2
 8013406:	d82d      	bhi.n	8013464 <__ssputs_r+0x70>
 8013408:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801340c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013410:	d026      	beq.n	8013460 <__ssputs_r+0x6c>
 8013412:	6965      	ldr	r5, [r4, #20]
 8013414:	6909      	ldr	r1, [r1, #16]
 8013416:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801341a:	eba3 0901 	sub.w	r9, r3, r1
 801341e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013422:	1c7b      	adds	r3, r7, #1
 8013424:	444b      	add	r3, r9
 8013426:	106d      	asrs	r5, r5, #1
 8013428:	429d      	cmp	r5, r3
 801342a:	bf38      	it	cc
 801342c:	461d      	movcc	r5, r3
 801342e:	0553      	lsls	r3, r2, #21
 8013430:	d527      	bpl.n	8013482 <__ssputs_r+0x8e>
 8013432:	4629      	mov	r1, r5
 8013434:	f7ff fbd0 	bl	8012bd8 <_malloc_r>
 8013438:	4606      	mov	r6, r0
 801343a:	b360      	cbz	r0, 8013496 <__ssputs_r+0xa2>
 801343c:	6921      	ldr	r1, [r4, #16]
 801343e:	464a      	mov	r2, r9
 8013440:	f7fe fcdb 	bl	8011dfa <memcpy>
 8013444:	89a3      	ldrh	r3, [r4, #12]
 8013446:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801344a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801344e:	81a3      	strh	r3, [r4, #12]
 8013450:	6126      	str	r6, [r4, #16]
 8013452:	6165      	str	r5, [r4, #20]
 8013454:	444e      	add	r6, r9
 8013456:	eba5 0509 	sub.w	r5, r5, r9
 801345a:	6026      	str	r6, [r4, #0]
 801345c:	60a5      	str	r5, [r4, #8]
 801345e:	463e      	mov	r6, r7
 8013460:	42be      	cmp	r6, r7
 8013462:	d900      	bls.n	8013466 <__ssputs_r+0x72>
 8013464:	463e      	mov	r6, r7
 8013466:	6820      	ldr	r0, [r4, #0]
 8013468:	4632      	mov	r2, r6
 801346a:	4641      	mov	r1, r8
 801346c:	f000 fa6c 	bl	8013948 <memmove>
 8013470:	68a3      	ldr	r3, [r4, #8]
 8013472:	1b9b      	subs	r3, r3, r6
 8013474:	60a3      	str	r3, [r4, #8]
 8013476:	6823      	ldr	r3, [r4, #0]
 8013478:	4433      	add	r3, r6
 801347a:	6023      	str	r3, [r4, #0]
 801347c:	2000      	movs	r0, #0
 801347e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013482:	462a      	mov	r2, r5
 8013484:	f000 fab7 	bl	80139f6 <_realloc_r>
 8013488:	4606      	mov	r6, r0
 801348a:	2800      	cmp	r0, #0
 801348c:	d1e0      	bne.n	8013450 <__ssputs_r+0x5c>
 801348e:	6921      	ldr	r1, [r4, #16]
 8013490:	4650      	mov	r0, sl
 8013492:	f7ff fb2d 	bl	8012af0 <_free_r>
 8013496:	230c      	movs	r3, #12
 8013498:	f8ca 3000 	str.w	r3, [sl]
 801349c:	89a3      	ldrh	r3, [r4, #12]
 801349e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80134a2:	81a3      	strh	r3, [r4, #12]
 80134a4:	f04f 30ff 	mov.w	r0, #4294967295
 80134a8:	e7e9      	b.n	801347e <__ssputs_r+0x8a>
	...

080134ac <_svfiprintf_r>:
 80134ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134b0:	4698      	mov	r8, r3
 80134b2:	898b      	ldrh	r3, [r1, #12]
 80134b4:	061b      	lsls	r3, r3, #24
 80134b6:	b09d      	sub	sp, #116	@ 0x74
 80134b8:	4607      	mov	r7, r0
 80134ba:	460d      	mov	r5, r1
 80134bc:	4614      	mov	r4, r2
 80134be:	d510      	bpl.n	80134e2 <_svfiprintf_r+0x36>
 80134c0:	690b      	ldr	r3, [r1, #16]
 80134c2:	b973      	cbnz	r3, 80134e2 <_svfiprintf_r+0x36>
 80134c4:	2140      	movs	r1, #64	@ 0x40
 80134c6:	f7ff fb87 	bl	8012bd8 <_malloc_r>
 80134ca:	6028      	str	r0, [r5, #0]
 80134cc:	6128      	str	r0, [r5, #16]
 80134ce:	b930      	cbnz	r0, 80134de <_svfiprintf_r+0x32>
 80134d0:	230c      	movs	r3, #12
 80134d2:	603b      	str	r3, [r7, #0]
 80134d4:	f04f 30ff 	mov.w	r0, #4294967295
 80134d8:	b01d      	add	sp, #116	@ 0x74
 80134da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134de:	2340      	movs	r3, #64	@ 0x40
 80134e0:	616b      	str	r3, [r5, #20]
 80134e2:	2300      	movs	r3, #0
 80134e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80134e6:	2320      	movs	r3, #32
 80134e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80134ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80134f0:	2330      	movs	r3, #48	@ 0x30
 80134f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8013690 <_svfiprintf_r+0x1e4>
 80134f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80134fa:	f04f 0901 	mov.w	r9, #1
 80134fe:	4623      	mov	r3, r4
 8013500:	469a      	mov	sl, r3
 8013502:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013506:	b10a      	cbz	r2, 801350c <_svfiprintf_r+0x60>
 8013508:	2a25      	cmp	r2, #37	@ 0x25
 801350a:	d1f9      	bne.n	8013500 <_svfiprintf_r+0x54>
 801350c:	ebba 0b04 	subs.w	fp, sl, r4
 8013510:	d00b      	beq.n	801352a <_svfiprintf_r+0x7e>
 8013512:	465b      	mov	r3, fp
 8013514:	4622      	mov	r2, r4
 8013516:	4629      	mov	r1, r5
 8013518:	4638      	mov	r0, r7
 801351a:	f7ff ff6b 	bl	80133f4 <__ssputs_r>
 801351e:	3001      	adds	r0, #1
 8013520:	f000 80a7 	beq.w	8013672 <_svfiprintf_r+0x1c6>
 8013524:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013526:	445a      	add	r2, fp
 8013528:	9209      	str	r2, [sp, #36]	@ 0x24
 801352a:	f89a 3000 	ldrb.w	r3, [sl]
 801352e:	2b00      	cmp	r3, #0
 8013530:	f000 809f 	beq.w	8013672 <_svfiprintf_r+0x1c6>
 8013534:	2300      	movs	r3, #0
 8013536:	f04f 32ff 	mov.w	r2, #4294967295
 801353a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801353e:	f10a 0a01 	add.w	sl, sl, #1
 8013542:	9304      	str	r3, [sp, #16]
 8013544:	9307      	str	r3, [sp, #28]
 8013546:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801354a:	931a      	str	r3, [sp, #104]	@ 0x68
 801354c:	4654      	mov	r4, sl
 801354e:	2205      	movs	r2, #5
 8013550:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013554:	484e      	ldr	r0, [pc, #312]	@ (8013690 <_svfiprintf_r+0x1e4>)
 8013556:	f7ec fe3b 	bl	80001d0 <memchr>
 801355a:	9a04      	ldr	r2, [sp, #16]
 801355c:	b9d8      	cbnz	r0, 8013596 <_svfiprintf_r+0xea>
 801355e:	06d0      	lsls	r0, r2, #27
 8013560:	bf44      	itt	mi
 8013562:	2320      	movmi	r3, #32
 8013564:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013568:	0711      	lsls	r1, r2, #28
 801356a:	bf44      	itt	mi
 801356c:	232b      	movmi	r3, #43	@ 0x2b
 801356e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013572:	f89a 3000 	ldrb.w	r3, [sl]
 8013576:	2b2a      	cmp	r3, #42	@ 0x2a
 8013578:	d015      	beq.n	80135a6 <_svfiprintf_r+0xfa>
 801357a:	9a07      	ldr	r2, [sp, #28]
 801357c:	4654      	mov	r4, sl
 801357e:	2000      	movs	r0, #0
 8013580:	f04f 0c0a 	mov.w	ip, #10
 8013584:	4621      	mov	r1, r4
 8013586:	f811 3b01 	ldrb.w	r3, [r1], #1
 801358a:	3b30      	subs	r3, #48	@ 0x30
 801358c:	2b09      	cmp	r3, #9
 801358e:	d94b      	bls.n	8013628 <_svfiprintf_r+0x17c>
 8013590:	b1b0      	cbz	r0, 80135c0 <_svfiprintf_r+0x114>
 8013592:	9207      	str	r2, [sp, #28]
 8013594:	e014      	b.n	80135c0 <_svfiprintf_r+0x114>
 8013596:	eba0 0308 	sub.w	r3, r0, r8
 801359a:	fa09 f303 	lsl.w	r3, r9, r3
 801359e:	4313      	orrs	r3, r2
 80135a0:	9304      	str	r3, [sp, #16]
 80135a2:	46a2      	mov	sl, r4
 80135a4:	e7d2      	b.n	801354c <_svfiprintf_r+0xa0>
 80135a6:	9b03      	ldr	r3, [sp, #12]
 80135a8:	1d19      	adds	r1, r3, #4
 80135aa:	681b      	ldr	r3, [r3, #0]
 80135ac:	9103      	str	r1, [sp, #12]
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	bfbb      	ittet	lt
 80135b2:	425b      	neglt	r3, r3
 80135b4:	f042 0202 	orrlt.w	r2, r2, #2
 80135b8:	9307      	strge	r3, [sp, #28]
 80135ba:	9307      	strlt	r3, [sp, #28]
 80135bc:	bfb8      	it	lt
 80135be:	9204      	strlt	r2, [sp, #16]
 80135c0:	7823      	ldrb	r3, [r4, #0]
 80135c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80135c4:	d10a      	bne.n	80135dc <_svfiprintf_r+0x130>
 80135c6:	7863      	ldrb	r3, [r4, #1]
 80135c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80135ca:	d132      	bne.n	8013632 <_svfiprintf_r+0x186>
 80135cc:	9b03      	ldr	r3, [sp, #12]
 80135ce:	1d1a      	adds	r2, r3, #4
 80135d0:	681b      	ldr	r3, [r3, #0]
 80135d2:	9203      	str	r2, [sp, #12]
 80135d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80135d8:	3402      	adds	r4, #2
 80135da:	9305      	str	r3, [sp, #20]
 80135dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80136a0 <_svfiprintf_r+0x1f4>
 80135e0:	7821      	ldrb	r1, [r4, #0]
 80135e2:	2203      	movs	r2, #3
 80135e4:	4650      	mov	r0, sl
 80135e6:	f7ec fdf3 	bl	80001d0 <memchr>
 80135ea:	b138      	cbz	r0, 80135fc <_svfiprintf_r+0x150>
 80135ec:	9b04      	ldr	r3, [sp, #16]
 80135ee:	eba0 000a 	sub.w	r0, r0, sl
 80135f2:	2240      	movs	r2, #64	@ 0x40
 80135f4:	4082      	lsls	r2, r0
 80135f6:	4313      	orrs	r3, r2
 80135f8:	3401      	adds	r4, #1
 80135fa:	9304      	str	r3, [sp, #16]
 80135fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013600:	4824      	ldr	r0, [pc, #144]	@ (8013694 <_svfiprintf_r+0x1e8>)
 8013602:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013606:	2206      	movs	r2, #6
 8013608:	f7ec fde2 	bl	80001d0 <memchr>
 801360c:	2800      	cmp	r0, #0
 801360e:	d036      	beq.n	801367e <_svfiprintf_r+0x1d2>
 8013610:	4b21      	ldr	r3, [pc, #132]	@ (8013698 <_svfiprintf_r+0x1ec>)
 8013612:	bb1b      	cbnz	r3, 801365c <_svfiprintf_r+0x1b0>
 8013614:	9b03      	ldr	r3, [sp, #12]
 8013616:	3307      	adds	r3, #7
 8013618:	f023 0307 	bic.w	r3, r3, #7
 801361c:	3308      	adds	r3, #8
 801361e:	9303      	str	r3, [sp, #12]
 8013620:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013622:	4433      	add	r3, r6
 8013624:	9309      	str	r3, [sp, #36]	@ 0x24
 8013626:	e76a      	b.n	80134fe <_svfiprintf_r+0x52>
 8013628:	fb0c 3202 	mla	r2, ip, r2, r3
 801362c:	460c      	mov	r4, r1
 801362e:	2001      	movs	r0, #1
 8013630:	e7a8      	b.n	8013584 <_svfiprintf_r+0xd8>
 8013632:	2300      	movs	r3, #0
 8013634:	3401      	adds	r4, #1
 8013636:	9305      	str	r3, [sp, #20]
 8013638:	4619      	mov	r1, r3
 801363a:	f04f 0c0a 	mov.w	ip, #10
 801363e:	4620      	mov	r0, r4
 8013640:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013644:	3a30      	subs	r2, #48	@ 0x30
 8013646:	2a09      	cmp	r2, #9
 8013648:	d903      	bls.n	8013652 <_svfiprintf_r+0x1a6>
 801364a:	2b00      	cmp	r3, #0
 801364c:	d0c6      	beq.n	80135dc <_svfiprintf_r+0x130>
 801364e:	9105      	str	r1, [sp, #20]
 8013650:	e7c4      	b.n	80135dc <_svfiprintf_r+0x130>
 8013652:	fb0c 2101 	mla	r1, ip, r1, r2
 8013656:	4604      	mov	r4, r0
 8013658:	2301      	movs	r3, #1
 801365a:	e7f0      	b.n	801363e <_svfiprintf_r+0x192>
 801365c:	ab03      	add	r3, sp, #12
 801365e:	9300      	str	r3, [sp, #0]
 8013660:	462a      	mov	r2, r5
 8013662:	4b0e      	ldr	r3, [pc, #56]	@ (801369c <_svfiprintf_r+0x1f0>)
 8013664:	a904      	add	r1, sp, #16
 8013666:	4638      	mov	r0, r7
 8013668:	f7fd fdd6 	bl	8011218 <_printf_float>
 801366c:	1c42      	adds	r2, r0, #1
 801366e:	4606      	mov	r6, r0
 8013670:	d1d6      	bne.n	8013620 <_svfiprintf_r+0x174>
 8013672:	89ab      	ldrh	r3, [r5, #12]
 8013674:	065b      	lsls	r3, r3, #25
 8013676:	f53f af2d 	bmi.w	80134d4 <_svfiprintf_r+0x28>
 801367a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801367c:	e72c      	b.n	80134d8 <_svfiprintf_r+0x2c>
 801367e:	ab03      	add	r3, sp, #12
 8013680:	9300      	str	r3, [sp, #0]
 8013682:	462a      	mov	r2, r5
 8013684:	4b05      	ldr	r3, [pc, #20]	@ (801369c <_svfiprintf_r+0x1f0>)
 8013686:	a904      	add	r1, sp, #16
 8013688:	4638      	mov	r0, r7
 801368a:	f7fe f85d 	bl	8011748 <_printf_i>
 801368e:	e7ed      	b.n	801366c <_svfiprintf_r+0x1c0>
 8013690:	08015328 	.word	0x08015328
 8013694:	08015332 	.word	0x08015332
 8013698:	08011219 	.word	0x08011219
 801369c:	080133f5 	.word	0x080133f5
 80136a0:	0801532e 	.word	0x0801532e

080136a4 <__sflush_r>:
 80136a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80136a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136ac:	0716      	lsls	r6, r2, #28
 80136ae:	4605      	mov	r5, r0
 80136b0:	460c      	mov	r4, r1
 80136b2:	d454      	bmi.n	801375e <__sflush_r+0xba>
 80136b4:	684b      	ldr	r3, [r1, #4]
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	dc02      	bgt.n	80136c0 <__sflush_r+0x1c>
 80136ba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80136bc:	2b00      	cmp	r3, #0
 80136be:	dd48      	ble.n	8013752 <__sflush_r+0xae>
 80136c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80136c2:	2e00      	cmp	r6, #0
 80136c4:	d045      	beq.n	8013752 <__sflush_r+0xae>
 80136c6:	2300      	movs	r3, #0
 80136c8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80136cc:	682f      	ldr	r7, [r5, #0]
 80136ce:	6a21      	ldr	r1, [r4, #32]
 80136d0:	602b      	str	r3, [r5, #0]
 80136d2:	d030      	beq.n	8013736 <__sflush_r+0x92>
 80136d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80136d6:	89a3      	ldrh	r3, [r4, #12]
 80136d8:	0759      	lsls	r1, r3, #29
 80136da:	d505      	bpl.n	80136e8 <__sflush_r+0x44>
 80136dc:	6863      	ldr	r3, [r4, #4]
 80136de:	1ad2      	subs	r2, r2, r3
 80136e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80136e2:	b10b      	cbz	r3, 80136e8 <__sflush_r+0x44>
 80136e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80136e6:	1ad2      	subs	r2, r2, r3
 80136e8:	2300      	movs	r3, #0
 80136ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80136ec:	6a21      	ldr	r1, [r4, #32]
 80136ee:	4628      	mov	r0, r5
 80136f0:	47b0      	blx	r6
 80136f2:	1c43      	adds	r3, r0, #1
 80136f4:	89a3      	ldrh	r3, [r4, #12]
 80136f6:	d106      	bne.n	8013706 <__sflush_r+0x62>
 80136f8:	6829      	ldr	r1, [r5, #0]
 80136fa:	291d      	cmp	r1, #29
 80136fc:	d82b      	bhi.n	8013756 <__sflush_r+0xb2>
 80136fe:	4a2a      	ldr	r2, [pc, #168]	@ (80137a8 <__sflush_r+0x104>)
 8013700:	410a      	asrs	r2, r1
 8013702:	07d6      	lsls	r6, r2, #31
 8013704:	d427      	bmi.n	8013756 <__sflush_r+0xb2>
 8013706:	2200      	movs	r2, #0
 8013708:	6062      	str	r2, [r4, #4]
 801370a:	04d9      	lsls	r1, r3, #19
 801370c:	6922      	ldr	r2, [r4, #16]
 801370e:	6022      	str	r2, [r4, #0]
 8013710:	d504      	bpl.n	801371c <__sflush_r+0x78>
 8013712:	1c42      	adds	r2, r0, #1
 8013714:	d101      	bne.n	801371a <__sflush_r+0x76>
 8013716:	682b      	ldr	r3, [r5, #0]
 8013718:	b903      	cbnz	r3, 801371c <__sflush_r+0x78>
 801371a:	6560      	str	r0, [r4, #84]	@ 0x54
 801371c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801371e:	602f      	str	r7, [r5, #0]
 8013720:	b1b9      	cbz	r1, 8013752 <__sflush_r+0xae>
 8013722:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013726:	4299      	cmp	r1, r3
 8013728:	d002      	beq.n	8013730 <__sflush_r+0x8c>
 801372a:	4628      	mov	r0, r5
 801372c:	f7ff f9e0 	bl	8012af0 <_free_r>
 8013730:	2300      	movs	r3, #0
 8013732:	6363      	str	r3, [r4, #52]	@ 0x34
 8013734:	e00d      	b.n	8013752 <__sflush_r+0xae>
 8013736:	2301      	movs	r3, #1
 8013738:	4628      	mov	r0, r5
 801373a:	47b0      	blx	r6
 801373c:	4602      	mov	r2, r0
 801373e:	1c50      	adds	r0, r2, #1
 8013740:	d1c9      	bne.n	80136d6 <__sflush_r+0x32>
 8013742:	682b      	ldr	r3, [r5, #0]
 8013744:	2b00      	cmp	r3, #0
 8013746:	d0c6      	beq.n	80136d6 <__sflush_r+0x32>
 8013748:	2b1d      	cmp	r3, #29
 801374a:	d001      	beq.n	8013750 <__sflush_r+0xac>
 801374c:	2b16      	cmp	r3, #22
 801374e:	d11e      	bne.n	801378e <__sflush_r+0xea>
 8013750:	602f      	str	r7, [r5, #0]
 8013752:	2000      	movs	r0, #0
 8013754:	e022      	b.n	801379c <__sflush_r+0xf8>
 8013756:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801375a:	b21b      	sxth	r3, r3
 801375c:	e01b      	b.n	8013796 <__sflush_r+0xf2>
 801375e:	690f      	ldr	r7, [r1, #16]
 8013760:	2f00      	cmp	r7, #0
 8013762:	d0f6      	beq.n	8013752 <__sflush_r+0xae>
 8013764:	0793      	lsls	r3, r2, #30
 8013766:	680e      	ldr	r6, [r1, #0]
 8013768:	bf08      	it	eq
 801376a:	694b      	ldreq	r3, [r1, #20]
 801376c:	600f      	str	r7, [r1, #0]
 801376e:	bf18      	it	ne
 8013770:	2300      	movne	r3, #0
 8013772:	eba6 0807 	sub.w	r8, r6, r7
 8013776:	608b      	str	r3, [r1, #8]
 8013778:	f1b8 0f00 	cmp.w	r8, #0
 801377c:	dde9      	ble.n	8013752 <__sflush_r+0xae>
 801377e:	6a21      	ldr	r1, [r4, #32]
 8013780:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8013782:	4643      	mov	r3, r8
 8013784:	463a      	mov	r2, r7
 8013786:	4628      	mov	r0, r5
 8013788:	47b0      	blx	r6
 801378a:	2800      	cmp	r0, #0
 801378c:	dc08      	bgt.n	80137a0 <__sflush_r+0xfc>
 801378e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013792:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013796:	81a3      	strh	r3, [r4, #12]
 8013798:	f04f 30ff 	mov.w	r0, #4294967295
 801379c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137a0:	4407      	add	r7, r0
 80137a2:	eba8 0800 	sub.w	r8, r8, r0
 80137a6:	e7e7      	b.n	8013778 <__sflush_r+0xd4>
 80137a8:	dfbffffe 	.word	0xdfbffffe

080137ac <_fflush_r>:
 80137ac:	b538      	push	{r3, r4, r5, lr}
 80137ae:	690b      	ldr	r3, [r1, #16]
 80137b0:	4605      	mov	r5, r0
 80137b2:	460c      	mov	r4, r1
 80137b4:	b913      	cbnz	r3, 80137bc <_fflush_r+0x10>
 80137b6:	2500      	movs	r5, #0
 80137b8:	4628      	mov	r0, r5
 80137ba:	bd38      	pop	{r3, r4, r5, pc}
 80137bc:	b118      	cbz	r0, 80137c6 <_fflush_r+0x1a>
 80137be:	6a03      	ldr	r3, [r0, #32]
 80137c0:	b90b      	cbnz	r3, 80137c6 <_fflush_r+0x1a>
 80137c2:	f7fe f96d 	bl	8011aa0 <__sinit>
 80137c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d0f3      	beq.n	80137b6 <_fflush_r+0xa>
 80137ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80137d0:	07d0      	lsls	r0, r2, #31
 80137d2:	d404      	bmi.n	80137de <_fflush_r+0x32>
 80137d4:	0599      	lsls	r1, r3, #22
 80137d6:	d402      	bmi.n	80137de <_fflush_r+0x32>
 80137d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80137da:	f7fe fb04 	bl	8011de6 <__retarget_lock_acquire_recursive>
 80137de:	4628      	mov	r0, r5
 80137e0:	4621      	mov	r1, r4
 80137e2:	f7ff ff5f 	bl	80136a4 <__sflush_r>
 80137e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80137e8:	07da      	lsls	r2, r3, #31
 80137ea:	4605      	mov	r5, r0
 80137ec:	d4e4      	bmi.n	80137b8 <_fflush_r+0xc>
 80137ee:	89a3      	ldrh	r3, [r4, #12]
 80137f0:	059b      	lsls	r3, r3, #22
 80137f2:	d4e1      	bmi.n	80137b8 <_fflush_r+0xc>
 80137f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80137f6:	f7fe faf7 	bl	8011de8 <__retarget_lock_release_recursive>
 80137fa:	e7dd      	b.n	80137b8 <_fflush_r+0xc>

080137fc <fiprintf>:
 80137fc:	b40e      	push	{r1, r2, r3}
 80137fe:	b503      	push	{r0, r1, lr}
 8013800:	4601      	mov	r1, r0
 8013802:	ab03      	add	r3, sp, #12
 8013804:	4805      	ldr	r0, [pc, #20]	@ (801381c <fiprintf+0x20>)
 8013806:	f853 2b04 	ldr.w	r2, [r3], #4
 801380a:	6800      	ldr	r0, [r0, #0]
 801380c:	9301      	str	r3, [sp, #4]
 801380e:	f000 f957 	bl	8013ac0 <_vfiprintf_r>
 8013812:	b002      	add	sp, #8
 8013814:	f85d eb04 	ldr.w	lr, [sp], #4
 8013818:	b003      	add	sp, #12
 801381a:	4770      	bx	lr
 801381c:	200002b4 	.word	0x200002b4

08013820 <__swbuf_r>:
 8013820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013822:	460e      	mov	r6, r1
 8013824:	4614      	mov	r4, r2
 8013826:	4605      	mov	r5, r0
 8013828:	b118      	cbz	r0, 8013832 <__swbuf_r+0x12>
 801382a:	6a03      	ldr	r3, [r0, #32]
 801382c:	b90b      	cbnz	r3, 8013832 <__swbuf_r+0x12>
 801382e:	f7fe f937 	bl	8011aa0 <__sinit>
 8013832:	69a3      	ldr	r3, [r4, #24]
 8013834:	60a3      	str	r3, [r4, #8]
 8013836:	89a3      	ldrh	r3, [r4, #12]
 8013838:	071a      	lsls	r2, r3, #28
 801383a:	d501      	bpl.n	8013840 <__swbuf_r+0x20>
 801383c:	6923      	ldr	r3, [r4, #16]
 801383e:	b943      	cbnz	r3, 8013852 <__swbuf_r+0x32>
 8013840:	4621      	mov	r1, r4
 8013842:	4628      	mov	r0, r5
 8013844:	f000 f82a 	bl	801389c <__swsetup_r>
 8013848:	b118      	cbz	r0, 8013852 <__swbuf_r+0x32>
 801384a:	f04f 37ff 	mov.w	r7, #4294967295
 801384e:	4638      	mov	r0, r7
 8013850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013852:	6823      	ldr	r3, [r4, #0]
 8013854:	6922      	ldr	r2, [r4, #16]
 8013856:	1a98      	subs	r0, r3, r2
 8013858:	6963      	ldr	r3, [r4, #20]
 801385a:	b2f6      	uxtb	r6, r6
 801385c:	4283      	cmp	r3, r0
 801385e:	4637      	mov	r7, r6
 8013860:	dc05      	bgt.n	801386e <__swbuf_r+0x4e>
 8013862:	4621      	mov	r1, r4
 8013864:	4628      	mov	r0, r5
 8013866:	f7ff ffa1 	bl	80137ac <_fflush_r>
 801386a:	2800      	cmp	r0, #0
 801386c:	d1ed      	bne.n	801384a <__swbuf_r+0x2a>
 801386e:	68a3      	ldr	r3, [r4, #8]
 8013870:	3b01      	subs	r3, #1
 8013872:	60a3      	str	r3, [r4, #8]
 8013874:	6823      	ldr	r3, [r4, #0]
 8013876:	1c5a      	adds	r2, r3, #1
 8013878:	6022      	str	r2, [r4, #0]
 801387a:	701e      	strb	r6, [r3, #0]
 801387c:	6962      	ldr	r2, [r4, #20]
 801387e:	1c43      	adds	r3, r0, #1
 8013880:	429a      	cmp	r2, r3
 8013882:	d004      	beq.n	801388e <__swbuf_r+0x6e>
 8013884:	89a3      	ldrh	r3, [r4, #12]
 8013886:	07db      	lsls	r3, r3, #31
 8013888:	d5e1      	bpl.n	801384e <__swbuf_r+0x2e>
 801388a:	2e0a      	cmp	r6, #10
 801388c:	d1df      	bne.n	801384e <__swbuf_r+0x2e>
 801388e:	4621      	mov	r1, r4
 8013890:	4628      	mov	r0, r5
 8013892:	f7ff ff8b 	bl	80137ac <_fflush_r>
 8013896:	2800      	cmp	r0, #0
 8013898:	d0d9      	beq.n	801384e <__swbuf_r+0x2e>
 801389a:	e7d6      	b.n	801384a <__swbuf_r+0x2a>

0801389c <__swsetup_r>:
 801389c:	b538      	push	{r3, r4, r5, lr}
 801389e:	4b29      	ldr	r3, [pc, #164]	@ (8013944 <__swsetup_r+0xa8>)
 80138a0:	4605      	mov	r5, r0
 80138a2:	6818      	ldr	r0, [r3, #0]
 80138a4:	460c      	mov	r4, r1
 80138a6:	b118      	cbz	r0, 80138b0 <__swsetup_r+0x14>
 80138a8:	6a03      	ldr	r3, [r0, #32]
 80138aa:	b90b      	cbnz	r3, 80138b0 <__swsetup_r+0x14>
 80138ac:	f7fe f8f8 	bl	8011aa0 <__sinit>
 80138b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80138b4:	0719      	lsls	r1, r3, #28
 80138b6:	d422      	bmi.n	80138fe <__swsetup_r+0x62>
 80138b8:	06da      	lsls	r2, r3, #27
 80138ba:	d407      	bmi.n	80138cc <__swsetup_r+0x30>
 80138bc:	2209      	movs	r2, #9
 80138be:	602a      	str	r2, [r5, #0]
 80138c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80138c4:	81a3      	strh	r3, [r4, #12]
 80138c6:	f04f 30ff 	mov.w	r0, #4294967295
 80138ca:	e033      	b.n	8013934 <__swsetup_r+0x98>
 80138cc:	0758      	lsls	r0, r3, #29
 80138ce:	d512      	bpl.n	80138f6 <__swsetup_r+0x5a>
 80138d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80138d2:	b141      	cbz	r1, 80138e6 <__swsetup_r+0x4a>
 80138d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80138d8:	4299      	cmp	r1, r3
 80138da:	d002      	beq.n	80138e2 <__swsetup_r+0x46>
 80138dc:	4628      	mov	r0, r5
 80138de:	f7ff f907 	bl	8012af0 <_free_r>
 80138e2:	2300      	movs	r3, #0
 80138e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80138e6:	89a3      	ldrh	r3, [r4, #12]
 80138e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80138ec:	81a3      	strh	r3, [r4, #12]
 80138ee:	2300      	movs	r3, #0
 80138f0:	6063      	str	r3, [r4, #4]
 80138f2:	6923      	ldr	r3, [r4, #16]
 80138f4:	6023      	str	r3, [r4, #0]
 80138f6:	89a3      	ldrh	r3, [r4, #12]
 80138f8:	f043 0308 	orr.w	r3, r3, #8
 80138fc:	81a3      	strh	r3, [r4, #12]
 80138fe:	6923      	ldr	r3, [r4, #16]
 8013900:	b94b      	cbnz	r3, 8013916 <__swsetup_r+0x7a>
 8013902:	89a3      	ldrh	r3, [r4, #12]
 8013904:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013908:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801390c:	d003      	beq.n	8013916 <__swsetup_r+0x7a>
 801390e:	4621      	mov	r1, r4
 8013910:	4628      	mov	r0, r5
 8013912:	f000 fa13 	bl	8013d3c <__smakebuf_r>
 8013916:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801391a:	f013 0201 	ands.w	r2, r3, #1
 801391e:	d00a      	beq.n	8013936 <__swsetup_r+0x9a>
 8013920:	2200      	movs	r2, #0
 8013922:	60a2      	str	r2, [r4, #8]
 8013924:	6962      	ldr	r2, [r4, #20]
 8013926:	4252      	negs	r2, r2
 8013928:	61a2      	str	r2, [r4, #24]
 801392a:	6922      	ldr	r2, [r4, #16]
 801392c:	b942      	cbnz	r2, 8013940 <__swsetup_r+0xa4>
 801392e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8013932:	d1c5      	bne.n	80138c0 <__swsetup_r+0x24>
 8013934:	bd38      	pop	{r3, r4, r5, pc}
 8013936:	0799      	lsls	r1, r3, #30
 8013938:	bf58      	it	pl
 801393a:	6962      	ldrpl	r2, [r4, #20]
 801393c:	60a2      	str	r2, [r4, #8]
 801393e:	e7f4      	b.n	801392a <__swsetup_r+0x8e>
 8013940:	2000      	movs	r0, #0
 8013942:	e7f7      	b.n	8013934 <__swsetup_r+0x98>
 8013944:	200002b4 	.word	0x200002b4

08013948 <memmove>:
 8013948:	4288      	cmp	r0, r1
 801394a:	b510      	push	{r4, lr}
 801394c:	eb01 0402 	add.w	r4, r1, r2
 8013950:	d902      	bls.n	8013958 <memmove+0x10>
 8013952:	4284      	cmp	r4, r0
 8013954:	4623      	mov	r3, r4
 8013956:	d807      	bhi.n	8013968 <memmove+0x20>
 8013958:	1e43      	subs	r3, r0, #1
 801395a:	42a1      	cmp	r1, r4
 801395c:	d008      	beq.n	8013970 <memmove+0x28>
 801395e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013962:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013966:	e7f8      	b.n	801395a <memmove+0x12>
 8013968:	4402      	add	r2, r0
 801396a:	4601      	mov	r1, r0
 801396c:	428a      	cmp	r2, r1
 801396e:	d100      	bne.n	8013972 <memmove+0x2a>
 8013970:	bd10      	pop	{r4, pc}
 8013972:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013976:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801397a:	e7f7      	b.n	801396c <memmove+0x24>

0801397c <_sbrk_r>:
 801397c:	b538      	push	{r3, r4, r5, lr}
 801397e:	4d06      	ldr	r5, [pc, #24]	@ (8013998 <_sbrk_r+0x1c>)
 8013980:	2300      	movs	r3, #0
 8013982:	4604      	mov	r4, r0
 8013984:	4608      	mov	r0, r1
 8013986:	602b      	str	r3, [r5, #0]
 8013988:	f7f5 f820 	bl	80089cc <_sbrk>
 801398c:	1c43      	adds	r3, r0, #1
 801398e:	d102      	bne.n	8013996 <_sbrk_r+0x1a>
 8013990:	682b      	ldr	r3, [r5, #0]
 8013992:	b103      	cbz	r3, 8013996 <_sbrk_r+0x1a>
 8013994:	6023      	str	r3, [r4, #0]
 8013996:	bd38      	pop	{r3, r4, r5, pc}
 8013998:	2000ccc0 	.word	0x2000ccc0

0801399c <abort>:
 801399c:	b508      	push	{r3, lr}
 801399e:	2006      	movs	r0, #6
 80139a0:	f000 fa30 	bl	8013e04 <raise>
 80139a4:	2001      	movs	r0, #1
 80139a6:	f7f4 ff99 	bl	80088dc <_exit>

080139aa <_calloc_r>:
 80139aa:	b570      	push	{r4, r5, r6, lr}
 80139ac:	fba1 5402 	umull	r5, r4, r1, r2
 80139b0:	b93c      	cbnz	r4, 80139c2 <_calloc_r+0x18>
 80139b2:	4629      	mov	r1, r5
 80139b4:	f7ff f910 	bl	8012bd8 <_malloc_r>
 80139b8:	4606      	mov	r6, r0
 80139ba:	b928      	cbnz	r0, 80139c8 <_calloc_r+0x1e>
 80139bc:	2600      	movs	r6, #0
 80139be:	4630      	mov	r0, r6
 80139c0:	bd70      	pop	{r4, r5, r6, pc}
 80139c2:	220c      	movs	r2, #12
 80139c4:	6002      	str	r2, [r0, #0]
 80139c6:	e7f9      	b.n	80139bc <_calloc_r+0x12>
 80139c8:	462a      	mov	r2, r5
 80139ca:	4621      	mov	r1, r4
 80139cc:	f7fe f901 	bl	8011bd2 <memset>
 80139d0:	e7f5      	b.n	80139be <_calloc_r+0x14>

080139d2 <__ascii_mbtowc>:
 80139d2:	b082      	sub	sp, #8
 80139d4:	b901      	cbnz	r1, 80139d8 <__ascii_mbtowc+0x6>
 80139d6:	a901      	add	r1, sp, #4
 80139d8:	b142      	cbz	r2, 80139ec <__ascii_mbtowc+0x1a>
 80139da:	b14b      	cbz	r3, 80139f0 <__ascii_mbtowc+0x1e>
 80139dc:	7813      	ldrb	r3, [r2, #0]
 80139de:	600b      	str	r3, [r1, #0]
 80139e0:	7812      	ldrb	r2, [r2, #0]
 80139e2:	1e10      	subs	r0, r2, #0
 80139e4:	bf18      	it	ne
 80139e6:	2001      	movne	r0, #1
 80139e8:	b002      	add	sp, #8
 80139ea:	4770      	bx	lr
 80139ec:	4610      	mov	r0, r2
 80139ee:	e7fb      	b.n	80139e8 <__ascii_mbtowc+0x16>
 80139f0:	f06f 0001 	mvn.w	r0, #1
 80139f4:	e7f8      	b.n	80139e8 <__ascii_mbtowc+0x16>

080139f6 <_realloc_r>:
 80139f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139fa:	4680      	mov	r8, r0
 80139fc:	4615      	mov	r5, r2
 80139fe:	460c      	mov	r4, r1
 8013a00:	b921      	cbnz	r1, 8013a0c <_realloc_r+0x16>
 8013a02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013a06:	4611      	mov	r1, r2
 8013a08:	f7ff b8e6 	b.w	8012bd8 <_malloc_r>
 8013a0c:	b92a      	cbnz	r2, 8013a1a <_realloc_r+0x24>
 8013a0e:	f7ff f86f 	bl	8012af0 <_free_r>
 8013a12:	2400      	movs	r4, #0
 8013a14:	4620      	mov	r0, r4
 8013a16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a1a:	f000 fa31 	bl	8013e80 <_malloc_usable_size_r>
 8013a1e:	4285      	cmp	r5, r0
 8013a20:	4606      	mov	r6, r0
 8013a22:	d802      	bhi.n	8013a2a <_realloc_r+0x34>
 8013a24:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8013a28:	d8f4      	bhi.n	8013a14 <_realloc_r+0x1e>
 8013a2a:	4629      	mov	r1, r5
 8013a2c:	4640      	mov	r0, r8
 8013a2e:	f7ff f8d3 	bl	8012bd8 <_malloc_r>
 8013a32:	4607      	mov	r7, r0
 8013a34:	2800      	cmp	r0, #0
 8013a36:	d0ec      	beq.n	8013a12 <_realloc_r+0x1c>
 8013a38:	42b5      	cmp	r5, r6
 8013a3a:	462a      	mov	r2, r5
 8013a3c:	4621      	mov	r1, r4
 8013a3e:	bf28      	it	cs
 8013a40:	4632      	movcs	r2, r6
 8013a42:	f7fe f9da 	bl	8011dfa <memcpy>
 8013a46:	4621      	mov	r1, r4
 8013a48:	4640      	mov	r0, r8
 8013a4a:	f7ff f851 	bl	8012af0 <_free_r>
 8013a4e:	463c      	mov	r4, r7
 8013a50:	e7e0      	b.n	8013a14 <_realloc_r+0x1e>

08013a52 <__ascii_wctomb>:
 8013a52:	4603      	mov	r3, r0
 8013a54:	4608      	mov	r0, r1
 8013a56:	b141      	cbz	r1, 8013a6a <__ascii_wctomb+0x18>
 8013a58:	2aff      	cmp	r2, #255	@ 0xff
 8013a5a:	d904      	bls.n	8013a66 <__ascii_wctomb+0x14>
 8013a5c:	228a      	movs	r2, #138	@ 0x8a
 8013a5e:	601a      	str	r2, [r3, #0]
 8013a60:	f04f 30ff 	mov.w	r0, #4294967295
 8013a64:	4770      	bx	lr
 8013a66:	700a      	strb	r2, [r1, #0]
 8013a68:	2001      	movs	r0, #1
 8013a6a:	4770      	bx	lr

08013a6c <__sfputc_r>:
 8013a6c:	6893      	ldr	r3, [r2, #8]
 8013a6e:	3b01      	subs	r3, #1
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	b410      	push	{r4}
 8013a74:	6093      	str	r3, [r2, #8]
 8013a76:	da08      	bge.n	8013a8a <__sfputc_r+0x1e>
 8013a78:	6994      	ldr	r4, [r2, #24]
 8013a7a:	42a3      	cmp	r3, r4
 8013a7c:	db01      	blt.n	8013a82 <__sfputc_r+0x16>
 8013a7e:	290a      	cmp	r1, #10
 8013a80:	d103      	bne.n	8013a8a <__sfputc_r+0x1e>
 8013a82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013a86:	f7ff becb 	b.w	8013820 <__swbuf_r>
 8013a8a:	6813      	ldr	r3, [r2, #0]
 8013a8c:	1c58      	adds	r0, r3, #1
 8013a8e:	6010      	str	r0, [r2, #0]
 8013a90:	7019      	strb	r1, [r3, #0]
 8013a92:	4608      	mov	r0, r1
 8013a94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013a98:	4770      	bx	lr

08013a9a <__sfputs_r>:
 8013a9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a9c:	4606      	mov	r6, r0
 8013a9e:	460f      	mov	r7, r1
 8013aa0:	4614      	mov	r4, r2
 8013aa2:	18d5      	adds	r5, r2, r3
 8013aa4:	42ac      	cmp	r4, r5
 8013aa6:	d101      	bne.n	8013aac <__sfputs_r+0x12>
 8013aa8:	2000      	movs	r0, #0
 8013aaa:	e007      	b.n	8013abc <__sfputs_r+0x22>
 8013aac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013ab0:	463a      	mov	r2, r7
 8013ab2:	4630      	mov	r0, r6
 8013ab4:	f7ff ffda 	bl	8013a6c <__sfputc_r>
 8013ab8:	1c43      	adds	r3, r0, #1
 8013aba:	d1f3      	bne.n	8013aa4 <__sfputs_r+0xa>
 8013abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013ac0 <_vfiprintf_r>:
 8013ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ac4:	460d      	mov	r5, r1
 8013ac6:	b09d      	sub	sp, #116	@ 0x74
 8013ac8:	4614      	mov	r4, r2
 8013aca:	4698      	mov	r8, r3
 8013acc:	4606      	mov	r6, r0
 8013ace:	b118      	cbz	r0, 8013ad8 <_vfiprintf_r+0x18>
 8013ad0:	6a03      	ldr	r3, [r0, #32]
 8013ad2:	b90b      	cbnz	r3, 8013ad8 <_vfiprintf_r+0x18>
 8013ad4:	f7fd ffe4 	bl	8011aa0 <__sinit>
 8013ad8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013ada:	07d9      	lsls	r1, r3, #31
 8013adc:	d405      	bmi.n	8013aea <_vfiprintf_r+0x2a>
 8013ade:	89ab      	ldrh	r3, [r5, #12]
 8013ae0:	059a      	lsls	r2, r3, #22
 8013ae2:	d402      	bmi.n	8013aea <_vfiprintf_r+0x2a>
 8013ae4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013ae6:	f7fe f97e 	bl	8011de6 <__retarget_lock_acquire_recursive>
 8013aea:	89ab      	ldrh	r3, [r5, #12]
 8013aec:	071b      	lsls	r3, r3, #28
 8013aee:	d501      	bpl.n	8013af4 <_vfiprintf_r+0x34>
 8013af0:	692b      	ldr	r3, [r5, #16]
 8013af2:	b99b      	cbnz	r3, 8013b1c <_vfiprintf_r+0x5c>
 8013af4:	4629      	mov	r1, r5
 8013af6:	4630      	mov	r0, r6
 8013af8:	f7ff fed0 	bl	801389c <__swsetup_r>
 8013afc:	b170      	cbz	r0, 8013b1c <_vfiprintf_r+0x5c>
 8013afe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013b00:	07dc      	lsls	r4, r3, #31
 8013b02:	d504      	bpl.n	8013b0e <_vfiprintf_r+0x4e>
 8013b04:	f04f 30ff 	mov.w	r0, #4294967295
 8013b08:	b01d      	add	sp, #116	@ 0x74
 8013b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b0e:	89ab      	ldrh	r3, [r5, #12]
 8013b10:	0598      	lsls	r0, r3, #22
 8013b12:	d4f7      	bmi.n	8013b04 <_vfiprintf_r+0x44>
 8013b14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013b16:	f7fe f967 	bl	8011de8 <__retarget_lock_release_recursive>
 8013b1a:	e7f3      	b.n	8013b04 <_vfiprintf_r+0x44>
 8013b1c:	2300      	movs	r3, #0
 8013b1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8013b20:	2320      	movs	r3, #32
 8013b22:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013b26:	f8cd 800c 	str.w	r8, [sp, #12]
 8013b2a:	2330      	movs	r3, #48	@ 0x30
 8013b2c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013cdc <_vfiprintf_r+0x21c>
 8013b30:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013b34:	f04f 0901 	mov.w	r9, #1
 8013b38:	4623      	mov	r3, r4
 8013b3a:	469a      	mov	sl, r3
 8013b3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013b40:	b10a      	cbz	r2, 8013b46 <_vfiprintf_r+0x86>
 8013b42:	2a25      	cmp	r2, #37	@ 0x25
 8013b44:	d1f9      	bne.n	8013b3a <_vfiprintf_r+0x7a>
 8013b46:	ebba 0b04 	subs.w	fp, sl, r4
 8013b4a:	d00b      	beq.n	8013b64 <_vfiprintf_r+0xa4>
 8013b4c:	465b      	mov	r3, fp
 8013b4e:	4622      	mov	r2, r4
 8013b50:	4629      	mov	r1, r5
 8013b52:	4630      	mov	r0, r6
 8013b54:	f7ff ffa1 	bl	8013a9a <__sfputs_r>
 8013b58:	3001      	adds	r0, #1
 8013b5a:	f000 80a7 	beq.w	8013cac <_vfiprintf_r+0x1ec>
 8013b5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013b60:	445a      	add	r2, fp
 8013b62:	9209      	str	r2, [sp, #36]	@ 0x24
 8013b64:	f89a 3000 	ldrb.w	r3, [sl]
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	f000 809f 	beq.w	8013cac <_vfiprintf_r+0x1ec>
 8013b6e:	2300      	movs	r3, #0
 8013b70:	f04f 32ff 	mov.w	r2, #4294967295
 8013b74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013b78:	f10a 0a01 	add.w	sl, sl, #1
 8013b7c:	9304      	str	r3, [sp, #16]
 8013b7e:	9307      	str	r3, [sp, #28]
 8013b80:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013b84:	931a      	str	r3, [sp, #104]	@ 0x68
 8013b86:	4654      	mov	r4, sl
 8013b88:	2205      	movs	r2, #5
 8013b8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b8e:	4853      	ldr	r0, [pc, #332]	@ (8013cdc <_vfiprintf_r+0x21c>)
 8013b90:	f7ec fb1e 	bl	80001d0 <memchr>
 8013b94:	9a04      	ldr	r2, [sp, #16]
 8013b96:	b9d8      	cbnz	r0, 8013bd0 <_vfiprintf_r+0x110>
 8013b98:	06d1      	lsls	r1, r2, #27
 8013b9a:	bf44      	itt	mi
 8013b9c:	2320      	movmi	r3, #32
 8013b9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013ba2:	0713      	lsls	r3, r2, #28
 8013ba4:	bf44      	itt	mi
 8013ba6:	232b      	movmi	r3, #43	@ 0x2b
 8013ba8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013bac:	f89a 3000 	ldrb.w	r3, [sl]
 8013bb0:	2b2a      	cmp	r3, #42	@ 0x2a
 8013bb2:	d015      	beq.n	8013be0 <_vfiprintf_r+0x120>
 8013bb4:	9a07      	ldr	r2, [sp, #28]
 8013bb6:	4654      	mov	r4, sl
 8013bb8:	2000      	movs	r0, #0
 8013bba:	f04f 0c0a 	mov.w	ip, #10
 8013bbe:	4621      	mov	r1, r4
 8013bc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013bc4:	3b30      	subs	r3, #48	@ 0x30
 8013bc6:	2b09      	cmp	r3, #9
 8013bc8:	d94b      	bls.n	8013c62 <_vfiprintf_r+0x1a2>
 8013bca:	b1b0      	cbz	r0, 8013bfa <_vfiprintf_r+0x13a>
 8013bcc:	9207      	str	r2, [sp, #28]
 8013bce:	e014      	b.n	8013bfa <_vfiprintf_r+0x13a>
 8013bd0:	eba0 0308 	sub.w	r3, r0, r8
 8013bd4:	fa09 f303 	lsl.w	r3, r9, r3
 8013bd8:	4313      	orrs	r3, r2
 8013bda:	9304      	str	r3, [sp, #16]
 8013bdc:	46a2      	mov	sl, r4
 8013bde:	e7d2      	b.n	8013b86 <_vfiprintf_r+0xc6>
 8013be0:	9b03      	ldr	r3, [sp, #12]
 8013be2:	1d19      	adds	r1, r3, #4
 8013be4:	681b      	ldr	r3, [r3, #0]
 8013be6:	9103      	str	r1, [sp, #12]
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	bfbb      	ittet	lt
 8013bec:	425b      	neglt	r3, r3
 8013bee:	f042 0202 	orrlt.w	r2, r2, #2
 8013bf2:	9307      	strge	r3, [sp, #28]
 8013bf4:	9307      	strlt	r3, [sp, #28]
 8013bf6:	bfb8      	it	lt
 8013bf8:	9204      	strlt	r2, [sp, #16]
 8013bfa:	7823      	ldrb	r3, [r4, #0]
 8013bfc:	2b2e      	cmp	r3, #46	@ 0x2e
 8013bfe:	d10a      	bne.n	8013c16 <_vfiprintf_r+0x156>
 8013c00:	7863      	ldrb	r3, [r4, #1]
 8013c02:	2b2a      	cmp	r3, #42	@ 0x2a
 8013c04:	d132      	bne.n	8013c6c <_vfiprintf_r+0x1ac>
 8013c06:	9b03      	ldr	r3, [sp, #12]
 8013c08:	1d1a      	adds	r2, r3, #4
 8013c0a:	681b      	ldr	r3, [r3, #0]
 8013c0c:	9203      	str	r2, [sp, #12]
 8013c0e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013c12:	3402      	adds	r4, #2
 8013c14:	9305      	str	r3, [sp, #20]
 8013c16:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013cec <_vfiprintf_r+0x22c>
 8013c1a:	7821      	ldrb	r1, [r4, #0]
 8013c1c:	2203      	movs	r2, #3
 8013c1e:	4650      	mov	r0, sl
 8013c20:	f7ec fad6 	bl	80001d0 <memchr>
 8013c24:	b138      	cbz	r0, 8013c36 <_vfiprintf_r+0x176>
 8013c26:	9b04      	ldr	r3, [sp, #16]
 8013c28:	eba0 000a 	sub.w	r0, r0, sl
 8013c2c:	2240      	movs	r2, #64	@ 0x40
 8013c2e:	4082      	lsls	r2, r0
 8013c30:	4313      	orrs	r3, r2
 8013c32:	3401      	adds	r4, #1
 8013c34:	9304      	str	r3, [sp, #16]
 8013c36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c3a:	4829      	ldr	r0, [pc, #164]	@ (8013ce0 <_vfiprintf_r+0x220>)
 8013c3c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013c40:	2206      	movs	r2, #6
 8013c42:	f7ec fac5 	bl	80001d0 <memchr>
 8013c46:	2800      	cmp	r0, #0
 8013c48:	d03f      	beq.n	8013cca <_vfiprintf_r+0x20a>
 8013c4a:	4b26      	ldr	r3, [pc, #152]	@ (8013ce4 <_vfiprintf_r+0x224>)
 8013c4c:	bb1b      	cbnz	r3, 8013c96 <_vfiprintf_r+0x1d6>
 8013c4e:	9b03      	ldr	r3, [sp, #12]
 8013c50:	3307      	adds	r3, #7
 8013c52:	f023 0307 	bic.w	r3, r3, #7
 8013c56:	3308      	adds	r3, #8
 8013c58:	9303      	str	r3, [sp, #12]
 8013c5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013c5c:	443b      	add	r3, r7
 8013c5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8013c60:	e76a      	b.n	8013b38 <_vfiprintf_r+0x78>
 8013c62:	fb0c 3202 	mla	r2, ip, r2, r3
 8013c66:	460c      	mov	r4, r1
 8013c68:	2001      	movs	r0, #1
 8013c6a:	e7a8      	b.n	8013bbe <_vfiprintf_r+0xfe>
 8013c6c:	2300      	movs	r3, #0
 8013c6e:	3401      	adds	r4, #1
 8013c70:	9305      	str	r3, [sp, #20]
 8013c72:	4619      	mov	r1, r3
 8013c74:	f04f 0c0a 	mov.w	ip, #10
 8013c78:	4620      	mov	r0, r4
 8013c7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013c7e:	3a30      	subs	r2, #48	@ 0x30
 8013c80:	2a09      	cmp	r2, #9
 8013c82:	d903      	bls.n	8013c8c <_vfiprintf_r+0x1cc>
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	d0c6      	beq.n	8013c16 <_vfiprintf_r+0x156>
 8013c88:	9105      	str	r1, [sp, #20]
 8013c8a:	e7c4      	b.n	8013c16 <_vfiprintf_r+0x156>
 8013c8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8013c90:	4604      	mov	r4, r0
 8013c92:	2301      	movs	r3, #1
 8013c94:	e7f0      	b.n	8013c78 <_vfiprintf_r+0x1b8>
 8013c96:	ab03      	add	r3, sp, #12
 8013c98:	9300      	str	r3, [sp, #0]
 8013c9a:	462a      	mov	r2, r5
 8013c9c:	4b12      	ldr	r3, [pc, #72]	@ (8013ce8 <_vfiprintf_r+0x228>)
 8013c9e:	a904      	add	r1, sp, #16
 8013ca0:	4630      	mov	r0, r6
 8013ca2:	f7fd fab9 	bl	8011218 <_printf_float>
 8013ca6:	4607      	mov	r7, r0
 8013ca8:	1c78      	adds	r0, r7, #1
 8013caa:	d1d6      	bne.n	8013c5a <_vfiprintf_r+0x19a>
 8013cac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013cae:	07d9      	lsls	r1, r3, #31
 8013cb0:	d405      	bmi.n	8013cbe <_vfiprintf_r+0x1fe>
 8013cb2:	89ab      	ldrh	r3, [r5, #12]
 8013cb4:	059a      	lsls	r2, r3, #22
 8013cb6:	d402      	bmi.n	8013cbe <_vfiprintf_r+0x1fe>
 8013cb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013cba:	f7fe f895 	bl	8011de8 <__retarget_lock_release_recursive>
 8013cbe:	89ab      	ldrh	r3, [r5, #12]
 8013cc0:	065b      	lsls	r3, r3, #25
 8013cc2:	f53f af1f 	bmi.w	8013b04 <_vfiprintf_r+0x44>
 8013cc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013cc8:	e71e      	b.n	8013b08 <_vfiprintf_r+0x48>
 8013cca:	ab03      	add	r3, sp, #12
 8013ccc:	9300      	str	r3, [sp, #0]
 8013cce:	462a      	mov	r2, r5
 8013cd0:	4b05      	ldr	r3, [pc, #20]	@ (8013ce8 <_vfiprintf_r+0x228>)
 8013cd2:	a904      	add	r1, sp, #16
 8013cd4:	4630      	mov	r0, r6
 8013cd6:	f7fd fd37 	bl	8011748 <_printf_i>
 8013cda:	e7e4      	b.n	8013ca6 <_vfiprintf_r+0x1e6>
 8013cdc:	08015328 	.word	0x08015328
 8013ce0:	08015332 	.word	0x08015332
 8013ce4:	08011219 	.word	0x08011219
 8013ce8:	08013a9b 	.word	0x08013a9b
 8013cec:	0801532e 	.word	0x0801532e

08013cf0 <__swhatbuf_r>:
 8013cf0:	b570      	push	{r4, r5, r6, lr}
 8013cf2:	460c      	mov	r4, r1
 8013cf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013cf8:	2900      	cmp	r1, #0
 8013cfa:	b096      	sub	sp, #88	@ 0x58
 8013cfc:	4615      	mov	r5, r2
 8013cfe:	461e      	mov	r6, r3
 8013d00:	da0d      	bge.n	8013d1e <__swhatbuf_r+0x2e>
 8013d02:	89a3      	ldrh	r3, [r4, #12]
 8013d04:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013d08:	f04f 0100 	mov.w	r1, #0
 8013d0c:	bf14      	ite	ne
 8013d0e:	2340      	movne	r3, #64	@ 0x40
 8013d10:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013d14:	2000      	movs	r0, #0
 8013d16:	6031      	str	r1, [r6, #0]
 8013d18:	602b      	str	r3, [r5, #0]
 8013d1a:	b016      	add	sp, #88	@ 0x58
 8013d1c:	bd70      	pop	{r4, r5, r6, pc}
 8013d1e:	466a      	mov	r2, sp
 8013d20:	f000 f878 	bl	8013e14 <_fstat_r>
 8013d24:	2800      	cmp	r0, #0
 8013d26:	dbec      	blt.n	8013d02 <__swhatbuf_r+0x12>
 8013d28:	9901      	ldr	r1, [sp, #4]
 8013d2a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013d2e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013d32:	4259      	negs	r1, r3
 8013d34:	4159      	adcs	r1, r3
 8013d36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013d3a:	e7eb      	b.n	8013d14 <__swhatbuf_r+0x24>

08013d3c <__smakebuf_r>:
 8013d3c:	898b      	ldrh	r3, [r1, #12]
 8013d3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013d40:	079d      	lsls	r5, r3, #30
 8013d42:	4606      	mov	r6, r0
 8013d44:	460c      	mov	r4, r1
 8013d46:	d507      	bpl.n	8013d58 <__smakebuf_r+0x1c>
 8013d48:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013d4c:	6023      	str	r3, [r4, #0]
 8013d4e:	6123      	str	r3, [r4, #16]
 8013d50:	2301      	movs	r3, #1
 8013d52:	6163      	str	r3, [r4, #20]
 8013d54:	b003      	add	sp, #12
 8013d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d58:	ab01      	add	r3, sp, #4
 8013d5a:	466a      	mov	r2, sp
 8013d5c:	f7ff ffc8 	bl	8013cf0 <__swhatbuf_r>
 8013d60:	9f00      	ldr	r7, [sp, #0]
 8013d62:	4605      	mov	r5, r0
 8013d64:	4639      	mov	r1, r7
 8013d66:	4630      	mov	r0, r6
 8013d68:	f7fe ff36 	bl	8012bd8 <_malloc_r>
 8013d6c:	b948      	cbnz	r0, 8013d82 <__smakebuf_r+0x46>
 8013d6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013d72:	059a      	lsls	r2, r3, #22
 8013d74:	d4ee      	bmi.n	8013d54 <__smakebuf_r+0x18>
 8013d76:	f023 0303 	bic.w	r3, r3, #3
 8013d7a:	f043 0302 	orr.w	r3, r3, #2
 8013d7e:	81a3      	strh	r3, [r4, #12]
 8013d80:	e7e2      	b.n	8013d48 <__smakebuf_r+0xc>
 8013d82:	89a3      	ldrh	r3, [r4, #12]
 8013d84:	6020      	str	r0, [r4, #0]
 8013d86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013d8a:	81a3      	strh	r3, [r4, #12]
 8013d8c:	9b01      	ldr	r3, [sp, #4]
 8013d8e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013d92:	b15b      	cbz	r3, 8013dac <__smakebuf_r+0x70>
 8013d94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013d98:	4630      	mov	r0, r6
 8013d9a:	f000 f84d 	bl	8013e38 <_isatty_r>
 8013d9e:	b128      	cbz	r0, 8013dac <__smakebuf_r+0x70>
 8013da0:	89a3      	ldrh	r3, [r4, #12]
 8013da2:	f023 0303 	bic.w	r3, r3, #3
 8013da6:	f043 0301 	orr.w	r3, r3, #1
 8013daa:	81a3      	strh	r3, [r4, #12]
 8013dac:	89a3      	ldrh	r3, [r4, #12]
 8013dae:	431d      	orrs	r5, r3
 8013db0:	81a5      	strh	r5, [r4, #12]
 8013db2:	e7cf      	b.n	8013d54 <__smakebuf_r+0x18>

08013db4 <_raise_r>:
 8013db4:	291f      	cmp	r1, #31
 8013db6:	b538      	push	{r3, r4, r5, lr}
 8013db8:	4605      	mov	r5, r0
 8013dba:	460c      	mov	r4, r1
 8013dbc:	d904      	bls.n	8013dc8 <_raise_r+0x14>
 8013dbe:	2316      	movs	r3, #22
 8013dc0:	6003      	str	r3, [r0, #0]
 8013dc2:	f04f 30ff 	mov.w	r0, #4294967295
 8013dc6:	bd38      	pop	{r3, r4, r5, pc}
 8013dc8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013dca:	b112      	cbz	r2, 8013dd2 <_raise_r+0x1e>
 8013dcc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013dd0:	b94b      	cbnz	r3, 8013de6 <_raise_r+0x32>
 8013dd2:	4628      	mov	r0, r5
 8013dd4:	f000 f852 	bl	8013e7c <_getpid_r>
 8013dd8:	4622      	mov	r2, r4
 8013dda:	4601      	mov	r1, r0
 8013ddc:	4628      	mov	r0, r5
 8013dde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013de2:	f000 b839 	b.w	8013e58 <_kill_r>
 8013de6:	2b01      	cmp	r3, #1
 8013de8:	d00a      	beq.n	8013e00 <_raise_r+0x4c>
 8013dea:	1c59      	adds	r1, r3, #1
 8013dec:	d103      	bne.n	8013df6 <_raise_r+0x42>
 8013dee:	2316      	movs	r3, #22
 8013df0:	6003      	str	r3, [r0, #0]
 8013df2:	2001      	movs	r0, #1
 8013df4:	e7e7      	b.n	8013dc6 <_raise_r+0x12>
 8013df6:	2100      	movs	r1, #0
 8013df8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013dfc:	4620      	mov	r0, r4
 8013dfe:	4798      	blx	r3
 8013e00:	2000      	movs	r0, #0
 8013e02:	e7e0      	b.n	8013dc6 <_raise_r+0x12>

08013e04 <raise>:
 8013e04:	4b02      	ldr	r3, [pc, #8]	@ (8013e10 <raise+0xc>)
 8013e06:	4601      	mov	r1, r0
 8013e08:	6818      	ldr	r0, [r3, #0]
 8013e0a:	f7ff bfd3 	b.w	8013db4 <_raise_r>
 8013e0e:	bf00      	nop
 8013e10:	200002b4 	.word	0x200002b4

08013e14 <_fstat_r>:
 8013e14:	b538      	push	{r3, r4, r5, lr}
 8013e16:	4d07      	ldr	r5, [pc, #28]	@ (8013e34 <_fstat_r+0x20>)
 8013e18:	2300      	movs	r3, #0
 8013e1a:	4604      	mov	r4, r0
 8013e1c:	4608      	mov	r0, r1
 8013e1e:	4611      	mov	r1, r2
 8013e20:	602b      	str	r3, [r5, #0]
 8013e22:	f7f4 fdab 	bl	800897c <_fstat>
 8013e26:	1c43      	adds	r3, r0, #1
 8013e28:	d102      	bne.n	8013e30 <_fstat_r+0x1c>
 8013e2a:	682b      	ldr	r3, [r5, #0]
 8013e2c:	b103      	cbz	r3, 8013e30 <_fstat_r+0x1c>
 8013e2e:	6023      	str	r3, [r4, #0]
 8013e30:	bd38      	pop	{r3, r4, r5, pc}
 8013e32:	bf00      	nop
 8013e34:	2000ccc0 	.word	0x2000ccc0

08013e38 <_isatty_r>:
 8013e38:	b538      	push	{r3, r4, r5, lr}
 8013e3a:	4d06      	ldr	r5, [pc, #24]	@ (8013e54 <_isatty_r+0x1c>)
 8013e3c:	2300      	movs	r3, #0
 8013e3e:	4604      	mov	r4, r0
 8013e40:	4608      	mov	r0, r1
 8013e42:	602b      	str	r3, [r5, #0]
 8013e44:	f7f4 fdaa 	bl	800899c <_isatty>
 8013e48:	1c43      	adds	r3, r0, #1
 8013e4a:	d102      	bne.n	8013e52 <_isatty_r+0x1a>
 8013e4c:	682b      	ldr	r3, [r5, #0]
 8013e4e:	b103      	cbz	r3, 8013e52 <_isatty_r+0x1a>
 8013e50:	6023      	str	r3, [r4, #0]
 8013e52:	bd38      	pop	{r3, r4, r5, pc}
 8013e54:	2000ccc0 	.word	0x2000ccc0

08013e58 <_kill_r>:
 8013e58:	b538      	push	{r3, r4, r5, lr}
 8013e5a:	4d07      	ldr	r5, [pc, #28]	@ (8013e78 <_kill_r+0x20>)
 8013e5c:	2300      	movs	r3, #0
 8013e5e:	4604      	mov	r4, r0
 8013e60:	4608      	mov	r0, r1
 8013e62:	4611      	mov	r1, r2
 8013e64:	602b      	str	r3, [r5, #0]
 8013e66:	f7f4 fd29 	bl	80088bc <_kill>
 8013e6a:	1c43      	adds	r3, r0, #1
 8013e6c:	d102      	bne.n	8013e74 <_kill_r+0x1c>
 8013e6e:	682b      	ldr	r3, [r5, #0]
 8013e70:	b103      	cbz	r3, 8013e74 <_kill_r+0x1c>
 8013e72:	6023      	str	r3, [r4, #0]
 8013e74:	bd38      	pop	{r3, r4, r5, pc}
 8013e76:	bf00      	nop
 8013e78:	2000ccc0 	.word	0x2000ccc0

08013e7c <_getpid_r>:
 8013e7c:	f7f4 bd16 	b.w	80088ac <_getpid>

08013e80 <_malloc_usable_size_r>:
 8013e80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013e84:	1f18      	subs	r0, r3, #4
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	bfbc      	itt	lt
 8013e8a:	580b      	ldrlt	r3, [r1, r0]
 8013e8c:	18c0      	addlt	r0, r0, r3
 8013e8e:	4770      	bx	lr

08013e90 <_init>:
 8013e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e92:	bf00      	nop
 8013e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013e96:	bc08      	pop	{r3}
 8013e98:	469e      	mov	lr, r3
 8013e9a:	4770      	bx	lr

08013e9c <_fini>:
 8013e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e9e:	bf00      	nop
 8013ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013ea2:	bc08      	pop	{r3}
 8013ea4:	469e      	mov	lr, r3
 8013ea6:	4770      	bx	lr
