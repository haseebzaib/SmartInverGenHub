
SmartInverGenHub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011a00  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cb4  08011b90  08011b90  00012b90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012844  08012844  00014230  2**0
                  CONTENTS
  4 .ARM          00000008  08012844  08012844  00013844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801284c  0801284c  00014230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000014  0801284c  0801284c  0001384c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012860  08012860  00013860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000230  20000000  08012864  00014000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00014230  2**0
                  CONTENTS
 10 .bss          0000e174  20000230  20000230  00014230  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000e3a4  2000e3a4  00014230  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00014230  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003c5f5  00000000  00000000  00014260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008a3c  00000000  00000000  00050855  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002148  00000000  00000000  00059298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000019bc  00000000  00000000  0005b3e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00031db3  00000000  00000000  0005cd9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00038a71  00000000  00000000  0008eb4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f9d34  00000000  00000000  000c75c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001c12f4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009bcc  00000000  00000000  001c1338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  001caf04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000230 	.word	0x20000230
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011b78 	.word	0x08011b78

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000234 	.word	0x20000234
 80001cc:	08011b78 	.word	0x08011b78

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <_Z20ControlnDDisplayTaskPv>:

uint8_t batt_chargetimekeeping_Flag = 0;

char batTime[20];

void ControlnDDisplayTask(void *pvParameters) {
 8000f78:	b5b0      	push	{r4, r5, r7, lr}
 8000f7a:	f5ad 6d92 	sub.w	sp, sp, #1168	@ 0x490
 8000f7e:	af04      	add	r7, sp, #16
 8000f80:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8000f84:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8000f88:	6018      	str	r0, [r3, #0]

	struct ModemData_Queue ModemData = { 0 };
 8000f8a:	f507 7369 	add.w	r3, r7, #932	@ 0x3a4
 8000f8e:	22d9      	movs	r2, #217	@ 0xd9
 8000f90:	2100      	movs	r1, #0
 8000f92:	4618      	mov	r0, r3
 8000f94:	f00e fc93 	bl	800f8be <memset>

	struct ControlData_Queue ControlData = { 0 };
 8000f98:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8000f9c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	2374      	movs	r3, #116	@ 0x74
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	f00e fc89 	bl	800f8be <memset>

	InverterData_Queue InverterData = { 0 };
 8000fac:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8000fb0:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f44f 7349 	mov.w	r3, #804	@ 0x324
 8000fba:	461a      	mov	r2, r3
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	f00e fc7e 	bl	800f8be <memset>

	System_Rtos::delay(1000);
 8000fc2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fc6:	f004 f9e3 	bl	8005390 <_ZN11System_Rtos5delayEm>
	LCD.Startup();
 8000fca:	4869      	ldr	r0, [pc, #420]	@ (8001170 <_Z20ControlnDDisplayTaskPv+0x1f8>)
 8000fcc:	f001 fa06 	bl	80023dc <_ZN3HMI4DWIN7StartupEv>

	//parsing.convertEpochToSTMTime(&hrtc, 1732186868, 5);

	std::strcpy(ControlData.uniqueID, UniqueID::GetUid());
 8000fd0:	f001 f912 	bl	80021f8 <_ZN8UniqueID6GetUidEv>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8000fda:	4611      	mov	r1, r2
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f00e fd7a 	bl	800fad6 <strcpy>

	while (1) {

		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	4963      	ldr	r1, [pc, #396]	@ (8001174 <_Z20ControlnDDisplayTaskPv+0x1fc>)
 8000fe6:	4864      	ldr	r0, [pc, #400]	@ (8001178 <_Z20ControlnDDisplayTaskPv+0x200>)
 8000fe8:	f009 fc8b 	bl	800a902 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000fec:	2200      	movs	r2, #0
 8000fee:	4963      	ldr	r1, [pc, #396]	@ (800117c <_Z20ControlnDDisplayTaskPv+0x204>)
 8000ff0:	4861      	ldr	r0, [pc, #388]	@ (8001178 <_Z20ControlnDDisplayTaskPv+0x200>)
 8000ff2:	f009 fce4 	bl	800a9be <HAL_RTC_GetDate>
		ControlData.timestamp = parsing.convertToEpoch(sDate, sTime, 5);
 8000ff6:	4b5f      	ldr	r3, [pc, #380]	@ (8001174 <_Z20ControlnDDisplayTaskPv+0x1fc>)
 8000ff8:	4d60      	ldr	r5, [pc, #384]	@ (800117c <_Z20ControlnDDisplayTaskPv+0x204>)
 8000ffa:	2205      	movs	r2, #5
 8000ffc:	9203      	str	r2, [sp, #12]
 8000ffe:	466c      	mov	r4, sp
 8001000:	f103 0208 	add.w	r2, r3, #8
 8001004:	ca07      	ldmia	r2, {r0, r1, r2}
 8001006:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800100a:	cb0c      	ldmia	r3, {r2, r3}
 800100c:	6829      	ldr	r1, [r5, #0]
 800100e:	485c      	ldr	r0, [pc, #368]	@ (8001180 <_Z20ControlnDDisplayTaskPv+0x208>)
 8001010:	f004 fe58 	bl	8005cc4 <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa>
 8001014:	4603      	mov	r3, r0
 8001016:	461a      	mov	r2, r3
 8001018:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 800101c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001020:	611a      	str	r2, [r3, #16]

		std::sprintf(time, "%02d:%02d:%02d", sTime.Hours, sTime.Minutes,
 8001022:	4b54      	ldr	r3, [pc, #336]	@ (8001174 <_Z20ControlnDDisplayTaskPv+0x1fc>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	4b52      	ldr	r3, [pc, #328]	@ (8001174 <_Z20ControlnDDisplayTaskPv+0x1fc>)
 800102a:	785b      	ldrb	r3, [r3, #1]
 800102c:	4619      	mov	r1, r3
				sTime.Seconds);
 800102e:	4b51      	ldr	r3, [pc, #324]	@ (8001174 <_Z20ControlnDDisplayTaskPv+0x1fc>)
 8001030:	789b      	ldrb	r3, [r3, #2]
		std::sprintf(time, "%02d:%02d:%02d", sTime.Hours, sTime.Minutes,
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	460b      	mov	r3, r1
 8001036:	4953      	ldr	r1, [pc, #332]	@ (8001184 <_Z20ControlnDDisplayTaskPv+0x20c>)
 8001038:	4853      	ldr	r0, [pc, #332]	@ (8001188 <_Z20ControlnDDisplayTaskPv+0x210>)
 800103a:	f00e fbdd 	bl	800f7f8 <siprintf>
		std::sprintf(date, "%02d-%s-%02d", sDate.Date, months[sDate.Month],
 800103e:	4b4f      	ldr	r3, [pc, #316]	@ (800117c <_Z20ControlnDDisplayTaskPv+0x204>)
 8001040:	789b      	ldrb	r3, [r3, #2]
 8001042:	4619      	mov	r1, r3
 8001044:	4b4d      	ldr	r3, [pc, #308]	@ (800117c <_Z20ControlnDDisplayTaskPv+0x204>)
 8001046:	785b      	ldrb	r3, [r3, #1]
 8001048:	461a      	mov	r2, r3
 800104a:	4613      	mov	r3, r2
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	4413      	add	r3, r2
 8001050:	4a4e      	ldr	r2, [pc, #312]	@ (800118c <_Z20ControlnDDisplayTaskPv+0x214>)
 8001052:	4413      	add	r3, r2
				sDate.Year);
 8001054:	4a49      	ldr	r2, [pc, #292]	@ (800117c <_Z20ControlnDDisplayTaskPv+0x204>)
 8001056:	78d2      	ldrb	r2, [r2, #3]
		std::sprintf(date, "%02d-%s-%02d", sDate.Date, months[sDate.Month],
 8001058:	9200      	str	r2, [sp, #0]
 800105a:	460a      	mov	r2, r1
 800105c:	494c      	ldr	r1, [pc, #304]	@ (8001190 <_Z20ControlnDDisplayTaskPv+0x218>)
 800105e:	484d      	ldr	r0, [pc, #308]	@ (8001194 <_Z20ControlnDDisplayTaskPv+0x21c>)
 8001060:	f00e fbca 	bl	800f7f8 <siprintf>

		if (ModemDataQueue.queueReceive((void*) &ModemData)
 8001064:	f507 7369 	add.w	r3, r7, #932	@ 0x3a4
 8001068:	4619      	mov	r1, r3
 800106a:	484b      	ldr	r0, [pc, #300]	@ (8001198 <_Z20ControlnDDisplayTaskPv+0x220>)
 800106c:	f004 fa35 	bl	80054da <_ZN11System_Rtos15freertos_queues12queueReceiveEPv>
 8001070:	4603      	mov	r3, r0
				== ModemDataQueue.queues_recived) {
 8001072:	2b00      	cmp	r3, #0
 8001074:	bf0c      	ite	eq
 8001076:	2301      	moveq	r3, #1
 8001078:	2300      	movne	r3, #0
 800107a:	b2db      	uxtb	r3, r3
		if (ModemDataQueue.queueReceive((void*) &ModemData)
 800107c:	2b00      	cmp	r3, #0
 800107e:	d01e      	beq.n	80010be <_Z20ControlnDDisplayTaskPv+0x146>

			LCD.SendTextData(LCD.Network, ModemData.networkStat);
 8001080:	f507 7369 	add.w	r3, r7, #932	@ 0x3a4
 8001084:	330f      	adds	r3, #15
 8001086:	461a      	mov	r2, r3
 8001088:	f248 1110 	movw	r1, #33040	@ 0x8110
 800108c:	4838      	ldr	r0, [pc, #224]	@ (8001170 <_Z20ControlnDDisplayTaskPv+0x1f8>)
 800108e:	f001 fad1 	bl	8002634 <_ZN3HMI4DWIN12SendTextDataEtPc>
			LCD.SendTextData(LCD.SigQ, ModemData.quality);
 8001092:	f507 7369 	add.w	r3, r7, #932	@ 0x3a4
 8001096:	332d      	adds	r3, #45	@ 0x2d
 8001098:	461a      	mov	r2, r3
 800109a:	f248 2120 	movw	r1, #33312	@ 0x8220
 800109e:	4834      	ldr	r0, [pc, #208]	@ (8001170 <_Z20ControlnDDisplayTaskPv+0x1f8>)
 80010a0:	f001 fac8 	bl	8002634 <_ZN3HMI4DWIN12SendTextDataEtPc>
			LCD.SendTextData(LCD.Net,
					ModemData.internet == 1 ?
 80010a4:	f897 347b 	ldrb.w	r3, [r7, #1147]	@ 0x47b
			LCD.SendTextData(LCD.Net,
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d101      	bne.n	80010b0 <_Z20ControlnDDisplayTaskPv+0x138>
 80010ac:	4b3b      	ldr	r3, [pc, #236]	@ (800119c <_Z20ControlnDDisplayTaskPv+0x224>)
 80010ae:	e000      	b.n	80010b2 <_Z20ControlnDDisplayTaskPv+0x13a>
 80010b0:	4b3b      	ldr	r3, [pc, #236]	@ (80011a0 <_Z20ControlnDDisplayTaskPv+0x228>)
 80010b2:	461a      	mov	r2, r3
 80010b4:	f248 3130 	movw	r1, #33584	@ 0x8330
 80010b8:	482d      	ldr	r0, [pc, #180]	@ (8001170 <_Z20ControlnDDisplayTaskPv+0x1f8>)
 80010ba:	f001 fabb 	bl	8002634 <_ZN3HMI4DWIN12SendTextDataEtPc>
							const_cast<char*>("Conn") :
							const_cast<char*>("DisConn"));
		}

		if (InverterDataQueue.queueReceive((void*) &InverterData)
 80010be:	f107 030c 	add.w	r3, r7, #12
 80010c2:	4619      	mov	r1, r3
 80010c4:	4837      	ldr	r0, [pc, #220]	@ (80011a4 <_Z20ControlnDDisplayTaskPv+0x22c>)
 80010c6:	f004 fa08 	bl	80054da <_ZN11System_Rtos15freertos_queues12queueReceiveEPv>
 80010ca:	4603      	mov	r3, r0
				== InverterDataQueue.queues_recived) {
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	bf0c      	ite	eq
 80010d0:	2301      	moveq	r3, #1
 80010d2:	2300      	movne	r3, #0
 80010d4:	b2db      	uxtb	r3, r3
		if (InverterDataQueue.queueReceive((void*) &InverterData)
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	f000 8186 	beq.w	80013e8 <_Z20ControlnDDisplayTaskPv+0x470>

			ControlData.batteryLevel =
					std::atoi(
 80010dc:	f107 030c 	add.w	r3, r7, #12
 80010e0:	3364      	adds	r3, #100	@ 0x64
 80010e2:	4618      	mov	r0, r3
 80010e4:	f00d fde6 	bl	800ecb4 <atoi>
 80010e8:	4602      	mov	r2, r0
			ControlData.batteryLevel =
 80010ea:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 80010ee:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80010f2:	661a      	str	r2, [r3, #96]	@ 0x60
							const_cast<const char*>(InverterData.inverterData_qpigs[static_cast<int>(inverter_data_qpigs_cmd::batt_cap)]));

			parsing.binarystringToUint8(
 80010f4:	f107 030c 	add.w	r3, r7, #12
 80010f8:	33a0      	adds	r3, #160	@ 0xa0
 80010fa:	4a2b      	ldr	r2, [pc, #172]	@ (80011a8 <_Z20ControlnDDisplayTaskPv+0x230>)
 80010fc:	4619      	mov	r1, r3
 80010fe:	4820      	ldr	r0, [pc, #128]	@ (8001180 <_Z20ControlnDDisplayTaskPv+0x208>)
 8001100:	f004 fd9f 	bl	8005c42 <_ZN10System_sys16Parsing_Checking19binarystringToUint8EPcPh>
					InverterData.inverterData_qpigs[static_cast<int>(inverter_data_qpigs_cmd::dev_stat_1)],
					&batt_charging_status);
			if (InverterData.device_mode == 3) {
 8001104:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001108:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 800110c:	f893 32c1 	ldrb.w	r3, [r3, #705]	@ 0x2c1
 8001110:	2b03      	cmp	r3, #3
 8001112:	d112      	bne.n	800113a <_Z20ControlnDDisplayTaskPv+0x1c2>
				LCD.SendTextData(LCD.source_bat, const_cast<char*>("OFF"));
 8001114:	4a25      	ldr	r2, [pc, #148]	@ (80011ac <_Z20ControlnDDisplayTaskPv+0x234>)
 8001116:	f245 1110 	movw	r1, #20752	@ 0x5110
 800111a:	4815      	ldr	r0, [pc, #84]	@ (8001170 <_Z20ControlnDDisplayTaskPv+0x1f8>)
 800111c:	f001 fa8a 	bl	8002634 <_ZN3HMI4DWIN12SendTextDataEtPc>
				LCD.SendTextData(LCD.source_gen, const_cast<char*>("ON"));
 8001120:	4a23      	ldr	r2, [pc, #140]	@ (80011b0 <_Z20ControlnDDisplayTaskPv+0x238>)
 8001122:	f245 2120 	movw	r1, #21024	@ 0x5220
 8001126:	4812      	ldr	r0, [pc, #72]	@ (8001170 <_Z20ControlnDDisplayTaskPv+0x1f8>)
 8001128:	f001 fa84 	bl	8002634 <_ZN3HMI4DWIN12SendTextDataEtPc>
				LCD.SendTextData(LCD.source_sol, const_cast<char*>("OFF"));
 800112c:	4a1f      	ldr	r2, [pc, #124]	@ (80011ac <_Z20ControlnDDisplayTaskPv+0x234>)
 800112e:	f245 3130 	movw	r1, #21296	@ 0x5330
 8001132:	480f      	ldr	r0, [pc, #60]	@ (8001170 <_Z20ControlnDDisplayTaskPv+0x1f8>)
 8001134:	f001 fa7e 	bl	8002634 <_ZN3HMI4DWIN12SendTextDataEtPc>
 8001138:	e04e      	b.n	80011d8 <_Z20ControlnDDisplayTaskPv+0x260>
			} else if (InverterData.device_mode == 4) {
 800113a:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 800113e:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8001142:	f893 32c1 	ldrb.w	r3, [r3, #705]	@ 0x2c1
 8001146:	2b04      	cmp	r3, #4
 8001148:	d134      	bne.n	80011b4 <_Z20ControlnDDisplayTaskPv+0x23c>
				LCD.SendTextData(LCD.source_bat, const_cast<char*>("ON"));
 800114a:	4a19      	ldr	r2, [pc, #100]	@ (80011b0 <_Z20ControlnDDisplayTaskPv+0x238>)
 800114c:	f245 1110 	movw	r1, #20752	@ 0x5110
 8001150:	4807      	ldr	r0, [pc, #28]	@ (8001170 <_Z20ControlnDDisplayTaskPv+0x1f8>)
 8001152:	f001 fa6f 	bl	8002634 <_ZN3HMI4DWIN12SendTextDataEtPc>
				LCD.SendTextData(LCD.source_gen, const_cast<char*>("OFF"));
 8001156:	4a15      	ldr	r2, [pc, #84]	@ (80011ac <_Z20ControlnDDisplayTaskPv+0x234>)
 8001158:	f245 2120 	movw	r1, #21024	@ 0x5220
 800115c:	4804      	ldr	r0, [pc, #16]	@ (8001170 <_Z20ControlnDDisplayTaskPv+0x1f8>)
 800115e:	f001 fa69 	bl	8002634 <_ZN3HMI4DWIN12SendTextDataEtPc>
				LCD.SendTextData(LCD.source_sol, const_cast<char*>("OFF"));
 8001162:	4a12      	ldr	r2, [pc, #72]	@ (80011ac <_Z20ControlnDDisplayTaskPv+0x234>)
 8001164:	f245 3130 	movw	r1, #21296	@ 0x5330
 8001168:	4801      	ldr	r0, [pc, #4]	@ (8001170 <_Z20ControlnDDisplayTaskPv+0x1f8>)
 800116a:	f001 fa63 	bl	8002634 <_ZN3HMI4DWIN12SendTextDataEtPc>
 800116e:	e033      	b.n	80011d8 <_Z20ControlnDDisplayTaskPv+0x260>
 8001170:	200002a4 	.word	0x200002a4
 8001174:	20000250 	.word	0x20000250
 8001178:	200035cc 	.word	0x200035cc
 800117c:	2000024c 	.word	0x2000024c
 8001180:	200002b0 	.word	0x200002b0
 8001184:	08011b90 	.word	0x08011b90
 8001188:	200002b4 	.word	0x200002b4
 800118c:	20000000 	.word	0x20000000
 8001190:	08011ba0 	.word	0x08011ba0
 8001194:	200002c8 	.word	0x200002c8
 8001198:	20002f7c 	.word	0x20002f7c
 800119c:	08011bb0 	.word	0x08011bb0
 80011a0:	08011bb8 	.word	0x08011bb8
 80011a4:	200033cc 	.word	0x200033cc
 80011a8:	200002dc 	.word	0x200002dc
 80011ac:	08011bc0 	.word	0x08011bc0
 80011b0:	08011bc4 	.word	0x08011bc4
			} else {
				LCD.SendTextData(LCD.source_bat, const_cast<char*>("OFF"));
 80011b4:	4aa8      	ldr	r2, [pc, #672]	@ (8001458 <_Z20ControlnDDisplayTaskPv+0x4e0>)
 80011b6:	f245 1110 	movw	r1, #20752	@ 0x5110
 80011ba:	48a8      	ldr	r0, [pc, #672]	@ (800145c <_Z20ControlnDDisplayTaskPv+0x4e4>)
 80011bc:	f001 fa3a 	bl	8002634 <_ZN3HMI4DWIN12SendTextDataEtPc>
				LCD.SendTextData(LCD.source_gen, const_cast<char*>("OFF"));
 80011c0:	4aa5      	ldr	r2, [pc, #660]	@ (8001458 <_Z20ControlnDDisplayTaskPv+0x4e0>)
 80011c2:	f245 2120 	movw	r1, #21024	@ 0x5220
 80011c6:	48a5      	ldr	r0, [pc, #660]	@ (800145c <_Z20ControlnDDisplayTaskPv+0x4e4>)
 80011c8:	f001 fa34 	bl	8002634 <_ZN3HMI4DWIN12SendTextDataEtPc>
				LCD.SendTextData(LCD.source_sol, const_cast<char*>("OFF"));
 80011cc:	4aa2      	ldr	r2, [pc, #648]	@ (8001458 <_Z20ControlnDDisplayTaskPv+0x4e0>)
 80011ce:	f245 3130 	movw	r1, #21296	@ 0x5330
 80011d2:	48a2      	ldr	r0, [pc, #648]	@ (800145c <_Z20ControlnDDisplayTaskPv+0x4e4>)
 80011d4:	f001 fa2e 	bl	8002634 <_ZN3HMI4DWIN12SendTextDataEtPc>
			}

			ControlData.sourceIdentification = InverterData.device_mode;
 80011d8:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 80011dc:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80011e0:	f893 22c1 	ldrb.w	r2, [r3, #705]	@ 0x2c1
 80011e4:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 80011e8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80011ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

			LCD.SendNumericData(LCD.Battery,
					static_cast<uint16_t>(ControlData.batteryLevel));
 80011f0:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 80011f4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80011f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
			LCD.SendNumericData(LCD.Battery,
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	461a      	mov	r2, r3
 80011fe:	f247 0110 	movw	r1, #28688	@ 0x7010
 8001202:	4896      	ldr	r0, [pc, #600]	@ (800145c <_Z20ControlnDDisplayTaskPv+0x4e4>)
 8001204:	f001 f994 	bl	8002530 <_ZN3HMI4DWIN15SendNumericDataEtt>

			ControlData.V_1 = InverterData.rms_volt1;
 8001208:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 800120c:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8001210:	f8d3 2318 	ldr.w	r2, [r3, #792]	@ 0x318
 8001214:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001218:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800121c:	615a      	str	r2, [r3, #20]
			ControlData.V_2 = InverterData.rms_volt2;
 800121e:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001222:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8001226:	f8d3 231c 	ldr.w	r2, [r3, #796]	@ 0x31c
 800122a:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 800122e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001232:	619a      	str	r2, [r3, #24]
			ControlData.V_3 = InverterData.rms_volt3;
 8001234:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001238:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 800123c:	f8d3 2320 	ldr.w	r2, [r3, #800]	@ 0x320
 8001240:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001244:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001248:	61da      	str	r2, [r3, #28]

			ControlData.I_1 = InverterData.pzem1_data.current;
 800124a:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 800124e:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8001252:	f8d3 22c8 	ldr.w	r2, [r3, #712]	@ 0x2c8
 8001256:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 800125a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800125e:	621a      	str	r2, [r3, #32]
			ControlData.I_2 = InverterData.pzem2_data.current;
 8001260:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001264:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8001268:	f8d3 22e4 	ldr.w	r2, [r3, #740]	@ 0x2e4
 800126c:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001270:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001274:	625a      	str	r2, [r3, #36]	@ 0x24
			ControlData.I_3 = InverterData.pzem3_data.current;
 8001276:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 800127a:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 800127e:	f8d3 2300 	ldr.w	r2, [r3, #768]	@ 0x300
 8001282:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001286:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800128a:	629a      	str	r2, [r3, #40]	@ 0x28

			ControlData.P_1 = InverterData.pzem1_data.power;
 800128c:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001290:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8001294:	f8d3 22cc 	ldr.w	r2, [r3, #716]	@ 0x2cc
 8001298:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 800129c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80012a0:	62da      	str	r2, [r3, #44]	@ 0x2c
			ControlData.P_2 = InverterData.pzem2_data.power;
 80012a2:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 80012a6:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80012aa:	f8d3 22e8 	ldr.w	r2, [r3, #744]	@ 0x2e8
 80012ae:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 80012b2:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80012b6:	631a      	str	r2, [r3, #48]	@ 0x30
			ControlData.P_3 = InverterData.pzem3_data.power;
 80012b8:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 80012bc:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80012c0:	f8d3 2304 	ldr.w	r2, [r3, #772]	@ 0x304
 80012c4:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 80012c8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80012cc:	635a      	str	r2, [r3, #52]	@ 0x34

			ControlData.Energy = InverterData.pzem1_data.energy;
 80012ce:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 80012d2:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80012d6:	f8d3 22d0 	ldr.w	r2, [r3, #720]	@ 0x2d0
 80012da:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 80012de:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80012e2:	639a      	str	r2, [r3, #56]	@ 0x38

			LCD.SendFloatData(LCD.phase1, ControlData.V_1);
 80012e4:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 80012e8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80012ec:	edd3 7a05 	vldr	s15, [r3, #20]
 80012f0:	eeb0 0a67 	vmov.f32	s0, s15
 80012f4:	f243 1110 	movw	r1, #12560	@ 0x3110
 80012f8:	4858      	ldr	r0, [pc, #352]	@ (800145c <_Z20ControlnDDisplayTaskPv+0x4e4>)
 80012fa:	f001 f957 	bl	80025ac <_ZN3HMI4DWIN13SendFloatDataEtf>
			LCD.SendFloatData(LCD.phase2, ControlData.V_2);
 80012fe:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001302:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001306:	edd3 7a06 	vldr	s15, [r3, #24]
 800130a:	eeb0 0a67 	vmov.f32	s0, s15
 800130e:	f243 2120 	movw	r1, #12832	@ 0x3220
 8001312:	4852      	ldr	r0, [pc, #328]	@ (800145c <_Z20ControlnDDisplayTaskPv+0x4e4>)
 8001314:	f001 f94a 	bl	80025ac <_ZN3HMI4DWIN13SendFloatDataEtf>
			LCD.SendFloatData(LCD.phase3, ControlData.V_3);
 8001318:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 800131c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001320:	edd3 7a07 	vldr	s15, [r3, #28]
 8001324:	eeb0 0a67 	vmov.f32	s0, s15
 8001328:	f243 3130 	movw	r1, #13104	@ 0x3330
 800132c:	484b      	ldr	r0, [pc, #300]	@ (800145c <_Z20ControlnDDisplayTaskPv+0x4e4>)
 800132e:	f001 f93d 	bl	80025ac <_ZN3HMI4DWIN13SendFloatDataEtf>

			LCD.SendFloatData(LCD.curr1, ControlData.I_1);
 8001332:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001336:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800133a:	edd3 7a08 	vldr	s15, [r3, #32]
 800133e:	eeb0 0a67 	vmov.f32	s0, s15
 8001342:	f44f 5151 	mov.w	r1, #13376	@ 0x3440
 8001346:	4845      	ldr	r0, [pc, #276]	@ (800145c <_Z20ControlnDDisplayTaskPv+0x4e4>)
 8001348:	f001 f930 	bl	80025ac <_ZN3HMI4DWIN13SendFloatDataEtf>
			LCD.SendFloatData(LCD.curr2, ControlData.I_2);
 800134c:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001350:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001354:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001358:	eeb0 0a67 	vmov.f32	s0, s15
 800135c:	f243 5150 	movw	r1, #13648	@ 0x3550
 8001360:	483e      	ldr	r0, [pc, #248]	@ (800145c <_Z20ControlnDDisplayTaskPv+0x4e4>)
 8001362:	f001 f923 	bl	80025ac <_ZN3HMI4DWIN13SendFloatDataEtf>
			LCD.SendFloatData(LCD.curr3, ControlData.I_3);
 8001366:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 800136a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800136e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001372:	eeb0 0a67 	vmov.f32	s0, s15
 8001376:	f243 6160 	movw	r1, #13920	@ 0x3660
 800137a:	4838      	ldr	r0, [pc, #224]	@ (800145c <_Z20ControlnDDisplayTaskPv+0x4e4>)
 800137c:	f001 f916 	bl	80025ac <_ZN3HMI4DWIN13SendFloatDataEtf>

			LCD.SendFloatData(LCD.pwr1, ControlData.P_1);
 8001380:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001384:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001388:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800138c:	eeb0 0a67 	vmov.f32	s0, s15
 8001390:	f243 7170 	movw	r1, #14192	@ 0x3770
 8001394:	4831      	ldr	r0, [pc, #196]	@ (800145c <_Z20ControlnDDisplayTaskPv+0x4e4>)
 8001396:	f001 f909 	bl	80025ac <_ZN3HMI4DWIN13SendFloatDataEtf>
			LCD.SendFloatData(LCD.pwr2, ControlData.P_2);
 800139a:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 800139e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80013a2:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80013a6:	eeb0 0a67 	vmov.f32	s0, s15
 80013aa:	f44f 5162 	mov.w	r1, #14464	@ 0x3880
 80013ae:	482b      	ldr	r0, [pc, #172]	@ (800145c <_Z20ControlnDDisplayTaskPv+0x4e4>)
 80013b0:	f001 f8fc 	bl	80025ac <_ZN3HMI4DWIN13SendFloatDataEtf>
			LCD.SendFloatData(LCD.pwr3, ControlData.P_3);
 80013b4:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 80013b8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80013bc:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80013c0:	eeb0 0a67 	vmov.f32	s0, s15
 80013c4:	f643 1190 	movw	r1, #14736	@ 0x3990
 80013c8:	4824      	ldr	r0, [pc, #144]	@ (800145c <_Z20ControlnDDisplayTaskPv+0x4e4>)
 80013ca:	f001 f8ef 	bl	80025ac <_ZN3HMI4DWIN13SendFloatDataEtf>

			LCD.SendFloatData(LCD.energy, ControlData.Energy);
 80013ce:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 80013d2:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80013d6:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80013da:	eeb0 0a67 	vmov.f32	s0, s15
 80013de:	f243 1111 	movw	r1, #12561	@ 0x3111
 80013e2:	481e      	ldr	r0, [pc, #120]	@ (800145c <_Z20ControlnDDisplayTaskPv+0x4e4>)
 80013e4:	f001 f8e2 	bl	80025ac <_ZN3HMI4DWIN13SendFloatDataEtf>

		}

		if ((batt_charging_status & 0x07) == SCC_AC_charge_on
 80013e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001460 <_Z20ControlnDDisplayTaskPv+0x4e8>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	f003 0307 	and.w	r3, r3, #7
 80013f0:	2b07      	cmp	r3, #7
 80013f2:	d00b      	beq.n	800140c <_Z20ControlnDDisplayTaskPv+0x494>
				|| (batt_charging_status & 0x07) == SCC_charge_on
 80013f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001460 <_Z20ControlnDDisplayTaskPv+0x4e8>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	f003 0307 	and.w	r3, r3, #7
 80013fc:	2b06      	cmp	r3, #6
 80013fe:	d005      	beq.n	800140c <_Z20ControlnDDisplayTaskPv+0x494>
				|| (batt_charging_status & 0x07) == AC_charge_on) {
 8001400:	4b17      	ldr	r3, [pc, #92]	@ (8001460 <_Z20ControlnDDisplayTaskPv+0x4e8>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	f003 0307 	and.w	r3, r3, #7
 8001408:	2b05      	cmp	r3, #5
 800140a:	d133      	bne.n	8001474 <_Z20ControlnDDisplayTaskPv+0x4fc>
			if (!batt_chargetimekeeping_Flag) {
 800140c:	4b15      	ldr	r3, [pc, #84]	@ (8001464 <_Z20ControlnDDisplayTaskPv+0x4ec>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d154      	bne.n	80014be <_Z20ControlnDDisplayTaskPv+0x546>
				batt_chargetimekeeping_Flag = 1;
 8001414:	4b13      	ldr	r3, [pc, #76]	@ (8001464 <_Z20ControlnDDisplayTaskPv+0x4ec>)
 8001416:	2201      	movs	r2, #1
 8001418:	701a      	strb	r2, [r3, #0]
				ControlData.batteryChargeStartTime = ControlData.timestamp;
 800141a:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 800141e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001422:	691a      	ldr	r2, [r3, #16]
 8001424:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001428:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800142c:	665a      	str	r2, [r3, #100]	@ 0x64
				std::sprintf(batTime, "%02d:%02d:%02d", sTime.Hours,
 800142e:	4b0e      	ldr	r3, [pc, #56]	@ (8001468 <_Z20ControlnDDisplayTaskPv+0x4f0>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	461a      	mov	r2, r3
						sTime.Minutes, sTime.Seconds);
 8001434:	4b0c      	ldr	r3, [pc, #48]	@ (8001468 <_Z20ControlnDDisplayTaskPv+0x4f0>)
 8001436:	785b      	ldrb	r3, [r3, #1]
				std::sprintf(batTime, "%02d:%02d:%02d", sTime.Hours,
 8001438:	4619      	mov	r1, r3
						sTime.Minutes, sTime.Seconds);
 800143a:	4b0b      	ldr	r3, [pc, #44]	@ (8001468 <_Z20ControlnDDisplayTaskPv+0x4f0>)
 800143c:	789b      	ldrb	r3, [r3, #2]
				std::sprintf(batTime, "%02d:%02d:%02d", sTime.Hours,
 800143e:	9300      	str	r3, [sp, #0]
 8001440:	460b      	mov	r3, r1
 8001442:	490a      	ldr	r1, [pc, #40]	@ (800146c <_Z20ControlnDDisplayTaskPv+0x4f4>)
 8001444:	480a      	ldr	r0, [pc, #40]	@ (8001470 <_Z20ControlnDDisplayTaskPv+0x4f8>)
 8001446:	f00e f9d7 	bl	800f7f8 <siprintf>
				LCD.SendTextData(LCD.chrgT, batTime);
 800144a:	4a09      	ldr	r2, [pc, #36]	@ (8001470 <_Z20ControlnDDisplayTaskPv+0x4f8>)
 800144c:	f247 2120 	movw	r1, #29216	@ 0x7220
 8001450:	4802      	ldr	r0, [pc, #8]	@ (800145c <_Z20ControlnDDisplayTaskPv+0x4e4>)
 8001452:	f001 f8ef 	bl	8002634 <_ZN3HMI4DWIN12SendTextDataEtPc>
			if (!batt_chargetimekeeping_Flag) {
 8001456:	e032      	b.n	80014be <_Z20ControlnDDisplayTaskPv+0x546>
 8001458:	08011bc0 	.word	0x08011bc0
 800145c:	200002a4 	.word	0x200002a4
 8001460:	200002dc 	.word	0x200002dc
 8001464:	200002dd 	.word	0x200002dd
 8001468:	20000250 	.word	0x20000250
 800146c:	08011b90 	.word	0x08011b90
 8001470:	200002e0 	.word	0x200002e0
			}
		} else {
			if (batt_chargetimekeeping_Flag) {
 8001474:	4b47      	ldr	r3, [pc, #284]	@ (8001594 <_Z20ControlnDDisplayTaskPv+0x61c>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d020      	beq.n	80014be <_Z20ControlnDDisplayTaskPv+0x546>
				batt_chargetimekeeping_Flag = 0;
 800147c:	4b45      	ldr	r3, [pc, #276]	@ (8001594 <_Z20ControlnDDisplayTaskPv+0x61c>)
 800147e:	2200      	movs	r2, #0
 8001480:	701a      	strb	r2, [r3, #0]
				ControlData.batteryChargeEndTime = ControlData.timestamp;
 8001482:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001486:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800148a:	691a      	ldr	r2, [r3, #16]
 800148c:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001490:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001494:	669a      	str	r2, [r3, #104]	@ 0x68
				std::sprintf(batTime, "%02d:%02d:%02d", sTime.Hours,
 8001496:	4b40      	ldr	r3, [pc, #256]	@ (8001598 <_Z20ControlnDDisplayTaskPv+0x620>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	461a      	mov	r2, r3
						sTime.Minutes, sTime.Seconds);
 800149c:	4b3e      	ldr	r3, [pc, #248]	@ (8001598 <_Z20ControlnDDisplayTaskPv+0x620>)
 800149e:	785b      	ldrb	r3, [r3, #1]
				std::sprintf(batTime, "%02d:%02d:%02d", sTime.Hours,
 80014a0:	4619      	mov	r1, r3
						sTime.Minutes, sTime.Seconds);
 80014a2:	4b3d      	ldr	r3, [pc, #244]	@ (8001598 <_Z20ControlnDDisplayTaskPv+0x620>)
 80014a4:	789b      	ldrb	r3, [r3, #2]
				std::sprintf(batTime, "%02d:%02d:%02d", sTime.Hours,
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	460b      	mov	r3, r1
 80014aa:	493c      	ldr	r1, [pc, #240]	@ (800159c <_Z20ControlnDDisplayTaskPv+0x624>)
 80014ac:	483c      	ldr	r0, [pc, #240]	@ (80015a0 <_Z20ControlnDDisplayTaskPv+0x628>)
 80014ae:	f00e f9a3 	bl	800f7f8 <siprintf>
				LCD.SendTextData(LCD.dchgT, batTime);
 80014b2:	4a3b      	ldr	r2, [pc, #236]	@ (80015a0 <_Z20ControlnDDisplayTaskPv+0x628>)
 80014b4:	f247 3130 	movw	r1, #29488	@ 0x7330
 80014b8:	483a      	ldr	r0, [pc, #232]	@ (80015a4 <_Z20ControlnDDisplayTaskPv+0x62c>)
 80014ba:	f001 f8bb 	bl	8002634 <_ZN3HMI4DWIN12SendTextDataEtPc>
			}
		}

		liquidSensor.Measurement_loop(sensor_liquidMeas::liquidSensor::Meter,
 80014be:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 80014c2:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80014c6:	691b      	ldr	r3, [r3, #16]
 80014c8:	f507 724c 	add.w	r2, r7, #816	@ 0x330
 80014cc:	f102 0054 	add.w	r0, r2, #84	@ 0x54
 80014d0:	f507 724c 	add.w	r2, r7, #816	@ 0x330
 80014d4:	f102 0150 	add.w	r1, r2, #80	@ 0x50
 80014d8:	f507 724c 	add.w	r2, r7, #816	@ 0x330
 80014dc:	325c      	adds	r2, #92	@ 0x5c
 80014de:	9202      	str	r2, [sp, #8]
 80014e0:	f507 724c 	add.w	r2, r7, #816	@ 0x330
 80014e4:	3258      	adds	r2, #88	@ 0x58
 80014e6:	9201      	str	r2, [sp, #4]
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	4603      	mov	r3, r0
 80014ec:	460a      	mov	r2, r1
 80014ee:	ed9f 1a2e 	vldr	s2, [pc, #184]	@ 80015a8 <_Z20ControlnDDisplayTaskPv+0x630>
 80014f2:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 80014f6:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 80015ac <_Z20ControlnDDisplayTaskPv+0x634>
 80014fa:	2100      	movs	r1, #0
 80014fc:	482c      	ldr	r0, [pc, #176]	@ (80015b0 <_Z20ControlnDDisplayTaskPv+0x638>)
 80014fe:	f003 fd77 	bl	8004ff0 <_ZN17sensor_liquidMeas12liquidSensor16Measurement_loopENS0_4unitEfffPhPfmPmS4_>
				0.0, 10.0, 3.3, &ControlData.fuelPer, &ControlData.fuelConsp,
				ControlData.timestamp, &ControlData.refuelingStartTime,
				&ControlData.refuelingEndTime);
		AHT20.measure(&ControlData.temp, &ControlData.humid);
 8001502:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001506:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 800150a:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 800150e:	336c      	adds	r3, #108	@ 0x6c
 8001510:	4619      	mov	r1, r3
 8001512:	4828      	ldr	r0, [pc, #160]	@ (80015b4 <_Z20ControlnDDisplayTaskPv+0x63c>)
 8001514:	f003 fc2a 	bl	8004d6c <_ZN15sensor_TempHumd5AHT207measureEPmS1_>

		LCD.SendTextData(LCD.Time, time);
 8001518:	4a27      	ldr	r2, [pc, #156]	@ (80015b8 <_Z20ControlnDDisplayTaskPv+0x640>)
 800151a:	f241 0110 	movw	r1, #4112	@ 0x1010
 800151e:	4821      	ldr	r0, [pc, #132]	@ (80015a4 <_Z20ControlnDDisplayTaskPv+0x62c>)
 8001520:	f001 f888 	bl	8002634 <_ZN3HMI4DWIN12SendTextDataEtPc>
		LCD.SendTextData(LCD.Date, date);
 8001524:	4a25      	ldr	r2, [pc, #148]	@ (80015bc <_Z20ControlnDDisplayTaskPv+0x644>)
 8001526:	f44f 5181 	mov.w	r1, #4128	@ 0x1020
 800152a:	481e      	ldr	r0, [pc, #120]	@ (80015a4 <_Z20ControlnDDisplayTaskPv+0x62c>)
 800152c:	f001 f882 	bl	8002634 <_ZN3HMI4DWIN12SendTextDataEtPc>

		LCD.SendNumericData(LCD.TankLevel,
				static_cast<uint16_t>(ControlData.fuelPer));
 8001530:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001534:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001538:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
		LCD.SendNumericData(LCD.TankLevel,
 800153c:	461a      	mov	r2, r3
 800153e:	f242 0110 	movw	r1, #8208	@ 0x2010
 8001542:	4818      	ldr	r0, [pc, #96]	@ (80015a4 <_Z20ControlnDDisplayTaskPv+0x62c>)
 8001544:	f000 fff4 	bl	8002530 <_ZN3HMI4DWIN15SendNumericDataEtt>

		LCD.SendNumericData(LCD.Temperature,
				static_cast<uint16_t>(ControlData.temp));
 8001548:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 800154c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001550:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
		LCD.SendNumericData(LCD.Temperature,
 8001552:	b29b      	uxth	r3, r3
 8001554:	461a      	mov	r2, r3
 8001556:	f244 0110 	movw	r1, #16400	@ 0x4010
 800155a:	4812      	ldr	r0, [pc, #72]	@ (80015a4 <_Z20ControlnDDisplayTaskPv+0x62c>)
 800155c:	f000 ffe8 	bl	8002530 <_ZN3HMI4DWIN15SendNumericDataEtt>
		LCD.SendNumericData(LCD.Humidity,
				static_cast<uint16_t>(ControlData.humid));
 8001560:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001564:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001568:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
		LCD.SendNumericData(LCD.Humidity,
 800156a:	b29b      	uxth	r3, r3
 800156c:	461a      	mov	r2, r3
 800156e:	f244 0120 	movw	r1, #16416	@ 0x4020
 8001572:	480c      	ldr	r0, [pc, #48]	@ (80015a4 <_Z20ControlnDDisplayTaskPv+0x62c>)
 8001574:	f000 ffdc 	bl	8002530 <_ZN3HMI4DWIN15SendNumericDataEtt>

		ControlDataQueue.queueSend(reinterpret_cast<void*>(&ControlData));
 8001578:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 800157c:	4619      	mov	r1, r3
 800157e:	4810      	ldr	r0, [pc, #64]	@ (80015c0 <_Z20ControlnDDisplayTaskPv+0x648>)
 8001580:	f003 ff8e 	bl	80054a0 <_ZN11System_Rtos15freertos_queues9queueSendEPv>

		HAL_GPIO_TogglePin(alive_led_GPIO_Port, alive_led_Pin);
 8001584:	2102      	movs	r1, #2
 8001586:	480f      	ldr	r0, [pc, #60]	@ (80015c4 <_Z20ControlnDDisplayTaskPv+0x64c>)
 8001588:	f007 fa89 	bl	8008a9e <HAL_GPIO_TogglePin>
		System_Rtos::delay(150);
 800158c:	2096      	movs	r0, #150	@ 0x96
 800158e:	f003 feff 	bl	8005390 <_ZN11System_Rtos5delayEm>
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001592:	e526      	b.n	8000fe2 <_Z20ControlnDDisplayTaskPv+0x6a>
 8001594:	200002dd 	.word	0x200002dd
 8001598:	20000250 	.word	0x20000250
 800159c:	08011b90 	.word	0x08011b90
 80015a0:	200002e0 	.word	0x200002e0
 80015a4:	200002a4 	.word	0x200002a4
 80015a8:	40533333 	.word	0x40533333
 80015ac:	00000000 	.word	0x00000000
 80015b0:	20000264 	.word	0x20000264
 80015b4:	20000290 	.word	0x20000290
 80015b8:	200002b4 	.word	0x200002b4
 80015bc:	200002c8 	.word	0x200002c8
 80015c0:	2000304c 	.word	0x2000304c
 80015c4:	40020000 	.word	0x40020000

080015c8 <_Z41__static_initialization_and_destruction_0ii>:
	}

}
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d116      	bne.n	8001606 <_Z41__static_initialization_and_destruction_0ii+0x3e>
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015de:	4293      	cmp	r3, r2
 80015e0:	d111      	bne.n	8001606 <_Z41__static_initialization_and_destruction_0ii+0x3e>
sensor_liquidMeas::liquidSensor liquidSensor(&hadc1);
 80015e2:	490b      	ldr	r1, [pc, #44]	@ (8001610 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80015e4:	480b      	ldr	r0, [pc, #44]	@ (8001614 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80015e6:	f003 fcd9 	bl	8004f9c <_ZN17sensor_liquidMeas12liquidSensorC1EP17ADC_HandleTypeDef>
sensor_TempHumd::AHT20 AHT20(&hi2c1, 0x38);
 80015ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015ee:	2238      	movs	r2, #56	@ 0x38
 80015f0:	4909      	ldr	r1, [pc, #36]	@ (8001618 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80015f2:	480a      	ldr	r0, [pc, #40]	@ (800161c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80015f4:	f003 fba2 	bl	8004d3c <_ZN15sensor_TempHumd5AHT20C1EP17I2C_HandleTypeDefhm>
HMI::DWIN LCD(&HMI_U);
 80015f8:	4909      	ldr	r1, [pc, #36]	@ (8001620 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80015fa:	480a      	ldr	r0, [pc, #40]	@ (8001624 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80015fc:	f000 fede 	bl	80023bc <_ZN3HMI4DWINC1EP20__UART_HandleTypeDef>
System_sys::Parsing_Checking parsing;
 8001600:	4809      	ldr	r0, [pc, #36]	@ (8001628 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8001602:	f004 f97a 	bl	80058fa <_ZN10System_sys16Parsing_CheckingC1Ev>
}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	20003488 	.word	0x20003488
 8001614:	20000264 	.word	0x20000264
 8001618:	20003578 	.word	0x20003578
 800161c:	20000290 	.word	0x20000290
 8001620:	200036c8 	.word	0x200036c8
 8001624:	200002a4 	.word	0x200002a4
 8001628:	200002b0 	.word	0x200002b0

0800162c <_GLOBAL__sub_I_sDate>:
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
 8001630:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001634:	2001      	movs	r0, #1
 8001636:	f7ff ffc7 	bl	80015c8 <_Z41__static_initialization_and_destruction_0ii>
 800163a:	bd80      	pop	{r7, pc}

0800163c <_Z13calculate_rmsPttff>:

#define ADC_MAX 4095.0  // 12-bit ADC
#define V_REF 3.3     // ADC reference voltage
#define ZMPT_SCALE 1.0 // Adjust based on calibration

float calculate_rms(uint16_t *adc_buffer, uint16_t buffer_size, float vref, float adc_max_value) {
 800163c:	b580      	push	{r7, lr}
 800163e:	b08a      	sub	sp, #40	@ 0x28
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	460b      	mov	r3, r1
 8001646:	ed87 0a01 	vstr	s0, [r7, #4]
 800164a:	edc7 0a00 	vstr	s1, [r7]
 800164e:	817b      	strh	r3, [r7, #10]
    float sum_square = 0.0;
 8001650:	f04f 0300 	mov.w	r3, #0
 8001654:	627b      	str	r3, [r7, #36]	@ 0x24
    float dc_offset = vref / 2.0;  // DC offset (e.g., 1.65V for 3.3V Vref)
 8001656:	ed97 7a01 	vldr	s14, [r7, #4]
 800165a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800165e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001662:	edc7 7a07 	vstr	s15, [r7, #28]

    for (uint16_t i = 0; i < buffer_size; i++) {
 8001666:	2300      	movs	r3, #0
 8001668:	847b      	strh	r3, [r7, #34]	@ 0x22
 800166a:	e027      	b.n	80016bc <_Z13calculate_rmsPttff+0x80>
        // Convert ADC value to voltage
        float voltage = (adc_buffer[i] / adc_max_value) * vref;
 800166c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	68fa      	ldr	r2, [r7, #12]
 8001672:	4413      	add	r3, r2
 8001674:	881b      	ldrh	r3, [r3, #0]
 8001676:	ee07 3a90 	vmov	s15, r3
 800167a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800167e:	ed97 7a00 	vldr	s14, [r7]
 8001682:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001686:	ed97 7a01 	vldr	s14, [r7, #4]
 800168a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800168e:	edc7 7a05 	vstr	s15, [r7, #20]

        // Subtract DC offset to get the AC component
        float ac_component = voltage - dc_offset;
 8001692:	ed97 7a05 	vldr	s14, [r7, #20]
 8001696:	edd7 7a07 	vldr	s15, [r7, #28]
 800169a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800169e:	edc7 7a04 	vstr	s15, [r7, #16]

        // Accumulate squared values
        sum_square += ac_component * ac_component;
 80016a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80016a6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80016aa:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80016ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016b2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    for (uint16_t i = 0; i < buffer_size; i++) {
 80016b6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80016b8:	3301      	adds	r3, #1
 80016ba:	847b      	strh	r3, [r7, #34]	@ 0x22
 80016bc:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80016be:	897b      	ldrh	r3, [r7, #10]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d3d3      	bcc.n	800166c <_Z13calculate_rmsPttff+0x30>
    }

    // Calculate mean of squared values
    float mean_square = sum_square / buffer_size;
 80016c4:	897b      	ldrh	r3, [r7, #10]
 80016c6:	ee07 3a90 	vmov	s15, r3
 80016ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016ce:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80016d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016d6:	edc7 7a06 	vstr	s15, [r7, #24]

    // Return the RMS value
    return sqrt(mean_square);
 80016da:	69b8      	ldr	r0, [r7, #24]
 80016dc:	f7fe ff34 	bl	8000548 <__aeabi_f2d>
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	ec43 2b10 	vmov	d0, r2, r3
 80016e8:	f00d f9de 	bl	800eaa8 <sqrt>
 80016ec:	ec53 2b10 	vmov	r2, r3, d0
 80016f0:	4610      	mov	r0, r2
 80016f2:	4619      	mov	r1, r3
 80016f4:	f7ff fa78 	bl	8000be8 <__aeabi_d2f>
 80016f8:	4603      	mov	r3, r0
 80016fa:	ee07 3a90 	vmov	s15, r3
}
 80016fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001702:	3728      	adds	r7, #40	@ 0x28
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <_Z12InverterTaskPv>:


void InverterTask(void *pvParameters) {
 8001708:	b580      	push	{r7, lr}
 800170a:	f5ad 7d4c 	sub.w	sp, sp, #816	@ 0x330
 800170e:	af00      	add	r7, sp, #0
 8001710:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001714:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 8001718:	6018      	str	r0, [r3, #0]

	InverterData_Queue InverterData = {0};
 800171a:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 800171e:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 8001722:	4618      	mov	r0, r3
 8001724:	f44f 7349 	mov.w	r3, #804	@ 0x324
 8001728:	461a      	mov	r2, r3
 800172a:	2100      	movs	r1, #0
 800172c:	f00e f8c7 	bl	800f8be <memset>

	System_Rtos::delay(1000);
 8001730:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001734:	f003 fe2c 	bl	8005390 <_ZN11System_Rtos5delayEm>

	PZEM1.init();
 8001738:	487d      	ldr	r0, [pc, #500]	@ (8001930 <_Z12InverterTaskPv+0x228>)
 800173a:	f003 fe0d 	bl	8005358 <_ZN11sensor_pzem9PZEM_004T4initEv>
	PZEM2.init();
 800173e:	487d      	ldr	r0, [pc, #500]	@ (8001934 <_Z12InverterTaskPv+0x22c>)
 8001740:	f003 fe0a 	bl	8005358 <_ZN11sensor_pzem9PZEM_004T4initEv>
	PZEM3.init();
 8001744:	487c      	ldr	r0, [pc, #496]	@ (8001938 <_Z12InverterTaskPv+0x230>)
 8001746:	f003 fe07 	bl	8005358 <_ZN11sensor_pzem9PZEM_004T4initEv>

HAL_ADC_Start_DMA(&hadc2,(uint32_t *) adcData, BUFFER_SIZE);
 800174a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800174e:	497b      	ldr	r1, [pc, #492]	@ (800193c <_Z12InverterTaskPv+0x234>)
 8001750:	487b      	ldr	r0, [pc, #492]	@ (8001940 <_Z12InverterTaskPv+0x238>)
 8001752:	f005 ff9f 	bl	8007694 <HAL_ADC_Start_DMA>
HAL_TIM_Base_Start(&htim8);
 8001756:	487b      	ldr	r0, [pc, #492]	@ (8001944 <_Z12InverterTaskPv+0x23c>)
 8001758:	f009 fa70 	bl	800ac3c <HAL_TIM_Base_Start>
//		PZEM3.read(&InverterData.pzem3_data);
//
//		//Voltronic.ProtocolID_Inquiry(protoID);
//		//Voltronic.DeviceID_Inquiry(devID);
//		//Voltronic.CPUFW_Ver_Inquiry(ver);
		Voltronic.DeviceStat_Inquiry_qpigs(InverterData.inverterData_qpigs);
 800175c:	f107 030c 	add.w	r3, r7, #12
 8001760:	4619      	mov	r1, r3
 8001762:	4879      	ldr	r0, [pc, #484]	@ (8001948 <_Z12InverterTaskPv+0x240>)
 8001764:	f001 f8a4 	bl	80028b0 <_ZN8Inverter9Voltronic24DeviceStat_Inquiry_qpigsEPA10_c>
//		//Voltronic.DeviceStat_Inquiry_qipgs2(InverterData.inverterData_qpigs2);
//		//Voltronic.DeviceStat_Inquiry_qipgsN(InverterData.inverterData_qpigsN);
		Voltronic.DeviceStat_Inquiry_mode(&InverterData.device_mode);
 8001768:	f107 030c 	add.w	r3, r7, #12
 800176c:	f203 23c1 	addw	r3, r3, #705	@ 0x2c1
 8001770:	4619      	mov	r1, r3
 8001772:	4875      	ldr	r0, [pc, #468]	@ (8001948 <_Z12InverterTaskPv+0x240>)
 8001774:	f001 f914 	bl	80029a0 <_ZN8Inverter9Voltronic23DeviceStat_Inquiry_modeEPh>



		if(flag)
 8001778:	4b74      	ldr	r3, [pc, #464]	@ (800194c <_Z12InverterTaskPv+0x244>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b00      	cmp	r3, #0
 8001780:	bf14      	ite	ne
 8001782:	2301      	movne	r3, #1
 8001784:	2300      	moveq	r3, #0
 8001786:	b2db      	uxtb	r3, r3
 8001788:	2b00      	cmp	r3, #0
 800178a:	f000 80c0 	beq.w	800190e <_Z12InverterTaskPv+0x206>
		{
			flag = 0;
 800178e:	4b6f      	ldr	r3, [pc, #444]	@ (800194c <_Z12InverterTaskPv+0x244>)
 8001790:	2200      	movs	r2, #0
 8001792:	701a      	strb	r2, [r3, #0]

			   // Perform RMS calculation
			 InverterData.rms_volt1 = calculate_rms(channel_1_data, SAMPLES_PER_CHANNEL,V_REF,ADC_MAX);
 8001794:	eddf 0a6e 	vldr	s1, [pc, #440]	@ 8001950 <_Z12InverterTaskPv+0x248>
 8001798:	ed9f 0a6e 	vldr	s0, [pc, #440]	@ 8001954 <_Z12InverterTaskPv+0x24c>
 800179c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80017a0:	486d      	ldr	r0, [pc, #436]	@ (8001958 <_Z12InverterTaskPv+0x250>)
 80017a2:	f7ff ff4b 	bl	800163c <_Z13calculate_rmsPttff>
 80017a6:	eef0 7a40 	vmov.f32	s15, s0
 80017aa:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 80017ae:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 80017b2:	edc3 7ac6 	vstr	s15, [r3, #792]	@ 0x318
			 if( InverterData.rms_volt1 < 0.03)
 80017b6:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 80017ba:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 80017be:	f8d3 3318 	ldr.w	r3, [r3, #792]	@ 0x318
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7fe fec0 	bl	8000548 <__aeabi_f2d>
 80017c8:	a357      	add	r3, pc, #348	@ (adr r3, 8001928 <_Z12InverterTaskPv+0x220>)
 80017ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ce:	f7ff f985 	bl	8000adc <__aeabi_dcmplt>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d008      	beq.n	80017ea <_Z12InverterTaskPv+0xe2>
					 {
						 InverterData.rms_volt1 = 0;
 80017d8:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 80017dc:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 80017e0:	f04f 0200 	mov.w	r2, #0
 80017e4:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318
 80017e8:	e00f      	b.n	800180a <_Z12InverterTaskPv+0x102>
					 }
					 else
					 {
						 InverterData.rms_volt1 =  InverterData.rms_volt1*500.0;
 80017ea:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 80017ee:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 80017f2:	edd3 7ac6 	vldr	s15, [r3, #792]	@ 0x318
 80017f6:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800195c <_Z12InverterTaskPv+0x254>
 80017fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017fe:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001802:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 8001806:	edc3 7ac6 	vstr	s15, [r3, #792]	@ 0x318
					 }


			 InverterData.rms_volt2 = calculate_rms(channel_2_data, SAMPLES_PER_CHANNEL,V_REF,ADC_MAX);
 800180a:	eddf 0a51 	vldr	s1, [pc, #324]	@ 8001950 <_Z12InverterTaskPv+0x248>
 800180e:	ed9f 0a51 	vldr	s0, [pc, #324]	@ 8001954 <_Z12InverterTaskPv+0x24c>
 8001812:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001816:	4852      	ldr	r0, [pc, #328]	@ (8001960 <_Z12InverterTaskPv+0x258>)
 8001818:	f7ff ff10 	bl	800163c <_Z13calculate_rmsPttff>
 800181c:	eef0 7a40 	vmov.f32	s15, s0
 8001820:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001824:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 8001828:	edc3 7ac7 	vstr	s15, [r3, #796]	@ 0x31c
			 if( InverterData.rms_volt2 < 0.03)
 800182c:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001830:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 8001834:	f8d3 331c 	ldr.w	r3, [r3, #796]	@ 0x31c
 8001838:	4618      	mov	r0, r3
 800183a:	f7fe fe85 	bl	8000548 <__aeabi_f2d>
 800183e:	a33a      	add	r3, pc, #232	@ (adr r3, 8001928 <_Z12InverterTaskPv+0x220>)
 8001840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001844:	f7ff f94a 	bl	8000adc <__aeabi_dcmplt>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d008      	beq.n	8001860 <_Z12InverterTaskPv+0x158>
					 {
						 InverterData.rms_volt2 = 0;
 800184e:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001852:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 8001856:	f04f 0200 	mov.w	r2, #0
 800185a:	f8c3 231c 	str.w	r2, [r3, #796]	@ 0x31c
 800185e:	e00f      	b.n	8001880 <_Z12InverterTaskPv+0x178>
					 }
					 else
					 {
						 InverterData.rms_volt2 =  InverterData.rms_volt2*500.0;
 8001860:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001864:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 8001868:	edd3 7ac7 	vldr	s15, [r3, #796]	@ 0x31c
 800186c:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800195c <_Z12InverterTaskPv+0x254>
 8001870:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001874:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001878:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 800187c:	edc3 7ac7 	vstr	s15, [r3, #796]	@ 0x31c
					 }

			 InverterData.rms_volt3 = calculate_rms(channel_3_data, SAMPLES_PER_CHANNEL,V_REF,ADC_MAX);
 8001880:	eddf 0a33 	vldr	s1, [pc, #204]	@ 8001950 <_Z12InverterTaskPv+0x248>
 8001884:	ed9f 0a33 	vldr	s0, [pc, #204]	@ 8001954 <_Z12InverterTaskPv+0x24c>
 8001888:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800188c:	4835      	ldr	r0, [pc, #212]	@ (8001964 <_Z12InverterTaskPv+0x25c>)
 800188e:	f7ff fed5 	bl	800163c <_Z13calculate_rmsPttff>
 8001892:	eef0 7a40 	vmov.f32	s15, s0
 8001896:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 800189a:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 800189e:	edc3 7ac8 	vstr	s15, [r3, #800]	@ 0x320
			 if( InverterData.rms_volt3 < 0.03)
 80018a2:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 80018a6:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 80018aa:	f8d3 3320 	ldr.w	r3, [r3, #800]	@ 0x320
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7fe fe4a 	bl	8000548 <__aeabi_f2d>
 80018b4:	a31c      	add	r3, pc, #112	@ (adr r3, 8001928 <_Z12InverterTaskPv+0x220>)
 80018b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ba:	f7ff f90f 	bl	8000adc <__aeabi_dcmplt>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d008      	beq.n	80018d6 <_Z12InverterTaskPv+0x1ce>
			 {
				 InverterData.rms_volt3 = 0;
 80018c4:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 80018c8:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 80018cc:	f04f 0200 	mov.w	r2, #0
 80018d0:	f8c3 2320 	str.w	r2, [r3, #800]	@ 0x320
 80018d4:	e00f      	b.n	80018f6 <_Z12InverterTaskPv+0x1ee>
			 }
			 else
			 {
				 InverterData.rms_volt3 =  InverterData.rms_volt3*500.0;
 80018d6:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 80018da:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 80018de:	edd3 7ac8 	vldr	s15, [r3, #800]	@ 0x320
 80018e2:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 800195c <_Z12InverterTaskPv+0x254>
 80018e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018ea:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 80018ee:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 80018f2:	edc3 7ac8 	vstr	s15, [r3, #800]	@ 0x320
			 }

			 HAL_ADC_Start_DMA(&hadc2,(uint32_t *) adcData, BUFFER_SIZE);
 80018f6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80018fa:	4910      	ldr	r1, [pc, #64]	@ (800193c <_Z12InverterTaskPv+0x234>)
 80018fc:	4810      	ldr	r0, [pc, #64]	@ (8001940 <_Z12InverterTaskPv+0x238>)
 80018fe:	f005 fec9 	bl	8007694 <HAL_ADC_Start_DMA>

		     InverterDataQueue.queueSend(reinterpret_cast<void*>(&InverterData));
 8001902:	f107 030c 	add.w	r3, r7, #12
 8001906:	4619      	mov	r1, r3
 8001908:	4817      	ldr	r0, [pc, #92]	@ (8001968 <_Z12InverterTaskPv+0x260>)
 800190a:	f003 fdc9 	bl	80054a0 <_ZN11System_Rtos15freertos_queues9queueSendEPv>

		}

		InverterDataQueue.queueSend(reinterpret_cast<void*>(&InverterData));
 800190e:	f107 030c 	add.w	r3, r7, #12
 8001912:	4619      	mov	r1, r3
 8001914:	4814      	ldr	r0, [pc, #80]	@ (8001968 <_Z12InverterTaskPv+0x260>)
 8001916:	f003 fdc3 	bl	80054a0 <_ZN11System_Rtos15freertos_queues9queueSendEPv>

		System_Rtos::delay(100);
 800191a:	2064      	movs	r0, #100	@ 0x64
 800191c:	f003 fd38 	bl	8005390 <_ZN11System_Rtos5delayEm>
		Voltronic.DeviceStat_Inquiry_qpigs(InverterData.inverterData_qpigs);
 8001920:	e71c      	b.n	800175c <_Z12InverterTaskPv+0x54>
 8001922:	bf00      	nop
 8001924:	f3af 8000 	nop.w
 8001928:	eb851eb8 	.word	0xeb851eb8
 800192c:	3f9eb851 	.word	0x3f9eb851
 8001930:	20000524 	.word	0x20000524
 8001934:	20000548 	.word	0x20000548
 8001938:	2000056c 	.word	0x2000056c
 800193c:	20000590 	.word	0x20000590
 8001940:	200034d0 	.word	0x200034d0
 8001944:	20003638 	.word	0x20003638
 8001948:	200002f4 	.word	0x200002f4
 800194c:	20001d00 	.word	0x20001d00
 8001950:	457ff000 	.word	0x457ff000
 8001954:	40533333 	.word	0x40533333
 8001958:	20001148 	.word	0x20001148
 800195c:	43fa0000 	.word	0x43fa0000
 8001960:	20001530 	.word	0x20001530
 8001964:	20001918 	.word	0x20001918
 8001968:	200033cc 	.word	0x200033cc

0800196c <HAL_ADC_ConvCpltCallback>:
	}

}


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
	 if (hadc->Instance == ADC2)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a1c      	ldr	r2, [pc, #112]	@ (80019ec <HAL_ADC_ConvCpltCallback+0x80>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d12f      	bne.n	80019de <HAL_ADC_ConvCpltCallback+0x72>
	 {
	// Separate data for each channel
    for (int i = 0; i < SAMPLES_PER_CHANNEL; i++) {
 800197e:	2300      	movs	r3, #0
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	e025      	b.n	80019d0 <HAL_ADC_ConvCpltCallback+0x64>
        channel_1_data[i] = adcData[i * NUM_CHANNELS];     // Channel 1
 8001984:	68fa      	ldr	r2, [r7, #12]
 8001986:	4613      	mov	r3, r2
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	4413      	add	r3, r2
 800198c:	4a18      	ldr	r2, [pc, #96]	@ (80019f0 <HAL_ADC_ConvCpltCallback+0x84>)
 800198e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001992:	4a18      	ldr	r2, [pc, #96]	@ (80019f4 <HAL_ADC_ConvCpltCallback+0x88>)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        channel_2_data[i] = adcData[i * NUM_CHANNELS + 1]; // Channel 2
 800199a:	68fa      	ldr	r2, [r7, #12]
 800199c:	4613      	mov	r3, r2
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	4413      	add	r3, r2
 80019a2:	3301      	adds	r3, #1
 80019a4:	4a12      	ldr	r2, [pc, #72]	@ (80019f0 <HAL_ADC_ConvCpltCallback+0x84>)
 80019a6:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80019aa:	4a13      	ldr	r2, [pc, #76]	@ (80019f8 <HAL_ADC_ConvCpltCallback+0x8c>)
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        channel_3_data[i] = adcData[i * NUM_CHANNELS + 2]; // Channel 3
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	4613      	mov	r3, r2
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	4413      	add	r3, r2
 80019ba:	3302      	adds	r3, #2
 80019bc:	4a0c      	ldr	r2, [pc, #48]	@ (80019f0 <HAL_ADC_ConvCpltCallback+0x84>)
 80019be:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80019c2:	4a0e      	ldr	r2, [pc, #56]	@ (80019fc <HAL_ADC_ConvCpltCallback+0x90>)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < SAMPLES_PER_CHANNEL; i++) {
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	3301      	adds	r3, #1
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80019d6:	dbd5      	blt.n	8001984 <HAL_ADC_ConvCpltCallback+0x18>
    }

    flag = 1;
 80019d8:	4b09      	ldr	r3, [pc, #36]	@ (8001a00 <HAL_ADC_ConvCpltCallback+0x94>)
 80019da:	2201      	movs	r2, #1
 80019dc:	701a      	strb	r2, [r3, #0]
	 }
    // Process each channel's data (e.g., calculate RMS)
}
 80019de:	bf00      	nop
 80019e0:	3714      	adds	r7, #20
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	40012100 	.word	0x40012100
 80019f0:	20000590 	.word	0x20000590
 80019f4:	20001148 	.word	0x20001148
 80019f8:	20001530 	.word	0x20001530
 80019fc:	20001918 	.word	0x20001918
 8001a00:	20001d00 	.word	0x20001d00

08001a04 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
	 if (hadc->Instance == ADC2)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a1a      	ldr	r2, [pc, #104]	@ (8001a7c <HAL_ADC_ConvHalfCpltCallback+0x78>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d12b      	bne.n	8001a6e <HAL_ADC_ConvHalfCpltCallback+0x6a>
	 {
    // Same processing as full-complete but for the first half of the buffer
    for (int i = 0; i < SAMPLES_PER_CHANNEL / 2; i++) {
 8001a16:	2300      	movs	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	e025      	b.n	8001a68 <HAL_ADC_ConvHalfCpltCallback+0x64>
        channel_1_data[i] = adcData[i * NUM_CHANNELS];     // Channel 1
 8001a1c:	68fa      	ldr	r2, [r7, #12]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	4413      	add	r3, r2
 8001a24:	4a16      	ldr	r2, [pc, #88]	@ (8001a80 <HAL_ADC_ConvHalfCpltCallback+0x7c>)
 8001a26:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001a2a:	4a16      	ldr	r2, [pc, #88]	@ (8001a84 <HAL_ADC_ConvHalfCpltCallback+0x80>)
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        channel_2_data[i] = adcData[i * NUM_CHANNELS + 1]; // Channel 2
 8001a32:	68fa      	ldr	r2, [r7, #12]
 8001a34:	4613      	mov	r3, r2
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	4413      	add	r3, r2
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	4a10      	ldr	r2, [pc, #64]	@ (8001a80 <HAL_ADC_ConvHalfCpltCallback+0x7c>)
 8001a3e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001a42:	4a11      	ldr	r2, [pc, #68]	@ (8001a88 <HAL_ADC_ConvHalfCpltCallback+0x84>)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        channel_3_data[i] = adcData[i * NUM_CHANNELS + 2]; // Channel 3
 8001a4a:	68fa      	ldr	r2, [r7, #12]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	4413      	add	r3, r2
 8001a52:	3302      	adds	r3, #2
 8001a54:	4a0a      	ldr	r2, [pc, #40]	@ (8001a80 <HAL_ADC_ConvHalfCpltCallback+0x7c>)
 8001a56:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001a5a:	4a0c      	ldr	r2, [pc, #48]	@ (8001a8c <HAL_ADC_ConvHalfCpltCallback+0x88>)
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < SAMPLES_PER_CHANNEL / 2; i++) {
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	3301      	adds	r3, #1
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2bf9      	cmp	r3, #249	@ 0xf9
 8001a6c:	ddd6      	ble.n	8001a1c <HAL_ADC_ConvHalfCpltCallback+0x18>
    }

	 }
}
 8001a6e:	bf00      	nop
 8001a70:	3714      	adds	r7, #20
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	40012100 	.word	0x40012100
 8001a80:	20000590 	.word	0x20000590
 8001a84:	20001148 	.word	0x20001148
 8001a88:	20001530 	.word	0x20001530
 8001a8c:	20001918 	.word	0x20001918

08001a90 <_Z41__static_initialization_and_destruction_0ii>:
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d117      	bne.n	8001ad0 <_Z41__static_initialization_and_destruction_0ii+0x40>
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d112      	bne.n	8001ad0 <_Z41__static_initialization_and_destruction_0ii+0x40>
Inverter::Voltronic Voltronic(&INVERTER_U,DE_GPIO_Port,DE_Pin);
 8001aaa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001aae:	4a0a      	ldr	r2, [pc, #40]	@ (8001ad8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8001ab0:	490a      	ldr	r1, [pc, #40]	@ (8001adc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8001ab2:	480b      	ldr	r0, [pc, #44]	@ (8001ae0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001ab4:	f000 fe92 	bl	80027dc <_ZN8Inverter9VoltronicC1EP20__UART_HandleTypeDefP12GPIO_TypeDeft>
sensor_pzem::PZEM_004T PZEM1(&PZEM1_U);
 8001ab8:	490a      	ldr	r1, [pc, #40]	@ (8001ae4 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8001aba:	480b      	ldr	r0, [pc, #44]	@ (8001ae8 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8001abc:	f003 fc38 	bl	8005330 <_ZN11sensor_pzem9PZEM_004TC1EP20__UART_HandleTypeDef>
sensor_pzem::PZEM_004T PZEM2(&PZEM2_U);
 8001ac0:	490a      	ldr	r1, [pc, #40]	@ (8001aec <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001ac2:	480b      	ldr	r0, [pc, #44]	@ (8001af0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8001ac4:	f003 fc34 	bl	8005330 <_ZN11sensor_pzem9PZEM_004TC1EP20__UART_HandleTypeDef>
sensor_pzem::PZEM_004T PZEM3(&PZEM3_U);
 8001ac8:	490a      	ldr	r1, [pc, #40]	@ (8001af4 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8001aca:	480b      	ldr	r0, [pc, #44]	@ (8001af8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8001acc:	f003 fc30 	bl	8005330 <_ZN11sensor_pzem9PZEM_004TC1EP20__UART_HandleTypeDef>
}
 8001ad0:	bf00      	nop
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	200037a0 	.word	0x200037a0
 8001ae0:	200002f4 	.word	0x200002f4
 8001ae4:	20003710 	.word	0x20003710
 8001ae8:	20000524 	.word	0x20000524
 8001aec:	200037e8 	.word	0x200037e8
 8001af0:	20000548 	.word	0x20000548
 8001af4:	20003680 	.word	0x20003680
 8001af8:	2000056c 	.word	0x2000056c

08001afc <_GLOBAL__sub_I_Voltronic>:
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001b04:	2001      	movs	r0, #1
 8001b06:	f7ff ffc3 	bl	8001a90 <_Z41__static_initialization_and_destruction_0ii>
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <_ZSt6strstrPcPKc>:
  strrchr(char* __s, int __n)
  { return __builtin_strrchr(__s, __n); }

  inline char*
  strstr(char* __s1, const char* __s2)
  { return __builtin_strstr(__s1, __s2); }
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
 8001b16:	6839      	ldr	r1, [r7, #0]
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f00d fef8 	bl	800f90e <strstr>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	4618      	mov	r0, r3
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <_Z9ModemTaskPv>:


char command_buffer[255] = {0};


void ModemTask(void *pvParameters) {
 8001b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b2c:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 8001b30:	af22      	add	r7, sp, #136	@ 0x88
 8001b32:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001b36:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001b3a:	6018      	str	r0, [r3, #0]

	simA7672.init();
 8001b3c:	48c9      	ldr	r0, [pc, #804]	@ (8001e64 <_Z9ModemTaskPv+0x33c>)
 8001b3e:	f001 fa07 	bl	8002f50 <_ZN5Modem8simA76724initEv>

	struct ModemData_Queue ModemData = { 0 };
 8001b42:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001b46:	22d9      	movs	r2, #217	@ 0xd9
 8001b48:	2100      	movs	r1, #0
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f00d feb7 	bl	800f8be <memset>

	struct ControlData_Queue ControlData = {0};
 8001b50:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001b54:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001b58:	4618      	mov	r0, r3
 8001b5a:	2374      	movs	r3, #116	@ 0x74
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	2100      	movs	r1, #0
 8001b60:	f00d fead 	bl	800f8be <memset>

	Modem::simA7672::UE_systemInfo cpsiInfo;
	Modem::simA7672::pdp_stat pdpinfo;
	Modem::simA7672::status modeminfo;
	Modem::simA7672::mqtt_flags mqttstartinfo = Modem::simA7672::mqtt_ERR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	f887 31bf 	strb.w	r3, [r7, #447]	@ 0x1bf
	Modem::simA7672::mqtt_flags mqttserverinfo = Modem::simA7672::mqtt_ERR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	f887 31be 	strb.w	r3, [r7, #446]	@ 0x1be

	enum routine mqtt_routine = net_enable;
 8001b70:	2300      	movs	r3, #0
 8001b72:	f887 31bd 	strb.w	r3, [r7, #445]	@ 0x1bd


	std::strcpy(ModemData.serverAddr, "tcp://apfp7i6y92d6b-ats.iot.us-east-1.amazonaws.com:8883");
 8001b76:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001b7a:	334b      	adds	r3, #75	@ 0x4b
 8001b7c:	4aba      	ldr	r2, [pc, #744]	@ (8001e68 <_Z9ModemTaskPv+0x340>)
 8001b7e:	4614      	mov	r4, r2
 8001b80:	469c      	mov	ip, r3
 8001b82:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8001b86:	4665      	mov	r5, ip
 8001b88:	4626      	mov	r6, r4
 8001b8a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001b8c:	6028      	str	r0, [r5, #0]
 8001b8e:	6069      	str	r1, [r5, #4]
 8001b90:	60aa      	str	r2, [r5, #8]
 8001b92:	60eb      	str	r3, [r5, #12]
 8001b94:	3410      	adds	r4, #16
 8001b96:	f10c 0c10 	add.w	ip, ip, #16
 8001b9a:	4574      	cmp	r4, lr
 8001b9c:	d1f3      	bne.n	8001b86 <_Z9ModemTaskPv+0x5e>
 8001b9e:	4662      	mov	r2, ip
 8001ba0:	4623      	mov	r3, r4
 8001ba2:	cb03      	ldmia	r3!, {r0, r1}
 8001ba4:	6010      	str	r0, [r2, #0]
 8001ba6:	6051      	str	r1, [r2, #4]
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	7213      	strb	r3, [r2, #8]
	std::strcpy(ModemData.apn, "zonginternet");
 8001bac:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001bb0:	3337      	adds	r3, #55	@ 0x37
 8001bb2:	4aae      	ldr	r2, [pc, #696]	@ (8001e6c <_Z9ModemTaskPv+0x344>)
 8001bb4:	461c      	mov	r4, r3
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001bba:	6020      	str	r0, [r4, #0]
 8001bbc:	6061      	str	r1, [r4, #4]
 8001bbe:	60a2      	str	r2, [r4, #8]
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	7323      	strb	r3, [r4, #12]
	std::strcpy(ModemData.mqttSubTopic, "TEST1");
 8001bc4:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001bc8:	33c3      	adds	r3, #195	@ 0xc3
 8001bca:	4aa9      	ldr	r2, [pc, #676]	@ (8001e70 <_Z9ModemTaskPv+0x348>)
 8001bcc:	6810      	ldr	r0, [r2, #0]
 8001bce:	6018      	str	r0, [r3, #0]
 8001bd0:	8892      	ldrh	r2, [r2, #4]
 8001bd2:	809a      	strh	r2, [r3, #4]
	std::strcpy(ModemData.mqttPubTopic, "devicedata");
 8001bd4:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001bd8:	33af      	adds	r3, #175	@ 0xaf
 8001bda:	49a6      	ldr	r1, [pc, #664]	@ (8001e74 <_Z9ModemTaskPv+0x34c>)
 8001bdc:	461a      	mov	r2, r3
 8001bde:	460b      	mov	r3, r1
 8001be0:	cb03      	ldmia	r3!, {r0, r1}
 8001be2:	6010      	str	r0, [r2, #0]
 8001be4:	6051      	str	r1, [r2, #4]
 8001be6:	8819      	ldrh	r1, [r3, #0]
 8001be8:	789b      	ldrb	r3, [r3, #2]
 8001bea:	8111      	strh	r1, [r2, #8]
 8001bec:	7293      	strb	r3, [r2, #10]


	uint8_t mqtt_counter = 0;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	f887 31bc 	strb.w	r3, [r7, #444]	@ 0x1bc

		//simA7672.getTimeDate(ModemData.time, ModemData.date,
		//		ModemData.timezone);

		//ModemData.timestamp = parsing.convertToEpoch(ModemData.date, ModemData.time, ModemData.timezone);
		simA7672.getSim(ModemData.pin);
 8001bf4:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	489a      	ldr	r0, [pc, #616]	@ (8001e64 <_Z9ModemTaskPv+0x33c>)
 8001bfc:	f001 fb94 	bl	8003328 <_ZN5Modem8simA76726getSimEPc>
		simA7672.getNetwork(ModemData.networkStat);
 8001c00:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001c04:	330f      	adds	r3, #15
 8001c06:	4619      	mov	r1, r3
 8001c08:	4896      	ldr	r0, [pc, #600]	@ (8001e64 <_Z9ModemTaskPv+0x33c>)
 8001c0a:	f001 fbf7 	bl	80033fc <_ZN5Modem8simA767210getNetworkEPc>
		simA7672.getNetworkPDP(ModemData.networkStatpdp);
 8001c0e:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001c12:	331e      	adds	r3, #30
 8001c14:	4619      	mov	r1, r3
 8001c16:	4893      	ldr	r0, [pc, #588]	@ (8001e64 <_Z9ModemTaskPv+0x33c>)
 8001c18:	f001 fcd6 	bl	80035c8 <_ZN5Modem8simA767213getNetworkPDPEPc>
		simA7672.getSignalQ(ModemData.quality);
 8001c1c:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001c20:	332d      	adds	r3, #45	@ 0x2d
 8001c22:	4619      	mov	r1, r3
 8001c24:	488f      	ldr	r0, [pc, #572]	@ (8001e64 <_Z9ModemTaskPv+0x33c>)
 8001c26:	f001 fec3 	bl	80039b0 <_ZN5Modem8simA767210getSignalQEPc>
		simA7672.getUEsystemInfo(&cpsiInfo);
 8001c2a:	f107 036b 	add.w	r3, r7, #107	@ 0x6b
 8001c2e:	4619      	mov	r1, r3
 8001c30:	488c      	ldr	r0, [pc, #560]	@ (8001e64 <_Z9ModemTaskPv+0x33c>)
 8001c32:	f001 fe0d 	bl	8003850 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE>
		simA7672.getPDPstatus(&pdpinfo);
 8001c36:	f107 036a 	add.w	r3, r7, #106	@ 0x6a
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4889      	ldr	r0, [pc, #548]	@ (8001e64 <_Z9ModemTaskPv+0x33c>)
 8001c3e:	f001 fd9b 	bl	8003778 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE>





		ModemDataQueue.queueSend(reinterpret_cast<void*>(&ModemData));
 8001c42:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001c46:	4619      	mov	r1, r3
 8001c48:	488b      	ldr	r0, [pc, #556]	@ (8001e78 <_Z9ModemTaskPv+0x350>)
 8001c4a:	f003 fc29 	bl	80054a0 <_ZN11System_Rtos15freertos_queues9queueSendEPv>
		System_Rtos::delay(50);
 8001c4e:	2032      	movs	r0, #50	@ 0x32
 8001c50:	f003 fb9e 	bl	8005390 <_ZN11System_Rtos5delayEm>


		if(ControlDataQueue.queueReceive((void *)&ControlData) == ControlDataQueue.queues_recived)
 8001c54:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4888      	ldr	r0, [pc, #544]	@ (8001e7c <_Z9ModemTaskPv+0x354>)
 8001c5c:	f003 fc3d 	bl	80054da <_ZN11System_Rtos15freertos_queues12queueReceiveEPv>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0





		switch (mqtt_routine) {
 8001c64:	f897 31bd 	ldrb.w	r3, [r7, #445]	@ 0x1bd
 8001c68:	2b03      	cmp	r3, #3
 8001c6a:	f200 8270 	bhi.w	800214e <_Z9ModemTaskPv+0x626>
 8001c6e:	a201      	add	r2, pc, #4	@ (adr r2, 8001c74 <_Z9ModemTaskPv+0x14c>)
 8001c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c74:	08001c85 	.word	0x08001c85
 8001c78:	08001d6d 	.word	0x08001d6d
 8001c7c:	08001e8d 	.word	0x08001e8d
 8001c80:	08001edd 	.word	0x08001edd

		case net_enable: {

			/*Enable Net support*/

			if ((std::strstr(ModemData.networkStat, networkInfo[0])
 8001c84:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001c88:	330f      	adds	r3, #15
 8001c8a:	497d      	ldr	r1, [pc, #500]	@ (8001e80 <_Z9ModemTaskPv+0x358>)
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff ff3d 	bl	8001b0c <_ZSt6strstrPcPKc>
 8001c92:	4603      	mov	r3, r0
					|| std::strstr(ModemData.networkStat, networkInfo[1]))
					&& (std::strstr(ModemData.networkStatpdp, networkInfo[0])
							|| std::strstr(ModemData.networkStatpdp, networkInfo[1]))
					&& cpsiInfo != Modem::simA7672::no_service) {
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d109      	bne.n	8001cac <_Z9ModemTaskPv+0x184>
					|| std::strstr(ModemData.networkStat, networkInfo[1]))
 8001c98:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001c9c:	330f      	adds	r3, #15
 8001c9e:	4979      	ldr	r1, [pc, #484]	@ (8001e84 <_Z9ModemTaskPv+0x35c>)
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff ff33 	bl	8001b0c <_ZSt6strstrPcPKc>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d01c      	beq.n	8001ce6 <_Z9ModemTaskPv+0x1be>
					&& (std::strstr(ModemData.networkStatpdp, networkInfo[0])
 8001cac:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001cb0:	331e      	adds	r3, #30
 8001cb2:	4973      	ldr	r1, [pc, #460]	@ (8001e80 <_Z9ModemTaskPv+0x358>)
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff ff29 	bl	8001b0c <_ZSt6strstrPcPKc>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d109      	bne.n	8001cd4 <_Z9ModemTaskPv+0x1ac>
							|| std::strstr(ModemData.networkStatpdp, networkInfo[1]))
 8001cc0:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001cc4:	331e      	adds	r3, #30
 8001cc6:	496f      	ldr	r1, [pc, #444]	@ (8001e84 <_Z9ModemTaskPv+0x35c>)
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff ff1f 	bl	8001b0c <_ZSt6strstrPcPKc>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d008      	beq.n	8001ce6 <_Z9ModemTaskPv+0x1be>
					&& cpsiInfo != Modem::simA7672::no_service) {
 8001cd4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001cd8:	f2a3 1355 	subw	r3, r3, #341	@ 0x155
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <_Z9ModemTaskPv+0x1be>
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e000      	b.n	8001ce8 <_Z9ModemTaskPv+0x1c0>
 8001ce6:	2300      	movs	r3, #0
			if ((std::strstr(ModemData.networkStat, networkInfo[0])
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	f000 8232 	beq.w	8002152 <_Z9ModemTaskPv+0x62a>


				modeminfo = simA7672.setAPN(ModemData.apn);
 8001cee:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001cf2:	3337      	adds	r3, #55	@ 0x37
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	485b      	ldr	r0, [pc, #364]	@ (8001e64 <_Z9ModemTaskPv+0x33c>)
 8001cf8:	f001 fa6a 	bl	80031d0 <_ZN5Modem8simA76726setAPNEPc>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	f887 31bb 	strb.w	r3, [r7, #443]	@ 0x1bb

				simA7672.sslversionset();
 8001d02:	4858      	ldr	r0, [pc, #352]	@ (8001e64 <_Z9ModemTaskPv+0x33c>)
 8001d04:	f002 fbbc 	bl	8004480 <_ZN5Modem8simA767213sslversionsetEv>
				simA7672.sslauthset();
 8001d08:	4856      	ldr	r0, [pc, #344]	@ (8001e64 <_Z9ModemTaskPv+0x33c>)
 8001d0a:	f002 fbf5 	bl	80044f8 <_ZN5Modem8simA767210sslauthsetEv>
				simA7672.sslcacertset();
 8001d0e:	4855      	ldr	r0, [pc, #340]	@ (8001e64 <_Z9ModemTaskPv+0x33c>)
 8001d10:	f002 fc2e 	bl	8004570 <_ZN5Modem8simA767212sslcacertsetEv>
				simA7672.ssldevicecertset();
 8001d14:	4853      	ldr	r0, [pc, #332]	@ (8001e64 <_Z9ModemTaskPv+0x33c>)
 8001d16:	f002 fc67 	bl	80045e8 <_ZN5Modem8simA767216ssldevicecertsetEv>
				simA7672.ssldevicekeyset();
 8001d1a:	4852      	ldr	r0, [pc, #328]	@ (8001e64 <_Z9ModemTaskPv+0x33c>)
 8001d1c:	f002 fca0 	bl	8004660 <_ZN5Modem8simA767215ssldevicekeysetEv>


				if (modeminfo == Modem::simA7672::simA7672_OK) {
 8001d20:	f897 31bb 	ldrb.w	r3, [r7, #443]	@ 0x1bb
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	f040 8214 	bne.w	8002152 <_Z9ModemTaskPv+0x62a>
	//				simA7672.activate_deactivatePDP(Modem::simA7672::pdp_deactivated);
	//				simA7672.activate_deactivatePDP(Modem::simA7672::pdp_activate);

					if (mqttserverinfo == Modem::simA7672::mqtt_serverConnected) {
 8001d2a:	f897 31be 	ldrb.w	r3, [r7, #446]	@ 0x1be
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d108      	bne.n	8001d44 <_Z9ModemTaskPv+0x21c>

						simA7672.mqttDisconnectServer(ModemData.mqtt_client_index);
 8001d32:	f897 31b8 	ldrb.w	r3, [r7, #440]	@ 0x1b8
 8001d36:	4619      	mov	r1, r3
 8001d38:	484a      	ldr	r0, [pc, #296]	@ (8001e64 <_Z9ModemTaskPv+0x33c>)
 8001d3a:	f002 f953 	bl	8003fe4 <_ZN5Modem8simA767220mqttDisconnectServerEh>
						mqttserverinfo = Modem::simA7672::mqtt_ERR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	f887 31be 	strb.w	r3, [r7, #446]	@ 0x1be
					}

					if (mqttstartinfo == Modem::simA7672::mqtt_OK) {
 8001d44:	f897 31bf 	ldrb.w	r3, [r7, #447]	@ 0x1bf
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d10b      	bne.n	8001d64 <_Z9ModemTaskPv+0x23c>
						simA7672.mqttReleaseClient(ModemData.mqtt_client_index);
 8001d4c:	f897 31b8 	ldrb.w	r3, [r7, #440]	@ 0x1b8
 8001d50:	4619      	mov	r1, r3
 8001d52:	4844      	ldr	r0, [pc, #272]	@ (8001e64 <_Z9ModemTaskPv+0x33c>)
 8001d54:	f002 f86c 	bl	8003e30 <_ZN5Modem8simA767217mqttReleaseClientEh>
						simA7672.mqttStop();
 8001d58:	4842      	ldr	r0, [pc, #264]	@ (8001e64 <_Z9ModemTaskPv+0x33c>)
 8001d5a:	f001 ffa1 	bl	8003ca0 <_ZN5Modem8simA76728mqttStopEv>
						mqttstartinfo = Modem::simA7672::mqtt_ERR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	f887 31bf 	strb.w	r3, [r7, #447]	@ 0x1bf
					}

					mqtt_routine = mqtt_enable;
 8001d64:	2301      	movs	r3, #1
 8001d66:	f887 31bd 	strb.w	r3, [r7, #445]	@ 0x1bd

				}

			}

			break;
 8001d6a:	e1f2      	b.n	8002152 <_Z9ModemTaskPv+0x62a>
		}

		case mqtt_enable: {

			/*Enable MQTT*/
			if ((std::strstr(ModemData.networkStat, networkInfo[0])
 8001d6c:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001d70:	330f      	adds	r3, #15
 8001d72:	4943      	ldr	r1, [pc, #268]	@ (8001e80 <_Z9ModemTaskPv+0x358>)
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff fec9 	bl	8001b0c <_ZSt6strstrPcPKc>
 8001d7a:	4603      	mov	r3, r0
					|| std::strstr(ModemData.networkStat, networkInfo[1]))
					&& (std::strstr(ModemData.networkStatpdp, networkInfo[0])
							|| std::strstr(ModemData.networkStatpdp, networkInfo[1]))
					&& cpsiInfo != Modem::simA7672::no_service
					&& mqttstartinfo != Modem::simA7672::mqtt_OK) {
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d109      	bne.n	8001d94 <_Z9ModemTaskPv+0x26c>
					|| std::strstr(ModemData.networkStat, networkInfo[1]))
 8001d80:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001d84:	330f      	adds	r3, #15
 8001d86:	493f      	ldr	r1, [pc, #252]	@ (8001e84 <_Z9ModemTaskPv+0x35c>)
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff febf 	bl	8001b0c <_ZSt6strstrPcPKc>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d020      	beq.n	8001dd6 <_Z9ModemTaskPv+0x2ae>
					&& (std::strstr(ModemData.networkStatpdp, networkInfo[0])
 8001d94:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001d98:	331e      	adds	r3, #30
 8001d9a:	4939      	ldr	r1, [pc, #228]	@ (8001e80 <_Z9ModemTaskPv+0x358>)
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff feb5 	bl	8001b0c <_ZSt6strstrPcPKc>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d109      	bne.n	8001dbc <_Z9ModemTaskPv+0x294>
							|| std::strstr(ModemData.networkStatpdp, networkInfo[1]))
 8001da8:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001dac:	331e      	adds	r3, #30
 8001dae:	4935      	ldr	r1, [pc, #212]	@ (8001e84 <_Z9ModemTaskPv+0x35c>)
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff feab 	bl	8001b0c <_ZSt6strstrPcPKc>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d00c      	beq.n	8001dd6 <_Z9ModemTaskPv+0x2ae>
					&& cpsiInfo != Modem::simA7672::no_service
 8001dbc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001dc0:	f2a3 1355 	subw	r3, r3, #341	@ 0x155
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d005      	beq.n	8001dd6 <_Z9ModemTaskPv+0x2ae>
					&& mqttstartinfo != Modem::simA7672::mqtt_OK) {
 8001dca:	f897 31bf 	ldrb.w	r3, [r7, #447]	@ 0x1bf
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <_Z9ModemTaskPv+0x2ae>
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e000      	b.n	8001dd8 <_Z9ModemTaskPv+0x2b0>
 8001dd6:	2300      	movs	r3, #0
			if ((std::strstr(ModemData.networkStat, networkInfo[0])
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	f000 81bc 	beq.w	8002156 <_Z9ModemTaskPv+0x62e>

				simA7672.activate_deactivatePDP(Modem::simA7672::pdp_deactivated);
 8001dde:	2100      	movs	r1, #0
 8001de0:	4820      	ldr	r0, [pc, #128]	@ (8001e64 <_Z9ModemTaskPv+0x33c>)
 8001de2:	f001 fa4d 	bl	8003280 <_ZN5Modem8simA767222activate_deactivatePDPENS0_8pdp_statE>
				simA7672.activate_deactivatePDP(Modem::simA7672::pdp_activate);
 8001de6:	2101      	movs	r1, #1
 8001de8:	481e      	ldr	r0, [pc, #120]	@ (8001e64 <_Z9ModemTaskPv+0x33c>)
 8001dea:	f001 fa49 	bl	8003280 <_ZN5Modem8simA767222activate_deactivatePDPENS0_8pdp_statE>
				mqttstartinfo = simA7672.mqttStart(&ModemData.mqtt_client_index);
 8001dee:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001df2:	33d8      	adds	r3, #216	@ 0xd8
 8001df4:	4619      	mov	r1, r3
 8001df6:	481b      	ldr	r0, [pc, #108]	@ (8001e64 <_Z9ModemTaskPv+0x33c>)
 8001df8:	f001 fee2 	bl	8003bc0 <_ZN5Modem8simA76729mqttStartEPh>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	f887 31bf 	strb.w	r3, [r7, #447]	@ 0x1bf
				if (mqttstartinfo == Modem::simA7672::mqtt_OK) {
 8001e02:	f897 31bf 	ldrb.w	r3, [r7, #447]	@ 0x1bf
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d121      	bne.n	8001e4e <_Z9ModemTaskPv+0x326>

					mqttstartinfo = simA7672.mqttSetClient(
 8001e0a:	f897 11b8 	ldrb.w	r1, [r7, #440]	@ 0x1b8
 8001e0e:	2301      	movs	r3, #1
 8001e10:	4a1d      	ldr	r2, [pc, #116]	@ (8001e88 <_Z9ModemTaskPv+0x360>)
 8001e12:	4814      	ldr	r0, [pc, #80]	@ (8001e64 <_Z9ModemTaskPv+0x33c>)
 8001e14:	f001 ffaa 	bl	8003d6c <_ZN5Modem8simA767213mqttSetClientEhPch>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	f887 31bf 	strb.w	r3, [r7, #447]	@ 0x1bf
							ModemData.mqtt_client_index,
							const_cast<char*>("STM32"),1);

					if(mqttstartinfo == Modem::simA7672::mqtt_OK)
 8001e1e:	f897 31bf 	ldrb.w	r3, [r7, #447]	@ 0x1bf
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d109      	bne.n	8001e3a <_Z9ModemTaskPv+0x312>
					{

						simA7672.mqttsslenable(ModemData.mqtt_client_index);
 8001e26:	f897 31b8 	ldrb.w	r3, [r7, #440]	@ 0x1b8
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	480d      	ldr	r0, [pc, #52]	@ (8001e64 <_Z9ModemTaskPv+0x33c>)
 8001e2e:	f002 facb 	bl	80043c8 <_ZN5Modem8simA767213mqttsslenableEh>
						mqtt_routine = mqtt_connect;
 8001e32:	2302      	movs	r3, #2
 8001e34:	f887 31bd 	strb.w	r3, [r7, #445]	@ 0x1bd
					simA7672.mqttStop();
				}

			}

			break;
 8001e38:	e18d      	b.n	8002156 <_Z9ModemTaskPv+0x62e>
						simA7672.mqttReleaseClient(ModemData.mqtt_client_index);
 8001e3a:	f897 31b8 	ldrb.w	r3, [r7, #440]	@ 0x1b8
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4808      	ldr	r0, [pc, #32]	@ (8001e64 <_Z9ModemTaskPv+0x33c>)
 8001e42:	f001 fff5 	bl	8003e30 <_ZN5Modem8simA767217mqttReleaseClientEh>
						simA7672.mqttStop();
 8001e46:	4807      	ldr	r0, [pc, #28]	@ (8001e64 <_Z9ModemTaskPv+0x33c>)
 8001e48:	f001 ff2a 	bl	8003ca0 <_ZN5Modem8simA76728mqttStopEv>
			break;
 8001e4c:	e183      	b.n	8002156 <_Z9ModemTaskPv+0x62e>
					simA7672.mqttReleaseClient(ModemData.mqtt_client_index);
 8001e4e:	f897 31b8 	ldrb.w	r3, [r7, #440]	@ 0x1b8
 8001e52:	4619      	mov	r1, r3
 8001e54:	4803      	ldr	r0, [pc, #12]	@ (8001e64 <_Z9ModemTaskPv+0x33c>)
 8001e56:	f001 ffeb 	bl	8003e30 <_ZN5Modem8simA767217mqttReleaseClientEh>
					simA7672.mqttStop();
 8001e5a:	4802      	ldr	r0, [pc, #8]	@ (8001e64 <_Z9ModemTaskPv+0x33c>)
 8001e5c:	f001 ff20 	bl	8003ca0 <_ZN5Modem8simA76728mqttStopEv>
			break;
 8001e60:	e179      	b.n	8002156 <_Z9ModemTaskPv+0x62e>
 8001e62:	bf00      	nop
 8001e64:	20001d04 	.word	0x20001d04
 8001e68:	08011bc8 	.word	0x08011bc8
 8001e6c:	08011c04 	.word	0x08011c04
 8001e70:	08011c14 	.word	0x08011c14
 8001e74:	08011c1c 	.word	0x08011c1c
 8001e78:	20002f7c 	.word	0x20002f7c
 8001e7c:	2000304c 	.word	0x2000304c
 8001e80:	0801228c 	.word	0x0801228c
 8001e84:	08012298 	.word	0x08012298
 8001e88:	08011c28 	.word	0x08011c28
		case mqtt_connect: {



			/*Connect to Mqtt Server*/
			if (mqttstartinfo == Modem::simA7672::mqtt_OK
 8001e8c:	f897 31bf 	ldrb.w	r3, [r7, #447]	@ 0x1bf
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f040 8162 	bne.w	800215a <_Z9ModemTaskPv+0x632>
					&& mqttserverinfo != Modem::simA7672::mqtt_serverConnected) {
 8001e96:	f897 31be 	ldrb.w	r3, [r7, #446]	@ 0x1be
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	f000 815d 	beq.w	800215a <_Z9ModemTaskPv+0x632>

				mqttserverinfo = simA7672.mqttConnectServer(
 8001ea0:	f897 11b8 	ldrb.w	r1, [r7, #440]	@ 0x1b8
 8001ea4:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001ea8:	334b      	adds	r3, #75	@ 0x4b
 8001eaa:	461a      	mov	r2, r3
 8001eac:	48ad      	ldr	r0, [pc, #692]	@ (8002164 <_Z9ModemTaskPv+0x63c>)
 8001eae:	f002 f81b 	bl	8003ee8 <_ZN5Modem8simA767217mqttConnectServerEhPc>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	f887 31be 	strb.w	r3, [r7, #446]	@ 0x1be
						ModemData.mqtt_client_index, ModemData.serverAddr);

				if (mqttserverinfo == Modem::simA7672::mqtt_serverConnected) {
 8001eb8:	f897 31be 	ldrb.w	r3, [r7, #446]	@ 0x1be
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d103      	bne.n	8001ec8 <_Z9ModemTaskPv+0x3a0>

					mqtt_routine = mqtt_loop;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	f887 31bd 	strb.w	r3, [r7, #445]	@ 0x1bd
					mqtt_routine = net_enable;
				}

			}

			break;
 8001ec6:	e148      	b.n	800215a <_Z9ModemTaskPv+0x632>
					simA7672.mqttDisconnectServer(ModemData.mqtt_client_index);
 8001ec8:	f897 31b8 	ldrb.w	r3, [r7, #440]	@ 0x1b8
 8001ecc:	4619      	mov	r1, r3
 8001ece:	48a5      	ldr	r0, [pc, #660]	@ (8002164 <_Z9ModemTaskPv+0x63c>)
 8001ed0:	f002 f888 	bl	8003fe4 <_ZN5Modem8simA767220mqttDisconnectServerEh>
					mqtt_routine = net_enable;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	f887 31bd 	strb.w	r3, [r7, #445]	@ 0x1bd
			break;
 8001eda:	e13e      	b.n	800215a <_Z9ModemTaskPv+0x632>
		}

		case mqtt_loop: {

			mqttserverinfo = simA7672.getmqttconnectionstatus(ModemData.serverAddr);
 8001edc:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001ee0:	334b      	adds	r3, #75	@ 0x4b
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	489f      	ldr	r0, [pc, #636]	@ (8002164 <_Z9ModemTaskPv+0x63c>)
 8001ee6:	f001 fdf3 	bl	8003ad0 <_ZN5Modem8simA767223getmqttconnectionstatusEPc>
 8001eea:	4603      	mov	r3, r0
 8001eec:	f887 31be 	strb.w	r3, [r7, #446]	@ 0x1be
			mqtt_counter++;
 8001ef0:	f897 31bc 	ldrb.w	r3, [r7, #444]	@ 0x1bc
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	f887 31bc 	strb.w	r3, [r7, #444]	@ 0x1bc
			/*get retries as well as sometimes we can get some issue */
			if (mqttserverinfo != Modem::simA7672::mqtt_serverConnected && mqtt_counter > 3) {
 8001efa:	f897 31be 	ldrb.w	r3, [r7, #446]	@ 0x1be
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d010      	beq.n	8001f24 <_Z9ModemTaskPv+0x3fc>
 8001f02:	f897 31bc 	ldrb.w	r3, [r7, #444]	@ 0x1bc
 8001f06:	2b03      	cmp	r3, #3
 8001f08:	d90c      	bls.n	8001f24 <_Z9ModemTaskPv+0x3fc>
				ModemData.internet = 0;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	f887 31b7 	strb.w	r3, [r7, #439]	@ 0x1b7
				simA7672.mqttDisconnectServer(ModemData.mqtt_client_index);
 8001f10:	f897 31b8 	ldrb.w	r3, [r7, #440]	@ 0x1b8
 8001f14:	4619      	mov	r1, r3
 8001f16:	4893      	ldr	r0, [pc, #588]	@ (8002164 <_Z9ModemTaskPv+0x63c>)
 8001f18:	f002 f864 	bl	8003fe4 <_ZN5Modem8simA767220mqttDisconnectServerEh>
				mqtt_routine = net_enable;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	f887 31bd 	strb.w	r3, [r7, #445]	@ 0x1bd
                      /*take flag to do something*/
				}
				simA7672.mqttunsubTopic(ModemData.mqtt_client_index,  ModemData.mqttSubTopic);
			}

			break;
 8001f22:	e11c      	b.n	800215e <_Z9ModemTaskPv+0x636>
			else if(mqttserverinfo == Modem::simA7672::mqtt_serverConnected )
 8001f24:	f897 31be 	ldrb.w	r3, [r7, #446]	@ 0x1be
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	f040 8118 	bne.w	800215e <_Z9ModemTaskPv+0x636>
				ModemData.internet = 1;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	f887 31b7 	strb.w	r3, [r7, #439]	@ 0x1b7
				mqtt_counter = 0;
 8001f34:	2300      	movs	r3, #0
 8001f36:	f887 31bc 	strb.w	r3, [r7, #444]	@ 0x1bc
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 8001f3a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001f3e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	663b      	str	r3, [r7, #96]	@ 0x60
						 ,ControlData.V_1
 8001f46:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001f4a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001f4e:	695b      	ldr	r3, [r3, #20]
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7fe faf9 	bl	8000548 <__aeabi_f2d>
 8001f56:	e9c7 0116 	strd	r0, r1, [r7, #88]	@ 0x58
						 ,ControlData.V_2
 8001f5a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001f5e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001f62:	699b      	ldr	r3, [r3, #24]
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7fe faef 	bl	8000548 <__aeabi_f2d>
 8001f6a:	e9c7 0114 	strd	r0, r1, [r7, #80]	@ 0x50
						 ,ControlData.V_3
 8001f6e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001f72:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001f76:	69db      	ldr	r3, [r3, #28]
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7fe fae5 	bl	8000548 <__aeabi_f2d>
 8001f7e:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48
						 ,ControlData.I_1
 8001f82:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001f86:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001f8a:	6a1b      	ldr	r3, [r3, #32]
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7fe fadb 	bl	8000548 <__aeabi_f2d>
 8001f92:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
						 ,ControlData.I_2
 8001f96:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001f9a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7fe fad1 	bl	8000548 <__aeabi_f2d>
 8001fa6:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
						 ,ControlData.I_3
 8001faa:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001fae:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7fe fac7 	bl	8000548 <__aeabi_f2d>
 8001fba:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
						 ,ControlData.P_1
 8001fbe:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001fc2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7fe fabd 	bl	8000548 <__aeabi_f2d>
 8001fce:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
						 ,ControlData.P_2
 8001fd2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001fd6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7fe fab3 	bl	8000548 <__aeabi_f2d>
 8001fe2:	e9c7 0108 	strd	r0, r1, [r7, #32]
						 ,ControlData.P_3
 8001fe6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001fea:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001fee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7fe faa9 	bl	8000548 <__aeabi_f2d>
 8001ff6:	e9c7 0106 	strd	r0, r1, [r7, #24]
						 ,ControlData.Energy
 8001ffa:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001ffe:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 8002004:	4618      	mov	r0, r3
 8002006:	f7fe fa9f 	bl	8000548 <__aeabi_f2d>
 800200a:	4682      	mov	sl, r0
 800200c:	468b      	mov	fp, r1
						 ,ControlData.Freq
 800200e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002012:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002016:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 8002018:	4618      	mov	r0, r3
 800201a:	f7fe fa95 	bl	8000548 <__aeabi_f2d>
 800201e:	4680      	mov	r8, r0
 8002020:	4689      	mov	r9, r1
						 ,ControlData.sourceIdentification
 8002022:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002026:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800202a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 800202e:	617b      	str	r3, [r7, #20]
						 ,ControlData.fuelPer
 8002030:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002034:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002038:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 800203c:	613b      	str	r3, [r7, #16]
						 ,ControlData.fuelConsp
 800203e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002042:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002046:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 8002048:	4618      	mov	r0, r3
 800204a:	f7fe fa7d 	bl	8000548 <__aeabi_f2d>
 800204e:	4604      	mov	r4, r0
 8002050:	460d      	mov	r5, r1
 8002052:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002056:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800205a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800205c:	60fa      	str	r2, [r7, #12]
 800205e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002062:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002066:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800206e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002072:	6e1e      	ldr	r6, [r3, #96]	@ 0x60
 8002074:	607e      	str	r6, [r7, #4]
 8002076:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800207a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800207e:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8002080:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002084:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002088:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 800208a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800208e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002092:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002094:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002098:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800209c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800209e:	f107 066c 	add.w	r6, r7, #108	@ 0x6c
 80020a2:	9320      	str	r3, [sp, #128]	@ 0x80
 80020a4:	921f      	str	r2, [sp, #124]	@ 0x7c
 80020a6:	911e      	str	r1, [sp, #120]	@ 0x78
 80020a8:	901d      	str	r0, [sp, #116]	@ 0x74
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	921c      	str	r2, [sp, #112]	@ 0x70
 80020ae:	68b9      	ldr	r1, [r7, #8]
 80020b0:	911b      	str	r1, [sp, #108]	@ 0x6c
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	921a      	str	r2, [sp, #104]	@ 0x68
 80020b6:	e9cd 4518 	strd	r4, r5, [sp, #96]	@ 0x60
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	9217      	str	r2, [sp, #92]	@ 0x5c
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	9216      	str	r2, [sp, #88]	@ 0x58
 80020c2:	e9cd 8914 	strd	r8, r9, [sp, #80]	@ 0x50
 80020c6:	e9cd ab12 	strd	sl, fp, [sp, #72]	@ 0x48
 80020ca:	ed97 7b06 	vldr	d7, [r7, #24]
 80020ce:	ed8d 7b10 	vstr	d7, [sp, #64]	@ 0x40
 80020d2:	ed97 7b08 	vldr	d7, [r7, #32]
 80020d6:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80020da:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 80020de:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80020e2:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80020e6:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80020ea:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 80020ee:	ed8d 7b08 	vstr	d7, [sp, #32]
 80020f2:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 80020f6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80020fa:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 80020fe:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002102:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8002106:	ed8d 7b02 	vstr	d7, [sp, #8]
 800210a:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 800210e:	ed8d 7b00 	vstr	d7, [sp]
 8002112:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002114:	4632      	mov	r2, r6
 8002116:	4914      	ldr	r1, [pc, #80]	@ (8002168 <_Z9ModemTaskPv+0x640>)
 8002118:	4814      	ldr	r0, [pc, #80]	@ (800216c <_Z9ModemTaskPv+0x644>)
 800211a:	f00d fb6d 	bl	800f7f8 <siprintf>
				if(simA7672.mqttsubTopicAndRead(ModemData.mqtt_client_index, ModemData.mqttSubTopic, command_buffer,255) == Modem::simA7672::mqtt_msgrecv)
 800211e:	f897 11b8 	ldrb.w	r1, [r7, #440]	@ 0x1b8
 8002122:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8002126:	f103 02c3 	add.w	r2, r3, #195	@ 0xc3
 800212a:	23ff      	movs	r3, #255	@ 0xff
 800212c:	9300      	str	r3, [sp, #0]
 800212e:	4b10      	ldr	r3, [pc, #64]	@ (8002170 <_Z9ModemTaskPv+0x648>)
 8002130:	480c      	ldr	r0, [pc, #48]	@ (8002164 <_Z9ModemTaskPv+0x63c>)
 8002132:	f001 ffd3 	bl	80040dc <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t>
 8002136:	4603      	mov	r3, r0
 8002138:	2b05      	cmp	r3, #5
				simA7672.mqttunsubTopic(ModemData.mqtt_client_index,  ModemData.mqttSubTopic);
 800213a:	f897 11b8 	ldrb.w	r1, [r7, #440]	@ 0x1b8
 800213e:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8002142:	33c3      	adds	r3, #195	@ 0xc3
 8002144:	461a      	mov	r2, r3
 8002146:	4807      	ldr	r0, [pc, #28]	@ (8002164 <_Z9ModemTaskPv+0x63c>)
 8002148:	f002 f884 	bl	8004254 <_ZN5Modem8simA767214mqttunsubTopicEhPc>
			break;
 800214c:	e007      	b.n	800215e <_Z9ModemTaskPv+0x636>
		}

		default:
			break;
 800214e:	bf00      	nop
 8002150:	e550      	b.n	8001bf4 <_Z9ModemTaskPv+0xcc>
			break;
 8002152:	bf00      	nop
 8002154:	e54e      	b.n	8001bf4 <_Z9ModemTaskPv+0xcc>
			break;
 8002156:	bf00      	nop
 8002158:	e54c      	b.n	8001bf4 <_Z9ModemTaskPv+0xcc>
			break;
 800215a:	bf00      	nop
 800215c:	e54a      	b.n	8001bf4 <_Z9ModemTaskPv+0xcc>
			break;
 800215e:	bf00      	nop
		simA7672.getSim(ModemData.pin);
 8002160:	e548      	b.n	8001bf4 <_Z9ModemTaskPv+0xcc>
 8002162:	bf00      	nop
 8002164:	20001d04 	.word	0x20001d04
 8002168:	08011c30 	.word	0x08011c30
 800216c:	20002504 	.word	0x20002504
 8002170:	20002d34 	.word	0x20002d34

08002174 <_Z41__static_initialization_and_destruction_0ii>:



	}

}
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d108      	bne.n	8002196 <_Z41__static_initialization_and_destruction_0ii+0x22>
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800218a:	4293      	cmp	r3, r2
 800218c:	d103      	bne.n	8002196 <_Z41__static_initialization_and_destruction_0ii+0x22>
Modem::simA7672 simA7672(&GSM_U);
 800218e:	4904      	ldr	r1, [pc, #16]	@ (80021a0 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8002190:	4804      	ldr	r0, [pc, #16]	@ (80021a4 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8002192:	f000 fe79 	bl	8002e88 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef>
}
 8002196:	bf00      	nop
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	20003758 	.word	0x20003758
 80021a4:	20001d04 	.word	0x20001d04

080021a8 <_GLOBAL__sub_I_simA7672>:
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80021b0:	2001      	movs	r0, #1
 80021b2:	f7ff ffdf 	bl	8002174 <_Z41__static_initialization_and_destruction_0ii>
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <_ZN8UniqueID12CharToHexascEPhh>:
System_Rtos::freertos_queues InverterDataQueue(1,sizeof(struct InverterData_Queue),	queuebuffer_2);

const char kaHexAsc[16] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};

void UniqueID::CharToHexasc(uint8_t *pPos, uint8_t Wert)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	460b      	mov	r3, r1
 80021c2:	70fb      	strb	r3, [r7, #3]
     *pPos++ = kaHexAsc[Wert >> 4];
 80021c4:	78fb      	ldrb	r3, [r7, #3]
 80021c6:	091b      	lsrs	r3, r3, #4
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	461a      	mov	r2, r3
 80021cc:	4b09      	ldr	r3, [pc, #36]	@ (80021f4 <_ZN8UniqueID12CharToHexascEPhh+0x3c>)
 80021ce:	5c99      	ldrb	r1, [r3, r2]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	1c5a      	adds	r2, r3, #1
 80021d4:	607a      	str	r2, [r7, #4]
 80021d6:	460a      	mov	r2, r1
 80021d8:	701a      	strb	r2, [r3, #0]
     *pPos = kaHexAsc[Wert & 0x0f];
 80021da:	78fb      	ldrb	r3, [r7, #3]
 80021dc:	f003 030f 	and.w	r3, r3, #15
 80021e0:	4a04      	ldr	r2, [pc, #16]	@ (80021f4 <_ZN8UniqueID12CharToHexascEPhh+0x3c>)
 80021e2:	5cd2      	ldrb	r2, [r2, r3]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	701a      	strb	r2, [r3, #0]
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	080122a4 	.word	0x080122a4

080021f8 <_ZN8UniqueID6GetUidEv>:

char *UniqueID::GetUid()
{
 80021f8:	b590      	push	{r4, r7, lr}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
	static uint8_t sUid[13];
	uint32_t iWafer;

	iWafer = HAL_GetUIDw1() & 0x00FFul;
 80021fe:	f004 ff4d 	bl	800709c <HAL_GetUIDw1>
 8002202:	4603      	mov	r3, r0
 8002204:	b2db      	uxtb	r3, r3
 8002206:	607b      	str	r3, [r7, #4]
	// 7 lot numbers are already in ASCII
	*(uint32_t*) (&sUid[0]) = HAL_GetUIDw1() >> 8;
 8002208:	f004 ff48 	bl	800709c <HAL_GetUIDw1>
 800220c:	4603      	mov	r3, r0
 800220e:	4a1d      	ldr	r2, [pc, #116]	@ (8002284 <_ZN8UniqueID6GetUidEv+0x8c>)
 8002210:	0a1b      	lsrs	r3, r3, #8
 8002212:	6013      	str	r3, [r2, #0]
	*(uint32_t*) (&sUid[3]) = HAL_GetUIDw2();
 8002214:	4c1c      	ldr	r4, [pc, #112]	@ (8002288 <_ZN8UniqueID6GetUidEv+0x90>)
 8002216:	f004 ff4d 	bl	80070b4 <HAL_GetUIDw2>
 800221a:	4603      	mov	r3, r0
 800221c:	6023      	str	r3, [r4, #0]

	// Convert wafer number to 1 ASCII character
	if (iWafer >= 36)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2b23      	cmp	r3, #35	@ 0x23
 8002222:	d909      	bls.n	8002238 <_ZN8UniqueID6GetUidEv+0x40>
		sUid[7] = (iWafer >= 62) ? 'z' : ('a' + (iWafer - 36));
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b3d      	cmp	r3, #61	@ 0x3d
 8002228:	bf28      	it	cs
 800222a:	233d      	movcs	r3, #61	@ 0x3d
 800222c:	b2db      	uxtb	r3, r3
 800222e:	333d      	adds	r3, #61	@ 0x3d
 8002230:	b2da      	uxtb	r2, r3
 8002232:	4b14      	ldr	r3, [pc, #80]	@ (8002284 <_ZN8UniqueID6GetUidEv+0x8c>)
 8002234:	71da      	strb	r2, [r3, #7]
 8002236:	e00b      	b.n	8002250 <_ZN8UniqueID6GetUidEv+0x58>
	// Display with 10 + 26 + 26 symbols
	else
		sUid[7] = ((iWafer >= 10) ? 'A' : '0') + iWafer;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b09      	cmp	r3, #9
 800223c:	d901      	bls.n	8002242 <_ZN8UniqueID6GetUidEv+0x4a>
 800223e:	2241      	movs	r2, #65	@ 0x41
 8002240:	e000      	b.n	8002244 <_ZN8UniqueID6GetUidEv+0x4c>
 8002242:	2230      	movs	r2, #48	@ 0x30
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	b2db      	uxtb	r3, r3
 8002248:	4413      	add	r3, r2
 800224a:	b2da      	uxtb	r2, r3
 800224c:	4b0d      	ldr	r3, [pc, #52]	@ (8002284 <_ZN8UniqueID6GetUidEv+0x8c>)
 800224e:	71da      	strb	r2, [r3, #7]

	// Convert X and Y to 4 ASCII-HEX
	CharToHexasc(&sUid[8], (HAL_GetUIDw0() >> 16) & 0x00FFul);
 8002250:	f004 ff18 	bl	8007084 <HAL_GetUIDw0>
 8002254:	4603      	mov	r3, r0
 8002256:	0c1b      	lsrs	r3, r3, #16
 8002258:	b2db      	uxtb	r3, r3
 800225a:	4619      	mov	r1, r3
 800225c:	480b      	ldr	r0, [pc, #44]	@ (800228c <_ZN8UniqueID6GetUidEv+0x94>)
 800225e:	f7ff ffab 	bl	80021b8 <_ZN8UniqueID12CharToHexascEPhh>
	CharToHexasc(&sUid[10], HAL_GetUIDw0() & 0x00FFul);
 8002262:	f004 ff0f 	bl	8007084 <HAL_GetUIDw0>
 8002266:	4603      	mov	r3, r0
 8002268:	b2db      	uxtb	r3, r3
 800226a:	4619      	mov	r1, r3
 800226c:	4808      	ldr	r0, [pc, #32]	@ (8002290 <_ZN8UniqueID6GetUidEv+0x98>)
 800226e:	f7ff ffa3 	bl	80021b8 <_ZN8UniqueID12CharToHexascEPhh>
	sUid[12] = 0;
 8002272:	4b04      	ldr	r3, [pc, #16]	@ (8002284 <_ZN8UniqueID6GetUidEv+0x8c>)
 8002274:	2200      	movs	r2, #0
 8002276:	731a      	strb	r2, [r3, #12]
	return ((char*) sUid);
 8002278:	4b02      	ldr	r3, [pc, #8]	@ (8002284 <_ZN8UniqueID6GetUidEv+0x8c>)
}
 800227a:	4618      	mov	r0, r3
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	bd90      	pop	{r4, r7, pc}
 8002282:	bf00      	nop
 8002284:	20003428 	.word	0x20003428
 8002288:	2000342b 	.word	0x2000342b
 800228c:	20003430 	.word	0x20003430
 8002290:	20003432 	.word	0x20003432

08002294 <_Z11app_mainCppv>:




void app_mainCpp()
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0

	ModemTaskHandler.createTask();
 8002298:	4809      	ldr	r0, [pc, #36]	@ (80022c0 <_Z11app_mainCppv+0x2c>)
 800229a:	f003 f8b0 	bl	80053fe <_ZN11System_Rtos14freertos_Tasks10createTaskEv>
	InverterTaskHandler.createTask();
 800229e:	4809      	ldr	r0, [pc, #36]	@ (80022c4 <_Z11app_mainCppv+0x30>)
 80022a0:	f003 f8ad 	bl	80053fe <_ZN11System_Rtos14freertos_Tasks10createTaskEv>
    ControlnDDisplayTaskHandler.createTask();
 80022a4:	4808      	ldr	r0, [pc, #32]	@ (80022c8 <_Z11app_mainCppv+0x34>)
 80022a6:	f003 f8aa 	bl	80053fe <_ZN11System_Rtos14freertos_Tasks10createTaskEv>
    ModemDataQueue.queueCreate();
 80022aa:	4808      	ldr	r0, [pc, #32]	@ (80022cc <_Z11app_mainCppv+0x38>)
 80022ac:	f003 f8dc 	bl	8005468 <_ZN11System_Rtos15freertos_queues11queueCreateEv>
    ControlDataQueue.queueCreate();
 80022b0:	4807      	ldr	r0, [pc, #28]	@ (80022d0 <_Z11app_mainCppv+0x3c>)
 80022b2:	f003 f8d9 	bl	8005468 <_ZN11System_Rtos15freertos_queues11queueCreateEv>
    InverterDataQueue.queueCreate();
 80022b6:	4807      	ldr	r0, [pc, #28]	@ (80022d4 <_Z11app_mainCppv+0x40>)
 80022b8:	f003 f8d6 	bl	8005468 <_ZN11System_Rtos15freertos_queues11queueCreateEv>

}
 80022bc:	bf00      	nop
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	20002e34 	.word	0x20002e34
 80022c4:	20002e58 	.word	0x20002e58
 80022c8:	20002e7c 	.word	0x20002e7c
 80022cc:	20002f7c 	.word	0x20002f7c
 80022d0:	2000304c 	.word	0x2000304c
 80022d4:	200033cc 	.word	0x200033cc

080022d8 <app_mainC>:
// All the functions that need to be used in C files transport from here
extern "C"
{

    void app_mainC()
    {
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
    	app_mainCpp();
 80022dc:	f7ff ffda 	bl	8002294 <_Z11app_mainCppv>
    }
 80022e0:	bf00      	nop
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <_Z41__static_initialization_and_destruction_0ii>:


}
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af02      	add	r7, sp, #8
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d138      	bne.n	8002366 <_Z41__static_initialization_and_destruction_0ii+0x82>
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d133      	bne.n	8002366 <_Z41__static_initialization_and_destruction_0ii+0x82>
System_Rtos::freertos_Tasks ModemTaskHandler(ModemTask,"Modem",_StackSize_Modem, (void*) 1,24);
 80022fe:	2318      	movs	r3, #24
 8002300:	9301      	str	r3, [sp, #4]
 8002302:	2301      	movs	r3, #1
 8002304:	9300      	str	r3, [sp, #0]
 8002306:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800230a:	4a19      	ldr	r2, [pc, #100]	@ (8002370 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800230c:	4919      	ldr	r1, [pc, #100]	@ (8002374 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 800230e:	481a      	ldr	r0, [pc, #104]	@ (8002378 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8002310:	f003 f854 	bl	80053bc <_ZN11System_Rtos14freertos_TasksC1EPFvPvEPKctS1_m>
System_Rtos::freertos_Tasks InverterTaskHandler(InverterTask,"Inverter",_StackSize_Inverter, (void*) 1,24);
 8002314:	2318      	movs	r3, #24
 8002316:	9301      	str	r3, [sp, #4]
 8002318:	2301      	movs	r3, #1
 800231a:	9300      	str	r3, [sp, #0]
 800231c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002320:	4a16      	ldr	r2, [pc, #88]	@ (800237c <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8002322:	4917      	ldr	r1, [pc, #92]	@ (8002380 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8002324:	4817      	ldr	r0, [pc, #92]	@ (8002384 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8002326:	f003 f849 	bl	80053bc <_ZN11System_Rtos14freertos_TasksC1EPFvPvEPKctS1_m>
System_Rtos::freertos_Tasks ControlnDDisplayTaskHandler(ControlnDDisplayTask,"ControlDis",_StackSize_ControlnDDisplay, (void*) 1,24);
 800232a:	2318      	movs	r3, #24
 800232c:	9301      	str	r3, [sp, #4]
 800232e:	2301      	movs	r3, #1
 8002330:	9300      	str	r3, [sp, #0]
 8002332:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002336:	4a14      	ldr	r2, [pc, #80]	@ (8002388 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8002338:	4914      	ldr	r1, [pc, #80]	@ (800238c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800233a:	4815      	ldr	r0, [pc, #84]	@ (8002390 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800233c:	f003 f83e 	bl	80053bc <_ZN11System_Rtos14freertos_TasksC1EPFvPvEPKctS1_m>
System_Rtos::freertos_queues ModemDataQueue(1,sizeof(struct ModemData_Queue),	queuebuffer);
 8002340:	4b14      	ldr	r3, [pc, #80]	@ (8002394 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8002342:	22d9      	movs	r2, #217	@ 0xd9
 8002344:	2101      	movs	r1, #1
 8002346:	4814      	ldr	r0, [pc, #80]	@ (8002398 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8002348:	f003 f873 	bl	8005432 <_ZN11System_Rtos15freertos_queuesC1EttPh>
System_Rtos::freertos_queues ControlDataQueue(1,sizeof(struct ControlData_Queue),	queuebuffer_1);
 800234c:	4b13      	ldr	r3, [pc, #76]	@ (800239c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800234e:	2274      	movs	r2, #116	@ 0x74
 8002350:	2101      	movs	r1, #1
 8002352:	4813      	ldr	r0, [pc, #76]	@ (80023a0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8002354:	f003 f86d 	bl	8005432 <_ZN11System_Rtos15freertos_queuesC1EttPh>
System_Rtos::freertos_queues InverterDataQueue(1,sizeof(struct InverterData_Queue),	queuebuffer_2);
 8002358:	4b12      	ldr	r3, [pc, #72]	@ (80023a4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 800235a:	f44f 7249 	mov.w	r2, #804	@ 0x324
 800235e:	2101      	movs	r1, #1
 8002360:	4811      	ldr	r0, [pc, #68]	@ (80023a8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8002362:	f003 f866 	bl	8005432 <_ZN11System_Rtos15freertos_queuesC1EttPh>
}
 8002366:	bf00      	nop
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	08011f0c 	.word	0x08011f0c
 8002374:	08001b29 	.word	0x08001b29
 8002378:	20002e34 	.word	0x20002e34
 800237c:	08011f14 	.word	0x08011f14
 8002380:	08001709 	.word	0x08001709
 8002384:	20002e58 	.word	0x20002e58
 8002388:	08011f20 	.word	0x08011f20
 800238c:	08000f79 	.word	0x08000f79
 8002390:	20002e7c 	.word	0x20002e7c
 8002394:	20002ea0 	.word	0x20002ea0
 8002398:	20002f7c 	.word	0x20002f7c
 800239c:	20002fd8 	.word	0x20002fd8
 80023a0:	2000304c 	.word	0x2000304c
 80023a4:	200030a8 	.word	0x200030a8
 80023a8:	200033cc 	.word	0x200033cc

080023ac <_GLOBAL__sub_I_ModemTaskHandler>:
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80023b4:	2001      	movs	r0, #1
 80023b6:	f7ff ff95 	bl	80022e4 <_Z41__static_initialization_and_destruction_0ii>
 80023ba:	bd80      	pop	{r7, pc}

080023bc <_ZN3HMI4DWINC1EP20__UART_HandleTypeDef>:

namespace HMI {



DWIN::DWIN(UART_HandleTypeDef *huart) : serial_(huart){
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	3308      	adds	r3, #8
 80023ca:	6839      	ldr	r1, [r7, #0]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f003 fa32 	bl	8005836 <_ZN13System_serial6serialC1EP20__UART_HandleTypeDef>

}
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4618      	mov	r0, r3
 80023d6:	3708      	adds	r7, #8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <_ZN3HMI4DWIN7StartupEv>:


void DWIN::Startup()
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]

	clearBox(Time);
 80023e4:	f241 0110 	movw	r1, #4112	@ 0x1010
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f000 f987 	bl	80026fc <_ZN3HMI4DWIN8clearBoxEt>
	clearBox(Date);
 80023ee:	f44f 5181 	mov.w	r1, #4128	@ 0x1020
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f000 f982 	bl	80026fc <_ZN3HMI4DWIN8clearBoxEt>
	clearBox(Network);
 80023f8:	f248 1110 	movw	r1, #33040	@ 0x8110
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 f97d 	bl	80026fc <_ZN3HMI4DWIN8clearBoxEt>
	clearBox(SigQ);
 8002402:	f248 2120 	movw	r1, #33312	@ 0x8220
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 f978 	bl	80026fc <_ZN3HMI4DWIN8clearBoxEt>
	clearBox(Net);
 800240c:	f248 3130 	movw	r1, #33584	@ 0x8330
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f000 f973 	bl	80026fc <_ZN3HMI4DWIN8clearBoxEt>

	clearBox(source_bat);
 8002416:	f245 1110 	movw	r1, #20752	@ 0x5110
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 f96e 	bl	80026fc <_ZN3HMI4DWIN8clearBoxEt>
	clearBox(source_gen);
 8002420:	f245 2120 	movw	r1, #21024	@ 0x5220
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f000 f969 	bl	80026fc <_ZN3HMI4DWIN8clearBoxEt>
	clearBox(source_sol);
 800242a:	f245 3130 	movw	r1, #21296	@ 0x5330
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 f964 	bl	80026fc <_ZN3HMI4DWIN8clearBoxEt>
	clearBox(alarm_freq);
 8002434:	f246 1110 	movw	r1, #24848	@ 0x6110
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f000 f95f 	bl	80026fc <_ZN3HMI4DWIN8clearBoxEt>
	clearBox(alarm_overl);
 800243e:	f246 2120 	movw	r1, #25120	@ 0x6220
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 f95a 	bl	80026fc <_ZN3HMI4DWIN8clearBoxEt>
	clearBox(alarm_phasel);
 8002448:	f246 3130 	movw	r1, #25392	@ 0x6330
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f000 f955 	bl	80026fc <_ZN3HMI4DWIN8clearBoxEt>
	clearBox(chrgT);
 8002452:	f247 2120 	movw	r1, #29216	@ 0x7220
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 f950 	bl	80026fc <_ZN3HMI4DWIN8clearBoxEt>
	clearBox(dchgT);
 800245c:	f247 3130 	movw	r1, #29488	@ 0x7330
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f000 f94b 	bl	80026fc <_ZN3HMI4DWIN8clearBoxEt>

	SendNumericData(Temperature,0);
 8002466:	2200      	movs	r2, #0
 8002468:	f244 0110 	movw	r1, #16400	@ 0x4010
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f000 f85f 	bl	8002530 <_ZN3HMI4DWIN15SendNumericDataEtt>
	SendNumericData(Humidity,0);
 8002472:	2200      	movs	r2, #0
 8002474:	f244 0120 	movw	r1, #16416	@ 0x4020
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f000 f859 	bl	8002530 <_ZN3HMI4DWIN15SendNumericDataEtt>
	SendNumericData(TankLevel,0);
 800247e:	2200      	movs	r2, #0
 8002480:	f242 0110 	movw	r1, #8208	@ 0x2010
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f000 f853 	bl	8002530 <_ZN3HMI4DWIN15SendNumericDataEtt>
	SendNumericData(Battery,0);
 800248a:	2200      	movs	r2, #0
 800248c:	f247 0110 	movw	r1, #28688	@ 0x7010
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 f84d 	bl	8002530 <_ZN3HMI4DWIN15SendNumericDataEtt>


	SendFloatData(phase1,0.00);
 8002496:	ed9f 0a25 	vldr	s0, [pc, #148]	@ 800252c <_ZN3HMI4DWIN7StartupEv+0x150>
 800249a:	f243 1110 	movw	r1, #12560	@ 0x3110
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 f884 	bl	80025ac <_ZN3HMI4DWIN13SendFloatDataEtf>
	SendFloatData(phase2,0.00);
 80024a4:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 800252c <_ZN3HMI4DWIN7StartupEv+0x150>
 80024a8:	f243 2120 	movw	r1, #12832	@ 0x3220
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 f87d 	bl	80025ac <_ZN3HMI4DWIN13SendFloatDataEtf>
	SendFloatData(phase3,0.00);
 80024b2:	ed9f 0a1e 	vldr	s0, [pc, #120]	@ 800252c <_ZN3HMI4DWIN7StartupEv+0x150>
 80024b6:	f243 3130 	movw	r1, #13104	@ 0x3330
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 f876 	bl	80025ac <_ZN3HMI4DWIN13SendFloatDataEtf>
	SendFloatData(curr1,0.00);
 80024c0:	ed9f 0a1a 	vldr	s0, [pc, #104]	@ 800252c <_ZN3HMI4DWIN7StartupEv+0x150>
 80024c4:	f44f 5151 	mov.w	r1, #13376	@ 0x3440
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f000 f86f 	bl	80025ac <_ZN3HMI4DWIN13SendFloatDataEtf>
	SendFloatData(curr2,0.00);
 80024ce:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 800252c <_ZN3HMI4DWIN7StartupEv+0x150>
 80024d2:	f243 5150 	movw	r1, #13648	@ 0x3550
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 f868 	bl	80025ac <_ZN3HMI4DWIN13SendFloatDataEtf>
	SendFloatData(curr3,0.00);
 80024dc:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 800252c <_ZN3HMI4DWIN7StartupEv+0x150>
 80024e0:	f243 6160 	movw	r1, #13920	@ 0x3660
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f000 f861 	bl	80025ac <_ZN3HMI4DWIN13SendFloatDataEtf>
	SendFloatData(energy,0.00);
 80024ea:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 800252c <_ZN3HMI4DWIN7StartupEv+0x150>
 80024ee:	f243 1111 	movw	r1, #12561	@ 0x3111
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 f85a 	bl	80025ac <_ZN3HMI4DWIN13SendFloatDataEtf>
	SendFloatData(pwr1,0.00);
 80024f8:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 800252c <_ZN3HMI4DWIN7StartupEv+0x150>
 80024fc:	f243 7170 	movw	r1, #14192	@ 0x3770
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f000 f853 	bl	80025ac <_ZN3HMI4DWIN13SendFloatDataEtf>
	SendFloatData(pwr2,0.00);
 8002506:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 800252c <_ZN3HMI4DWIN7StartupEv+0x150>
 800250a:	f44f 5162 	mov.w	r1, #14464	@ 0x3880
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 f84c 	bl	80025ac <_ZN3HMI4DWIN13SendFloatDataEtf>
	SendFloatData(pwr3,0.00);
 8002514:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 800252c <_ZN3HMI4DWIN7StartupEv+0x150>
 8002518:	f643 1190 	movw	r1, #14736	@ 0x3990
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 f845 	bl	80025ac <_ZN3HMI4DWIN13SendFloatDataEtf>



}
 8002522:	bf00      	nop
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	00000000 	.word	0x00000000

08002530 <_ZN3HMI4DWIN15SendNumericDataEtt>:

enum DWIN::status DWIN::SendNumericData(uint16_t id,uint16_t val)
   {
 8002530:	b580      	push	{r7, lr}
 8002532:	b09c      	sub	sp, #112	@ 0x70
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	460b      	mov	r3, r1
 800253a:	807b      	strh	r3, [r7, #2]
 800253c:	4613      	mov	r3, r2
 800253e:	803b      	strh	r3, [r7, #0]
       status stat = DWIN_OK;
 8002540:	2300      	movs	r3, #0
 8002542:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
       uint8_t buf[100] = {0};
 8002546:	2300      	movs	r3, #0
 8002548:	60bb      	str	r3, [r7, #8]
 800254a:	f107 030c 	add.w	r3, r7, #12
 800254e:	2260      	movs	r2, #96	@ 0x60
 8002550:	2100      	movs	r1, #0
 8002552:	4618      	mov	r0, r3
 8002554:	f00d f9b3 	bl	800f8be <memset>
       buf[0] = frame1;
 8002558:	235a      	movs	r3, #90	@ 0x5a
 800255a:	723b      	strb	r3, [r7, #8]
       buf[1] = frame2;
 800255c:	23a5      	movs	r3, #165	@ 0xa5
 800255e:	727b      	strb	r3, [r7, #9]
       buf[2] = 0x05;
 8002560:	2305      	movs	r3, #5
 8002562:	72bb      	strb	r3, [r7, #10]
       buf[3] = Send;
 8002564:	2382      	movs	r3, #130	@ 0x82
 8002566:	72fb      	strb	r3, [r7, #11]
       convert_16bit_to_8bit.W = id;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	887a      	ldrh	r2, [r7, #2]
 800256c:	801a      	strh	r2, [r3, #0]
       buf[4] = convert_16bit_to_8bit.B.Hb;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	785b      	ldrb	r3, [r3, #1]
 8002572:	733b      	strb	r3, [r7, #12]
       buf[5] = convert_16bit_to_8bit.B.Lb;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	737b      	strb	r3, [r7, #13]
       convert_16bit_to_8bit.W = val;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	883a      	ldrh	r2, [r7, #0]
 800257e:	801a      	strh	r2, [r3, #0]
       buf[6] = convert_16bit_to_8bit.B.Hb;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	785b      	ldrb	r3, [r3, #1]
 8002584:	73bb      	strb	r3, [r7, #14]
       buf[7] = convert_16bit_to_8bit.B.Lb;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	73fb      	strb	r3, [r7, #15]

       //clearTextBox(id);
       serial_.TransmitData(buf, 8, 1000);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f103 0008 	add.w	r0, r3, #8
 8002592:	f107 0108 	add.w	r1, r7, #8
 8002596:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800259a:	2208      	movs	r2, #8
 800259c:	f003 f96d 	bl	800587a <_ZN13System_serial6serial12TransmitDataEPKhtm>

       return stat;
 80025a0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
   }
 80025a4:	4618      	mov	r0, r3
 80025a6:	3770      	adds	r7, #112	@ 0x70
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <_ZN3HMI4DWIN13SendFloatDataEtf>:

enum DWIN::status DWIN::SendFloatData(uint16_t id,float val)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b09e      	sub	sp, #120	@ 0x78
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	460b      	mov	r3, r1
 80025b6:	ed87 0a01 	vstr	s0, [r7, #4]
 80025ba:	817b      	strh	r3, [r7, #10]
    status stat = DWIN_OK;
 80025bc:	2300      	movs	r3, #0
 80025be:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    uint8_t buf[100] = {0};
 80025c2:	2300      	movs	r3, #0
 80025c4:	613b      	str	r3, [r7, #16]
 80025c6:	f107 0314 	add.w	r3, r7, #20
 80025ca:	2260      	movs	r2, #96	@ 0x60
 80025cc:	2100      	movs	r1, #0
 80025ce:	4618      	mov	r0, r3
 80025d0:	f00d f975 	bl	800f8be <memset>
    buf[0] = frame1;
 80025d4:	235a      	movs	r3, #90	@ 0x5a
 80025d6:	743b      	strb	r3, [r7, #16]
    buf[1] = frame2;
 80025d8:	23a5      	movs	r3, #165	@ 0xa5
 80025da:	747b      	strb	r3, [r7, #17]
    buf[2] = 0x07;
 80025dc:	2307      	movs	r3, #7
 80025de:	74bb      	strb	r3, [r7, #18]
    buf[3] = Send;
 80025e0:	2382      	movs	r3, #130	@ 0x82
 80025e2:	74fb      	strb	r3, [r7, #19]
    convert_16bit_to_8bit.W = id;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	897a      	ldrh	r2, [r7, #10]
 80025e8:	801a      	strh	r2, [r3, #0]
    buf[4] = convert_16bit_to_8bit.B.Hb;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	785b      	ldrb	r3, [r3, #1]
 80025ee:	753b      	strb	r3, [r7, #20]
    buf[5] = convert_16bit_to_8bit.B.Lb;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	757b      	strb	r3, [r7, #21]
    convert_float_to_bytes.f = val;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	605a      	str	r2, [r3, #4]
    buf[6] = convert_float_to_bytes.B[3];
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	79db      	ldrb	r3, [r3, #7]
 8002600:	75bb      	strb	r3, [r7, #22]
    buf[7] = convert_float_to_bytes.B[2];
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	799b      	ldrb	r3, [r3, #6]
 8002606:	75fb      	strb	r3, [r7, #23]
    buf[8] = convert_float_to_bytes.B[1];
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	795b      	ldrb	r3, [r3, #5]
 800260c:	763b      	strb	r3, [r7, #24]
    buf[9] = convert_float_to_bytes.B[0];
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	791b      	ldrb	r3, [r3, #4]
 8002612:	767b      	strb	r3, [r7, #25]

    //clearTextBox(id);
    serial_.TransmitData(buf, 10, 1000);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f103 0008 	add.w	r0, r3, #8
 800261a:	f107 0110 	add.w	r1, r7, #16
 800261e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002622:	220a      	movs	r2, #10
 8002624:	f003 f929 	bl	800587a <_ZN13System_serial6serial12TransmitDataEPKhtm>

    return stat;
 8002628:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800262c:	4618      	mov	r0, r3
 800262e:	3778      	adds	r7, #120	@ 0x78
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <_ZN3HMI4DWIN12SendTextDataEtPc>:



enum DWIN::status DWIN::SendTextData(uint16_t id,char *data)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b0a0      	sub	sp, #128	@ 0x80
 8002638:	af02      	add	r7, sp, #8
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	460b      	mov	r3, r1
 800263e:	607a      	str	r2, [r7, #4]
 8002640:	817b      	strh	r3, [r7, #10]
	 status stat = DWIN_OK;
 8002642:	2300      	movs	r3, #0
 8002644:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	 uint8_t len = 0;
 8002648:	2300      	movs	r3, #0
 800264a:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
	 uint8_t buf[100] = {0};
 800264e:	2300      	movs	r3, #0
 8002650:	613b      	str	r3, [r7, #16]
 8002652:	f107 0314 	add.w	r3, r7, #20
 8002656:	2260      	movs	r2, #96	@ 0x60
 8002658:	2100      	movs	r1, #0
 800265a:	4618      	mov	r0, r3
 800265c:	f00d f92f 	bl	800f8be <memset>

    buf[0] = frame1;
 8002660:	235a      	movs	r3, #90	@ 0x5a
 8002662:	743b      	strb	r3, [r7, #16]
    buf[1] = frame2;
 8002664:	23a5      	movs	r3, #165	@ 0xa5
 8002666:	747b      	strb	r3, [r7, #17]
    buf[3] = Send;
 8002668:	2382      	movs	r3, #130	@ 0x82
 800266a:	74fb      	strb	r3, [r7, #19]
    convert_16bit_to_8bit.W = id;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	897a      	ldrh	r2, [r7, #10]
 8002670:	801a      	strh	r2, [r3, #0]
    buf[4] = convert_16bit_to_8bit.B.Hb;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	785b      	ldrb	r3, [r3, #1]
 8002676:	753b      	strb	r3, [r7, #20]
    buf[5] = convert_16bit_to_8bit.B.Lb;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	757b      	strb	r3, [r7, #21]
    len = 3;
 800267e:	2303      	movs	r3, #3
 8002680:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
    len = stringTohex(data,buf,6,len);
 8002684:	f107 0210 	add.w	r2, r7, #16
 8002688:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	2306      	movs	r3, #6
 8002690:	6879      	ldr	r1, [r7, #4]
 8002692:	68f8      	ldr	r0, [r7, #12]
 8002694:	f000 f869 	bl	800276a <_ZN3HMI4DWIN11stringTohexEPcPhhh>
 8002698:	4603      	mov	r3, r0
 800269a:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76

    len = len + 3;
 800269e:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80026a2:	3303      	adds	r3, #3
 80026a4:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
    buf[len] = ' ';
 80026a8:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80026ac:	3378      	adds	r3, #120	@ 0x78
 80026ae:	443b      	add	r3, r7
 80026b0:	2220      	movs	r2, #32
 80026b2:	f803 2c68 	strb.w	r2, [r3, #-104]
    len = len + 1;
 80026b6:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80026ba:	3301      	adds	r3, #1
 80026bc:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
    buf[len] = ' ';
 80026c0:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80026c4:	3378      	adds	r3, #120	@ 0x78
 80026c6:	443b      	add	r3, r7
 80026c8:	2220      	movs	r2, #32
 80026ca:	f803 2c68 	strb.w	r2, [r3, #-104]

    buf[2] = len; //additional to erase extra text in system
 80026ce:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80026d2:	74bb      	strb	r3, [r7, #18]

    //clearTextBox(id);
    serial_.TransmitData(buf, len + 3, 1000);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f103 0008 	add.w	r0, r3, #8
 80026da:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80026de:	b29b      	uxth	r3, r3
 80026e0:	3303      	adds	r3, #3
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	f107 0110 	add.w	r1, r7, #16
 80026e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026ec:	f003 f8c5 	bl	800587a <_ZN13System_serial6serial12TransmitDataEPKhtm>

	 return stat;
 80026f0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3778      	adds	r7, #120	@ 0x78
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <_ZN3HMI4DWIN8clearBoxEt>:

enum DWIN::status DWIN::clearBox(uint16_t id)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b09c      	sub	sp, #112	@ 0x70
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	460b      	mov	r3, r1
 8002706:	807b      	strh	r3, [r7, #2]
	 status stat = DWIN_OK;
 8002708:	2300      	movs	r3, #0
 800270a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	 uint8_t buf[100] = {0};
 800270e:	2300      	movs	r3, #0
 8002710:	60bb      	str	r3, [r7, #8]
 8002712:	f107 030c 	add.w	r3, r7, #12
 8002716:	2260      	movs	r2, #96	@ 0x60
 8002718:	2100      	movs	r1, #0
 800271a:	4618      	mov	r0, r3
 800271c:	f00d f8cf 	bl	800f8be <memset>

    buf[0] = frame1;
 8002720:	235a      	movs	r3, #90	@ 0x5a
 8002722:	723b      	strb	r3, [r7, #8]
    buf[1] = frame2;
 8002724:	23a5      	movs	r3, #165	@ 0xa5
 8002726:	727b      	strb	r3, [r7, #9]
    buf[2] = 0x05;
 8002728:	2305      	movs	r3, #5
 800272a:	72bb      	strb	r3, [r7, #10]
    buf[3] = Send;
 800272c:	2382      	movs	r3, #130	@ 0x82
 800272e:	72fb      	strb	r3, [r7, #11]
    convert_16bit_to_8bit.W = id;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	887a      	ldrh	r2, [r7, #2]
 8002734:	801a      	strh	r2, [r3, #0]
    buf[4] = convert_16bit_to_8bit.B.Hb;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	785b      	ldrb	r3, [r3, #1]
 800273a:	733b      	strb	r3, [r7, #12]
    buf[5] = convert_16bit_to_8bit.B.Lb;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	737b      	strb	r3, [r7, #13]
    buf[6] = 0x00;
 8002742:	2300      	movs	r3, #0
 8002744:	73bb      	strb	r3, [r7, #14]
    buf[7] = 0x00;
 8002746:	2300      	movs	r3, #0
 8002748:	73fb      	strb	r3, [r7, #15]

    serial_.TransmitData(buf, 8, 1000);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f103 0008 	add.w	r0, r3, #8
 8002750:	f107 0108 	add.w	r1, r7, #8
 8002754:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002758:	2208      	movs	r2, #8
 800275a:	f003 f88e 	bl	800587a <_ZN13System_serial6serial12TransmitDataEPKhtm>
    return stat;
 800275e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8002762:	4618      	mov	r0, r3
 8002764:	3770      	adds	r7, #112	@ 0x70
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <_ZN3HMI4DWIN11stringTohexEPcPhhh>:


uint8_t DWIN::stringTohex(char *input,uint8_t *output,uint8_t index,uint8_t len)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b086      	sub	sp, #24
 800276e:	af00      	add	r7, sp, #0
 8002770:	60f8      	str	r0, [r7, #12]
 8002772:	60b9      	str	r1, [r7, #8]
 8002774:	607a      	str	r2, [r7, #4]
 8002776:	70fb      	strb	r3, [r7, #3]

	    size_t length = std::strlen(input);
 8002778:	68b8      	ldr	r0, [r7, #8]
 800277a:	f7fd fd79 	bl	8000270 <strlen>
 800277e:	6138      	str	r0, [r7, #16]


	     for (size_t i = 0; i < length; ++i) {
 8002780:	2300      	movs	r3, #0
 8002782:	617b      	str	r3, [r7, #20]
 8002784:	e01f      	b.n	80027c6 <_ZN3HMI4DWIN11stringTohexEPcPhhh+0x5c>
	    	if(input[i] != '\0')
 8002786:	68ba      	ldr	r2, [r7, #8]
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	4413      	add	r3, r2
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d010      	beq.n	80027b4 <_ZN3HMI4DWIN11stringTohexEPcPhhh+0x4a>
	    	 {
	    	   output[index] = static_cast<uint8_t>(input[i]);
 8002792:	68ba      	ldr	r2, [r7, #8]
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	441a      	add	r2, r3
 8002798:	78fb      	ldrb	r3, [r7, #3]
 800279a:	6879      	ldr	r1, [r7, #4]
 800279c:	440b      	add	r3, r1
 800279e:	7812      	ldrb	r2, [r2, #0]
 80027a0:	701a      	strb	r2, [r3, #0]
	    	   len++;
 80027a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80027a6:	3301      	adds	r3, #1
 80027a8:	f887 3020 	strb.w	r3, [r7, #32]
	    	   index++;
 80027ac:	78fb      	ldrb	r3, [r7, #3]
 80027ae:	3301      	adds	r3, #1
 80027b0:	70fb      	strb	r3, [r7, #3]
 80027b2:	e005      	b.n	80027c0 <_ZN3HMI4DWIN11stringTohexEPcPhhh+0x56>
	    	 }
	    	else
	    	{
	    		 output[index] = 0x00;
 80027b4:	78fb      	ldrb	r3, [r7, #3]
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	4413      	add	r3, r2
 80027ba:	2200      	movs	r2, #0
 80027bc:	701a      	strb	r2, [r3, #0]
	    		break;
 80027be:	e006      	b.n	80027ce <_ZN3HMI4DWIN11stringTohexEPcPhhh+0x64>
	     for (size_t i = 0; i < length; ++i) {
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	3301      	adds	r3, #1
 80027c4:	617b      	str	r3, [r7, #20]
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d3db      	bcc.n	8002786 <_ZN3HMI4DWIN11stringTohexEPcPhhh+0x1c>
	    	}
	     }

	    return len;
 80027ce:	f897 3020 	ldrb.w	r3, [r7, #32]

}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3718      	adds	r7, #24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
	...

080027dc <_ZN8Inverter9VoltronicC1EP20__UART_HandleTypeDefP12GPIO_TypeDeft>:
struct Voltronic::classInstanceRecorder Voltronic::ClassInstances[numberofuart] =
		{ nullptr };

uint8_t Voltronic::ClassInstanceIncrementer = 0;

Voltronic::Voltronic(UART_HandleTypeDef *huart, GPIO_TypeDef *GPIOx,
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
 80027e8:	807b      	strh	r3, [r7, #2]
		uint16_t GPIO_Pin) :
		GlobalTxBufs { Voltronic::Txbuffer }, GlobalRxBufs { Voltronic::Rxbuffer }, serial_(
				huart), checking() {
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	4618      	mov	r0, r3
 80027ee:	23ff      	movs	r3, #255	@ 0xff
 80027f0:	461a      	mov	r2, r3
 80027f2:	2100      	movs	r1, #0
 80027f4:	f00d f863 	bl	800f8be <memset>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	33ff      	adds	r3, #255	@ 0xff
 80027fc:	22ff      	movs	r2, #255	@ 0xff
 80027fe:	2100      	movs	r1, #0
 8002800:	4618      	mov	r0, r3
 8002802:	f00d f85c 	bl	800f8be <memset>
		GlobalTxBufs { Voltronic::Txbuffer }, GlobalRxBufs { Voltronic::Rxbuffer }, serial_(
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f103 02ff 	add.w	r2, r3, #255	@ 0xff
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8002820:	68b9      	ldr	r1, [r7, #8]
 8002822:	4618      	mov	r0, r3
 8002824:	f003 f807 	bl	8005836 <_ZN13System_serial6serialC1EP20__UART_HandleTypeDef>
				huart), checking() {
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 800282e:	4618      	mov	r0, r3
 8002830:	f003 f863 	bl	80058fa <_ZN10System_sys16Parsing_CheckingC1Ev>

	Voltronic::ClassInstances[ClassInstanceIncrementer].huart = huart;
 8002834:	4b1a      	ldr	r3, [pc, #104]	@ (80028a0 <_ZN8Inverter9VoltronicC1EP20__UART_HandleTypeDefP12GPIO_TypeDeft+0xc4>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	4619      	mov	r1, r3
 800283a:	4a1a      	ldr	r2, [pc, #104]	@ (80028a4 <_ZN8Inverter9VoltronicC1EP20__UART_HandleTypeDefP12GPIO_TypeDeft+0xc8>)
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
	Voltronic::ClassInstances[ClassInstanceIncrementer].Instance = this;
 8002842:	4b17      	ldr	r3, [pc, #92]	@ (80028a0 <_ZN8Inverter9VoltronicC1EP20__UART_HandleTypeDefP12GPIO_TypeDeft+0xc4>)
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	4a17      	ldr	r2, [pc, #92]	@ (80028a4 <_ZN8Inverter9VoltronicC1EP20__UART_HandleTypeDefP12GPIO_TypeDeft+0xc8>)
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	4413      	add	r3, r2
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	605a      	str	r2, [r3, #4]

	Voltronic::ClassInstanceIncrementer++;
 8002850:	4b13      	ldr	r3, [pc, #76]	@ (80028a0 <_ZN8Inverter9VoltronicC1EP20__UART_HandleTypeDefP12GPIO_TypeDeft+0xc4>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	3301      	adds	r3, #1
 8002856:	b2da      	uxtb	r2, r3
 8002858:	4b11      	ldr	r3, [pc, #68]	@ (80028a0 <_ZN8Inverter9VoltronicC1EP20__UART_HandleTypeDefP12GPIO_TypeDeft+0xc4>)
 800285a:	701a      	strb	r2, [r3, #0]
	if (Voltronic::ClassInstanceIncrementer > numberofuart) {
 800285c:	4b10      	ldr	r3, [pc, #64]	@ (80028a0 <_ZN8Inverter9VoltronicC1EP20__UART_HandleTypeDefP12GPIO_TypeDeft+0xc4>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b03      	cmp	r3, #3
 8002862:	d902      	bls.n	800286a <_ZN8Inverter9VoltronicC1EP20__UART_HandleTypeDefP12GPIO_TypeDeft+0x8e>
		Voltronic::ClassInstanceIncrementer = 0;
 8002864:	4b0e      	ldr	r3, [pc, #56]	@ (80028a0 <_ZN8Inverter9VoltronicC1EP20__UART_HandleTypeDefP12GPIO_TypeDeft+0xc4>)
 8002866:	2200      	movs	r2, #0
 8002868:	701a      	strb	r2, [r3, #0]
	}

	setInverterCallback(Voltronic::RxCBStatic, Voltronic::TxCBStatic);
 800286a:	490f      	ldr	r1, [pc, #60]	@ (80028a8 <_ZN8Inverter9VoltronicC1EP20__UART_HandleTypeDefP12GPIO_TypeDeft+0xcc>)
 800286c:	480f      	ldr	r0, [pc, #60]	@ (80028ac <_ZN8Inverter9VoltronicC1EP20__UART_HandleTypeDefP12GPIO_TypeDeft+0xd0>)
 800286e:	f002 fe67 	bl	8005540 <_Z19setInverterCallbackPFvP20__UART_HandleTypeDefhEPFvS0_E>

	DE_Port_ = GPIOx;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	DE_Pin_ = GPIO_Pin;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	887a      	ldrh	r2, [r7, #2]
 800287e:	f8a3 2210 	strh.w	r2, [r3, #528]	@ 0x210
	Disable_DE
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f8d3 020c 	ldr.w	r0, [r3, #524]	@ 0x20c
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f8b3 3210 	ldrh.w	r3, [r3, #528]	@ 0x210
 800288e:	2200      	movs	r2, #0
 8002890:	4619      	mov	r1, r3
 8002892:	f006 f8eb 	bl	8008a6c <HAL_GPIO_WritePin>
	; // lower the DE         NAK
}
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	4618      	mov	r0, r3
 800289a:	3710      	adds	r7, #16
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	20003450 	.word	0x20003450
 80028a4:	20003438 	.word	0x20003438
 80028a8:	08002e75 	.word	0x08002e75
 80028ac:	08002e11 	.word	0x08002e11

080028b0 <_ZN8Inverter9Voltronic24DeviceStat_Inquiry_qpigsEPA10_c>:
void Voltronic::Model_Inquiry(char *Model) {
	//status stat = Voltronic_OK;

}

void Voltronic::DeviceStat_Inquiry_qpigs(char buf[24][10]) {
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b088      	sub	sp, #32
 80028b4:	af02      	add	r7, sp, #8
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
	uint16_t len;
	uint8_t i = 0;
 80028ba:	2300      	movs	r3, #0
 80028bc:	75fb      	strb	r3, [r7, #23]
	status stat = Voltronic_OK;
 80028be:	2300      	movs	r3, #0
 80028c0:	73fb      	strb	r3, [r7, #15]
	uint8_t *current;
	PrepRxTx(DevGenStatus, sizeof(DevGenStatus) - 1, 1000, _CR, 1);
 80028c2:	2301      	movs	r3, #1
 80028c4:	9301      	str	r3, [sp, #4]
 80028c6:	230d      	movs	r3, #13
 80028c8:	9300      	str	r3, [sp, #0]
 80028ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028ce:	2206      	movs	r2, #6
 80028d0:	4931      	ldr	r1, [pc, #196]	@ (8002998 <_ZN8Inverter9Voltronic24DeviceStat_Inquiry_qpigsEPA10_c+0xe8>)
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 f8f4 	bl	8002ac0 <_ZN8Inverter9Voltronic8PrepRxTxEPKhtthh>
	stat = check_eventTimeout(rx_evt, 1200);
 80028d8:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 80028dc:	2100      	movs	r1, #0
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 f9e3 	bl	8002caa <_ZN8Inverter9Voltronic18check_eventTimeoutENS0_9eventTypeEt>
 80028e4:	4603      	mov	r3, r0
 80028e6:	73fb      	strb	r3, [r7, #15]
	if (stat == Voltronic_OK) {
 80028e8:	7bfb      	ldrb	r3, [r7, #15]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d13a      	bne.n	8002964 <_ZN8Inverter9Voltronic24DeviceStat_Inquiry_qpigsEPA10_c+0xb4>

		if (Rxbuffer[0] == '(' && Rxbuffer[1] != 'N' && Rxbuffer[2] != 'A'
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	2b28      	cmp	r3, #40	@ 0x28
 80028f4:	d136      	bne.n	8002964 <_ZN8Inverter9Voltronic24DeviceStat_Inquiry_qpigsEPA10_c+0xb4>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	785b      	ldrb	r3, [r3, #1]
 80028fa:	2b4e      	cmp	r3, #78	@ 0x4e
 80028fc:	d032      	beq.n	8002964 <_ZN8Inverter9Voltronic24DeviceStat_Inquiry_qpigsEPA10_c+0xb4>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	789b      	ldrb	r3, [r3, #2]
 8002902:	2b41      	cmp	r3, #65	@ 0x41
 8002904:	d02e      	beq.n	8002964 <_ZN8Inverter9Voltronic24DeviceStat_Inquiry_qpigsEPA10_c+0xb4>
				&& Rxbuffer[3] != 'K') {
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	78db      	ldrb	r3, [r3, #3]
 800290a:	2b4b      	cmp	r3, #75	@ 0x4b
 800290c:	d02a      	beq.n	8002964 <_ZN8Inverter9Voltronic24DeviceStat_Inquiry_qpigsEPA10_c+0xb4>
			current = Rxbuffer;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	613b      	str	r3, [r7, #16]
			while (i < 24
 8002912:	e007      	b.n	8002924 <_ZN8Inverter9Voltronic24DeviceStat_Inquiry_qpigsEPA10_c+0x74>
					&& checking.extractdatainsegments(
							reinterpret_cast<char*>(current), buf[i], 10, &len,
							' ') == checking.sys_ok) {
				current += len; //increment buffer to next position we got from function
 8002914:	89bb      	ldrh	r3, [r7, #12]
 8002916:	461a      	mov	r2, r3
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	4413      	add	r3, r2
 800291c:	613b      	str	r3, [r7, #16]
				i++;
 800291e:	7dfb      	ldrb	r3, [r7, #23]
 8002920:	3301      	adds	r3, #1
 8002922:	75fb      	strb	r3, [r7, #23]
					&& checking.extractdatainsegments(
 8002924:	7dfb      	ldrb	r3, [r7, #23]
 8002926:	2b17      	cmp	r3, #23
 8002928:	d818      	bhi.n	800295c <_ZN8Inverter9Voltronic24DeviceStat_Inquiry_qpigsEPA10_c+0xac>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f503 7006 	add.w	r0, r3, #536	@ 0x218
							reinterpret_cast<char*>(current), buf[i], 10, &len,
 8002930:	7dfa      	ldrb	r2, [r7, #23]
 8002932:	4613      	mov	r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4413      	add	r3, r2
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	461a      	mov	r2, r3
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	441a      	add	r2, r3
					&& checking.extractdatainsegments(
 8002940:	2320      	movs	r3, #32
 8002942:	9301      	str	r3, [sp, #4]
 8002944:	f107 030c 	add.w	r3, r7, #12
 8002948:	9300      	str	r3, [sp, #0]
 800294a:	230a      	movs	r3, #10
 800294c:	6939      	ldr	r1, [r7, #16]
 800294e:	f003 f920 	bl	8005b92 <_ZN10System_sys16Parsing_Checking21extractdatainsegmentsEPcS1_tPth>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d101      	bne.n	800295c <_ZN8Inverter9Voltronic24DeviceStat_Inquiry_qpigsEPA10_c+0xac>
 8002958:	2301      	movs	r3, #1
 800295a:	e000      	b.n	800295e <_ZN8Inverter9Voltronic24DeviceStat_Inquiry_qpigsEPA10_c+0xae>
 800295c:	2300      	movs	r3, #0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1d8      	bne.n	8002914 <_ZN8Inverter9Voltronic24DeviceStat_Inquiry_qpigsEPA10_c+0x64>
			}

			return;
 8002962:	e015      	b.n	8002990 <_ZN8Inverter9Voltronic24DeviceStat_Inquiry_qpigsEPA10_c+0xe0>
		}

	}

	/*will reach this point only if something is not right*/
	i = 0;
 8002964:	2300      	movs	r3, #0
 8002966:	75fb      	strb	r3, [r7, #23]
	while (i < 24) {
 8002968:	e00f      	b.n	800298a <_ZN8Inverter9Voltronic24DeviceStat_Inquiry_qpigsEPA10_c+0xda>
		std::strncpy(buf[i], "0", 2);
 800296a:	7dfa      	ldrb	r2, [r7, #23]
 800296c:	4613      	mov	r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	4413      	add	r3, r2
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	461a      	mov	r2, r3
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	4413      	add	r3, r2
 800297a:	4908      	ldr	r1, [pc, #32]	@ (800299c <_ZN8Inverter9Voltronic24DeviceStat_Inquiry_qpigsEPA10_c+0xec>)
 800297c:	461a      	mov	r2, r3
 800297e:	460b      	mov	r3, r1
 8002980:	881b      	ldrh	r3, [r3, #0]
 8002982:	8013      	strh	r3, [r2, #0]
		i++;
 8002984:	7dfb      	ldrb	r3, [r7, #23]
 8002986:	3301      	adds	r3, #1
 8002988:	75fb      	strb	r3, [r7, #23]
	while (i < 24) {
 800298a:	7dfb      	ldrb	r3, [r7, #23]
 800298c:	2b17      	cmp	r3, #23
 800298e:	d9ec      	bls.n	800296a <_ZN8Inverter9Voltronic24DeviceStat_Inquiry_qpigsEPA10_c+0xba>
	}

}
 8002990:	3718      	adds	r7, #24
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	080122b4 	.word	0x080122b4
 800299c:	08011f34 	.word	0x08011f34

080029a0 <_ZN8Inverter9Voltronic23DeviceStat_Inquiry_modeEPh>:
		i++;
	}

}

void Voltronic::DeviceStat_Inquiry_mode(uint8_t *mode) {
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b088      	sub	sp, #32
 80029a4:	af02      	add	r7, sp, #8
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
	uint16_t len;
	uint8_t i = 0;
 80029aa:	2300      	movs	r3, #0
 80029ac:	75fb      	strb	r3, [r7, #23]
	status stat = Voltronic_OK;
 80029ae:	2300      	movs	r3, #0
 80029b0:	75bb      	strb	r3, [r7, #22]
	uint8_t *current;
	char buf[5];
	PrepRxTx(DevModeInquiry, sizeof(DevModeInquiry) - 1, 1000, _CR, 1);
 80029b2:	2301      	movs	r3, #1
 80029b4:	9301      	str	r3, [sp, #4]
 80029b6:	230d      	movs	r3, #13
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029be:	2205      	movs	r2, #5
 80029c0:	493e      	ldr	r1, [pc, #248]	@ (8002abc <_ZN8Inverter9Voltronic23DeviceStat_Inquiry_modeEPh+0x11c>)
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 f87c 	bl	8002ac0 <_ZN8Inverter9Voltronic8PrepRxTxEPKhtthh>
	stat = check_eventTimeout(rx_evt, 1200);
 80029c8:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 80029cc:	2100      	movs	r1, #0
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 f96b 	bl	8002caa <_ZN8Inverter9Voltronic18check_eventTimeoutENS0_9eventTypeEt>
 80029d4:	4603      	mov	r3, r0
 80029d6:	75bb      	strb	r3, [r7, #22]
	if (stat == Voltronic_OK) {
 80029d8:	7dbb      	ldrb	r3, [r7, #22]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d16b      	bne.n	8002ab6 <_ZN8Inverter9Voltronic23DeviceStat_Inquiry_modeEPh+0x116>

		if (Rxbuffer[0] == '(' && Rxbuffer[1] != 'N' && Rxbuffer[2] != 'A'
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	2b28      	cmp	r3, #40	@ 0x28
 80029e4:	d167      	bne.n	8002ab6 <_ZN8Inverter9Voltronic23DeviceStat_Inquiry_modeEPh+0x116>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	785b      	ldrb	r3, [r3, #1]
 80029ea:	2b4e      	cmp	r3, #78	@ 0x4e
 80029ec:	d063      	beq.n	8002ab6 <_ZN8Inverter9Voltronic23DeviceStat_Inquiry_modeEPh+0x116>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	789b      	ldrb	r3, [r3, #2]
 80029f2:	2b41      	cmp	r3, #65	@ 0x41
 80029f4:	d05f      	beq.n	8002ab6 <_ZN8Inverter9Voltronic23DeviceStat_Inquiry_modeEPh+0x116>
				&& Rxbuffer[3] != 'K') {
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	78db      	ldrb	r3, [r3, #3]
 80029fa:	2b4b      	cmp	r3, #75	@ 0x4b
 80029fc:	d05b      	beq.n	8002ab6 <_ZN8Inverter9Voltronic23DeviceStat_Inquiry_modeEPh+0x116>
			current = Rxbuffer;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	613b      	str	r3, [r7, #16]
			if (checking.extractdatainsegments(reinterpret_cast<char*>(current),
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f503 7006 	add.w	r0, r3, #536	@ 0x218
 8002a08:	f107 0208 	add.w	r2, r7, #8
 8002a0c:	2320      	movs	r3, #32
 8002a0e:	9301      	str	r3, [sp, #4]
 8002a10:	f107 030e 	add.w	r3, r7, #14
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	2302      	movs	r3, #2
 8002a18:	6939      	ldr	r1, [r7, #16]
 8002a1a:	f003 f8ba 	bl	8005b92 <_ZN10System_sys16Parsing_Checking21extractdatainsegmentsEPcS1_tPth>
 8002a1e:	4603      	mov	r3, r0
					buf, 2, &len, ' ') == checking.sys_ok) {
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	bf0c      	ite	eq
 8002a24:	2301      	moveq	r3, #1
 8002a26:	2300      	movne	r3, #0
 8002a28:	b2db      	uxtb	r3, r3
			if (checking.extractdatainsegments(reinterpret_cast<char*>(current),
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d043      	beq.n	8002ab6 <_ZN8Inverter9Voltronic23DeviceStat_Inquiry_modeEPh+0x116>

				switch (static_cast<invertermode>(buf[0])) {
 8002a2e:	7a3b      	ldrb	r3, [r7, #8]
 8002a30:	3b42      	subs	r3, #66	@ 0x42
 8002a32:	2b11      	cmp	r3, #17
 8002a34:	d83e      	bhi.n	8002ab4 <_ZN8Inverter9Voltronic23DeviceStat_Inquiry_modeEPh+0x114>
 8002a36:	a201      	add	r2, pc, #4	@ (adr r2, 8002a3c <_ZN8Inverter9Voltronic23DeviceStat_Inquiry_modeEPh+0x9c>)
 8002a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a3c:	08002a9d 	.word	0x08002a9d
 8002a40:	08002ab5 	.word	0x08002ab5
 8002a44:	08002aad 	.word	0x08002aad
 8002a48:	08002ab5 	.word	0x08002ab5
 8002a4c:	08002aa5 	.word	0x08002aa5
 8002a50:	08002ab5 	.word	0x08002ab5
 8002a54:	08002ab5 	.word	0x08002ab5
 8002a58:	08002ab5 	.word	0x08002ab5
 8002a5c:	08002ab5 	.word	0x08002ab5
 8002a60:	08002ab5 	.word	0x08002ab5
 8002a64:	08002a95 	.word	0x08002a95
 8002a68:	08002ab5 	.word	0x08002ab5
 8002a6c:	08002ab5 	.word	0x08002ab5
 8002a70:	08002ab5 	.word	0x08002ab5
 8002a74:	08002a85 	.word	0x08002a85
 8002a78:	08002ab5 	.word	0x08002ab5
 8002a7c:	08002ab5 	.word	0x08002ab5
 8002a80:	08002a8d 	.word	0x08002a8d
				case invertermode::PowerOnMode: {
					*mode = 1;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	2201      	movs	r2, #1
 8002a88:	701a      	strb	r2, [r3, #0]
					break;
 8002a8a:	e014      	b.n	8002ab6 <_ZN8Inverter9Voltronic23DeviceStat_Inquiry_modeEPh+0x116>
				}

				case invertermode::StandByMode: {
					*mode = 2;
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	2202      	movs	r2, #2
 8002a90:	701a      	strb	r2, [r3, #0]
					break;
 8002a92:	e010      	b.n	8002ab6 <_ZN8Inverter9Voltronic23DeviceStat_Inquiry_modeEPh+0x116>
				}

				case invertermode::LineMode: {
					*mode = 3;
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	2203      	movs	r2, #3
 8002a98:	701a      	strb	r2, [r3, #0]
					break;
 8002a9a:	e00c      	b.n	8002ab6 <_ZN8Inverter9Voltronic23DeviceStat_Inquiry_modeEPh+0x116>
				}

				case invertermode::BatteryMode: {
					*mode = 4;
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	2204      	movs	r2, #4
 8002aa0:	701a      	strb	r2, [r3, #0]
					break;
 8002aa2:	e008      	b.n	8002ab6 <_ZN8Inverter9Voltronic23DeviceStat_Inquiry_modeEPh+0x116>
				}

				case invertermode::FaultMode: {
					*mode = 5;
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	2205      	movs	r2, #5
 8002aa8:	701a      	strb	r2, [r3, #0]
					break;
 8002aaa:	e004      	b.n	8002ab6 <_ZN8Inverter9Voltronic23DeviceStat_Inquiry_modeEPh+0x116>
				}

				case invertermode::ShutdownMode: {
					*mode = 6;
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	2206      	movs	r2, #6
 8002ab0:	701a      	strb	r2, [r3, #0]
					break;
 8002ab2:	e000      	b.n	8002ab6 <_ZN8Inverter9Voltronic23DeviceStat_Inquiry_modeEPh+0x116>
				}

				}

				return;
 8002ab4:	bf00      	nop
			}
		}

	}
}
 8002ab6:	3718      	adds	r7, #24
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	080122bc 	.word	0x080122bc

08002ac0 <_ZN8Inverter9Voltronic8PrepRxTxEPKhtthh>:

void Voltronic::PrepRxTx(const uint8_t *Txbuf, uint16_t len, uint16_t timeout,
		uint8_t end_char, uint8_t cal_crc) {
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	4611      	mov	r1, r2
 8002acc:	461a      	mov	r2, r3
 8002ace:	460b      	mov	r3, r1
 8002ad0:	80fb      	strh	r3, [r7, #6]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	80bb      	strh	r3, [r7, #4]

	memset(Rxbuffer, 0, BufferLen);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	22ff      	movs	r2, #255	@ 0xff
 8002ada:	2100      	movs	r1, #0
 8002adc:	4618      	mov	r0, r3
 8002ade:	f00c feee 	bl	800f8be <memset>
	memset(Txbuffer, 0, BufferLen);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	33ff      	adds	r3, #255	@ 0xff
 8002ae6:	22ff      	movs	r2, #255	@ 0xff
 8002ae8:	2100      	movs	r1, #0
 8002aea:	4618      	mov	r0, r3
 8002aec:	f00c fee7 	bl	800f8be <memset>
	rst_event(rx_evt);
 8002af0:	2100      	movs	r1, #0
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f000 f899 	bl	8002c2a <_ZN8Inverter9Voltronic9rst_eventENS0_9eventTypeE>
	rst_event(tx_evt);
 8002af8:	2101      	movs	r1, #1
 8002afa:	68f8      	ldr	r0, [r7, #12]
 8002afc:	f000 f895 	bl	8002c2a <_ZN8Inverter9Voltronic9rst_eventENS0_9eventTypeE>

	Rx_info.EndChar = end_char;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002b06:	f883 222a 	strb.w	r2, [r3, #554]	@ 0x22a
	Rx_info.Rx = Rxbuffer;
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
	Rx_info.Rxcount = 0;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f8a3 2220 	strh.w	r2, [r3, #544]	@ 0x220
	serial_.RxintEn(Rx_info.Rx, BufferLen);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f503 7005 	add.w	r0, r3, #532	@ 0x214
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8002b26:	22ff      	movs	r2, #255	@ 0xff
 8002b28:	4619      	mov	r1, r3
 8002b2a:	f002 feb9 	bl	80058a0 <_ZN13System_serial6serial7RxintEnEPht>

	if (cal_crc == 1) {
 8002b2e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d13e      	bne.n	8002bb4 <_ZN8Inverter9Voltronic8PrepRxTxEPKhtthh+0xf4>
		uint16_t crc = CRC16_cal(Txbuf, len - 1);
 8002b36:	88fb      	ldrh	r3, [r7, #6]
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	68b9      	ldr	r1, [r7, #8]
 8002b40:	68f8      	ldr	r0, [r7, #12]
 8002b42:	f000 f8ee 	bl	8002d22 <_ZN8Inverter9Voltronic9CRC16_calEPKht>
 8002b46:	4603      	mov	r3, r0
 8002b48:	82fb      	strh	r3, [r7, #22]
		memcpy(Txbuffer, Txbuf, len - 1);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f103 00ff 	add.w	r0, r3, #255	@ 0xff
 8002b50:	88fb      	ldrh	r3, [r7, #6]
 8002b52:	3b01      	subs	r3, #1
 8002b54:	461a      	mov	r2, r3
 8002b56:	68b9      	ldr	r1, [r7, #8]
 8002b58:	f00c ffc5 	bl	800fae6 <memcpy>
		breaking_bits.w = crc;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	8afa      	ldrh	r2, [r7, #22]
 8002b60:	f8a3 2208 	strh.w	r2, [r3, #520]	@ 0x208
		Txbuffer[len - 1] = breaking_bits.bytes.Hb;
 8002b64:	88fb      	ldrh	r3, [r7, #6]
 8002b66:	3b01      	subs	r3, #1
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	f892 1209 	ldrb.w	r1, [r2, #521]	@ 0x209
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	4413      	add	r3, r2
 8002b72:	460a      	mov	r2, r1
 8002b74:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff
		len = len + 1;
 8002b78:	88fb      	ldrh	r3, [r7, #6]
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	80fb      	strh	r3, [r7, #6]
		Txbuffer[len - 1] = breaking_bits.bytes.Lb;
 8002b7e:	88fb      	ldrh	r3, [r7, #6]
 8002b80:	3b01      	subs	r3, #1
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	f892 1208 	ldrb.w	r1, [r2, #520]	@ 0x208
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	460a      	mov	r2, r1
 8002b8e:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff
		len = len + 1;
 8002b92:	88fb      	ldrh	r3, [r7, #6]
 8002b94:	3301      	adds	r3, #1
 8002b96:	80fb      	strh	r3, [r7, #6]
		Txbuffer[len - 1] = _CR;
 8002b98:	88fb      	ldrh	r3, [r7, #6]
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	220d      	movs	r2, #13
 8002ba2:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff
		Txbuffer[len] = _EOS;
 8002ba6:	88fb      	ldrh	r3, [r7, #6]
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	4413      	add	r3, r2
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff
 8002bb2:	e006      	b.n	8002bc2 <_ZN8Inverter9Voltronic8PrepRxTxEPKhtthh+0x102>
	} else {
		memcpy(Txbuffer, Txbuf, len);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	33ff      	adds	r3, #255	@ 0xff
 8002bb8:	88fa      	ldrh	r2, [r7, #6]
 8002bba:	68b9      	ldr	r1, [r7, #8]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f00c ff92 	bl	800fae6 <memcpy>
	}

	Enable_DE
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f8d3 020c 	ldr.w	r0, [r3, #524]	@ 0x20c
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f8b3 3210 	ldrh.w	r3, [r3, #528]	@ 0x210
 8002bce:	2201      	movs	r2, #1
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	f005 ff4b 	bl	8008a6c <HAL_GPIO_WritePin>
	;
	serial_.TransmitData(Txbuffer, len, timeout);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f503 7005 	add.w	r0, r3, #532	@ 0x214
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f103 01ff 	add.w	r1, r3, #255	@ 0xff
 8002be2:	88bb      	ldrh	r3, [r7, #4]
 8002be4:	88fa      	ldrh	r2, [r7, #6]
 8002be6:	f002 fe48 	bl	800587a <_ZN13System_serial6serial12TransmitDataEPKhtm>
	Disable_DE
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f8d3 020c 	ldr.w	r0, [r3, #524]	@ 0x20c
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f8b3 3210 	ldrh.w	r3, [r3, #528]	@ 0x210
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	f005 ff37 	bl	8008a6c <HAL_GPIO_WritePin>
	;
}
 8002bfe:	bf00      	nop
 8002c00:	3718      	adds	r7, #24
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <_ZN8Inverter9Voltronic9set_eventENS0_9eventTypeE>:

inline void Voltronic::set_event(enum eventType event) {
 8002c06:	b480      	push	{r7}
 8002c08:	b083      	sub	sp, #12
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
 8002c0e:	460b      	mov	r3, r1
 8002c10:	70fb      	strb	r3, [r7, #3]
	Event[event] = 1;
 8002c12:	78fb      	ldrb	r3, [r7, #3]
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	4413      	add	r3, r2
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f883 222c 	strb.w	r2, [r3, #556]	@ 0x22c
}
 8002c1e:	bf00      	nop
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <_ZN8Inverter9Voltronic9rst_eventENS0_9eventTypeE>:
inline void Voltronic::rst_event(enum eventType event) {
 8002c2a:	b480      	push	{r7}
 8002c2c:	b083      	sub	sp, #12
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
 8002c32:	460b      	mov	r3, r1
 8002c34:	70fb      	strb	r3, [r7, #3]
	Event[event] = 0;
 8002c36:	78fb      	ldrb	r3, [r7, #3]
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 222c 	strb.w	r2, [r3, #556]	@ 0x22c
}
 8002c42:	bf00      	nop
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr

08002c4e <_ZN8Inverter9Voltronic11check_eventENS0_9eventTypeE>:
enum Voltronic::status Voltronic::check_event(enum eventType event) {
 8002c4e:	b480      	push	{r7}
 8002c50:	b085      	sub	sp, #20
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
 8002c56:	460b      	mov	r3, r1
 8002c58:	70fb      	strb	r3, [r7, #3]

	status stat = Voltronic_OK;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	73fb      	strb	r3, [r7, #15]

	if (Event[event]) {
 8002c5e:	78fb      	ldrb	r3, [r7, #3]
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	4413      	add	r3, r2
 8002c64:	f893 322c 	ldrb.w	r3, [r3, #556]	@ 0x22c
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	bf14      	ite	ne
 8002c6e:	2301      	movne	r3, #1
 8002c70:	2300      	moveq	r3, #0
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d002      	beq.n	8002c7e <_ZN8Inverter9Voltronic11check_eventENS0_9eventTypeE+0x30>
		stat = Voltronic_OK;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	73fb      	strb	r3, [r7, #15]
 8002c7c:	e00e      	b.n	8002c9c <_ZN8Inverter9Voltronic11check_eventENS0_9eventTypeE+0x4e>
	} else if (!Event[event]) {
 8002c7e:	78fb      	ldrb	r3, [r7, #3]
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	4413      	add	r3, r2
 8002c84:	f893 322c 	ldrb.w	r3, [r3, #556]	@ 0x22c
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	bf0c      	ite	eq
 8002c8e:	2301      	moveq	r3, #1
 8002c90:	2300      	movne	r3, #0
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <_ZN8Inverter9Voltronic11check_eventENS0_9eventTypeE+0x4e>
		stat = Voltronic_ERR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	73fb      	strb	r3, [r7, #15]
	}

	return stat;
 8002c9c:	7bfb      	ldrb	r3, [r7, #15]

}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3714      	adds	r7, #20
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr

08002caa <_ZN8Inverter9Voltronic18check_eventTimeoutENS0_9eventTypeEt>:

	return stat;

}
enum Voltronic::status Voltronic::check_eventTimeout(enum eventType event,
		uint16_t timeout) {
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b084      	sub	sp, #16
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	70fb      	strb	r3, [r7, #3]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	803b      	strh	r3, [r7, #0]
	status stat = Voltronic_OK;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	73fb      	strb	r3, [r7, #15]
	uint32_t prev_time = 0;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	60bb      	str	r3, [r7, #8]

	prev_time = HAL_GetTick(); //we get new time before going into while
 8002cc2:	f004 f9d3 	bl	800706c <HAL_GetTick>
 8002cc6:	60b8      	str	r0, [r7, #8]
	while ((check_event(event) != Voltronic_OK)
 8002cc8:	e002      	b.n	8002cd0 <_ZN8Inverter9Voltronic18check_eventTimeoutENS0_9eventTypeEt+0x26>
			&& (HAL_GetTick() - prev_time < timeout)) {
		//wait here until get event or time passes
		System_Rtos::delay(10);
 8002cca:	200a      	movs	r0, #10
 8002ccc:	f002 fb60 	bl	8005390 <_ZN11System_Rtos5delayEm>
	while ((check_event(event) != Voltronic_OK)
 8002cd0:	78fb      	ldrb	r3, [r7, #3]
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f7ff ffba 	bl	8002c4e <_ZN8Inverter9Voltronic11check_eventENS0_9eventTypeE>
 8002cda:	4603      	mov	r3, r0
			&& (HAL_GetTick() - prev_time < timeout)) {
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d009      	beq.n	8002cf4 <_ZN8Inverter9Voltronic18check_eventTimeoutENS0_9eventTypeEt+0x4a>
 8002ce0:	f004 f9c4 	bl	800706c <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	1ad2      	subs	r2, r2, r3
 8002cea:	883b      	ldrh	r3, [r7, #0]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d201      	bcs.n	8002cf4 <_ZN8Inverter9Voltronic18check_eventTimeoutENS0_9eventTypeEt+0x4a>
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e000      	b.n	8002cf6 <_ZN8Inverter9Voltronic18check_eventTimeoutENS0_9eventTypeEt+0x4c>
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1e7      	bne.n	8002cca <_ZN8Inverter9Voltronic18check_eventTimeoutENS0_9eventTypeEt+0x20>
	}

	if (check_event(event) != Voltronic_OK) {
 8002cfa:	78fb      	ldrb	r3, [r7, #3]
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f7ff ffa5 	bl	8002c4e <_ZN8Inverter9Voltronic11check_eventENS0_9eventTypeE>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	bf14      	ite	ne
 8002d0a:	2301      	movne	r3, #1
 8002d0c:	2300      	moveq	r3, #0
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d001      	beq.n	8002d18 <_ZN8Inverter9Voltronic18check_eventTimeoutENS0_9eventTypeEt+0x6e>
		stat = Voltronic_ERR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	73fb      	strb	r3, [r7, #15]
	}

	return stat;
 8002d18:	7bfb      	ldrb	r3, [r7, #15]

}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <_ZN8Inverter9Voltronic9CRC16_calEPKht>:

uint16_t Voltronic::CRC16_cal(const uint8_t *P, uint16_t len) {
 8002d22:	b480      	push	{r7}
 8002d24:	b087      	sub	sp, #28
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	60f8      	str	r0, [r7, #12]
 8002d2a:	60b9      	str	r1, [r7, #8]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	80fb      	strh	r3, [r7, #6]
	uint8_t temp;
	uint8_t i;
	uint16_t c;
	uint8_t TT;
	uint16_t crc = 0xFFFF;
 8002d30:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d34:	827b      	strh	r3, [r7, #18]

	for (c = 0; c < len; c++) {
 8002d36:	2300      	movs	r3, #0
 8002d38:	82bb      	strh	r3, [r7, #20]
 8002d3a:	e02b      	b.n	8002d94 <_ZN8Inverter9Voltronic9CRC16_calEPKht+0x72>
		temp = P[c];
 8002d3c:	8abb      	ldrh	r3, [r7, #20]
 8002d3e:	68ba      	ldr	r2, [r7, #8]
 8002d40:	4413      	add	r3, r2
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	747b      	strb	r3, [r7, #17]
		crc = crc ^ temp;
 8002d46:	7c7b      	ldrb	r3, [r7, #17]
 8002d48:	b29a      	uxth	r2, r3
 8002d4a:	8a7b      	ldrh	r3, [r7, #18]
 8002d4c:	4053      	eors	r3, r2
 8002d4e:	827b      	strh	r3, [r7, #18]

		for (i = 0; i < 8; i++) {
 8002d50:	2300      	movs	r3, #0
 8002d52:	75fb      	strb	r3, [r7, #23]
 8002d54:	e018      	b.n	8002d88 <_ZN8Inverter9Voltronic9CRC16_calEPKht+0x66>
			TT = crc & 1;
 8002d56:	8a7b      	ldrh	r3, [r7, #18]
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	743b      	strb	r3, [r7, #16]
			crc = crc >> 1;
 8002d60:	8a7b      	ldrh	r3, [r7, #18]
 8002d62:	085b      	lsrs	r3, r3, #1
 8002d64:	827b      	strh	r3, [r7, #18]
			crc = crc & 0x7FFF;
 8002d66:	8a7b      	ldrh	r3, [r7, #18]
 8002d68:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002d6c:	827b      	strh	r3, [r7, #18]

			if (TT == 1) {
 8002d6e:	7c3b      	ldrb	r3, [r7, #16]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d106      	bne.n	8002d82 <_ZN8Inverter9Voltronic9CRC16_calEPKht+0x60>
				crc = crc ^ 0xA001;
 8002d74:	8a7b      	ldrh	r3, [r7, #18]
 8002d76:	f483 43bf 	eor.w	r3, r3, #24448	@ 0x5f80
 8002d7a:	f083 037e 	eor.w	r3, r3, #126	@ 0x7e
 8002d7e:	43db      	mvns	r3, r3
 8002d80:	827b      	strh	r3, [r7, #18]
		for (i = 0; i < 8; i++) {
 8002d82:	7dfb      	ldrb	r3, [r7, #23]
 8002d84:	3301      	adds	r3, #1
 8002d86:	75fb      	strb	r3, [r7, #23]
 8002d88:	7dfb      	ldrb	r3, [r7, #23]
 8002d8a:	2b07      	cmp	r3, #7
 8002d8c:	d9e3      	bls.n	8002d56 <_ZN8Inverter9Voltronic9CRC16_calEPKht+0x34>
	for (c = 0; c < len; c++) {
 8002d8e:	8abb      	ldrh	r3, [r7, #20]
 8002d90:	3301      	adds	r3, #1
 8002d92:	82bb      	strh	r3, [r7, #20]
 8002d94:	8aba      	ldrh	r2, [r7, #20]
 8002d96:	88fb      	ldrh	r3, [r7, #6]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d3cf      	bcc.n	8002d3c <_ZN8Inverter9Voltronic9CRC16_calEPKht+0x1a>

			crc = crc & 0xFFFF;
		}
	}

	return crc;
 8002d9c:	8a7b      	ldrh	r3, [r7, #18]
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	371c      	adds	r7, #28
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <_ZN8Inverter9Voltronic4RxCBEh>:

/*Interrupt callbacks*/

void Voltronic::RxCB(uint8_t data) {
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b082      	sub	sp, #8
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
 8002db2:	460b      	mov	r3, r1
 8002db4:	70fb      	strb	r3, [r7, #3]
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wvolatile"
	*Rx_info.Rx++ = data;
 8002db6:	78f8      	ldrb	r0, [r7, #3]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8002dbe:	1c59      	adds	r1, r3, #1
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	f8c2 121c 	str.w	r1, [r2, #540]	@ 0x21c
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	701a      	strb	r2, [r3, #0]
	Rx_info.Rxcount++;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f8b3 3220 	ldrh.w	r3, [r3, #544]	@ 0x220
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	b29a      	uxth	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f8a3 2220 	strh.w	r2, [r3, #544]	@ 0x220

	if (data == Rx_info.EndChar) {
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f893 322a 	ldrb.w	r3, [r3, #554]	@ 0x22a
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	78fa      	ldrb	r2, [r7, #3]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	bf0c      	ite	eq
 8002dea:	2301      	moveq	r3, #1
 8002dec:	2300      	movne	r3, #0
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d009      	beq.n	8002e08 <_ZN8Inverter9Voltronic4RxCBEh+0x5e>
		set_event(rx_evt);
 8002df4:	2100      	movs	r1, #0
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7ff ff05 	bl	8002c06 <_ZN8Inverter9Voltronic9set_eventENS0_9eventTypeE>
		serial_.RxintDis();
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8002e02:	4618      	mov	r0, r3
 8002e04:	f002 fd5e 	bl	80058c4 <_ZN13System_serial6serial8RxintDisEv>
	}
#pragma GCC diagnostic pop
}
 8002e08:	bf00      	nop
 8002e0a:	3708      	adds	r7, #8
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <_ZN8Inverter9Voltronic10RxCBStaticEP20__UART_HandleTypeDefh>:

void Voltronic::TxCB(UART_HandleTypeDef *huart) {

}

void Voltronic::RxCBStatic(UART_HandleTypeDef *huart, uint8_t data) {
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	460b      	mov	r3, r1
 8002e1a:	70fb      	strb	r3, [r7, #3]
	// Find the instance and call its instance method
	uint8_t i = 0;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < numberofuart; i++) {
 8002e20:	2300      	movs	r3, #0
 8002e22:	73fb      	strb	r3, [r7, #15]
 8002e24:	e009      	b.n	8002e3a <_ZN8Inverter9Voltronic10RxCBStaticEP20__UART_HandleTypeDefh+0x2a>
		if (ClassInstances[i].huart == huart) {
 8002e26:	7bfb      	ldrb	r3, [r7, #15]
 8002e28:	4a11      	ldr	r2, [pc, #68]	@ (8002e70 <_ZN8Inverter9Voltronic10RxCBStaticEP20__UART_HandleTypeDefh+0x60>)
 8002e2a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d006      	beq.n	8002e42 <_ZN8Inverter9Voltronic10RxCBStaticEP20__UART_HandleTypeDefh+0x32>
	for (i = 0; i < numberofuart; i++) {
 8002e34:	7bfb      	ldrb	r3, [r7, #15]
 8002e36:	3301      	adds	r3, #1
 8002e38:	73fb      	strb	r3, [r7, #15]
 8002e3a:	7bfb      	ldrb	r3, [r7, #15]
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d9f2      	bls.n	8002e26 <_ZN8Inverter9Voltronic10RxCBStaticEP20__UART_HandleTypeDefh+0x16>
 8002e40:	e000      	b.n	8002e44 <_ZN8Inverter9Voltronic10RxCBStaticEP20__UART_HandleTypeDefh+0x34>
			break;
 8002e42:	bf00      	nop
		}
	}

	if (ClassInstances[i].Instance) {
 8002e44:	7bfb      	ldrb	r3, [r7, #15]
 8002e46:	4a0a      	ldr	r2, [pc, #40]	@ (8002e70 <_ZN8Inverter9Voltronic10RxCBStaticEP20__UART_HandleTypeDefh+0x60>)
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	4413      	add	r3, r2
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d009      	beq.n	8002e66 <_ZN8Inverter9Voltronic10RxCBStaticEP20__UART_HandleTypeDefh+0x56>
		ClassInstances[i].Instance->RxCB(data); // Delegate to instance-specific method
 8002e52:	7bfb      	ldrb	r3, [r7, #15]
 8002e54:	4a06      	ldr	r2, [pc, #24]	@ (8002e70 <_ZN8Inverter9Voltronic10RxCBStaticEP20__UART_HandleTypeDefh+0x60>)
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	4413      	add	r3, r2
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	78fa      	ldrb	r2, [r7, #3]
 8002e5e:	4611      	mov	r1, r2
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7ff ffa2 	bl	8002daa <_ZN8Inverter9Voltronic4RxCBEh>
	}

}
 8002e66:	bf00      	nop
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	20003438 	.word	0x20003438

08002e74 <_ZN8Inverter9Voltronic10TxCBStaticEP20__UART_HandleTypeDef>:
void Voltronic::TxCBStatic(UART_HandleTypeDef *huart) {
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]

}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef>:
struct simA7672::classInstanceRecorder simA7672::ClassInstances[numberofuart] =
		{ nullptr };

uint8_t simA7672::ClassInstanceIncrementer = 0;

simA7672::simA7672(UART_HandleTypeDef *huart) :
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
		GlobalTxBufs { simA7672::Txbuffer }, GlobalRxBufs { simA7672::Rxbuffer }, serial_(
				huart), checking() {
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	f00c fd0e 	bl	800f8be <memset>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ea8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002eac:	2100      	movs	r1, #0
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f00c fd05 	bl	800f8be <memset>
		GlobalTxBufs { simA7672::Txbuffer }, GlobalRxBufs { simA7672::Rxbuffer }, serial_(
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002ec0:	6013      	str	r3, [r2, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002eca:	6053      	str	r3, [r2, #4]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8002ed2:	3304      	adds	r3, #4
 8002ed4:	6839      	ldr	r1, [r7, #0]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f002 fcad 	bl	8005836 <_ZN13System_serial6serialC1EP20__UART_HandleTypeDef>
				huart), checking() {
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8002ee2:	3308      	adds	r3, #8
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f002 fd08 	bl	80058fa <_ZN10System_sys16Parsing_CheckingC1Ev>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	62d3      	str	r3, [r2, #44]	@ 0x2c

	simA7672::ClassInstances[ClassInstanceIncrementer].huart = huart;
 8002ef6:	4b12      	ldr	r3, [pc, #72]	@ (8002f40 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xb8>)
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	4619      	mov	r1, r3
 8002efc:	4a11      	ldr	r2, [pc, #68]	@ (8002f44 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xbc>)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
	simA7672::ClassInstances[ClassInstanceIncrementer].Instance = this;
 8002f04:	4b0e      	ldr	r3, [pc, #56]	@ (8002f40 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xb8>)
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	4a0e      	ldr	r2, [pc, #56]	@ (8002f44 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xbc>)
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	4413      	add	r3, r2
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	605a      	str	r2, [r3, #4]

	simA7672::ClassInstanceIncrementer++;
 8002f12:	4b0b      	ldr	r3, [pc, #44]	@ (8002f40 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xb8>)
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	3301      	adds	r3, #1
 8002f18:	b2da      	uxtb	r2, r3
 8002f1a:	4b09      	ldr	r3, [pc, #36]	@ (8002f40 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xb8>)
 8002f1c:	701a      	strb	r2, [r3, #0]
	if (simA7672::ClassInstanceIncrementer > numberofuart) {
 8002f1e:	4b08      	ldr	r3, [pc, #32]	@ (8002f40 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xb8>)
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	2b03      	cmp	r3, #3
 8002f24:	d902      	bls.n	8002f2c <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xa4>
		simA7672::ClassInstanceIncrementer = 0;
 8002f26:	4b06      	ldr	r3, [pc, #24]	@ (8002f40 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xb8>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	701a      	strb	r2, [r3, #0]
	}

	setModemCallback(simA7672::RxCBStatic, simA7672::TxCBStatic);
 8002f2c:	4906      	ldr	r1, [pc, #24]	@ (8002f48 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xc0>)
 8002f2e:	4807      	ldr	r0, [pc, #28]	@ (8002f4c <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xc4>)
 8002f30:	f002 faf0 	bl	8005514 <_Z16setModemCallbackPFvP20__UART_HandleTypeDefhEPFvS0_E>

}
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4618      	mov	r0, r3
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	2000346c 	.word	0x2000346c
 8002f44:	20003454 	.word	0x20003454
 8002f48:	08004d29 	.word	0x08004d29
 8002f4c:	08004cc5 	.word	0x08004cc5

08002f50 <_ZN5Modem8simA76724initEv>:

enum simA7672::status simA7672::init() {
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af02      	add	r7, sp, #8
 8002f56:	6078      	str	r0, [r7, #4]
	status stat = simA7672_OK;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	73fb      	strb	r3, [r7, #15]

	//Run 3 times
	PrepRxTx(atcmd_AT, sizeof(atcmd_AT) - 1, 1000, _LF, CMD_mode);
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	9301      	str	r3, [sp, #4]
 8002f60:	230a      	movs	r3, #10
 8002f62:	9300      	str	r3, [sp, #0]
 8002f64:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f68:	2204      	movs	r2, #4
 8002f6a:	498f      	ldr	r1, [pc, #572]	@ (80031a8 <_ZN5Modem8simA76724initEv+0x258>)
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f001 fbb3 	bl	80046d8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8002f72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f76:	2100      	movs	r1, #0
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f001 fcda 	bl	8004932 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_AT, sizeof(atcmd_AT) - 1, 1000, _LF, CMD_mode);
 8002f82:	2301      	movs	r3, #1
 8002f84:	9301      	str	r3, [sp, #4]
 8002f86:	230a      	movs	r3, #10
 8002f88:	9300      	str	r3, [sp, #0]
 8002f8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f8e:	2204      	movs	r2, #4
 8002f90:	4985      	ldr	r1, [pc, #532]	@ (80031a8 <_ZN5Modem8simA76724initEv+0x258>)
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f001 fba0 	bl	80046d8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8002f98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f001 fcc7 	bl	8004932 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_AT, sizeof(atcmd_AT) - 1, 1000, _LF, CMD_mode);
 8002fa8:	2301      	movs	r3, #1
 8002faa:	9301      	str	r3, [sp, #4]
 8002fac:	230a      	movs	r3, #10
 8002fae:	9300      	str	r3, [sp, #0]
 8002fb0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002fb4:	2204      	movs	r2, #4
 8002fb6:	497c      	ldr	r1, [pc, #496]	@ (80031a8 <_ZN5Modem8simA76724initEv+0x258>)
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f001 fb8d 	bl	80046d8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8002fbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f001 fcb4 	bl	8004932 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_ATCRESET, sizeof(atcmd_ATCRESET) - 1, 1000, _LF, CMD_mode);
 8002fce:	2301      	movs	r3, #1
 8002fd0:	9301      	str	r3, [sp, #4]
 8002fd2:	230a      	movs	r3, #10
 8002fd4:	9300      	str	r3, [sp, #0]
 8002fd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002fda:	220b      	movs	r2, #11
 8002fdc:	4973      	ldr	r1, [pc, #460]	@ (80031ac <_ZN5Modem8simA76724initEv+0x25c>)
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f001 fb7a 	bl	80046d8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8002fe4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fe8:	2100      	movs	r1, #0
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f001 fca1 	bl	8004932 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	73fb      	strb	r3, [r7, #15]

	System_Rtos::delay(15000);
 8002ff4:	f643 2098 	movw	r0, #15000	@ 0x3a98
 8002ff8:	f002 f9ca 	bl	8005390 <_ZN11System_Rtos5delayEm>

	/*After reset send two AT just to make gsm responsive*/
	PrepRxTx(atcmd_AT, sizeof(atcmd_AT) - 1, 1000, _LF, CMD_mode);
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	9301      	str	r3, [sp, #4]
 8003000:	230a      	movs	r3, #10
 8003002:	9300      	str	r3, [sp, #0]
 8003004:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003008:	2204      	movs	r2, #4
 800300a:	4967      	ldr	r1, [pc, #412]	@ (80031a8 <_ZN5Modem8simA76724initEv+0x258>)
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f001 fb63 	bl	80046d8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8003012:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003016:	2100      	movs	r1, #0
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f001 fc8a 	bl	8004932 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 800301e:	4603      	mov	r3, r0
 8003020:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_AT, sizeof(atcmd_AT) - 1, 1000, _LF, CMD_mode);
 8003022:	2301      	movs	r3, #1
 8003024:	9301      	str	r3, [sp, #4]
 8003026:	230a      	movs	r3, #10
 8003028:	9300      	str	r3, [sp, #0]
 800302a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800302e:	2204      	movs	r2, #4
 8003030:	495d      	ldr	r1, [pc, #372]	@ (80031a8 <_ZN5Modem8simA76724initEv+0x258>)
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f001 fb50 	bl	80046d8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8003038:	f241 3288 	movw	r2, #5000	@ 0x1388
 800303c:	2100      	movs	r1, #0
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f001 fc77 	bl	8004932 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8003044:	4603      	mov	r3, r0
 8003046:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_AT, sizeof(atcmd_AT) - 1, 1000, _LF, CMD_mode);
 8003048:	2301      	movs	r3, #1
 800304a:	9301      	str	r3, [sp, #4]
 800304c:	230a      	movs	r3, #10
 800304e:	9300      	str	r3, [sp, #0]
 8003050:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003054:	2204      	movs	r2, #4
 8003056:	4954      	ldr	r1, [pc, #336]	@ (80031a8 <_ZN5Modem8simA76724initEv+0x258>)
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f001 fb3d 	bl	80046d8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 800305e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003062:	2100      	movs	r1, #0
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f001 fc64 	bl	8004932 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 800306a:	4603      	mov	r3, r0
 800306c:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_AT_F0, sizeof(atcmd_AT_F0) - 1, 1000, _LF, CMD_mode);
 800306e:	2301      	movs	r3, #1
 8003070:	9301      	str	r3, [sp, #4]
 8003072:	230a      	movs	r3, #10
 8003074:	9300      	str	r3, [sp, #0]
 8003076:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800307a:	2207      	movs	r2, #7
 800307c:	494c      	ldr	r1, [pc, #304]	@ (80031b0 <_ZN5Modem8simA76724initEv+0x260>)
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f001 fb2a 	bl	80046d8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8003084:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003088:	2100      	movs	r1, #0
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f001 fc51 	bl	8004932 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8003090:	4603      	mov	r3, r0
 8003092:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_ATE1, sizeof(atcmd_ATE1) - 1, 1000, _LF, CMD_mode);
 8003094:	2301      	movs	r3, #1
 8003096:	9301      	str	r3, [sp, #4]
 8003098:	230a      	movs	r3, #10
 800309a:	9300      	str	r3, [sp, #0]
 800309c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030a0:	2206      	movs	r2, #6
 80030a2:	4944      	ldr	r1, [pc, #272]	@ (80031b4 <_ZN5Modem8simA76724initEv+0x264>)
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f001 fb17 	bl	80046d8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 80030aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030ae:	2100      	movs	r1, #0
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f001 fc3e 	bl	8004932 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80030b6:	4603      	mov	r3, r0
 80030b8:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_ATCREG, sizeof(atcmd_ATCREG) - 1, 1000, _LF, CMD_mode);
 80030ba:	2301      	movs	r3, #1
 80030bc:	9301      	str	r3, [sp, #4]
 80030be:	230a      	movs	r3, #10
 80030c0:	9300      	str	r3, [sp, #0]
 80030c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030c6:	220b      	movs	r2, #11
 80030c8:	493b      	ldr	r1, [pc, #236]	@ (80031b8 <_ZN5Modem8simA76724initEv+0x268>)
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f001 fb04 	bl	80046d8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 80030d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030d4:	2100      	movs	r1, #0
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f001 fc2b 	bl	8004932 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80030dc:	4603      	mov	r3, r0
 80030de:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_ATCGREG, sizeof(atcmd_ATCGREG) - 1, 1000, _LF, CMD_mode);
 80030e0:	2301      	movs	r3, #1
 80030e2:	9301      	str	r3, [sp, #4]
 80030e4:	230a      	movs	r3, #10
 80030e6:	9300      	str	r3, [sp, #0]
 80030e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030ec:	220c      	movs	r2, #12
 80030ee:	4933      	ldr	r1, [pc, #204]	@ (80031bc <_ZN5Modem8simA76724initEv+0x26c>)
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f001 faf1 	bl	80046d8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 80030f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030fa:	2100      	movs	r1, #0
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f001 fc18 	bl	8004932 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8003102:	4603      	mov	r3, r0
 8003104:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_ATCPMS, sizeof(atcmd_ATCPMS) - 1, 1000, _LF, CMD_mode);
 8003106:	2301      	movs	r3, #1
 8003108:	9301      	str	r3, [sp, #4]
 800310a:	230a      	movs	r3, #10
 800310c:	9300      	str	r3, [sp, #0]
 800310e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003112:	2218      	movs	r2, #24
 8003114:	492a      	ldr	r1, [pc, #168]	@ (80031c0 <_ZN5Modem8simA76724initEv+0x270>)
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f001 fade 	bl	80046d8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 800311c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003120:	2100      	movs	r1, #0
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f001 fc05 	bl	8004932 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8003128:	4603      	mov	r3, r0
 800312a:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_ATCOPS, sizeof(atcmd_ATCOPS) - 1, 1000, _LF, CMD_mode);
 800312c:	2301      	movs	r3, #1
 800312e:	9301      	str	r3, [sp, #4]
 8003130:	230a      	movs	r3, #10
 8003132:	9300      	str	r3, [sp, #0]
 8003134:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003138:	220b      	movs	r2, #11
 800313a:	4922      	ldr	r1, [pc, #136]	@ (80031c4 <_ZN5Modem8simA76724initEv+0x274>)
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f001 facb 	bl	80046d8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8003142:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003146:	2100      	movs	r1, #0
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f001 fbf2 	bl	8004932 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 800314e:	4603      	mov	r3, r0
 8003150:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_ATCMGF, sizeof(atcmd_ATCMGF) - 1, 1000, _LF, CMD_mode);
 8003152:	2301      	movs	r3, #1
 8003154:	9301      	str	r3, [sp, #4]
 8003156:	230a      	movs	r3, #10
 8003158:	9300      	str	r3, [sp, #0]
 800315a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800315e:	220b      	movs	r2, #11
 8003160:	4919      	ldr	r1, [pc, #100]	@ (80031c8 <_ZN5Modem8simA76724initEv+0x278>)
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f001 fab8 	bl	80046d8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8003168:	f241 3288 	movw	r2, #5000	@ 0x1388
 800316c:	2100      	movs	r1, #0
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f001 fbdf 	bl	8004932 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8003174:	4603      	mov	r3, r0
 8003176:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_ATCGATT, sizeof(atcmd_ATCGATT) - 1, 1000, _LF, CMD_mode);
 8003178:	2301      	movs	r3, #1
 800317a:	9301      	str	r3, [sp, #4]
 800317c:	230a      	movs	r3, #10
 800317e:	9300      	str	r3, [sp, #0]
 8003180:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003184:	220c      	movs	r2, #12
 8003186:	4911      	ldr	r1, [pc, #68]	@ (80031cc <_ZN5Modem8simA76724initEv+0x27c>)
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f001 faa5 	bl	80046d8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 800318e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003192:	2100      	movs	r1, #0
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f001 fbcc 	bl	8004932 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 800319a:	4603      	mov	r3, r0
 800319c:	73fb      	strb	r3, [r7, #15]

	return stat;
 800319e:	7bfb      	ldrb	r3, [r7, #15]

}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3710      	adds	r7, #16
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	080122c4 	.word	0x080122c4
 80031ac:	080122cc 	.word	0x080122cc
 80031b0:	08012380 	.word	0x08012380
 80031b4:	08012388 	.word	0x08012388
 80031b8:	080122d8 	.word	0x080122d8
 80031bc:	080122e4 	.word	0x080122e4
 80031c0:	080122f4 	.word	0x080122f4
 80031c4:	08012310 	.word	0x08012310
 80031c8:	0801231c 	.word	0x0801231c
 80031cc:	08012328 	.word	0x08012328

080031d0 <_ZN5Modem8simA76726setAPNEPc>:

	}
	return stat;
}

enum simA7672::status simA7672::setAPN(char *apn) {
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b092      	sub	sp, #72	@ 0x48
 80031d4:	af02      	add	r7, sp, #8
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]

	status stat = simA7672_OK;
 80031da:	2300      	movs	r3, #0
 80031dc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	char buf[50] = { 0 };
 80031e0:	2300      	movs	r3, #0
 80031e2:	60fb      	str	r3, [r7, #12]
 80031e4:	f107 0310 	add.w	r3, r7, #16
 80031e8:	222e      	movs	r2, #46	@ 0x2e
 80031ea:	2100      	movs	r1, #0
 80031ec:	4618      	mov	r0, r3
 80031ee:	f00c fb66 	bl	800f8be <memset>

	std::sprintf(buf, "AT+CGDCONT=1,\"ip\",\"%s\"\r\n", apn);
 80031f2:	f107 030c 	add.w	r3, r7, #12
 80031f6:	683a      	ldr	r2, [r7, #0]
 80031f8:	4920      	ldr	r1, [pc, #128]	@ (800327c <_ZN5Modem8simA76726setAPNEPc+0xac>)
 80031fa:	4618      	mov	r0, r3
 80031fc:	f00c fafc 	bl	800f7f8 <siprintf>
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
			std::strlen(const_cast<const char*>(buf)), 1000, _LF, CMD_mode);
 8003200:	f107 030c 	add.w	r3, r7, #12
 8003204:	4618      	mov	r0, r3
 8003206:	f7fd f833 	bl	8000270 <strlen>
 800320a:	4603      	mov	r3, r0
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
 800320c:	b29a      	uxth	r2, r3
 800320e:	f107 010c 	add.w	r1, r7, #12
 8003212:	2301      	movs	r3, #1
 8003214:	9301      	str	r3, [sp, #4]
 8003216:	230a      	movs	r3, #10
 8003218:	9300      	str	r3, [sp, #0]
 800321a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f001 fa5a 	bl	80046d8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 8003224:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003228:	2100      	movs	r1, #0
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f001 fb81 	bl	8004932 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8003230:	4603      	mov	r3, r0
 8003232:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	if (stat != simA7672_OK
			|| checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003236:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10f      	bne.n	800325e <_ZN5Modem8simA76726setAPNEPc+0x8e>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003244:	3308      	adds	r3, #8
 8003246:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) != checking.sys_ok) {
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800324e:	8a92      	ldrh	r2, [r2, #20]
 8003250:	b292      	uxth	r2, r2
			|| checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003252:	4618      	mov	r0, r3
 8003254:	f002 fb5c 	bl	8005910 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <_ZN5Modem8simA76726setAPNEPc+0x92>
 800325e:	2301      	movs	r3, #1
 8003260:	e000      	b.n	8003264 <_ZN5Modem8simA76726setAPNEPc+0x94>
 8003262:	2300      	movs	r3, #0
	if (stat != simA7672_OK
 8003264:	2b00      	cmp	r3, #0
 8003266:	d002      	beq.n	800326e <_ZN5Modem8simA76726setAPNEPc+0x9e>

		stat = simA7672_ERR;
 8003268:	2301      	movs	r3, #1
 800326a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	}

	return stat;
 800326e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f

}
 8003272:	4618      	mov	r0, r3
 8003274:	3740      	adds	r7, #64	@ 0x40
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	08011f48 	.word	0x08011f48

08003280 <_ZN5Modem8simA767222activate_deactivatePDPENS0_8pdp_statE>:
enum simA7672::status simA7672::activate_deactivatePDP(
		enum pdp_stat activate_deactivate) {
 8003280:	b580      	push	{r7, lr}
 8003282:	b08a      	sub	sp, #40	@ 0x28
 8003284:	af02      	add	r7, sp, #8
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	460b      	mov	r3, r1
 800328a:	70fb      	strb	r3, [r7, #3]

	status stat = simA7672_OK;
 800328c:	2300      	movs	r3, #0
 800328e:	77fb      	strb	r3, [r7, #31]
	char buf[20] = { 0 };
 8003290:	2300      	movs	r3, #0
 8003292:	60bb      	str	r3, [r7, #8]
 8003294:	f107 030c 	add.w	r3, r7, #12
 8003298:	2200      	movs	r2, #0
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	605a      	str	r2, [r3, #4]
 800329e:	609a      	str	r2, [r3, #8]
 80032a0:	60da      	str	r2, [r3, #12]

	std::sprintf(buf, "AT+CGACT=%d,1\r\n", activate_deactivate);
 80032a2:	78fa      	ldrb	r2, [r7, #3]
 80032a4:	f107 0308 	add.w	r3, r7, #8
 80032a8:	491e      	ldr	r1, [pc, #120]	@ (8003324 <_ZN5Modem8simA767222activate_deactivatePDPENS0_8pdp_statE+0xa4>)
 80032aa:	4618      	mov	r0, r3
 80032ac:	f00c faa4 	bl	800f7f8 <siprintf>
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
			std::strlen(const_cast<const char*>(buf)), 1000, _LF, CMD_mode);
 80032b0:	f107 0308 	add.w	r3, r7, #8
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7fc ffdb 	bl	8000270 <strlen>
 80032ba:	4603      	mov	r3, r0
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
 80032bc:	b29a      	uxth	r2, r3
 80032be:	f107 0108 	add.w	r1, r7, #8
 80032c2:	2301      	movs	r3, #1
 80032c4:	9301      	str	r3, [sp, #4]
 80032c6:	230a      	movs	r3, #10
 80032c8:	9300      	str	r3, [sp, #0]
 80032ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f001 fa02 	bl	80046d8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 80032d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032d8:	2100      	movs	r1, #0
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f001 fb29 	bl	8004932 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80032e0:	4603      	mov	r3, r0
 80032e2:	77fb      	strb	r3, [r7, #31]

	if (stat != simA7672_OK
			|| checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80032e4:	7ffb      	ldrb	r3, [r7, #31]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d10f      	bne.n	800330a <_ZN5Modem8simA767222activate_deactivatePDPENS0_8pdp_statE+0x8a>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80032f0:	3308      	adds	r3, #8
 80032f2:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) != checking.sys_ok) {
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80032fa:	8a92      	ldrh	r2, [r2, #20]
 80032fc:	b292      	uxth	r2, r2
			|| checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80032fe:	4618      	mov	r0, r3
 8003300:	f002 fb06 	bl	8005910 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <_ZN5Modem8simA767222activate_deactivatePDPENS0_8pdp_statE+0x8e>
 800330a:	2301      	movs	r3, #1
 800330c:	e000      	b.n	8003310 <_ZN5Modem8simA767222activate_deactivatePDPENS0_8pdp_statE+0x90>
 800330e:	2300      	movs	r3, #0
	if (stat != simA7672_OK
 8003310:	2b00      	cmp	r3, #0
 8003312:	d001      	beq.n	8003318 <_ZN5Modem8simA767222activate_deactivatePDPENS0_8pdp_statE+0x98>

		stat = simA7672_ERR;
 8003314:	2301      	movs	r3, #1
 8003316:	77fb      	strb	r3, [r7, #31]

	}

	return stat;
 8003318:	7ffb      	ldrb	r3, [r7, #31]

}
 800331a:	4618      	mov	r0, r3
 800331c:	3720      	adds	r7, #32
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	08011f64 	.word	0x08011f64

08003328 <_ZN5Modem8simA76726getSimEPc>:

/*Get Functions*/
void simA7672::getSim(char *pin) {
 8003328:	b580      	push	{r7, lr}
 800332a:	b088      	sub	sp, #32
 800332c:	af04      	add	r7, sp, #16
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
	status stat;

	PrepRxTx(atcmd_ATCPIN, sizeof(atcmd_ATCPIN) - 1, 1000, _LF, CMD_mode);
 8003332:	2301      	movs	r3, #1
 8003334:	9301      	str	r3, [sp, #4]
 8003336:	230a      	movs	r3, #10
 8003338:	9300      	str	r3, [sp, #0]
 800333a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800333e:	220a      	movs	r2, #10
 8003340:	492b      	ldr	r1, [pc, #172]	@ (80033f0 <_ZN5Modem8simA76726getSimEPc+0xc8>)
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f001 f9c8 	bl	80046d8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 8003348:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800334c:	2100      	movs	r1, #0
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f001 faef 	bl	8004932 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8003354:	4603      	mov	r3, r0
 8003356:	73fb      	strb	r3, [r7, #15]
	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003358:	7bfb      	ldrb	r3, [r7, #15]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d111      	bne.n	8003382 <_ZN5Modem8simA76726getSimEPc+0x5a>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003364:	3308      	adds	r3, #8
 8003366:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800336e:	8a92      	ldrh	r2, [r2, #20]
 8003370:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003372:	4618      	mov	r0, r3
 8003374:	f002 facc 	bl	8005910 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <_ZN5Modem8simA76726getSimEPc+0x5a>
 800337e:	2301      	movs	r3, #1
 8003380:	e000      	b.n	8003384 <_ZN5Modem8simA76726getSimEPc+0x5c>
 8003382:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8003384:	2b00      	cmp	r3, #0
 8003386:	d024      	beq.n	80033d2 <_ZN5Modem8simA76726getSimEPc+0xaa>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 800338e:	3008      	adds	r0, #8
 8003390:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CPIN:", ':', _CR, pin)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003398:	8a9b      	ldrh	r3, [r3, #20]
 800339a:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	9302      	str	r3, [sp, #8]
 80033a0:	230d      	movs	r3, #13
 80033a2:	9301      	str	r3, [sp, #4]
 80033a4:	233a      	movs	r3, #58	@ 0x3a
 80033a6:	9300      	str	r3, [sp, #0]
 80033a8:	4b12      	ldr	r3, [pc, #72]	@ (80033f4 <_ZN5Modem8simA76726getSimEPc+0xcc>)
 80033aa:	f002 fad7 	bl	800595c <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 80033ae:	4603      	mov	r3, r0
				== checking.sys_ok) {
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	bf0c      	ite	eq
 80033b4:	2301      	moveq	r3, #1
 80033b6:	2300      	movne	r3, #0
 80033b8:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d113      	bne.n	80033e6 <_ZN5Modem8simA76726getSimEPc+0xbe>
			return;
		} else {
			std::strcpy(pin, "--------");
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	490d      	ldr	r1, [pc, #52]	@ (80033f8 <_ZN5Modem8simA76726getSimEPc+0xd0>)
 80033c2:	461a      	mov	r2, r3
 80033c4:	460b      	mov	r3, r1
 80033c6:	cb03      	ldmia	r3!, {r0, r1}
 80033c8:	6010      	str	r0, [r2, #0]
 80033ca:	6051      	str	r1, [r2, #4]
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	7213      	strb	r3, [r2, #8]
 80033d0:	e00a      	b.n	80033e8 <_ZN5Modem8simA76726getSimEPc+0xc0>
		}

	} else {
		std::strcpy(pin, "--------");
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	4908      	ldr	r1, [pc, #32]	@ (80033f8 <_ZN5Modem8simA76726getSimEPc+0xd0>)
 80033d6:	461a      	mov	r2, r3
 80033d8:	460b      	mov	r3, r1
 80033da:	cb03      	ldmia	r3!, {r0, r1}
 80033dc:	6010      	str	r0, [r2, #0]
 80033de:	6051      	str	r1, [r2, #4]
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	7213      	strb	r3, [r2, #8]
 80033e4:	e000      	b.n	80033e8 <_ZN5Modem8simA76726getSimEPc+0xc0>
			return;
 80033e6:	bf00      	nop
	}

}
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	08012338 	.word	0x08012338
 80033f4:	08011f74 	.word	0x08011f74
 80033f8:	08011f7c 	.word	0x08011f7c

080033fc <_ZN5Modem8simA767210getNetworkEPc>:
void simA7672::getPin() {

}
void simA7672::getNetwork(char *networkStat) {
 80033fc:	b590      	push	{r4, r7, lr}
 80033fe:	b089      	sub	sp, #36	@ 0x24
 8003400:	af04      	add	r7, sp, #16
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
	status stat;

	PrepRxTx(atcmd_GATCREG, sizeof(atcmd_GATCREG) - 1, 1000, _LF, CMD_mode);
 8003406:	2301      	movs	r3, #1
 8003408:	9301      	str	r3, [sp, #4]
 800340a:	230a      	movs	r3, #10
 800340c:	9300      	str	r3, [sp, #0]
 800340e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003412:	220a      	movs	r2, #10
 8003414:	4961      	ldr	r1, [pc, #388]	@ (800359c <_ZN5Modem8simA767210getNetworkEPc+0x1a0>)
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f001 f95e 	bl	80046d8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 800341c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003420:	2100      	movs	r1, #0
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f001 fa85 	bl	8004932 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8003428:	4603      	mov	r3, r0
 800342a:	73fb      	strb	r3, [r7, #15]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 800342c:	7bfb      	ldrb	r3, [r7, #15]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d111      	bne.n	8003456 <_ZN5Modem8simA767210getNetworkEPc+0x5a>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003438:	3308      	adds	r3, #8
 800343a:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003442:	8a92      	ldrh	r2, [r2, #20]
 8003444:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003446:	4618      	mov	r0, r3
 8003448:	f002 fa62 	bl	8005910 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <_ZN5Modem8simA767210getNetworkEPc+0x5a>
 8003452:	2301      	movs	r3, #1
 8003454:	e000      	b.n	8003458 <_ZN5Modem8simA767210getNetworkEPc+0x5c>
 8003456:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8003458:	2b00      	cmp	r3, #0
 800345a:	f000 8093 	beq.w	8003584 <_ZN5Modem8simA767210getNetworkEPc+0x188>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8003464:	3008      	adds	r0, #8
 8003466:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CREG:", ',', _CR, networkStat)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800346e:	8a9b      	ldrh	r3, [r3, #20]
 8003470:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	9302      	str	r3, [sp, #8]
 8003476:	230d      	movs	r3, #13
 8003478:	9301      	str	r3, [sp, #4]
 800347a:	232c      	movs	r3, #44	@ 0x2c
 800347c:	9300      	str	r3, [sp, #0]
 800347e:	4b48      	ldr	r3, [pc, #288]	@ (80035a0 <_ZN5Modem8simA767210getNetworkEPc+0x1a4>)
 8003480:	f002 fa6c 	bl	800595c <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 8003484:	4603      	mov	r3, r0
				== checking.sys_ok) {
 8003486:	2b00      	cmp	r3, #0
 8003488:	bf0c      	ite	eq
 800348a:	2301      	moveq	r3, #1
 800348c:	2300      	movne	r3, #0
 800348e:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003490:	2b00      	cmp	r3, #0
 8003492:	d06d      	beq.n	8003570 <_ZN5Modem8simA767210getNetworkEPc+0x174>
			switch (*networkStat) {
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	3b30      	subs	r3, #48	@ 0x30
 800349a:	2b07      	cmp	r3, #7
 800349c:	d85d      	bhi.n	800355a <_ZN5Modem8simA767210getNetworkEPc+0x15e>
 800349e:	a201      	add	r2, pc, #4	@ (adr r2, 80034a4 <_ZN5Modem8simA767210getNetworkEPc+0xa8>)
 80034a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a4:	080034c5 	.word	0x080034c5
 80034a8:	080034d5 	.word	0x080034d5
 80034ac:	080034e9 	.word	0x080034e9
 80034b0:	080034fd 	.word	0x080034fd
 80034b4:	08003515 	.word	0x08003515
 80034b8:	08003525 	.word	0x08003525
 80034bc:	08003537 	.word	0x08003537
 80034c0:	08003547 	.word	0x08003547
			case '0': {
				std::strcpy(networkStat, "Not-Reg");
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	4937      	ldr	r1, [pc, #220]	@ (80035a4 <_ZN5Modem8simA767210getNetworkEPc+0x1a8>)
 80034c8:	461a      	mov	r2, r3
 80034ca:	460b      	mov	r3, r1
 80034cc:	cb03      	ldmia	r3!, {r0, r1}
 80034ce:	6010      	str	r0, [r2, #0]
 80034d0:	6051      	str	r1, [r2, #4]

				break;
 80034d2:	e04c      	b.n	800356e <_ZN5Modem8simA767210getNetworkEPc+0x172>
			}
			case '1': {
				std::strcpy(networkStat, "Reg-Home");
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	4934      	ldr	r1, [pc, #208]	@ (80035a8 <_ZN5Modem8simA767210getNetworkEPc+0x1ac>)
 80034d8:	461a      	mov	r2, r3
 80034da:	460b      	mov	r3, r1
 80034dc:	cb03      	ldmia	r3!, {r0, r1}
 80034de:	6010      	str	r0, [r2, #0]
 80034e0:	6051      	str	r1, [r2, #4]
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	7213      	strb	r3, [r2, #8]

				break;
 80034e6:	e042      	b.n	800356e <_ZN5Modem8simA767210getNetworkEPc+0x172>
			}
			case '2': {
				std::strcpy(networkStat, "Searching");
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	4930      	ldr	r1, [pc, #192]	@ (80035ac <_ZN5Modem8simA767210getNetworkEPc+0x1b0>)
 80034ec:	461a      	mov	r2, r3
 80034ee:	460b      	mov	r3, r1
 80034f0:	cb03      	ldmia	r3!, {r0, r1}
 80034f2:	6010      	str	r0, [r2, #0]
 80034f4:	6051      	str	r1, [r2, #4]
 80034f6:	881b      	ldrh	r3, [r3, #0]
 80034f8:	8113      	strh	r3, [r2, #8]

				break;
 80034fa:	e038      	b.n	800356e <_ZN5Modem8simA767210getNetworkEPc+0x172>
			}
			case '3': {
				std::strcpy(networkStat, "Reg-denied");
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	492c      	ldr	r1, [pc, #176]	@ (80035b0 <_ZN5Modem8simA767210getNetworkEPc+0x1b4>)
 8003500:	461a      	mov	r2, r3
 8003502:	460b      	mov	r3, r1
 8003504:	cb03      	ldmia	r3!, {r0, r1}
 8003506:	6010      	str	r0, [r2, #0]
 8003508:	6051      	str	r1, [r2, #4]
 800350a:	8819      	ldrh	r1, [r3, #0]
 800350c:	789b      	ldrb	r3, [r3, #2]
 800350e:	8111      	strh	r1, [r2, #8]
 8003510:	7293      	strb	r3, [r2, #10]

				break;
 8003512:	e02c      	b.n	800356e <_ZN5Modem8simA767210getNetworkEPc+0x172>
			}
			case '4': {
				std::strcpy(networkStat, "Unknown");
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	4927      	ldr	r1, [pc, #156]	@ (80035b4 <_ZN5Modem8simA767210getNetworkEPc+0x1b8>)
 8003518:	461a      	mov	r2, r3
 800351a:	460b      	mov	r3, r1
 800351c:	cb03      	ldmia	r3!, {r0, r1}
 800351e:	6010      	str	r0, [r2, #0]
 8003520:	6051      	str	r1, [r2, #4]

				break;
 8003522:	e024      	b.n	800356e <_ZN5Modem8simA767210getNetworkEPc+0x172>
			}
			case '5': {
				std::strcpy(networkStat, "Reg-Roaming");
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	4a24      	ldr	r2, [pc, #144]	@ (80035b8 <_ZN5Modem8simA767210getNetworkEPc+0x1bc>)
 8003528:	461c      	mov	r4, r3
 800352a:	4613      	mov	r3, r2
 800352c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800352e:	6020      	str	r0, [r4, #0]
 8003530:	6061      	str	r1, [r4, #4]
 8003532:	60a2      	str	r2, [r4, #8]

				break;
 8003534:	e01b      	b.n	800356e <_ZN5Modem8simA767210getNetworkEPc+0x172>
			}
			case '6': {
				std::strcpy(networkStat, "Reg-SMS");
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	4920      	ldr	r1, [pc, #128]	@ (80035bc <_ZN5Modem8simA767210getNetworkEPc+0x1c0>)
 800353a:	461a      	mov	r2, r3
 800353c:	460b      	mov	r3, r1
 800353e:	cb03      	ldmia	r3!, {r0, r1}
 8003540:	6010      	str	r0, [r2, #0]
 8003542:	6051      	str	r1, [r2, #4]

				break;
 8003544:	e013      	b.n	800356e <_ZN5Modem8simA767210getNetworkEPc+0x172>
			}
			case '7': {
				std::strcpy(networkStat, "Reg-SMSR");
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	491d      	ldr	r1, [pc, #116]	@ (80035c0 <_ZN5Modem8simA767210getNetworkEPc+0x1c4>)
 800354a:	461a      	mov	r2, r3
 800354c:	460b      	mov	r3, r1
 800354e:	cb03      	ldmia	r3!, {r0, r1}
 8003550:	6010      	str	r0, [r2, #0]
 8003552:	6051      	str	r1, [r2, #4]
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	7213      	strb	r3, [r2, #8]

				break;
 8003558:	e009      	b.n	800356e <_ZN5Modem8simA767210getNetworkEPc+0x172>
			}
			default: {
				std::strcpy(networkStat, "--------");
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	4919      	ldr	r1, [pc, #100]	@ (80035c4 <_ZN5Modem8simA767210getNetworkEPc+0x1c8>)
 800355e:	461a      	mov	r2, r3
 8003560:	460b      	mov	r3, r1
 8003562:	cb03      	ldmia	r3!, {r0, r1}
 8003564:	6010      	str	r0, [r2, #0]
 8003566:	6051      	str	r1, [r2, #4]
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	7213      	strb	r3, [r2, #8]

				break;
 800356c:	bf00      	nop
			}
			}
			return;
 800356e:	e012      	b.n	8003596 <_ZN5Modem8simA767210getNetworkEPc+0x19a>
		} else {
			std::strcpy(networkStat, "--------");
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	4914      	ldr	r1, [pc, #80]	@ (80035c4 <_ZN5Modem8simA767210getNetworkEPc+0x1c8>)
 8003574:	461a      	mov	r2, r3
 8003576:	460b      	mov	r3, r1
 8003578:	cb03      	ldmia	r3!, {r0, r1}
 800357a:	6010      	str	r0, [r2, #0]
 800357c:	6051      	str	r1, [r2, #4]
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	7213      	strb	r3, [r2, #8]
 8003582:	e008      	b.n	8003596 <_ZN5Modem8simA767210getNetworkEPc+0x19a>
		}

	} else {
		std::strcpy(networkStat, "--------");
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	490f      	ldr	r1, [pc, #60]	@ (80035c4 <_ZN5Modem8simA767210getNetworkEPc+0x1c8>)
 8003588:	461a      	mov	r2, r3
 800358a:	460b      	mov	r3, r1
 800358c:	cb03      	ldmia	r3!, {r0, r1}
 800358e:	6010      	str	r0, [r2, #0]
 8003590:	6051      	str	r1, [r2, #4]
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	7213      	strb	r3, [r2, #8]
	}

}
 8003596:	3714      	adds	r7, #20
 8003598:	46bd      	mov	sp, r7
 800359a:	bd90      	pop	{r4, r7, pc}
 800359c:	08012344 	.word	0x08012344
 80035a0:	08011f88 	.word	0x08011f88
 80035a4:	08011f90 	.word	0x08011f90
 80035a8:	08011f98 	.word	0x08011f98
 80035ac:	08011fa4 	.word	0x08011fa4
 80035b0:	08011fb0 	.word	0x08011fb0
 80035b4:	08011fbc 	.word	0x08011fbc
 80035b8:	08011fc4 	.word	0x08011fc4
 80035bc:	08011fd0 	.word	0x08011fd0
 80035c0:	08011fd8 	.word	0x08011fd8
 80035c4:	08011f7c 	.word	0x08011f7c

080035c8 <_ZN5Modem8simA767213getNetworkPDPEPc>:

void simA7672::getNetworkPDP(char *networkStatpdp) {
 80035c8:	b590      	push	{r4, r7, lr}
 80035ca:	b089      	sub	sp, #36	@ 0x24
 80035cc:	af04      	add	r7, sp, #16
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
	status stat;

	PrepRxTx(atcmd_GATCGREG, sizeof(atcmd_GATCGREG) - 1, 1000, _LF, CMD_mode);
 80035d2:	2301      	movs	r3, #1
 80035d4:	9301      	str	r3, [sp, #4]
 80035d6:	230a      	movs	r3, #10
 80035d8:	9300      	str	r3, [sp, #0]
 80035da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80035de:	220b      	movs	r2, #11
 80035e0:	495b      	ldr	r1, [pc, #364]	@ (8003750 <_ZN5Modem8simA767213getNetworkPDPEPc+0x188>)
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f001 f878 	bl	80046d8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 80035e8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80035ec:	2100      	movs	r1, #0
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f001 f99f 	bl	8004932 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80035f4:	4603      	mov	r3, r0
 80035f6:	73fb      	strb	r3, [r7, #15]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80035f8:	7bfb      	ldrb	r3, [r7, #15]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d111      	bne.n	8003622 <_ZN5Modem8simA767213getNetworkPDPEPc+0x5a>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003604:	3308      	adds	r3, #8
 8003606:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800360e:	8a92      	ldrh	r2, [r2, #20]
 8003610:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003612:	4618      	mov	r0, r3
 8003614:	f002 f97c 	bl	8005910 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d101      	bne.n	8003622 <_ZN5Modem8simA767213getNetworkPDPEPc+0x5a>
 800361e:	2301      	movs	r3, #1
 8003620:	e000      	b.n	8003624 <_ZN5Modem8simA767213getNetworkPDPEPc+0x5c>
 8003622:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8003624:	2b00      	cmp	r3, #0
 8003626:	f000 8087 	beq.w	8003738 <_ZN5Modem8simA767213getNetworkPDPEPc+0x170>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8003630:	3008      	adds	r0, #8
 8003632:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CGREG:", ',', _CR, networkStatpdp)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800363a:	8a9b      	ldrh	r3, [r3, #20]
 800363c:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	9302      	str	r3, [sp, #8]
 8003642:	230d      	movs	r3, #13
 8003644:	9301      	str	r3, [sp, #4]
 8003646:	232c      	movs	r3, #44	@ 0x2c
 8003648:	9300      	str	r3, [sp, #0]
 800364a:	4b42      	ldr	r3, [pc, #264]	@ (8003754 <_ZN5Modem8simA767213getNetworkPDPEPc+0x18c>)
 800364c:	f002 f986 	bl	800595c <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 8003650:	4603      	mov	r3, r0
				== checking.sys_ok) {
 8003652:	2b00      	cmp	r3, #0
 8003654:	bf0c      	ite	eq
 8003656:	2301      	moveq	r3, #1
 8003658:	2300      	movne	r3, #0
 800365a:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 800365c:	2b00      	cmp	r3, #0
 800365e:	d061      	beq.n	8003724 <_ZN5Modem8simA767213getNetworkPDPEPc+0x15c>
			switch (*networkStatpdp) {
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	3b30      	subs	r3, #48	@ 0x30
 8003666:	2b06      	cmp	r3, #6
 8003668:	d851      	bhi.n	800370e <_ZN5Modem8simA767213getNetworkPDPEPc+0x146>
 800366a:	a201      	add	r2, pc, #4	@ (adr r2, 8003670 <_ZN5Modem8simA767213getNetworkPDPEPc+0xa8>)
 800366c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003670:	0800368d 	.word	0x0800368d
 8003674:	0800369d 	.word	0x0800369d
 8003678:	080036b1 	.word	0x080036b1
 800367c:	080036c5 	.word	0x080036c5
 8003680:	080036dd 	.word	0x080036dd
 8003684:	080036ed 	.word	0x080036ed
 8003688:	080036ff 	.word	0x080036ff
			case '0': {
				std::strcpy(networkStatpdp, "Not-Reg");
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	4932      	ldr	r1, [pc, #200]	@ (8003758 <_ZN5Modem8simA767213getNetworkPDPEPc+0x190>)
 8003690:	461a      	mov	r2, r3
 8003692:	460b      	mov	r3, r1
 8003694:	cb03      	ldmia	r3!, {r0, r1}
 8003696:	6010      	str	r0, [r2, #0]
 8003698:	6051      	str	r1, [r2, #4]

				break;
 800369a:	e042      	b.n	8003722 <_ZN5Modem8simA767213getNetworkPDPEPc+0x15a>
			}
			case '1': {
				std::strcpy(networkStatpdp, "Reg-Home");
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	492f      	ldr	r1, [pc, #188]	@ (800375c <_ZN5Modem8simA767213getNetworkPDPEPc+0x194>)
 80036a0:	461a      	mov	r2, r3
 80036a2:	460b      	mov	r3, r1
 80036a4:	cb03      	ldmia	r3!, {r0, r1}
 80036a6:	6010      	str	r0, [r2, #0]
 80036a8:	6051      	str	r1, [r2, #4]
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	7213      	strb	r3, [r2, #8]

				break;
 80036ae:	e038      	b.n	8003722 <_ZN5Modem8simA767213getNetworkPDPEPc+0x15a>
			}
			case '2': {
				std::strcpy(networkStatpdp, "Searching");
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	492b      	ldr	r1, [pc, #172]	@ (8003760 <_ZN5Modem8simA767213getNetworkPDPEPc+0x198>)
 80036b4:	461a      	mov	r2, r3
 80036b6:	460b      	mov	r3, r1
 80036b8:	cb03      	ldmia	r3!, {r0, r1}
 80036ba:	6010      	str	r0, [r2, #0]
 80036bc:	6051      	str	r1, [r2, #4]
 80036be:	881b      	ldrh	r3, [r3, #0]
 80036c0:	8113      	strh	r3, [r2, #8]

				break;
 80036c2:	e02e      	b.n	8003722 <_ZN5Modem8simA767213getNetworkPDPEPc+0x15a>
			}
			case '3': {
				std::strcpy(networkStatpdp, "Reg-denied");
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	4927      	ldr	r1, [pc, #156]	@ (8003764 <_ZN5Modem8simA767213getNetworkPDPEPc+0x19c>)
 80036c8:	461a      	mov	r2, r3
 80036ca:	460b      	mov	r3, r1
 80036cc:	cb03      	ldmia	r3!, {r0, r1}
 80036ce:	6010      	str	r0, [r2, #0]
 80036d0:	6051      	str	r1, [r2, #4]
 80036d2:	8819      	ldrh	r1, [r3, #0]
 80036d4:	789b      	ldrb	r3, [r3, #2]
 80036d6:	8111      	strh	r1, [r2, #8]
 80036d8:	7293      	strb	r3, [r2, #10]

				break;
 80036da:	e022      	b.n	8003722 <_ZN5Modem8simA767213getNetworkPDPEPc+0x15a>
			}
			case '4': {
				std::strcpy(networkStatpdp, "Unknown");
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	4922      	ldr	r1, [pc, #136]	@ (8003768 <_ZN5Modem8simA767213getNetworkPDPEPc+0x1a0>)
 80036e0:	461a      	mov	r2, r3
 80036e2:	460b      	mov	r3, r1
 80036e4:	cb03      	ldmia	r3!, {r0, r1}
 80036e6:	6010      	str	r0, [r2, #0]
 80036e8:	6051      	str	r1, [r2, #4]

				break;
 80036ea:	e01a      	b.n	8003722 <_ZN5Modem8simA767213getNetworkPDPEPc+0x15a>
			}
			case '5': {
				std::strcpy(networkStatpdp, "Reg-Roaming");
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	4a1f      	ldr	r2, [pc, #124]	@ (800376c <_ZN5Modem8simA767213getNetworkPDPEPc+0x1a4>)
 80036f0:	461c      	mov	r4, r3
 80036f2:	4613      	mov	r3, r2
 80036f4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80036f6:	6020      	str	r0, [r4, #0]
 80036f8:	6061      	str	r1, [r4, #4]
 80036fa:	60a2      	str	r2, [r4, #8]

				break;
 80036fc:	e011      	b.n	8003722 <_ZN5Modem8simA767213getNetworkPDPEPc+0x15a>
			}
			case '6': {
				std::strcpy(networkStatpdp, "Reg-SMS");
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	491b      	ldr	r1, [pc, #108]	@ (8003770 <_ZN5Modem8simA767213getNetworkPDPEPc+0x1a8>)
 8003702:	461a      	mov	r2, r3
 8003704:	460b      	mov	r3, r1
 8003706:	cb03      	ldmia	r3!, {r0, r1}
 8003708:	6010      	str	r0, [r2, #0]
 800370a:	6051      	str	r1, [r2, #4]

				break;
 800370c:	e009      	b.n	8003722 <_ZN5Modem8simA767213getNetworkPDPEPc+0x15a>
			}
			default: {
				std::strcpy(networkStatpdp, "--------");
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	4918      	ldr	r1, [pc, #96]	@ (8003774 <_ZN5Modem8simA767213getNetworkPDPEPc+0x1ac>)
 8003712:	461a      	mov	r2, r3
 8003714:	460b      	mov	r3, r1
 8003716:	cb03      	ldmia	r3!, {r0, r1}
 8003718:	6010      	str	r0, [r2, #0]
 800371a:	6051      	str	r1, [r2, #4]
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	7213      	strb	r3, [r2, #8]

				break;
 8003720:	bf00      	nop
			}
			}
			return;
 8003722:	e012      	b.n	800374a <_ZN5Modem8simA767213getNetworkPDPEPc+0x182>
		} else {
			std::strcpy(networkStatpdp, "--------");
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	4913      	ldr	r1, [pc, #76]	@ (8003774 <_ZN5Modem8simA767213getNetworkPDPEPc+0x1ac>)
 8003728:	461a      	mov	r2, r3
 800372a:	460b      	mov	r3, r1
 800372c:	cb03      	ldmia	r3!, {r0, r1}
 800372e:	6010      	str	r0, [r2, #0]
 8003730:	6051      	str	r1, [r2, #4]
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	7213      	strb	r3, [r2, #8]
 8003736:	e008      	b.n	800374a <_ZN5Modem8simA767213getNetworkPDPEPc+0x182>
		}

	} else {
		std::strcpy(networkStatpdp, "--------");
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	490e      	ldr	r1, [pc, #56]	@ (8003774 <_ZN5Modem8simA767213getNetworkPDPEPc+0x1ac>)
 800373c:	461a      	mov	r2, r3
 800373e:	460b      	mov	r3, r1
 8003740:	cb03      	ldmia	r3!, {r0, r1}
 8003742:	6010      	str	r0, [r2, #0]
 8003744:	6051      	str	r1, [r2, #4]
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	7213      	strb	r3, [r2, #8]
	}

}
 800374a:	3714      	adds	r7, #20
 800374c:	46bd      	mov	sp, r7
 800374e:	bd90      	pop	{r4, r7, pc}
 8003750:	08012350 	.word	0x08012350
 8003754:	08011fe4 	.word	0x08011fe4
 8003758:	08011f90 	.word	0x08011f90
 800375c:	08011f98 	.word	0x08011f98
 8003760:	08011fa4 	.word	0x08011fa4
 8003764:	08011fb0 	.word	0x08011fb0
 8003768:	08011fbc 	.word	0x08011fbc
 800376c:	08011fc4 	.word	0x08011fc4
 8003770:	08011fd0 	.word	0x08011fd0
 8003774:	08011f7c 	.word	0x08011f7c

08003778 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE>:

void simA7672::getPDPstatus(enum pdp_stat *status_pdp) {
 8003778:	b580      	push	{r7, lr}
 800377a:	b08a      	sub	sp, #40	@ 0x28
 800377c:	af04      	add	r7, sp, #16
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]

	status stat;

	char buf[10] = { 0 };
 8003782:	2300      	movs	r3, #0
 8003784:	60fb      	str	r3, [r7, #12]
 8003786:	f107 0310 	add.w	r3, r7, #16
 800378a:	2200      	movs	r2, #0
 800378c:	601a      	str	r2, [r3, #0]
 800378e:	809a      	strh	r2, [r3, #4]

	*status_pdp = pdp_noReply;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	2202      	movs	r2, #2
 8003794:	701a      	strb	r2, [r3, #0]

	PrepRxTx(atcmd_GATCGACT, sizeof(atcmd_GATCGACT) - 1, 1000, _LF, CMD_mode);
 8003796:	2301      	movs	r3, #1
 8003798:	9301      	str	r3, [sp, #4]
 800379a:	230a      	movs	r3, #10
 800379c:	9300      	str	r3, [sp, #0]
 800379e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80037a2:	220b      	movs	r2, #11
 80037a4:	4928      	ldr	r1, [pc, #160]	@ (8003848 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0xd0>)
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 ff96 	bl	80046d8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 80037ac:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80037b0:	2100      	movs	r1, #0
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f001 f8bd 	bl	8004932 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80037b8:	4603      	mov	r3, r0
 80037ba:	75fb      	strb	r3, [r7, #23]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80037bc:	7dfb      	ldrb	r3, [r7, #23]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d111      	bne.n	80037e6 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0x6e>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80037c8:	3308      	adds	r3, #8
 80037ca:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80037d2:	8a92      	ldrh	r2, [r2, #20]
 80037d4:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80037d6:	4618      	mov	r0, r3
 80037d8:	f002 f89a 	bl	8005910 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0x6e>
 80037e2:	2301      	movs	r3, #1
 80037e4:	e000      	b.n	80037e8 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0x70>
 80037e6:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d029      	beq.n	8003840 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0xc8>

		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 80037f2:	3008      	adds	r0, #8
 80037f4:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CGACT:", ':', ',', buf)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037fc:	8a9b      	ldrh	r3, [r3, #20]
 80037fe:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003800:	f107 030c 	add.w	r3, r7, #12
 8003804:	9302      	str	r3, [sp, #8]
 8003806:	232c      	movs	r3, #44	@ 0x2c
 8003808:	9301      	str	r3, [sp, #4]
 800380a:	233a      	movs	r3, #58	@ 0x3a
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	4b0f      	ldr	r3, [pc, #60]	@ (800384c <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0xd4>)
 8003810:	f002 f8a4 	bl	800595c <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 8003814:	4603      	mov	r3, r0
				== checking.sys_ok) {
 8003816:	2b00      	cmp	r3, #0
 8003818:	bf0c      	ite	eq
 800381a:	2301      	moveq	r3, #1
 800381c:	2300      	movne	r3, #0
 800381e:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00d      	beq.n	8003840 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0xc8>
			switch (*buf) {
 8003824:	7b3b      	ldrb	r3, [r7, #12]
 8003826:	2b30      	cmp	r3, #48	@ 0x30
 8003828:	d002      	beq.n	8003830 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0xb8>
 800382a:	2b31      	cmp	r3, #49	@ 0x31
 800382c:	d004      	beq.n	8003838 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0xc0>

		}

	}

}
 800382e:	e007      	b.n	8003840 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0xc8>
				*status_pdp = pdp_deactivated;
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	2200      	movs	r2, #0
 8003834:	701a      	strb	r2, [r3, #0]
				break;
 8003836:	e003      	b.n	8003840 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0xc8>
				*status_pdp = pdp_activate;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	2201      	movs	r2, #1
 800383c:	701a      	strb	r2, [r3, #0]
				break;
 800383e:	bf00      	nop
}
 8003840:	bf00      	nop
 8003842:	3718      	adds	r7, #24
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	0801235c 	.word	0x0801235c
 800384c:	08011fec 	.word	0x08011fec

08003850 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE>:

void simA7672::getUEsystemInfo(enum UE_systemInfo *status_ue) {
 8003850:	b580      	push	{r7, lr}
 8003852:	b08a      	sub	sp, #40	@ 0x28
 8003854:	af04      	add	r7, sp, #16
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]

	status stat;

	char buf[15] = { 0 };
 800385a:	2300      	movs	r3, #0
 800385c:	60bb      	str	r3, [r7, #8]
 800385e:	f107 030c 	add.w	r3, r7, #12
 8003862:	2200      	movs	r2, #0
 8003864:	601a      	str	r2, [r3, #0]
 8003866:	605a      	str	r2, [r3, #4]
 8003868:	f8c3 2007 	str.w	r2, [r3, #7]

	*status_ue = no_service;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	2200      	movs	r2, #0
 8003870:	701a      	strb	r2, [r3, #0]

	PrepRxTx(atcmd_GATCPSI, sizeof(atcmd_GATCPSI) - 1, 1000, _LF, CMD_mode);
 8003872:	2301      	movs	r3, #1
 8003874:	9301      	str	r3, [sp, #4]
 8003876:	230a      	movs	r3, #10
 8003878:	9300      	str	r3, [sp, #0]
 800387a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800387e:	220a      	movs	r2, #10
 8003880:	4945      	ldr	r1, [pc, #276]	@ (8003998 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x148>)
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 ff28 	bl	80046d8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8003888:	f241 3288 	movw	r2, #5000	@ 0x1388
 800388c:	2100      	movs	r1, #0
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f001 f84f 	bl	8004932 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8003894:	4603      	mov	r3, r0
 8003896:	75fb      	strb	r3, [r7, #23]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003898:	7dfb      	ldrb	r3, [r7, #23]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d111      	bne.n	80038c2 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x72>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80038a4:	3308      	adds	r3, #8
 80038a6:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80038ae:	8a92      	ldrh	r2, [r2, #20]
 80038b0:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80038b2:	4618      	mov	r0, r3
 80038b4:	f002 f82c 	bl	8005910 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x72>
 80038be:	2301      	movs	r3, #1
 80038c0:	e000      	b.n	80038c4 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x74>
 80038c2:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d062      	beq.n	800398e <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x13e>

		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 80038ce:	3008      	adds	r0, #8
 80038d0:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CPSI:", ':', ',', buf)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80038d8:	8a9b      	ldrh	r3, [r3, #20]
 80038da:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80038dc:	f107 0308 	add.w	r3, r7, #8
 80038e0:	9302      	str	r3, [sp, #8]
 80038e2:	232c      	movs	r3, #44	@ 0x2c
 80038e4:	9301      	str	r3, [sp, #4]
 80038e6:	233a      	movs	r3, #58	@ 0x3a
 80038e8:	9300      	str	r3, [sp, #0]
 80038ea:	4b2c      	ldr	r3, [pc, #176]	@ (800399c <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x14c>)
 80038ec:	f002 f836 	bl	800595c <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 80038f0:	4603      	mov	r3, r0
				== checking.sys_ok) {
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	bf0c      	ite	eq
 80038f6:	2301      	moveq	r3, #1
 80038f8:	2300      	movne	r3, #0
 80038fa:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d046      	beq.n	800398e <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x13e>
			if (std::strstr(buf, "NO SERVICE")) {
 8003900:	f107 0308 	add.w	r3, r7, #8
 8003904:	4926      	ldr	r1, [pc, #152]	@ (80039a0 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x150>)
 8003906:	4618      	mov	r0, r3
 8003908:	f7fe f900 	bl	8001b0c <_ZSt6strstrPcPKc>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	bf14      	ite	ne
 8003912:	2301      	movne	r3, #1
 8003914:	2300      	moveq	r3, #0
 8003916:	b2db      	uxtb	r3, r3
 8003918:	2b00      	cmp	r3, #0
 800391a:	d003      	beq.n	8003924 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0xd4>
				*status_ue = no_service;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	2200      	movs	r2, #0
 8003920:	701a      	strb	r2, [r3, #0]

		}

	}

}
 8003922:	e034      	b.n	800398e <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x13e>
			} else if (std::strstr(buf, "GSM")) {
 8003924:	f107 0308 	add.w	r3, r7, #8
 8003928:	491e      	ldr	r1, [pc, #120]	@ (80039a4 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x154>)
 800392a:	4618      	mov	r0, r3
 800392c:	f7fe f8ee 	bl	8001b0c <_ZSt6strstrPcPKc>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	bf14      	ite	ne
 8003936:	2301      	movne	r3, #1
 8003938:	2300      	moveq	r3, #0
 800393a:	b2db      	uxtb	r3, r3
 800393c:	2b00      	cmp	r3, #0
 800393e:	d003      	beq.n	8003948 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0xf8>
				*status_ue = gsm;
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	2201      	movs	r2, #1
 8003944:	701a      	strb	r2, [r3, #0]
}
 8003946:	e022      	b.n	800398e <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x13e>
			} else if (std::strstr(buf, "WCDMA")) {
 8003948:	f107 0308 	add.w	r3, r7, #8
 800394c:	4916      	ldr	r1, [pc, #88]	@ (80039a8 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x158>)
 800394e:	4618      	mov	r0, r3
 8003950:	f7fe f8dc 	bl	8001b0c <_ZSt6strstrPcPKc>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	bf14      	ite	ne
 800395a:	2301      	movne	r3, #1
 800395c:	2300      	moveq	r3, #0
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2b00      	cmp	r3, #0
 8003962:	d003      	beq.n	800396c <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x11c>
				*status_ue = wcdma;
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	2202      	movs	r2, #2
 8003968:	701a      	strb	r2, [r3, #0]
}
 800396a:	e010      	b.n	800398e <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x13e>
			} else if (std::strstr(buf, "LTE")) {
 800396c:	f107 0308 	add.w	r3, r7, #8
 8003970:	490e      	ldr	r1, [pc, #56]	@ (80039ac <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x15c>)
 8003972:	4618      	mov	r0, r3
 8003974:	f7fe f8ca 	bl	8001b0c <_ZSt6strstrPcPKc>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	bf14      	ite	ne
 800397e:	2301      	movne	r3, #1
 8003980:	2300      	moveq	r3, #0
 8003982:	b2db      	uxtb	r3, r3
 8003984:	2b00      	cmp	r3, #0
 8003986:	d002      	beq.n	800398e <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x13e>
				*status_ue = lte;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	2203      	movs	r2, #3
 800398c:	701a      	strb	r2, [r3, #0]
}
 800398e:	bf00      	nop
 8003990:	3718      	adds	r7, #24
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	08012368 	.word	0x08012368
 800399c:	08011ff4 	.word	0x08011ff4
 80039a0:	08011ffc 	.word	0x08011ffc
 80039a4:	08012008 	.word	0x08012008
 80039a8:	0801200c 	.word	0x0801200c
 80039ac:	08012014 	.word	0x08012014

080039b0 <_ZN5Modem8simA767210getSignalQEPc>:

void simA7672::getSignalQ(char *quality) {
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b08a      	sub	sp, #40	@ 0x28
 80039b4:	af04      	add	r7, sp, #16
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]

	status stat;

	char buffer[10] = { 0 };
 80039ba:	2300      	movs	r3, #0
 80039bc:	60fb      	str	r3, [r7, #12]
 80039be:	f107 0310 	add.w	r3, r7, #16
 80039c2:	2200      	movs	r2, #0
 80039c4:	601a      	str	r2, [r3, #0]
 80039c6:	809a      	strh	r2, [r3, #4]
	int8_t csq = 0;
 80039c8:	2300      	movs	r3, #0
 80039ca:	75fb      	strb	r3, [r7, #23]
	PrepRxTx(atcmd_ATCSQ, sizeof(atcmd_ATCSQ) - 1, 1000, _LF, CMD_mode);
 80039cc:	2301      	movs	r3, #1
 80039ce:	9301      	str	r3, [sp, #4]
 80039d0:	230a      	movs	r3, #10
 80039d2:	9300      	str	r3, [sp, #0]
 80039d4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80039d8:	2208      	movs	r2, #8
 80039da:	4939      	ldr	r1, [pc, #228]	@ (8003ac0 <_ZN5Modem8simA767210getSignalQEPc+0x110>)
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 fe7b 	bl	80046d8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 80039e2:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80039e6:	2100      	movs	r1, #0
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 ffa2 	bl	8004932 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80039ee:	4603      	mov	r3, r0
 80039f0:	75bb      	strb	r3, [r7, #22]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80039f2:	7dbb      	ldrb	r3, [r7, #22]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d111      	bne.n	8003a1c <_ZN5Modem8simA767210getSignalQEPc+0x6c>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80039fe:	3308      	adds	r3, #8
 8003a00:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003a08:	8a92      	ldrh	r2, [r2, #20]
 8003a0a:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f001 ff7f 	bl	8005910 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d101      	bne.n	8003a1c <_ZN5Modem8simA767210getSignalQEPc+0x6c>
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e000      	b.n	8003a1e <_ZN5Modem8simA767210getSignalQEPc+0x6e>
 8003a1c:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d041      	beq.n	8003aa6 <_ZN5Modem8simA767210getSignalQEPc+0xf6>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8003a28:	3008      	adds	r0, #8
 8003a2a:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CSQ:", ':', ',', buffer)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a32:	8a9b      	ldrh	r3, [r3, #20]
 8003a34:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003a36:	f107 030c 	add.w	r3, r7, #12
 8003a3a:	9302      	str	r3, [sp, #8]
 8003a3c:	232c      	movs	r3, #44	@ 0x2c
 8003a3e:	9301      	str	r3, [sp, #4]
 8003a40:	233a      	movs	r3, #58	@ 0x3a
 8003a42:	9300      	str	r3, [sp, #0]
 8003a44:	4b1f      	ldr	r3, [pc, #124]	@ (8003ac4 <_ZN5Modem8simA767210getSignalQEPc+0x114>)
 8003a46:	f001 ff89 	bl	800595c <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 8003a4a:	4603      	mov	r3, r0
				== checking.sys_ok) {
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	bf0c      	ite	eq
 8003a50:	2301      	moveq	r3, #1
 8003a52:	2300      	movne	r3, #0
 8003a54:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d01b      	beq.n	8003a92 <_ZN5Modem8simA767210getSignalQEPc+0xe2>

			csq = std::atoi(buffer);
 8003a5a:	f107 030c 	add.w	r3, r7, #12
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f00b f928 	bl	800ecb4 <atoi>
 8003a64:	4603      	mov	r3, r0
 8003a66:	75fb      	strb	r3, [r7, #23]
			if (csq >= 99) {
 8003a68:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a6c:	2b62      	cmp	r3, #98	@ 0x62
 8003a6e:	dd02      	ble.n	8003a76 <_ZN5Modem8simA767210getSignalQEPc+0xc6>
				csq = 0;
 8003a70:	2300      	movs	r3, #0
 8003a72:	75fb      	strb	r3, [r7, #23]
 8003a74:	e005      	b.n	8003a82 <_ZN5Modem8simA767210getSignalQEPc+0xd2>

			} else {
				csq = (2 * (csq)) - 113;
 8003a76:	7dfb      	ldrb	r3, [r7, #23]
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	3b71      	subs	r3, #113	@ 0x71
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	75fb      	strb	r3, [r7, #23]
			}

			std::sprintf(quality, "%02d dbm", csq);
 8003a82:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a86:	461a      	mov	r2, r3
 8003a88:	490f      	ldr	r1, [pc, #60]	@ (8003ac8 <_ZN5Modem8simA767210getSignalQEPc+0x118>)
 8003a8a:	6838      	ldr	r0, [r7, #0]
 8003a8c:	f00b feb4 	bl	800f7f8 <siprintf>
 8003a90:	e012      	b.n	8003ab8 <_ZN5Modem8simA767210getSignalQEPc+0x108>

			return;
		} else {
			std::strcpy(quality, "--------");
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	490d      	ldr	r1, [pc, #52]	@ (8003acc <_ZN5Modem8simA767210getSignalQEPc+0x11c>)
 8003a96:	461a      	mov	r2, r3
 8003a98:	460b      	mov	r3, r1
 8003a9a:	cb03      	ldmia	r3!, {r0, r1}
 8003a9c:	6010      	str	r0, [r2, #0]
 8003a9e:	6051      	str	r1, [r2, #4]
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	7213      	strb	r3, [r2, #8]
 8003aa4:	e008      	b.n	8003ab8 <_ZN5Modem8simA767210getSignalQEPc+0x108>
		}

	} else {
		std::strcpy(quality, "--------");
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	4908      	ldr	r1, [pc, #32]	@ (8003acc <_ZN5Modem8simA767210getSignalQEPc+0x11c>)
 8003aaa:	461a      	mov	r2, r3
 8003aac:	460b      	mov	r3, r1
 8003aae:	cb03      	ldmia	r3!, {r0, r1}
 8003ab0:	6010      	str	r0, [r2, #0]
 8003ab2:	6051      	str	r1, [r2, #4]
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	7213      	strb	r3, [r2, #8]
	}

}
 8003ab8:	3718      	adds	r7, #24
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	08012374 	.word	0x08012374
 8003ac4:	08012018 	.word	0x08012018
 8003ac8:	08012020 	.word	0x08012020
 8003acc:	08011f7c 	.word	0x08011f7c

08003ad0 <_ZN5Modem8simA767223getmqttconnectionstatusEPc>:
		/*ToDo*/
	}

}

enum simA7672::mqtt_flags simA7672::getmqttconnectionstatus(char *serverAddr) {
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b0a0      	sub	sp, #128	@ 0x80
 8003ad4:	af04      	add	r7, sp, #16
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
	status stat = simA7672_ERR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
	mqtt_flags statMqtt = mqtt_serverDisconnected;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

	char buf[100] = { 0 };
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	60bb      	str	r3, [r7, #8]
 8003aea:	f107 030c 	add.w	r3, r7, #12
 8003aee:	2260      	movs	r2, #96	@ 0x60
 8003af0:	2100      	movs	r1, #0
 8003af2:	4618      	mov	r0, r3
 8003af4:	f00b fee3 	bl	800f8be <memset>

	PrepRxTx(atcmd_GATCMQTTCONNECT, sizeof(atcmd_GATCMQTTCONNECT) - 1, 1000,
 8003af8:	2301      	movs	r3, #1
 8003afa:	9301      	str	r3, [sp, #4]
 8003afc:	230a      	movs	r3, #10
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b04:	2212      	movs	r2, #18
 8003b06:	492c      	ldr	r1, [pc, #176]	@ (8003bb8 <_ZN5Modem8simA767223getmqttconnectionstatusEPc+0xe8>)
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f000 fde5 	bl	80046d8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
			_LF, CMD_mode);
	stat = check_eventTimeout(rx_evt, 8000);
 8003b0e:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8003b12:	2100      	movs	r1, #0
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 ff0c 	bl	8004932 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003b20:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d111      	bne.n	8003b4c <_ZN5Modem8simA767223getmqttconnectionstatusEPc+0x7c>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003b2e:	3308      	adds	r3, #8
 8003b30:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003b38:	8a92      	ldrh	r2, [r2, #20]
 8003b3a:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f001 fee7 	bl	8005910 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d101      	bne.n	8003b4c <_ZN5Modem8simA767223getmqttconnectionstatusEPc+0x7c>
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e000      	b.n	8003b4e <_ZN5Modem8simA767223getmqttconnectionstatusEPc+0x7e>
 8003b4c:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d02c      	beq.n	8003bac <_ZN5Modem8simA767223getmqttconnectionstatusEPc+0xdc>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8003b58:	3008      	adds	r0, #8
 8003b5a:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CMQTTCONNECT:", '"', '"', buf)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b62:	8a9b      	ldrh	r3, [r3, #20]
 8003b64:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003b66:	f107 0308 	add.w	r3, r7, #8
 8003b6a:	9302      	str	r3, [sp, #8]
 8003b6c:	2322      	movs	r3, #34	@ 0x22
 8003b6e:	9301      	str	r3, [sp, #4]
 8003b70:	2322      	movs	r3, #34	@ 0x22
 8003b72:	9300      	str	r3, [sp, #0]
 8003b74:	4b11      	ldr	r3, [pc, #68]	@ (8003bbc <_ZN5Modem8simA767223getmqttconnectionstatusEPc+0xec>)
 8003b76:	f001 fef1 	bl	800595c <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 8003b7a:	4603      	mov	r3, r0
				== checking.sys_ok) {
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	bf0c      	ite	eq
 8003b80:	2301      	moveq	r3, #1
 8003b82:	2300      	movne	r3, #0
 8003b84:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d010      	beq.n	8003bac <_ZN5Modem8simA767223getmqttconnectionstatusEPc+0xdc>

			if (std::strstr(serverAddr, const_cast<const char*>(buf))) {
 8003b8a:	f107 0308 	add.w	r3, r7, #8
 8003b8e:	4619      	mov	r1, r3
 8003b90:	6838      	ldr	r0, [r7, #0]
 8003b92:	f7fd ffbb 	bl	8001b0c <_ZSt6strstrPcPKc>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	bf14      	ite	ne
 8003b9c:	2301      	movne	r3, #1
 8003b9e:	2300      	moveq	r3, #0
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d002      	beq.n	8003bac <_ZN5Modem8simA767223getmqttconnectionstatusEPc+0xdc>
				statMqtt = mqtt_serverConnected;
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

		}

	}

	return statMqtt;
 8003bac:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3770      	adds	r7, #112	@ 0x70
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	080123b0 	.word	0x080123b0
 8003bbc:	08012048 	.word	0x08012048

08003bc0 <_ZN5Modem8simA76729mqttStartEPh>:

enum simA7672::mqtt_flags simA7672::mqttStart(uint8_t *mqtt_index) {
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b08a      	sub	sp, #40	@ 0x28
 8003bc4:	af04      	add	r7, sp, #16
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]

	status stat = simA7672_ERR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	75bb      	strb	r3, [r7, #22]
	mqtt_flags statMqtt = mqtt_ERR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	75fb      	strb	r3, [r7, #23]
	char buf[10] = { 0 };
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	60fb      	str	r3, [r7, #12]
 8003bd6:	f107 0310 	add.w	r3, r7, #16
 8003bda:	2200      	movs	r2, #0
 8003bdc:	601a      	str	r2, [r3, #0]
 8003bde:	809a      	strh	r2, [r3, #4]

	PrepRxTx(atmcd_ATCMQTTSTART, sizeof(atmcd_ATCMQTTSTART) - 1, 1000, '+', 2,_LF,
 8003be0:	2303      	movs	r3, #3
 8003be2:	9303      	str	r3, [sp, #12]
 8003be4:	230a      	movs	r3, #10
 8003be6:	9302      	str	r3, [sp, #8]
 8003be8:	2302      	movs	r3, #2
 8003bea:	9301      	str	r3, [sp, #4]
 8003bec:	232b      	movs	r3, #43	@ 0x2b
 8003bee:	9300      	str	r3, [sp, #0]
 8003bf0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003bf4:	220f      	movs	r2, #15
 8003bf6:	4928      	ldr	r1, [pc, #160]	@ (8003c98 <_ZN5Modem8simA76729mqttStartEPh+0xd8>)
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 fdcf 	bl	800479c <_ZN5Modem8simA76728PrepRxTxEPKhtthhhNS0_6RxmodeE>
			Notification_mode);
	stat = check_eventTimeout(rx_evt, 10000);
 8003bfe:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003c02:	2100      	movs	r1, #0
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 fe94 	bl	8004932 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	75bb      	strb	r3, [r7, #22]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003c0e:	7dbb      	ldrb	r3, [r7, #22]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d111      	bne.n	8003c38 <_ZN5Modem8simA76729mqttStartEPh+0x78>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003c1a:	3308      	adds	r3, #8
 8003c1c:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003c24:	8a92      	ldrh	r2, [r2, #20]
 8003c26:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f001 fe71 	bl	8005910 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d101      	bne.n	8003c38 <_ZN5Modem8simA76729mqttStartEPh+0x78>
 8003c34:	2301      	movs	r3, #1
 8003c36:	e000      	b.n	8003c3a <_ZN5Modem8simA76729mqttStartEPh+0x7a>
 8003c38:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d026      	beq.n	8003c8c <_ZN5Modem8simA76729mqttStartEPh+0xcc>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8003c44:	3008      	adds	r0, #8
 8003c46:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CMQTTSTART:", ':', _LF, buf)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c4e:	8a9b      	ldrh	r3, [r3, #20]
 8003c50:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003c52:	f107 030c 	add.w	r3, r7, #12
 8003c56:	9302      	str	r3, [sp, #8]
 8003c58:	230a      	movs	r3, #10
 8003c5a:	9301      	str	r3, [sp, #4]
 8003c5c:	233a      	movs	r3, #58	@ 0x3a
 8003c5e:	9300      	str	r3, [sp, #0]
 8003c60:	4b0e      	ldr	r3, [pc, #56]	@ (8003c9c <_ZN5Modem8simA76729mqttStartEPh+0xdc>)
 8003c62:	f001 fe7b 	bl	800595c <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 8003c66:	4603      	mov	r3, r0
				== checking.sys_ok) {
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	bf0c      	ite	eq
 8003c6c:	2301      	moveq	r3, #1
 8003c6e:	2300      	movne	r3, #0
 8003c70:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00a      	beq.n	8003c8c <_ZN5Modem8simA76729mqttStartEPh+0xcc>

			statMqtt = mqtt_OK;
 8003c76:	2300      	movs	r3, #0
 8003c78:	75fb      	strb	r3, [r7, #23]

			*mqtt_index = std::atoi(buf);
 8003c7a:	f107 030c 	add.w	r3, r7, #12
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f00b f818 	bl	800ecb4 <atoi>
 8003c84:	4603      	mov	r3, r0
 8003c86:	b2da      	uxtb	r2, r3
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	701a      	strb	r2, [r3, #0]

		}

	}

	return statMqtt;
 8003c8c:	7dfb      	ldrb	r3, [r7, #23]

}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3718      	adds	r7, #24
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	08012390 	.word	0x08012390
 8003c9c:	08012058 	.word	0x08012058

08003ca0 <_ZN5Modem8simA76728mqttStopEv>:

enum simA7672::mqtt_flags simA7672::mqttStop() {
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b08a      	sub	sp, #40	@ 0x28
 8003ca4:	af04      	add	r7, sp, #16
 8003ca6:	6078      	str	r0, [r7, #4]
	status stat = simA7672_ERR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	75bb      	strb	r3, [r7, #22]
	mqtt_flags statMqtt = mqtt_ERR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	75fb      	strb	r3, [r7, #23]
	char buf[10] = { 0 };
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	60fb      	str	r3, [r7, #12]
 8003cb4:	f107 0310 	add.w	r3, r7, #16
 8003cb8:	2200      	movs	r2, #0
 8003cba:	601a      	str	r2, [r3, #0]
 8003cbc:	809a      	strh	r2, [r3, #4]
	PrepRxTx(atcmd_ATCMQTTSTOP, sizeof(atcmd_ATCMQTTSTOP) - 1, 1000, '+',2, _LF,
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	9303      	str	r3, [sp, #12]
 8003cc2:	230a      	movs	r3, #10
 8003cc4:	9302      	str	r3, [sp, #8]
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	9301      	str	r3, [sp, #4]
 8003cca:	232b      	movs	r3, #43	@ 0x2b
 8003ccc:	9300      	str	r3, [sp, #0]
 8003cce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003cd2:	220e      	movs	r2, #14
 8003cd4:	4923      	ldr	r1, [pc, #140]	@ (8003d64 <_ZN5Modem8simA76728mqttStopEv+0xc4>)
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 fd60 	bl	800479c <_ZN5Modem8simA76728PrepRxTxEPKhtthhhNS0_6RxmodeE>
			Notification_mode);
	stat = check_eventTimeout(rx_evt, 10000);
 8003cdc:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 fe25 	bl	8004932 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	75bb      	strb	r3, [r7, #22]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003cec:	7dbb      	ldrb	r3, [r7, #22]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d111      	bne.n	8003d16 <_ZN5Modem8simA76728mqttStopEv+0x76>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003cf8:	3308      	adds	r3, #8
 8003cfa:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003d02:	8a92      	ldrh	r2, [r2, #20]
 8003d04:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003d06:	4618      	mov	r0, r3
 8003d08:	f001 fe02 	bl	8005910 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <_ZN5Modem8simA76728mqttStopEv+0x76>
 8003d12:	2301      	movs	r3, #1
 8003d14:	e000      	b.n	8003d18 <_ZN5Modem8simA76728mqttStopEv+0x78>
 8003d16:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d01d      	beq.n	8003d58 <_ZN5Modem8simA76728mqttStopEv+0xb8>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8003d22:	3008      	adds	r0, #8
 8003d24:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CMQTTSTOP:", ':', _LF, buf)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d2c:	8a9b      	ldrh	r3, [r3, #20]
 8003d2e:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003d30:	f107 030c 	add.w	r3, r7, #12
 8003d34:	9302      	str	r3, [sp, #8]
 8003d36:	230a      	movs	r3, #10
 8003d38:	9301      	str	r3, [sp, #4]
 8003d3a:	233a      	movs	r3, #58	@ 0x3a
 8003d3c:	9300      	str	r3, [sp, #0]
 8003d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8003d68 <_ZN5Modem8simA76728mqttStopEv+0xc8>)
 8003d40:	f001 fe0c 	bl	800595c <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 8003d44:	4603      	mov	r3, r0
				== checking.sys_ok) {
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	bf0c      	ite	eq
 8003d4a:	2301      	moveq	r3, #1
 8003d4c:	2300      	movne	r3, #0
 8003d4e:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d001      	beq.n	8003d58 <_ZN5Modem8simA76728mqttStopEv+0xb8>

			statMqtt = mqtt_OK;
 8003d54:	2300      	movs	r3, #0
 8003d56:	75fb      	strb	r3, [r7, #23]

		}

	}

	return statMqtt;
 8003d58:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3718      	adds	r7, #24
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	080123a0 	.word	0x080123a0
 8003d68:	08012068 	.word	0x08012068

08003d6c <_ZN5Modem8simA767213mqttSetClientEhPch>:

enum simA7672::mqtt_flags simA7672::mqttSetClient(uint8_t mqtt_index,
		char *client,uint8_t activate_ssl) {
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b09c      	sub	sp, #112	@ 0x70
 8003d70:	af02      	add	r7, sp, #8
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	607a      	str	r2, [r7, #4]
 8003d76:	461a      	mov	r2, r3
 8003d78:	460b      	mov	r3, r1
 8003d7a:	72fb      	strb	r3, [r7, #11]
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	72bb      	strb	r3, [r7, #10]
	status stat = simA7672_ERR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
	mqtt_flags statMqtt = mqtt_ERR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	char buf[80] = { 0 };
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	617b      	str	r3, [r7, #20]
 8003d90:	f107 0318 	add.w	r3, r7, #24
 8003d94:	224c      	movs	r2, #76	@ 0x4c
 8003d96:	2100      	movs	r1, #0
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f00b fd90 	bl	800f8be <memset>

	std::sprintf(buf, "AT+CMQTTACCQ=%d,\"%s\",%d\r\n", mqtt_index, client,activate_ssl);
 8003d9e:	7afa      	ldrb	r2, [r7, #11]
 8003da0:	7abb      	ldrb	r3, [r7, #10]
 8003da2:	f107 0014 	add.w	r0, r7, #20
 8003da6:	9300      	str	r3, [sp, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4920      	ldr	r1, [pc, #128]	@ (8003e2c <_ZN5Modem8simA767213mqttSetClientEhPch+0xc0>)
 8003dac:	f00b fd24 	bl	800f7f8 <siprintf>
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
			std::strlen(const_cast<const char*>(buf)), 1000, _LF, CMD_mode);
 8003db0:	f107 0314 	add.w	r3, r7, #20
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7fc fa5b 	bl	8000270 <strlen>
 8003dba:	4603      	mov	r3, r0
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	f107 0114 	add.w	r1, r7, #20
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	9301      	str	r3, [sp, #4]
 8003dc6:	230a      	movs	r3, #10
 8003dc8:	9300      	str	r3, [sp, #0]
 8003dca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003dce:	68f8      	ldr	r0, [r7, #12]
 8003dd0:	f000 fc82 	bl	80046d8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 8000);
 8003dd4:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8003dd8:	2100      	movs	r1, #0
 8003dda:	68f8      	ldr	r0, [r7, #12]
 8003ddc:	f000 fda9 	bl	8004932 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8003de0:	4603      	mov	r3, r0
 8003de2:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003de6:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d111      	bne.n	8003e12 <_ZN5Modem8simA767213mqttSetClientEhPch+0xa6>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003df4:	3308      	adds	r3, #8
 8003df6:	68f9      	ldr	r1, [r7, #12]
					Rx_info.Rxcount) == checking.sys_ok) {
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003dfe:	8a92      	ldrh	r2, [r2, #20]
 8003e00:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003e02:	4618      	mov	r0, r3
 8003e04:	f001 fd84 	bl	8005910 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <_ZN5Modem8simA767213mqttSetClientEhPch+0xa6>
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e000      	b.n	8003e14 <_ZN5Modem8simA767213mqttSetClientEhPch+0xa8>
 8003e12:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d002      	beq.n	8003e1e <_ZN5Modem8simA767213mqttSetClientEhPch+0xb2>

		statMqtt = mqtt_OK;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

	}

	return statMqtt;
 8003e1e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3768      	adds	r7, #104	@ 0x68
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	08012074 	.word	0x08012074

08003e30 <_ZN5Modem8simA767217mqttReleaseClientEh>:

enum simA7672::mqtt_flags simA7672::mqttReleaseClient(uint8_t mqtt_index) {
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b09a      	sub	sp, #104	@ 0x68
 8003e34:	af02      	add	r7, sp, #8
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	460b      	mov	r3, r1
 8003e3a:	70fb      	strb	r3, [r7, #3]
	status stat = simA7672_ERR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	mqtt_flags statMqtt = mqtt_ERR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

	char buf[80] = { 0 };
 8003e48:	2300      	movs	r3, #0
 8003e4a:	60fb      	str	r3, [r7, #12]
 8003e4c:	f107 0310 	add.w	r3, r7, #16
 8003e50:	224c      	movs	r2, #76	@ 0x4c
 8003e52:	2100      	movs	r1, #0
 8003e54:	4618      	mov	r0, r3
 8003e56:	f00b fd32 	bl	800f8be <memset>

	std::sprintf(buf, "AT+CMQTTREL=%d\r\n", mqtt_index);
 8003e5a:	78fa      	ldrb	r2, [r7, #3]
 8003e5c:	f107 030c 	add.w	r3, r7, #12
 8003e60:	4920      	ldr	r1, [pc, #128]	@ (8003ee4 <_ZN5Modem8simA767217mqttReleaseClientEh+0xb4>)
 8003e62:	4618      	mov	r0, r3
 8003e64:	f00b fcc8 	bl	800f7f8 <siprintf>
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
			std::strlen(const_cast<const char*>(buf)), 1000, _LF, CMD_mode);
 8003e68:	f107 030c 	add.w	r3, r7, #12
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7fc f9ff 	bl	8000270 <strlen>
 8003e72:	4603      	mov	r3, r0
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	f107 010c 	add.w	r1, r7, #12
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	9301      	str	r3, [sp, #4]
 8003e7e:	230a      	movs	r3, #10
 8003e80:	9300      	str	r3, [sp, #0]
 8003e82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 fc26 	bl	80046d8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 8000);
 8003e8c:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8003e90:	2100      	movs	r1, #0
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 fd4d 	bl	8004932 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003e9e:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d111      	bne.n	8003eca <_ZN5Modem8simA767217mqttReleaseClientEh+0x9a>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003eac:	3308      	adds	r3, #8
 8003eae:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003eb6:	8a92      	ldrh	r2, [r2, #20]
 8003eb8:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f001 fd28 	bl	8005910 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <_ZN5Modem8simA767217mqttReleaseClientEh+0x9a>
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e000      	b.n	8003ecc <_ZN5Modem8simA767217mqttReleaseClientEh+0x9c>
 8003eca:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d002      	beq.n	8003ed6 <_ZN5Modem8simA767217mqttReleaseClientEh+0xa6>
		statMqtt = mqtt_OK;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

	}

	return statMqtt;
 8003ed6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3760      	adds	r7, #96	@ 0x60
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	08012090 	.word	0x08012090

08003ee8 <_ZN5Modem8simA767217mqttConnectServerEhPc>:

enum simA7672::mqtt_flags simA7672::mqttConnectServer(uint8_t mqtt_index,
		char *url) {
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b0b0      	sub	sp, #192	@ 0xc0
 8003eec:	af04      	add	r7, sp, #16
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	607a      	str	r2, [r7, #4]
 8003ef4:	72fb      	strb	r3, [r7, #11]

	status stat = simA7672_ERR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
	mqtt_flags statMqtt = mqtt_ERR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
	char buf[150] = { 0 };
 8003f02:	2300      	movs	r3, #0
 8003f04:	61bb      	str	r3, [r7, #24]
 8003f06:	f107 031c 	add.w	r3, r7, #28
 8003f0a:	2292      	movs	r2, #146	@ 0x92
 8003f0c:	2100      	movs	r1, #0
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f00b fcd5 	bl	800f8be <memset>
	char recv_buf[5] = { 0 };
 8003f14:	2300      	movs	r3, #0
 8003f16:	613b      	str	r3, [r7, #16]
 8003f18:	2300      	movs	r3, #0
 8003f1a:	753b      	strb	r3, [r7, #20]

	std::sprintf(buf, "AT+CMQTTCONNECT=%d,\"%s\",60,1\r\n", mqtt_index, url);
 8003f1c:	7afa      	ldrb	r2, [r7, #11]
 8003f1e:	f107 0018 	add.w	r0, r7, #24
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	492c      	ldr	r1, [pc, #176]	@ (8003fd8 <_ZN5Modem8simA767217mqttConnectServerEhPc+0xf0>)
 8003f26:	f00b fc67 	bl	800f7f8 <siprintf>
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
			std::strlen(const_cast<const char*>(buf)), 1000, '+',2, _LF,
 8003f2a:	f107 0318 	add.w	r3, r7, #24
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7fc f99e 	bl	8000270 <strlen>
 8003f34:	4603      	mov	r3, r0
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	f107 0118 	add.w	r1, r7, #24
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	9303      	str	r3, [sp, #12]
 8003f40:	230a      	movs	r3, #10
 8003f42:	9302      	str	r3, [sp, #8]
 8003f44:	2302      	movs	r3, #2
 8003f46:	9301      	str	r3, [sp, #4]
 8003f48:	232b      	movs	r3, #43	@ 0x2b
 8003f4a:	9300      	str	r3, [sp, #0]
 8003f4c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	f000 fc23 	bl	800479c <_ZN5Modem8simA76728PrepRxTxEPKhtthhhNS0_6RxmodeE>
			Notification_mode);
	stat = check_eventTimeout(rx_evt, 30000); //more delay as this commands take sometimes to generate notification
 8003f56:	f247 5230 	movw	r2, #30000	@ 0x7530
 8003f5a:	2100      	movs	r1, #0
 8003f5c:	68f8      	ldr	r0, [r7, #12]
 8003f5e:	f000 fce8 	bl	8004932 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8003f62:	4603      	mov	r3, r0
 8003f64:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae

	if (stat == simA7672_OK) {
 8003f68:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d12c      	bne.n	8003fca <_ZN5Modem8simA767217mqttConnectServerEhPc+0xe2>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8003f76:	3008      	adds	r0, #8
 8003f78:	68f9      	ldr	r1, [r7, #12]
				Rx_info.Rxcount, (char*) "+CMQTTCONNECT:", ',', _LF, recv_buf)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f80:	8a9b      	ldrh	r3, [r3, #20]
 8003f82:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003f84:	f107 0310 	add.w	r3, r7, #16
 8003f88:	9302      	str	r3, [sp, #8]
 8003f8a:	230a      	movs	r3, #10
 8003f8c:	9301      	str	r3, [sp, #4]
 8003f8e:	232c      	movs	r3, #44	@ 0x2c
 8003f90:	9300      	str	r3, [sp, #0]
 8003f92:	4b12      	ldr	r3, [pc, #72]	@ (8003fdc <_ZN5Modem8simA767217mqttConnectServerEhPc+0xf4>)
 8003f94:	f001 fce2 	bl	800595c <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 8003f98:	4603      	mov	r3, r0
				== checking.sys_ok) {
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	bf0c      	ite	eq
 8003f9e:	2301      	moveq	r3, #1
 8003fa0:	2300      	movne	r3, #0
 8003fa2:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d010      	beq.n	8003fca <_ZN5Modem8simA767217mqttConnectServerEhPc+0xe2>

			if (std::strstr(recv_buf, "0")) {
 8003fa8:	f107 0310 	add.w	r3, r7, #16
 8003fac:	490c      	ldr	r1, [pc, #48]	@ (8003fe0 <_ZN5Modem8simA767217mqttConnectServerEhPc+0xf8>)
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7fd fdac 	bl	8001b0c <_ZSt6strstrPcPKc>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	bf14      	ite	ne
 8003fba:	2301      	movne	r3, #1
 8003fbc:	2300      	moveq	r3, #0
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d002      	beq.n	8003fca <_ZN5Modem8simA767217mqttConnectServerEhPc+0xe2>
				statMqtt = mqtt_serverConnected;
 8003fc4:	2302      	movs	r3, #2
 8003fc6:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf

		}

	}

	return statMqtt;
 8003fca:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	37b0      	adds	r7, #176	@ 0xb0
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	080120a4 	.word	0x080120a4
 8003fdc:	08012048 	.word	0x08012048
 8003fe0:	080120c4 	.word	0x080120c4

08003fe4 <_ZN5Modem8simA767220mqttDisconnectServerEh>:

enum simA7672::mqtt_flags simA7672::mqttDisconnectServer(uint8_t mqtt_index) {
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b0ae      	sub	sp, #184	@ 0xb8
 8003fe8:	af04      	add	r7, sp, #16
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	460b      	mov	r3, r1
 8003fee:	70fb      	strb	r3, [r7, #3]

	status stat = simA7672_ERR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
	mqtt_flags statMqtt = mqtt_ERR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	char buf[150] = { 0 };
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	613b      	str	r3, [r7, #16]
 8004000:	f107 0314 	add.w	r3, r7, #20
 8004004:	2292      	movs	r2, #146	@ 0x92
 8004006:	2100      	movs	r1, #0
 8004008:	4618      	mov	r0, r3
 800400a:	f00b fc58 	bl	800f8be <memset>
	char recv_buf[5] = { 0 };
 800400e:	2300      	movs	r3, #0
 8004010:	60bb      	str	r3, [r7, #8]
 8004012:	2300      	movs	r3, #0
 8004014:	733b      	strb	r3, [r7, #12]

	std::sprintf(buf, "AT+CMQTTDISC=%d,120\r\n", mqtt_index);
 8004016:	78fa      	ldrb	r2, [r7, #3]
 8004018:	f107 0310 	add.w	r3, r7, #16
 800401c:	492c      	ldr	r1, [pc, #176]	@ (80040d0 <_ZN5Modem8simA767220mqttDisconnectServerEh+0xec>)
 800401e:	4618      	mov	r0, r3
 8004020:	f00b fbea 	bl	800f7f8 <siprintf>
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
			std::strlen(const_cast<const char*>(buf)), 1000, '+',2, _LF,
 8004024:	f107 0310 	add.w	r3, r7, #16
 8004028:	4618      	mov	r0, r3
 800402a:	f7fc f921 	bl	8000270 <strlen>
 800402e:	4603      	mov	r3, r0
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
 8004030:	b29a      	uxth	r2, r3
 8004032:	f107 0110 	add.w	r1, r7, #16
 8004036:	2303      	movs	r3, #3
 8004038:	9303      	str	r3, [sp, #12]
 800403a:	230a      	movs	r3, #10
 800403c:	9302      	str	r3, [sp, #8]
 800403e:	2302      	movs	r3, #2
 8004040:	9301      	str	r3, [sp, #4]
 8004042:	232b      	movs	r3, #43	@ 0x2b
 8004044:	9300      	str	r3, [sp, #0]
 8004046:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 fba6 	bl	800479c <_ZN5Modem8simA76728PrepRxTxEPKhtthhhNS0_6RxmodeE>
			Notification_mode);
	stat = check_eventTimeout(rx_evt, 10000);
 8004050:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004054:	2100      	movs	r1, #0
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 fc6b 	bl	8004932 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 800405c:	4603      	mov	r3, r0
 800405e:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6

	if (stat == simA7672_OK) {
 8004062:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 8004066:	2b00      	cmp	r3, #0
 8004068:	d12c      	bne.n	80040c4 <_ZN5Modem8simA767220mqttDisconnectServerEh+0xe0>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8004070:	3008      	adds	r0, #8
 8004072:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CMQTTDISC:", ',', _LF, recv_buf)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800407a:	8a9b      	ldrh	r3, [r3, #20]
 800407c:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 800407e:	f107 0308 	add.w	r3, r7, #8
 8004082:	9302      	str	r3, [sp, #8]
 8004084:	230a      	movs	r3, #10
 8004086:	9301      	str	r3, [sp, #4]
 8004088:	232c      	movs	r3, #44	@ 0x2c
 800408a:	9300      	str	r3, [sp, #0]
 800408c:	4b11      	ldr	r3, [pc, #68]	@ (80040d4 <_ZN5Modem8simA767220mqttDisconnectServerEh+0xf0>)
 800408e:	f001 fc65 	bl	800595c <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 8004092:	4603      	mov	r3, r0
				== checking.sys_ok) {
 8004094:	2b00      	cmp	r3, #0
 8004096:	bf0c      	ite	eq
 8004098:	2301      	moveq	r3, #1
 800409a:	2300      	movne	r3, #0
 800409c:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d010      	beq.n	80040c4 <_ZN5Modem8simA767220mqttDisconnectServerEh+0xe0>

			if (std::strstr(recv_buf, "0")) {
 80040a2:	f107 0308 	add.w	r3, r7, #8
 80040a6:	490c      	ldr	r1, [pc, #48]	@ (80040d8 <_ZN5Modem8simA767220mqttDisconnectServerEh+0xf4>)
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7fd fd2f 	bl	8001b0c <_ZSt6strstrPcPKc>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	bf14      	ite	ne
 80040b4:	2301      	movne	r3, #1
 80040b6:	2300      	moveq	r3, #0
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d002      	beq.n	80040c4 <_ZN5Modem8simA767220mqttDisconnectServerEh+0xe0>
				statMqtt = mqtt_serverDisconnected;
 80040be:	2303      	movs	r3, #3
 80040c0:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

		}

	}

	return statMqtt;
 80040c4:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7

}
 80040c8:	4618      	mov	r0, r3
 80040ca:	37a8      	adds	r7, #168	@ 0xa8
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	080120c8 	.word	0x080120c8
 80040d4:	080120e0 	.word	0x080120e0
 80040d8:	080120c4 	.word	0x080120c4

080040dc <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t>:

	return statMqtt;

}
enum simA7672::mqtt_flags simA7672::mqttsubTopicAndRead(uint8_t mqtt_index,
		char *subTopic, char *Message,uint16_t msgbufferSize) {
 80040dc:	b590      	push	{r4, r7, lr}
 80040de:	b0af      	sub	sp, #188	@ 0xbc
 80040e0:	af04      	add	r7, sp, #16
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	607a      	str	r2, [r7, #4]
 80040e6:	603b      	str	r3, [r7, #0]
 80040e8:	460b      	mov	r3, r1
 80040ea:	72fb      	strb	r3, [r7, #11]
	status stat = simA7672_ERR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
	mqtt_flags statMqtt = mqtt_ERR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

	char buf[150] = { 0 };
 80040f8:	2300      	movs	r3, #0
 80040fa:	613b      	str	r3, [r7, #16]
 80040fc:	f107 0314 	add.w	r3, r7, #20
 8004100:	2292      	movs	r2, #146	@ 0x92
 8004102:	2100      	movs	r1, #0
 8004104:	4618      	mov	r0, r3
 8004106:	f00b fbda 	bl	800f8be <memset>


	std::sprintf(buf, "AT+CMQTTSUB=%d,%d,1\r\n", mqtt_index,
 800410a:	7afc      	ldrb	r4, [r7, #11]
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f7fc f8af 	bl	8000270 <strlen>
 8004112:	4603      	mov	r3, r0
 8004114:	f107 0010 	add.w	r0, r7, #16
 8004118:	4622      	mov	r2, r4
 800411a:	494b      	ldr	r1, [pc, #300]	@ (8004248 <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x16c>)
 800411c:	f00b fb6c 	bl	800f7f8 <siprintf>
			std::strlen(const_cast<const char*>(subTopic)));
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
			std::strlen(const_cast<const char*>(buf)), 1000, '>', MSG_mode);
 8004120:	f107 0310 	add.w	r3, r7, #16
 8004124:	4618      	mov	r0, r3
 8004126:	f7fc f8a3 	bl	8000270 <strlen>
 800412a:	4603      	mov	r3, r0
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
 800412c:	b29a      	uxth	r2, r3
 800412e:	f107 0110 	add.w	r1, r7, #16
 8004132:	2302      	movs	r3, #2
 8004134:	9301      	str	r3, [sp, #4]
 8004136:	233e      	movs	r3, #62	@ 0x3e
 8004138:	9300      	str	r3, [sp, #0]
 800413a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800413e:	68f8      	ldr	r0, [r7, #12]
 8004140:	f000 faca 	bl	80046d8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 1000);
 8004144:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004148:	2100      	movs	r1, #0
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	f000 fbf1 	bl	8004932 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8004150:	4603      	mov	r3, r0
 8004152:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6

	//Rx_info.reset_timeout =1;
	if (stat == simA7672_OK) {
 8004156:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 800415a:	2b00      	cmp	r3, #0
 800415c:	d16e      	bne.n	800423c <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x160>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8004164:	3008      	adds	r0, #8
 8004166:	68f9      	ldr	r1, [r7, #12]
				Rx_info.Rxcount, (char*) ">", ',', _LF, nullptr)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800416e:	8a9b      	ldrh	r3, [r3, #20]
 8004170:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8004172:	2300      	movs	r3, #0
 8004174:	9302      	str	r3, [sp, #8]
 8004176:	230a      	movs	r3, #10
 8004178:	9301      	str	r3, [sp, #4]
 800417a:	232c      	movs	r3, #44	@ 0x2c
 800417c:	9300      	str	r3, [sp, #0]
 800417e:	4b33      	ldr	r3, [pc, #204]	@ (800424c <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x170>)
 8004180:	f001 fbec 	bl	800595c <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 8004184:	4603      	mov	r3, r0
				== checking.sys_ok) {
 8004186:	2b00      	cmp	r3, #0
 8004188:	bf0c      	ite	eq
 800418a:	2301      	moveq	r3, #1
 800418c:	2300      	movne	r3, #0
 800418e:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8004190:	2b00      	cmp	r3, #0
 8004192:	d053      	beq.n	800423c <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x160>

			PrepRxTx(reinterpret_cast<const uint8_t*>(subTopic),
					std::strlen(const_cast<const char*>(subTopic)), 1000,'+' ,5,_LF,
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f7fc f86b 	bl	8000270 <strlen>
 800419a:	4603      	mov	r3, r0
			PrepRxTx(reinterpret_cast<const uint8_t*>(subTopic),
 800419c:	b29a      	uxth	r2, r3
 800419e:	2303      	movs	r3, #3
 80041a0:	9303      	str	r3, [sp, #12]
 80041a2:	230a      	movs	r3, #10
 80041a4:	9302      	str	r3, [sp, #8]
 80041a6:	2305      	movs	r3, #5
 80041a8:	9301      	str	r3, [sp, #4]
 80041aa:	232b      	movs	r3, #43	@ 0x2b
 80041ac:	9300      	str	r3, [sp, #0]
 80041ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80041b2:	6879      	ldr	r1, [r7, #4]
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f000 faf1 	bl	800479c <_ZN5Modem8simA76728PrepRxTxEPKhtthhhNS0_6RxmodeE>
					Notification_mode);
			stat = check_eventTimeout(rx_evt,1000);
 80041ba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80041be:	2100      	movs	r1, #0
 80041c0:	68f8      	ldr	r0, [r7, #12]
 80041c2:	f000 fbb6 	bl	8004932 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80041c6:	4603      	mov	r3, r0
 80041c8:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6

			if (stat == simA7672_OK
					&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80041cc:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d111      	bne.n	80041f8 <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x11c>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80041da:	3308      	adds	r3, #8
 80041dc:	68f9      	ldr	r1, [r7, #12]
							Rx_info.Rxcount) == checking.sys_ok) {
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80041e4:	8a92      	ldrh	r2, [r2, #20]
 80041e6:	b292      	uxth	r2, r2
					&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80041e8:	4618      	mov	r0, r3
 80041ea:	f001 fb91 	bl	8005910 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d101      	bne.n	80041f8 <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x11c>
 80041f4:	2301      	movs	r3, #1
 80041f6:	e000      	b.n	80041fa <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x11e>
 80041f8:	2300      	movs	r3, #0
			if (stat == simA7672_OK
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d01e      	beq.n	800423c <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x160>

				if(checking.extractData((const char*) Rxbuffer, "+CMQTTRXPAYLOAD:", '\n', '\r', Message, msgbufferSize) == checking.sys_ok)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8004204:	3008      	adds	r0, #8
 8004206:	68f9      	ldr	r1, [r7, #12]
 8004208:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	@ 0xb8
 800420c:	9302      	str	r3, [sp, #8]
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	9301      	str	r3, [sp, #4]
 8004212:	230d      	movs	r3, #13
 8004214:	9300      	str	r3, [sp, #0]
 8004216:	230a      	movs	r3, #10
 8004218:	4a0d      	ldr	r2, [pc, #52]	@ (8004250 <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x174>)
 800421a:	f001 fc67 	bl	8005aec <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	bf0c      	ite	eq
 8004224:	2301      	moveq	r3, #1
 8004226:	2300      	movne	r3, #0
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	d003      	beq.n	8004236 <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x15a>
				{

					statMqtt = mqtt_msgrecv;
 800422e:	2305      	movs	r3, #5
 8004230:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 8004234:	e002      	b.n	800423c <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x160>
				}
				else
				{
					statMqtt = mqtt_OK;
 8004236:	2300      	movs	r3, #0
 8004238:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

		}

	}
	//Rx_info.reset_timeout =0;
	return statMqtt;
 800423c:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
}
 8004240:	4618      	mov	r0, r3
 8004242:	37ac      	adds	r7, #172	@ 0xac
 8004244:	46bd      	mov	sp, r7
 8004246:	bd90      	pop	{r4, r7, pc}
 8004248:	080120ec 	.word	0x080120ec
 800424c:	08012104 	.word	0x08012104
 8004250:	08012108 	.word	0x08012108

08004254 <_ZN5Modem8simA767214mqttunsubTopicEhPc>:
enum simA7672::mqtt_flags simA7672::mqttunsubTopic(uint8_t mqtt_index,
		char *subTopic) {
 8004254:	b590      	push	{r4, r7, lr}
 8004256:	b0b1      	sub	sp, #196	@ 0xc4
 8004258:	af04      	add	r7, sp, #16
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	460b      	mov	r3, r1
 800425e:	607a      	str	r2, [r7, #4]
 8004260:	72fb      	strb	r3, [r7, #11]
	status stat = simA7672_ERR;
 8004262:	2301      	movs	r3, #1
 8004264:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
	mqtt_flags statMqtt = mqtt_ERR;
 8004268:	2301      	movs	r3, #1
 800426a:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf

	char buf[150] = { 0 };
 800426e:	2300      	movs	r3, #0
 8004270:	61bb      	str	r3, [r7, #24]
 8004272:	f107 031c 	add.w	r3, r7, #28
 8004276:	2292      	movs	r2, #146	@ 0x92
 8004278:	2100      	movs	r1, #0
 800427a:	4618      	mov	r0, r3
 800427c:	f00b fb1f 	bl	800f8be <memset>
	char recv_buf[5] = { 0 };
 8004280:	2300      	movs	r3, #0
 8004282:	613b      	str	r3, [r7, #16]
 8004284:	2300      	movs	r3, #0
 8004286:	753b      	strb	r3, [r7, #20]

	std::sprintf(buf, "AT+CMQTTUNSUB=%d,%d,0\r\n", mqtt_index,
 8004288:	7afc      	ldrb	r4, [r7, #11]
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f7fb fff0 	bl	8000270 <strlen>
 8004290:	4603      	mov	r3, r0
 8004292:	f107 0018 	add.w	r0, r7, #24
 8004296:	4622      	mov	r2, r4
 8004298:	4947      	ldr	r1, [pc, #284]	@ (80043b8 <_ZN5Modem8simA767214mqttunsubTopicEhPc+0x164>)
 800429a:	f00b faad 	bl	800f7f8 <siprintf>
			std::strlen(const_cast<const char*>(subTopic)));
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
			std::strlen(const_cast<const char*>(buf)), 1000, '>', MSG_mode);
 800429e:	f107 0318 	add.w	r3, r7, #24
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7fb ffe4 	bl	8000270 <strlen>
 80042a8:	4603      	mov	r3, r0
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
 80042aa:	b29a      	uxth	r2, r3
 80042ac:	f107 0118 	add.w	r1, r7, #24
 80042b0:	2302      	movs	r3, #2
 80042b2:	9301      	str	r3, [sp, #4]
 80042b4:	233e      	movs	r3, #62	@ 0x3e
 80042b6:	9300      	str	r3, [sp, #0]
 80042b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80042bc:	68f8      	ldr	r0, [r7, #12]
 80042be:	f000 fa0b 	bl	80046d8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 1000);
 80042c2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80042c6:	2100      	movs	r1, #0
 80042c8:	68f8      	ldr	r0, [r7, #12]
 80042ca:	f000 fb32 	bl	8004932 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80042ce:	4603      	mov	r3, r0
 80042d0:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
	if (stat == simA7672_OK) {
 80042d4:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d167      	bne.n	80043ac <_ZN5Modem8simA767214mqttunsubTopicEhPc+0x158>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 80042e2:	3008      	adds	r0, #8
 80042e4:	68f9      	ldr	r1, [r7, #12]
				Rx_info.Rxcount, (char*) ">", ',', _LF, nullptr)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042ec:	8a9b      	ldrh	r3, [r3, #20]
 80042ee:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80042f0:	2300      	movs	r3, #0
 80042f2:	9302      	str	r3, [sp, #8]
 80042f4:	230a      	movs	r3, #10
 80042f6:	9301      	str	r3, [sp, #4]
 80042f8:	232c      	movs	r3, #44	@ 0x2c
 80042fa:	9300      	str	r3, [sp, #0]
 80042fc:	4b2f      	ldr	r3, [pc, #188]	@ (80043bc <_ZN5Modem8simA767214mqttunsubTopicEhPc+0x168>)
 80042fe:	f001 fb2d 	bl	800595c <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 8004302:	4603      	mov	r3, r0
				== checking.sys_ok) {
 8004304:	2b00      	cmp	r3, #0
 8004306:	bf0c      	ite	eq
 8004308:	2301      	moveq	r3, #1
 800430a:	2300      	movne	r3, #0
 800430c:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 800430e:	2b00      	cmp	r3, #0
 8004310:	d04c      	beq.n	80043ac <_ZN5Modem8simA767214mqttunsubTopicEhPc+0x158>

			PrepRxTx(reinterpret_cast<const uint8_t*>(subTopic),
					std::strlen(const_cast<const char*>(subTopic)), 1000, '+',1, _LF,
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f7fb ffac 	bl	8000270 <strlen>
 8004318:	4603      	mov	r3, r0
			PrepRxTx(reinterpret_cast<const uint8_t*>(subTopic),
 800431a:	b29a      	uxth	r2, r3
 800431c:	2303      	movs	r3, #3
 800431e:	9303      	str	r3, [sp, #12]
 8004320:	230a      	movs	r3, #10
 8004322:	9302      	str	r3, [sp, #8]
 8004324:	2301      	movs	r3, #1
 8004326:	9301      	str	r3, [sp, #4]
 8004328:	232b      	movs	r3, #43	@ 0x2b
 800432a:	9300      	str	r3, [sp, #0]
 800432c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004330:	6879      	ldr	r1, [r7, #4]
 8004332:	68f8      	ldr	r0, [r7, #12]
 8004334:	f000 fa32 	bl	800479c <_ZN5Modem8simA76728PrepRxTxEPKhtthhhNS0_6RxmodeE>
					Notification_mode);
			stat = check_eventTimeout(rx_evt, 10000);
 8004338:	f242 7210 	movw	r2, #10000	@ 0x2710
 800433c:	2100      	movs	r1, #0
 800433e:	68f8      	ldr	r0, [r7, #12]
 8004340:	f000 faf7 	bl	8004932 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8004344:	4603      	mov	r3, r0
 8004346:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae

			if (stat == simA7672_OK) {
 800434a:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 800434e:	2b00      	cmp	r3, #0
 8004350:	d12c      	bne.n	80043ac <_ZN5Modem8simA767214mqttunsubTopicEhPc+0x158>
				if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8004358:	3008      	adds	r0, #8
 800435a:	68f9      	ldr	r1, [r7, #12]
						Rx_info.Rxcount, (char*) "+CMQTTUNSUB:", ',', _LF,
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004362:	8a9b      	ldrh	r3, [r3, #20]
 8004364:	b29a      	uxth	r2, r3
				if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8004366:	f107 0310 	add.w	r3, r7, #16
 800436a:	9302      	str	r3, [sp, #8]
 800436c:	230a      	movs	r3, #10
 800436e:	9301      	str	r3, [sp, #4]
 8004370:	232c      	movs	r3, #44	@ 0x2c
 8004372:	9300      	str	r3, [sp, #0]
 8004374:	4b12      	ldr	r3, [pc, #72]	@ (80043c0 <_ZN5Modem8simA767214mqttunsubTopicEhPc+0x16c>)
 8004376:	f001 faf1 	bl	800595c <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 800437a:	4603      	mov	r3, r0
						recv_buf) == checking.sys_ok) {
 800437c:	2b00      	cmp	r3, #0
 800437e:	bf0c      	ite	eq
 8004380:	2301      	moveq	r3, #1
 8004382:	2300      	movne	r3, #0
 8004384:	b2db      	uxtb	r3, r3
				if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8004386:	2b00      	cmp	r3, #0
 8004388:	d010      	beq.n	80043ac <_ZN5Modem8simA767214mqttunsubTopicEhPc+0x158>

					if (std::strstr(recv_buf, "0")) {
 800438a:	f107 0310 	add.w	r3, r7, #16
 800438e:	490d      	ldr	r1, [pc, #52]	@ (80043c4 <_ZN5Modem8simA767214mqttunsubTopicEhPc+0x170>)
 8004390:	4618      	mov	r0, r3
 8004392:	f7fd fbbb 	bl	8001b0c <_ZSt6strstrPcPKc>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	bf14      	ite	ne
 800439c:	2301      	movne	r3, #1
 800439e:	2300      	moveq	r3, #0
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d002      	beq.n	80043ac <_ZN5Modem8simA767214mqttunsubTopicEhPc+0x158>
						statMqtt = mqtt_OK;
 80043a6:	2300      	movs	r3, #0
 80043a8:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf

			}
		}
	}

	return statMqtt;
 80043ac:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	37b4      	adds	r7, #180	@ 0xb4
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd90      	pop	{r4, r7, pc}
 80043b8:	0801211c 	.word	0x0801211c
 80043bc:	08012104 	.word	0x08012104
 80043c0:	08012134 	.word	0x08012134
 80043c4:	080120c4 	.word	0x080120c4

080043c8 <_ZN5Modem8simA767213mqttsslenableEh>:

enum simA7672::ssl_flags simA7672::mqttsslenable(uint8_t mqtt_index)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b09a      	sub	sp, #104	@ 0x68
 80043cc:	af02      	add	r7, sp, #8
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	460b      	mov	r3, r1
 80043d2:	70fb      	strb	r3, [r7, #3]
	status stat = simA7672_ERR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	ssl_flags sslstat = ssl_ERR;
 80043da:	2301      	movs	r3, #1
 80043dc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

	char buf[80] = { 0 };
 80043e0:	2300      	movs	r3, #0
 80043e2:	60fb      	str	r3, [r7, #12]
 80043e4:	f107 0310 	add.w	r3, r7, #16
 80043e8:	224c      	movs	r2, #76	@ 0x4c
 80043ea:	2100      	movs	r1, #0
 80043ec:	4618      	mov	r0, r3
 80043ee:	f00b fa66 	bl	800f8be <memset>

	std::sprintf(buf, "AT+CMQTTSSLCFG=%d,0\r\n", mqtt_index);
 80043f2:	78fa      	ldrb	r2, [r7, #3]
 80043f4:	f107 030c 	add.w	r3, r7, #12
 80043f8:	4920      	ldr	r1, [pc, #128]	@ (800447c <_ZN5Modem8simA767213mqttsslenableEh+0xb4>)
 80043fa:	4618      	mov	r0, r3
 80043fc:	f00b f9fc 	bl	800f7f8 <siprintf>
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
			std::strlen(const_cast<const char*>(buf)), 1000, _LF, CMD_mode);
 8004400:	f107 030c 	add.w	r3, r7, #12
 8004404:	4618      	mov	r0, r3
 8004406:	f7fb ff33 	bl	8000270 <strlen>
 800440a:	4603      	mov	r3, r0
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
 800440c:	b29a      	uxth	r2, r3
 800440e:	f107 010c 	add.w	r1, r7, #12
 8004412:	2301      	movs	r3, #1
 8004414:	9301      	str	r3, [sp, #4]
 8004416:	230a      	movs	r3, #10
 8004418:	9300      	str	r3, [sp, #0]
 800441a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 f95a 	bl	80046d8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 8000);
 8004424:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8004428:	2100      	movs	r1, #0
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 fa81 	bl	8004932 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8004430:	4603      	mov	r3, r0
 8004432:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8004436:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 800443a:	2b00      	cmp	r3, #0
 800443c:	d111      	bne.n	8004462 <_ZN5Modem8simA767213mqttsslenableEh+0x9a>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8004444:	3308      	adds	r3, #8
 8004446:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800444e:	8a92      	ldrh	r2, [r2, #20]
 8004450:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8004452:	4618      	mov	r0, r3
 8004454:	f001 fa5c 	bl	8005910 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d101      	bne.n	8004462 <_ZN5Modem8simA767213mqttsslenableEh+0x9a>
 800445e:	2301      	movs	r3, #1
 8004460:	e000      	b.n	8004464 <_ZN5Modem8simA767213mqttsslenableEh+0x9c>
 8004462:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8004464:	2b00      	cmp	r3, #0
 8004466:	d002      	beq.n	800446e <_ZN5Modem8simA767213mqttsslenableEh+0xa6>

		sslstat = ssl_OK;
 8004468:	2300      	movs	r3, #0
 800446a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

	}

	return sslstat;
 800446e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8004472:	4618      	mov	r0, r3
 8004474:	3760      	adds	r7, #96	@ 0x60
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	08012144 	.word	0x08012144

08004480 <_ZN5Modem8simA767213sslversionsetEv>:
enum simA7672::ssl_flags simA7672::sslversionset()
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b086      	sub	sp, #24
 8004484:	af02      	add	r7, sp, #8
 8004486:	6078      	str	r0, [r7, #4]
	status stat = simA7672_ERR;
 8004488:	2301      	movs	r3, #1
 800448a:	73bb      	strb	r3, [r7, #14]
	ssl_flags sslstat = ssl_ERR;
 800448c:	2301      	movs	r3, #1
 800448e:	73fb      	strb	r3, [r7, #15]


	PrepRxTx(atcmd_ATCSSLCFG_ver, sizeof(atcmd_ATCSSLCFG_ver) - 1,1000, _LF, CMD_mode);
 8004490:	2301      	movs	r3, #1
 8004492:	9301      	str	r3, [sp, #4]
 8004494:	230a      	movs	r3, #10
 8004496:	9300      	str	r3, [sp, #0]
 8004498:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800449c:	221d      	movs	r2, #29
 800449e:	4915      	ldr	r1, [pc, #84]	@ (80044f4 <_ZN5Modem8simA767213sslversionsetEv+0x74>)
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 f919 	bl	80046d8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 80044a6:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80044aa:	2100      	movs	r1, #0
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f000 fa40 	bl	8004932 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80044b2:	4603      	mov	r3, r0
 80044b4:	73bb      	strb	r3, [r7, #14]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80044b6:	7bbb      	ldrb	r3, [r7, #14]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d111      	bne.n	80044e0 <_ZN5Modem8simA767213sslversionsetEv+0x60>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80044c2:	3308      	adds	r3, #8
 80044c4:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80044cc:	8a92      	ldrh	r2, [r2, #20]
 80044ce:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80044d0:	4618      	mov	r0, r3
 80044d2:	f001 fa1d 	bl	8005910 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d101      	bne.n	80044e0 <_ZN5Modem8simA767213sslversionsetEv+0x60>
 80044dc:	2301      	movs	r3, #1
 80044de:	e000      	b.n	80044e2 <_ZN5Modem8simA767213sslversionsetEv+0x62>
 80044e0:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d001      	beq.n	80044ea <_ZN5Modem8simA767213sslversionsetEv+0x6a>

		sslstat = ssl_OK;
 80044e6:	2300      	movs	r3, #0
 80044e8:	73fb      	strb	r3, [r7, #15]

	}

	return sslstat;
 80044ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3710      	adds	r7, #16
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	080123c4 	.word	0x080123c4

080044f8 <_ZN5Modem8simA767210sslauthsetEv>:
enum simA7672::ssl_flags simA7672::sslauthset()
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b086      	sub	sp, #24
 80044fc:	af02      	add	r7, sp, #8
 80044fe:	6078      	str	r0, [r7, #4]
	status stat = simA7672_ERR;
 8004500:	2301      	movs	r3, #1
 8004502:	73bb      	strb	r3, [r7, #14]
	ssl_flags sslstat = ssl_ERR;
 8004504:	2301      	movs	r3, #1
 8004506:	73fb      	strb	r3, [r7, #15]


	PrepRxTx(atcmd_ATCSSLCFG_auth, sizeof(atcmd_ATCSSLCFG_auth) - 1,1000, _LF, CMD_mode);
 8004508:	2301      	movs	r3, #1
 800450a:	9301      	str	r3, [sp, #4]
 800450c:	230a      	movs	r3, #10
 800450e:	9300      	str	r3, [sp, #0]
 8004510:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004514:	221b      	movs	r2, #27
 8004516:	4915      	ldr	r1, [pc, #84]	@ (800456c <_ZN5Modem8simA767210sslauthsetEv+0x74>)
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 f8dd 	bl	80046d8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 800451e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004522:	2100      	movs	r1, #0
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 fa04 	bl	8004932 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 800452a:	4603      	mov	r3, r0
 800452c:	73bb      	strb	r3, [r7, #14]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 800452e:	7bbb      	ldrb	r3, [r7, #14]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d111      	bne.n	8004558 <_ZN5Modem8simA767210sslauthsetEv+0x60>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 800453a:	3308      	adds	r3, #8
 800453c:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004544:	8a92      	ldrh	r2, [r2, #20]
 8004546:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8004548:	4618      	mov	r0, r3
 800454a:	f001 f9e1 	bl	8005910 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d101      	bne.n	8004558 <_ZN5Modem8simA767210sslauthsetEv+0x60>
 8004554:	2301      	movs	r3, #1
 8004556:	e000      	b.n	800455a <_ZN5Modem8simA767210sslauthsetEv+0x62>
 8004558:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 800455a:	2b00      	cmp	r3, #0
 800455c:	d001      	beq.n	8004562 <_ZN5Modem8simA767210sslauthsetEv+0x6a>

		sslstat = ssl_OK;
 800455e:	2300      	movs	r3, #0
 8004560:	73fb      	strb	r3, [r7, #15]

	}

	return sslstat;
 8004562:	7bfb      	ldrb	r3, [r7, #15]
}
 8004564:	4618      	mov	r0, r3
 8004566:	3710      	adds	r7, #16
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}
 800456c:	080123e4 	.word	0x080123e4

08004570 <_ZN5Modem8simA767212sslcacertsetEv>:
enum simA7672::ssl_flags simA7672::sslcacertset()
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af02      	add	r7, sp, #8
 8004576:	6078      	str	r0, [r7, #4]
	status stat = simA7672_ERR;
 8004578:	2301      	movs	r3, #1
 800457a:	73bb      	strb	r3, [r7, #14]
	ssl_flags sslstat = ssl_ERR;
 800457c:	2301      	movs	r3, #1
 800457e:	73fb      	strb	r3, [r7, #15]


	PrepRxTx(atcmd_ATCSSLCFG_ca, sizeof(atcmd_ATCSSLCFG_ca) - 1,1000, _LF, CMD_mode);
 8004580:	2301      	movs	r3, #1
 8004582:	9301      	str	r3, [sp, #4]
 8004584:	230a      	movs	r3, #10
 8004586:	9300      	str	r3, [sp, #0]
 8004588:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800458c:	2220      	movs	r2, #32
 800458e:	4915      	ldr	r1, [pc, #84]	@ (80045e4 <_ZN5Modem8simA767212sslcacertsetEv+0x74>)
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f000 f8a1 	bl	80046d8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 8004596:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800459a:	2100      	movs	r1, #0
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 f9c8 	bl	8004932 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80045a2:	4603      	mov	r3, r0
 80045a4:	73bb      	strb	r3, [r7, #14]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80045a6:	7bbb      	ldrb	r3, [r7, #14]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d111      	bne.n	80045d0 <_ZN5Modem8simA767212sslcacertsetEv+0x60>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80045b2:	3308      	adds	r3, #8
 80045b4:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80045bc:	8a92      	ldrh	r2, [r2, #20]
 80045be:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80045c0:	4618      	mov	r0, r3
 80045c2:	f001 f9a5 	bl	8005910 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d101      	bne.n	80045d0 <_ZN5Modem8simA767212sslcacertsetEv+0x60>
 80045cc:	2301      	movs	r3, #1
 80045ce:	e000      	b.n	80045d2 <_ZN5Modem8simA767212sslcacertsetEv+0x62>
 80045d0:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <_ZN5Modem8simA767212sslcacertsetEv+0x6a>

		sslstat = ssl_OK;
 80045d6:	2300      	movs	r3, #0
 80045d8:	73fb      	strb	r3, [r7, #15]

	}

	return sslstat;
 80045da:	7bfb      	ldrb	r3, [r7, #15]
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3710      	adds	r7, #16
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	08012400 	.word	0x08012400

080045e8 <_ZN5Modem8simA767216ssldevicecertsetEv>:
enum simA7672::ssl_flags simA7672::ssldevicecertset()
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b086      	sub	sp, #24
 80045ec:	af02      	add	r7, sp, #8
 80045ee:	6078      	str	r0, [r7, #4]
	status stat = simA7672_ERR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	73bb      	strb	r3, [r7, #14]
	ssl_flags sslstat = ssl_ERR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	73fb      	strb	r3, [r7, #15]


	PrepRxTx(atcmd_ATCSSLCFG_device, sizeof(atcmd_ATCSSLCFG_device) - 1,1000, _LF, CMD_mode);
 80045f8:	2301      	movs	r3, #1
 80045fa:	9301      	str	r3, [sp, #4]
 80045fc:	230a      	movs	r3, #10
 80045fe:	9300      	str	r3, [sp, #0]
 8004600:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004604:	222c      	movs	r2, #44	@ 0x2c
 8004606:	4915      	ldr	r1, [pc, #84]	@ (800465c <_ZN5Modem8simA767216ssldevicecertsetEv+0x74>)
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 f865 	bl	80046d8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 800460e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004612:	2100      	movs	r1, #0
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 f98c 	bl	8004932 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 800461a:	4603      	mov	r3, r0
 800461c:	73bb      	strb	r3, [r7, #14]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 800461e:	7bbb      	ldrb	r3, [r7, #14]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d111      	bne.n	8004648 <_ZN5Modem8simA767216ssldevicecertsetEv+0x60>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 800462a:	3308      	adds	r3, #8
 800462c:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004634:	8a92      	ldrh	r2, [r2, #20]
 8004636:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8004638:	4618      	mov	r0, r3
 800463a:	f001 f969 	bl	8005910 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d101      	bne.n	8004648 <_ZN5Modem8simA767216ssldevicecertsetEv+0x60>
 8004644:	2301      	movs	r3, #1
 8004646:	e000      	b.n	800464a <_ZN5Modem8simA767216ssldevicecertsetEv+0x62>
 8004648:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 800464a:	2b00      	cmp	r3, #0
 800464c:	d001      	beq.n	8004652 <_ZN5Modem8simA767216ssldevicecertsetEv+0x6a>

		sslstat = ssl_OK;
 800464e:	2300      	movs	r3, #0
 8004650:	73fb      	strb	r3, [r7, #15]

	}

	return sslstat;
 8004652:	7bfb      	ldrb	r3, [r7, #15]
}
 8004654:	4618      	mov	r0, r3
 8004656:	3710      	adds	r7, #16
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	08012424 	.word	0x08012424

08004660 <_ZN5Modem8simA767215ssldevicekeysetEv>:
enum simA7672::ssl_flags simA7672::ssldevicekeyset()
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b086      	sub	sp, #24
 8004664:	af02      	add	r7, sp, #8
 8004666:	6078      	str	r0, [r7, #4]
	status stat = simA7672_ERR;
 8004668:	2301      	movs	r3, #1
 800466a:	73bb      	strb	r3, [r7, #14]
	ssl_flags sslstat = ssl_ERR;
 800466c:	2301      	movs	r3, #1
 800466e:	73fb      	strb	r3, [r7, #15]


	PrepRxTx(atcmd_ATCSSLCFG_key, sizeof(atcmd_ATCSSLCFG_key) - 1,1000, _LF, CMD_mode);
 8004670:	2301      	movs	r3, #1
 8004672:	9301      	str	r3, [sp, #4]
 8004674:	230a      	movs	r3, #10
 8004676:	9300      	str	r3, [sp, #0]
 8004678:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800467c:	222a      	movs	r2, #42	@ 0x2a
 800467e:	4915      	ldr	r1, [pc, #84]	@ (80046d4 <_ZN5Modem8simA767215ssldevicekeysetEv+0x74>)
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 f829 	bl	80046d8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 8004686:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800468a:	2100      	movs	r1, #0
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f000 f950 	bl	8004932 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8004692:	4603      	mov	r3, r0
 8004694:	73bb      	strb	r3, [r7, #14]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8004696:	7bbb      	ldrb	r3, [r7, #14]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d111      	bne.n	80046c0 <_ZN5Modem8simA767215ssldevicekeysetEv+0x60>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80046a2:	3308      	adds	r3, #8
 80046a4:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80046ac:	8a92      	ldrh	r2, [r2, #20]
 80046ae:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80046b0:	4618      	mov	r0, r3
 80046b2:	f001 f92d 	bl	8005910 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d101      	bne.n	80046c0 <_ZN5Modem8simA767215ssldevicekeysetEv+0x60>
 80046bc:	2301      	movs	r3, #1
 80046be:	e000      	b.n	80046c2 <_ZN5Modem8simA767215ssldevicekeysetEv+0x62>
 80046c0:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d001      	beq.n	80046ca <_ZN5Modem8simA767215ssldevicekeysetEv+0x6a>

		sslstat = ssl_OK;
 80046c6:	2300      	movs	r3, #0
 80046c8:	73fb      	strb	r3, [r7, #15]

	}

	return sslstat;
 80046ca:	7bfb      	ldrb	r3, [r7, #15]

}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3710      	adds	r7, #16
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	08012454 	.word	0x08012454

080046d8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>:
	rst_event(tx_evt);
	serial_.TransmitData(Txbuf, len, timeout);

}
void simA7672::PrepRxTx(const uint8_t *Txbuf, uint16_t len, uint16_t timeout,
		uint8_t end_char, enum Rxmode Rxmode) {
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	4611      	mov	r1, r2
 80046e4:	461a      	mov	r2, r3
 80046e6:	460b      	mov	r3, r1
 80046e8:	80fb      	strh	r3, [r7, #6]
 80046ea:	4613      	mov	r3, r2
 80046ec:	80bb      	strh	r3, [r7, #4]

	memset(Rxbuffer, 0, BufferLen);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80046f4:	2100      	movs	r1, #0
 80046f6:	4618      	mov	r0, r3
 80046f8:	f00b f8e1 	bl	800f8be <memset>
	memset(Txbuffer, 0, BufferLen);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004702:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004706:	2100      	movs	r1, #0
 8004708:	4618      	mov	r0, r3
 800470a:	f00b f8d8 	bl	800f8be <memset>
	rst_event(rx_evt);
 800470e:	2100      	movs	r1, #0
 8004710:	68f8      	ldr	r0, [r7, #12]
 8004712:	f000 f8c8 	bl	80048a6 <_ZN5Modem8simA76729rst_eventENS0_9eventTypeE>
	rst_event(tx_evt);
 8004716:	2101      	movs	r1, #1
 8004718:	68f8      	ldr	r0, [r7, #12]
 800471a:	f000 f8c4 	bl	80048a6 <_ZN5Modem8simA76729rst_eventENS0_9eventTypeE>

	Rx_info.end_char = end_char;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004724:	461a      	mov	r2, r3
 8004726:	7e3b      	ldrb	r3, [r7, #24]
 8004728:	7213      	strb	r3, [r2, #8]
	Rx_info.rx_mode = Rxmode;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004730:	461a      	mov	r2, r3
 8004732:	7f3b      	ldrb	r3, [r7, #28]
 8004734:	72d3      	strb	r3, [r2, #11]
	Rx_info.detect_endchar = 0;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800473c:	2200      	movs	r2, #0
 800473e:	725a      	strb	r2, [r3, #9]
	Rx_info.end_char_count = 0;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004746:	2200      	movs	r2, #0
 8004748:	731a      	strb	r2, [r3, #12]
	Rx_info.release_event = -1;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004750:	22ff      	movs	r2, #255	@ 0xff
 8004752:	739a      	strb	r2, [r3, #14]
	Rx_info.Rx = Rxbuffer;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800475c:	6113      	str	r3, [r2, #16]
	Rx_info.Rxcount = 0;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004764:	2200      	movs	r2, #0
 8004766:	829a      	strh	r2, [r3, #20]
	serial_.RxintEn(Rx_info.Rx, BufferLen);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 800476e:	3304      	adds	r3, #4
 8004770:	68fa      	ldr	r2, [r7, #12]
 8004772:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004776:	6911      	ldr	r1, [r2, #16]
 8004778:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800477c:	4618      	mov	r0, r3
 800477e:	f001 f88f 	bl	80058a0 <_ZN13System_serial6serial7RxintEnEPht>
	serial_.TransmitData(Txbuf, len, timeout);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8004788:	3004      	adds	r0, #4
 800478a:	88bb      	ldrh	r3, [r7, #4]
 800478c:	88fa      	ldrh	r2, [r7, #6]
 800478e:	68b9      	ldr	r1, [r7, #8]
 8004790:	f001 f873 	bl	800587a <_ZN13System_serial6serial12TransmitDataEPKhtm>

}
 8004794:	bf00      	nop
 8004796:	3710      	adds	r7, #16
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <_ZN5Modem8simA76728PrepRxTxEPKhtthhhNS0_6RxmodeE>:
	serial_.RxintEn(Rx_info.Rx, BufferLen);
	serial_.TransmitData(Txbuf, len, timeout);
}

void simA7672::PrepRxTx(const uint8_t *Txbuf, uint16_t len, uint16_t timeout,
		uint8_t start_char_notiMode,uint8_t start_char_notiModeCount,uint8_t end_char, enum Rxmode Rxmode) {
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	4611      	mov	r1, r2
 80047a8:	461a      	mov	r2, r3
 80047aa:	460b      	mov	r3, r1
 80047ac:	80fb      	strh	r3, [r7, #6]
 80047ae:	4613      	mov	r3, r2
 80047b0:	80bb      	strh	r3, [r7, #4]

	memset(Rxbuffer, 0, BufferLen);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80047b8:	2100      	movs	r1, #0
 80047ba:	4618      	mov	r0, r3
 80047bc:	f00b f87f 	bl	800f8be <memset>
	memset(Txbuffer, 0, BufferLen);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80047ca:	2100      	movs	r1, #0
 80047cc:	4618      	mov	r0, r3
 80047ce:	f00b f876 	bl	800f8be <memset>
	rst_event(rx_evt);
 80047d2:	2100      	movs	r1, #0
 80047d4:	68f8      	ldr	r0, [r7, #12]
 80047d6:	f000 f866 	bl	80048a6 <_ZN5Modem8simA76729rst_eventENS0_9eventTypeE>
	rst_event(tx_evt);
 80047da:	2101      	movs	r1, #1
 80047dc:	68f8      	ldr	r0, [r7, #12]
 80047de:	f000 f862 	bl	80048a6 <_ZN5Modem8simA76729rst_eventENS0_9eventTypeE>

	Rx_info.end_char = end_char;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047e8:	461a      	mov	r2, r3
 80047ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80047ee:	7213      	strb	r3, [r2, #8]
	Rx_info.rx_mode = Rxmode;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047f6:	461a      	mov	r2, r3
 80047f8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80047fc:	72d3      	strb	r3, [r2, #11]
	Rx_info.detect_endchar = 0;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004804:	2200      	movs	r2, #0
 8004806:	725a      	strb	r2, [r3, #9]
	Rx_info.end_char_count = 0;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800480e:	2200      	movs	r2, #0
 8004810:	731a      	strb	r2, [r3, #12]
	Rx_info.release_event = -1;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004818:	22ff      	movs	r2, #255	@ 0xff
 800481a:	739a      	strb	r2, [r3, #14]
	Rx_info.Rx = Rxbuffer;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004824:	6113      	str	r3, [r2, #16]
	Rx_info.Rxcount = 0;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800482c:	2200      	movs	r2, #0
 800482e:	829a      	strh	r2, [r3, #20]
	Rx_info.start_char_notiMode = start_char_notiMode;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004836:	461a      	mov	r2, r3
 8004838:	7e3b      	ldrb	r3, [r7, #24]
 800483a:	7793      	strb	r3, [r2, #30]
	Rx_info.start_char_notiModeCount = start_char_notiModeCount-1;
 800483c:	7f3b      	ldrb	r3, [r7, #28]
 800483e:	3b01      	subs	r3, #1
 8004840:	b2da      	uxtb	r2, r3
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004848:	77da      	strb	r2, [r3, #31]
	serial_.RxintEn(Rx_info.Rx, BufferLen);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8004850:	3304      	adds	r3, #4
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004858:	6911      	ldr	r1, [r2, #16]
 800485a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800485e:	4618      	mov	r0, r3
 8004860:	f001 f81e 	bl	80058a0 <_ZN13System_serial6serial7RxintEnEPht>
	serial_.TransmitData(Txbuf, len, timeout);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 800486a:	3004      	adds	r0, #4
 800486c:	88bb      	ldrh	r3, [r7, #4]
 800486e:	88fa      	ldrh	r2, [r7, #6]
 8004870:	68b9      	ldr	r1, [r7, #8]
 8004872:	f001 f802 	bl	800587a <_ZN13System_serial6serial12TransmitDataEPKhtm>

}
 8004876:	bf00      	nop
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <_ZN5Modem8simA76729set_eventENS0_9eventTypeE>:
	serial_.RxintEn(Rx_info.Rx, BufferLen);
	serial_.TransmitData(Txbuf, len, timeout);

}

inline void simA7672::set_event(enum eventType event) {
 800487e:	b480      	push	{r7}
 8004880:	b083      	sub	sp, #12
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
 8004886:	460b      	mov	r3, r1
 8004888:	70fb      	strb	r3, [r7, #3]
	Event[event] = 1;
 800488a:	78fb      	ldrb	r3, [r7, #3]
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	4413      	add	r3, r2
 8004890:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8004894:	3309      	adds	r3, #9
 8004896:	2201      	movs	r2, #1
 8004898:	701a      	strb	r2, [r3, #0]
}
 800489a:	bf00      	nop
 800489c:	370c      	adds	r7, #12
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr

080048a6 <_ZN5Modem8simA76729rst_eventENS0_9eventTypeE>:
inline void simA7672::rst_event(enum eventType event) {
 80048a6:	b480      	push	{r7}
 80048a8:	b083      	sub	sp, #12
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
 80048ae:	460b      	mov	r3, r1
 80048b0:	70fb      	strb	r3, [r7, #3]
	Event[event] = 0;
 80048b2:	78fb      	ldrb	r3, [r7, #3]
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	4413      	add	r3, r2
 80048b8:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80048bc:	3309      	adds	r3, #9
 80048be:	2200      	movs	r2, #0
 80048c0:	701a      	strb	r2, [r3, #0]
}
 80048c2:	bf00      	nop
 80048c4:	370c      	adds	r7, #12
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr

080048ce <_ZN5Modem8simA767211check_eventENS0_9eventTypeE>:
enum simA7672::status simA7672::check_event(enum eventType event) {
 80048ce:	b480      	push	{r7}
 80048d0:	b085      	sub	sp, #20
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
 80048d6:	460b      	mov	r3, r1
 80048d8:	70fb      	strb	r3, [r7, #3]

	status stat = simA7672_OK;
 80048da:	2300      	movs	r3, #0
 80048dc:	73fb      	strb	r3, [r7, #15]

	if (Event[event]) {
 80048de:	78fb      	ldrb	r3, [r7, #3]
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	4413      	add	r3, r2
 80048e4:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80048e8:	3309      	adds	r3, #9
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	bf14      	ite	ne
 80048f2:	2301      	movne	r3, #1
 80048f4:	2300      	moveq	r3, #0
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d002      	beq.n	8004902 <_ZN5Modem8simA767211check_eventENS0_9eventTypeE+0x34>
		stat = simA7672_OK;
 80048fc:	2300      	movs	r3, #0
 80048fe:	73fb      	strb	r3, [r7, #15]
 8004900:	e010      	b.n	8004924 <_ZN5Modem8simA767211check_eventENS0_9eventTypeE+0x56>
	} else if (!Event[event]) {
 8004902:	78fb      	ldrb	r3, [r7, #3]
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	4413      	add	r3, r2
 8004908:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 800490c:	3309      	adds	r3, #9
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	bf0c      	ite	eq
 8004916:	2301      	moveq	r3, #1
 8004918:	2300      	movne	r3, #0
 800491a:	b2db      	uxtb	r3, r3
 800491c:	2b00      	cmp	r3, #0
 800491e:	d001      	beq.n	8004924 <_ZN5Modem8simA767211check_eventENS0_9eventTypeE+0x56>
		stat = simA7672_ERR;
 8004920:	2301      	movs	r3, #1
 8004922:	73fb      	strb	r3, [r7, #15]
	}

	return stat;
 8004924:	7bfb      	ldrb	r3, [r7, #15]

}
 8004926:	4618      	mov	r0, r3
 8004928:	3714      	adds	r7, #20
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr

08004932 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>:

	return stat;

}
enum simA7672::status simA7672::check_eventTimeout(enum eventType event,
		uint16_t timeout) {
 8004932:	b580      	push	{r7, lr}
 8004934:	b084      	sub	sp, #16
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
 800493a:	460b      	mov	r3, r1
 800493c:	70fb      	strb	r3, [r7, #3]
 800493e:	4613      	mov	r3, r2
 8004940:	803b      	strh	r3, [r7, #0]
	status stat = simA7672_OK;
 8004942:	2300      	movs	r3, #0
 8004944:	73fb      	strb	r3, [r7, #15]
	 prev_time = 0;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800494c:	461a      	mov	r2, r3
 800494e:	2300      	movs	r3, #0
 8004950:	62d3      	str	r3, [r2, #44]	@ 0x2c

	prev_time = HAL_GetTick(); //we get new time before going into while
 8004952:	f002 fb8b 	bl	800706c <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800495e:	62da      	str	r2, [r3, #44]	@ 0x2c
	while ((check_event(event) != simA7672_OK)
 8004960:	e002      	b.n	8004968 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt+0x36>
			&& (HAL_GetTick() - prev_time < timeout)) {
		//wait here until get event or time passes
		System_Rtos::delay(10);
 8004962:	200a      	movs	r0, #10
 8004964:	f000 fd14 	bl	8005390 <_ZN11System_Rtos5delayEm>
	while ((check_event(event) != simA7672_OK)
 8004968:	78fb      	ldrb	r3, [r7, #3]
 800496a:	4619      	mov	r1, r3
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f7ff ffae 	bl	80048ce <_ZN5Modem8simA767211check_eventENS0_9eventTypeE>
 8004972:	4603      	mov	r3, r0
			&& (HAL_GetTick() - prev_time < timeout)) {
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00c      	beq.n	8004992 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt+0x60>
 8004978:	f002 fb78 	bl	800706c <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004986:	1ad2      	subs	r2, r2, r3
 8004988:	883b      	ldrh	r3, [r7, #0]
 800498a:	429a      	cmp	r2, r3
 800498c:	d201      	bcs.n	8004992 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt+0x60>
 800498e:	2301      	movs	r3, #1
 8004990:	e000      	b.n	8004994 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt+0x62>
 8004992:	2300      	movs	r3, #0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d1e4      	bne.n	8004962 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt+0x30>
	}

	if (check_event(event) != simA7672_OK) {
 8004998:	78fb      	ldrb	r3, [r7, #3]
 800499a:	4619      	mov	r1, r3
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f7ff ff96 	bl	80048ce <_ZN5Modem8simA767211check_eventENS0_9eventTypeE>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	bf14      	ite	ne
 80049a8:	2301      	movne	r3, #1
 80049aa:	2300      	moveq	r3, #0
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d001      	beq.n	80049b6 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt+0x84>
		stat = simA7672::simA7672_ERR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	73fb      	strb	r3, [r7, #15]
	}

	return stat;
 80049b6:	7bfb      	ldrb	r3, [r7, #15]

}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3710      	adds	r7, #16
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <_ZN5Modem8simA76724RxCBEh>:

/*Interrupt callbacks*/

void simA7672::RxCB(uint8_t data) {
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	460b      	mov	r3, r1
 80049ca:	70fb      	strb	r3, [r7, #3]
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wvolatile"
	if (Rx_info.rx_mode == CMD_mode) {
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049d2:	7adb      	ldrb	r3, [r3, #11]
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	bf0c      	ite	eq
 80049da:	2301      	moveq	r3, #1
 80049dc:	2300      	movne	r3, #0
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	f000 808a 	beq.w	8004afa <_ZN5Modem8simA76724RxCBEh+0x13a>
		*Rx_info.Rx++ = data;
 80049e6:	78f8      	ldrb	r0, [r7, #3]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	1c5a      	adds	r2, r3, #1
 80049f2:	6879      	ldr	r1, [r7, #4]
 80049f4:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 80049f8:	610a      	str	r2, [r1, #16]
 80049fa:	4602      	mov	r2, r0
 80049fc:	701a      	strb	r2, [r3, #0]
		Rx_info.Rxcount++;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a04:	8a9b      	ldrh	r3, [r3, #20]
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	3301      	adds	r3, #1
 8004a0a:	b29a      	uxth	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a12:	829a      	strh	r2, [r3, #20]

		if (Rx_info.end_char_count == 1) {
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a1a:	7b1b      	ldrb	r3, [r3, #12]
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	bf0c      	ite	eq
 8004a22:	2301      	moveq	r3, #1
 8004a24:	2300      	movne	r3, #0
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00c      	beq.n	8004a46 <_ZN5Modem8simA76724RxCBEh+0x86>
			Rx_info.release_event++;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a32:	7b9b      	ldrb	r3, [r3, #14]
 8004a34:	b25b      	sxtb	r3, r3
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	3301      	adds	r3, #1
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	b25a      	sxtb	r2, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a44:	739a      	strb	r2, [r3, #14]

		}

		if (Rx_info.detect_nextlinechar == 1 && (data == 'O' || data == 'E')) {
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a4c:	7a9b      	ldrb	r3, [r3, #10]
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d107      	bne.n	8004a64 <_ZN5Modem8simA76724RxCBEh+0xa4>
 8004a54:	78fb      	ldrb	r3, [r7, #3]
 8004a56:	2b4f      	cmp	r3, #79	@ 0x4f
 8004a58:	d002      	beq.n	8004a60 <_ZN5Modem8simA76724RxCBEh+0xa0>
 8004a5a:	78fb      	ldrb	r3, [r7, #3]
 8004a5c:	2b45      	cmp	r3, #69	@ 0x45
 8004a5e:	d101      	bne.n	8004a64 <_ZN5Modem8simA76724RxCBEh+0xa4>
 8004a60:	2301      	movs	r3, #1
 8004a62:	e000      	b.n	8004a66 <_ZN5Modem8simA76724RxCBEh+0xa6>
 8004a64:	2300      	movs	r3, #0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d01b      	beq.n	8004aa2 <_ZN5Modem8simA76724RxCBEh+0xe2>
			Rx_info.detect_nextlinechar = 0; //reset it
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a70:	2200      	movs	r2, #0
 8004a72:	729a      	strb	r2, [r3, #10]
			Rx_info.end_char_count = 1;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	731a      	strb	r2, [r3, #12]
			if (data == 'O') {
 8004a7e:	78fb      	ldrb	r3, [r7, #3]
 8004a80:	2b4f      	cmp	r3, #79	@ 0x4f
 8004a82:	d105      	bne.n	8004a90 <_ZN5Modem8simA76724RxCBEh+0xd0>
				Rx_info.total_char = 2;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a8a:	2202      	movs	r2, #2
 8004a8c:	735a      	strb	r2, [r3, #13]
 8004a8e:	e00d      	b.n	8004aac <_ZN5Modem8simA76724RxCBEh+0xec>
			} else if (data == 'E') {
 8004a90:	78fb      	ldrb	r3, [r7, #3]
 8004a92:	2b45      	cmp	r3, #69	@ 0x45
 8004a94:	d10a      	bne.n	8004aac <_ZN5Modem8simA76724RxCBEh+0xec>
				Rx_info.total_char = 5;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a9c:	2205      	movs	r2, #5
 8004a9e:	735a      	strb	r2, [r3, #13]
 8004aa0:	e004      	b.n	8004aac <_ZN5Modem8simA76724RxCBEh+0xec>
			}

		} else {
			Rx_info.detect_nextlinechar = 0; //reset it
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	729a      	strb	r2, [r3, #10]

		}

		if (data == simA7672::_LF) {
 8004aac:	78fb      	ldrb	r3, [r7, #3]
 8004aae:	2b0a      	cmp	r3, #10
 8004ab0:	d104      	bne.n	8004abc <_ZN5Modem8simA76724RxCBEh+0xfc>
			Rx_info.detect_nextlinechar = 1;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ab8:	2201      	movs	r2, #1
 8004aba:	729a      	strb	r2, [r3, #10]

		}

		if (Rx_info.release_event >= Rx_info.total_char) {
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ac2:	7b9b      	ldrb	r3, [r3, #14]
 8004ac4:	b25b      	sxtb	r3, r3
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ace:	7b5b      	ldrb	r3, [r3, #13]
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	bfac      	ite	ge
 8004ad6:	2301      	movge	r3, #1
 8004ad8:	2300      	movlt	r3, #0
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f000 80ed 	beq.w	8004cbc <_ZN5Modem8simA76724RxCBEh+0x2fc>
			set_event(rx_evt);
 8004ae2:	2100      	movs	r1, #0
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f7ff feca 	bl	800487e <_ZN5Modem8simA76729set_eventENS0_9eventTypeE>
			serial_.RxintDis();
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8004af0:	3304      	adds	r3, #4
 8004af2:	4618      	mov	r0, r3
 8004af4:	f000 fee6 	bl	80058c4 <_ZN13System_serial6serial8RxintDisEv>
		}

	}
#pragma GCC diagnostic pop

}
 8004af8:	e0e0      	b.n	8004cbc <_ZN5Modem8simA76724RxCBEh+0x2fc>
	} else if (Rx_info.rx_mode == MSG_mode) {
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b00:	7adb      	ldrb	r3, [r3, #11]
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	bf0c      	ite	eq
 8004b08:	2301      	moveq	r3, #1
 8004b0a:	2300      	movne	r3, #0
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d072      	beq.n	8004bf8 <_ZN5Modem8simA76724RxCBEh+0x238>
		*Rx_info.Rx++ = data;
 8004b12:	78f8      	ldrb	r0, [r7, #3]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	1c5a      	adds	r2, r3, #1
 8004b1e:	6879      	ldr	r1, [r7, #4]
 8004b20:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8004b24:	610a      	str	r2, [r1, #16]
 8004b26:	4602      	mov	r2, r0
 8004b28:	701a      	strb	r2, [r3, #0]
		Rx_info.Rxcount++;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b30:	8a9b      	ldrh	r3, [r3, #20]
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	3301      	adds	r3, #1
 8004b36:	b29a      	uxth	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b3e:	829a      	strh	r2, [r3, #20]
		if (Rx_info.end_char != _LF) {
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b46:	7a1b      	ldrb	r3, [r3, #8]
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	2b0a      	cmp	r3, #10
 8004b4c:	bf14      	ite	ne
 8004b4e:	2301      	movne	r3, #1
 8004b50:	2300      	moveq	r3, #0
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00f      	beq.n	8004b78 <_ZN5Modem8simA76724RxCBEh+0x1b8>
			if (data == '>') {
 8004b58:	78fb      	ldrb	r3, [r7, #3]
 8004b5a:	2b3e      	cmp	r3, #62	@ 0x3e
 8004b5c:	f040 80ae 	bne.w	8004cbc <_ZN5Modem8simA76724RxCBEh+0x2fc>
				set_event(rx_evt);
 8004b60:	2100      	movs	r1, #0
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f7ff fe8b 	bl	800487e <_ZN5Modem8simA76729set_eventENS0_9eventTypeE>
				serial_.RxintDis();
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8004b6e:	3304      	adds	r3, #4
 8004b70:	4618      	mov	r0, r3
 8004b72:	f000 fea7 	bl	80058c4 <_ZN13System_serial6serial8RxintDisEv>
}
 8004b76:	e0a1      	b.n	8004cbc <_ZN5Modem8simA76724RxCBEh+0x2fc>
			if (Rx_info.end_char_count == 1 && data == 'E') {
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b7e:	7b1b      	ldrb	r3, [r3, #12]
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d104      	bne.n	8004b90 <_ZN5Modem8simA76724RxCBEh+0x1d0>
 8004b86:	78fb      	ldrb	r3, [r7, #3]
 8004b88:	2b45      	cmp	r3, #69	@ 0x45
 8004b8a:	d101      	bne.n	8004b90 <_ZN5Modem8simA76724RxCBEh+0x1d0>
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e000      	b.n	8004b92 <_ZN5Modem8simA76724RxCBEh+0x1d2>
 8004b90:	2300      	movs	r3, #0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d004      	beq.n	8004ba0 <_ZN5Modem8simA76724RxCBEh+0x1e0>
				Rx_info.release_event = 2;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b9c:	2202      	movs	r2, #2
 8004b9e:	739a      	strb	r2, [r3, #14]
			if (data == _LF) {
 8004ba0:	78fb      	ldrb	r3, [r7, #3]
 8004ba2:	2b0a      	cmp	r3, #10
 8004ba4:	d10a      	bne.n	8004bbc <_ZN5Modem8simA76724RxCBEh+0x1fc>
				Rx_info.end_char_count++;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004bac:	7b1b      	ldrb	r3, [r3, #12]
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	b2da      	uxtb	r2, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004bba:	731a      	strb	r2, [r3, #12]
			if (Rx_info.end_char_count == Rx_info.release_event) {
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004bc2:	7b1b      	ldrb	r3, [r3, #12]
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004bce:	7b9b      	ldrb	r3, [r3, #14]
 8004bd0:	b25b      	sxtb	r3, r3
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	bf0c      	ite	eq
 8004bd6:	2301      	moveq	r3, #1
 8004bd8:	2300      	movne	r3, #0
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d06d      	beq.n	8004cbc <_ZN5Modem8simA76724RxCBEh+0x2fc>
				set_event(rx_evt);
 8004be0:	2100      	movs	r1, #0
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f7ff fe4b 	bl	800487e <_ZN5Modem8simA76729set_eventENS0_9eventTypeE>
				serial_.RxintDis();
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8004bee:	3304      	adds	r3, #4
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f000 fe67 	bl	80058c4 <_ZN13System_serial6serial8RxintDisEv>
}
 8004bf6:	e061      	b.n	8004cbc <_ZN5Modem8simA76724RxCBEh+0x2fc>
	} else if (Rx_info.rx_mode == Notification_mode) {
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004bfe:	7adb      	ldrb	r3, [r3, #11]
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2b03      	cmp	r3, #3
 8004c04:	bf0c      	ite	eq
 8004c06:	2301      	moveq	r3, #1
 8004c08:	2300      	movne	r3, #0
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d055      	beq.n	8004cbc <_ZN5Modem8simA76724RxCBEh+0x2fc>
		*Rx_info.Rx++ = data;
 8004c10:	78f8      	ldrb	r0, [r7, #3]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	1c5a      	adds	r2, r3, #1
 8004c1c:	6879      	ldr	r1, [r7, #4]
 8004c1e:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8004c22:	610a      	str	r2, [r1, #16]
 8004c24:	4602      	mov	r2, r0
 8004c26:	701a      	strb	r2, [r3, #0]
		Rx_info.Rxcount++;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c2e:	8a9b      	ldrh	r3, [r3, #20]
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	3301      	adds	r3, #1
 8004c34:	b29a      	uxth	r2, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c3c:	829a      	strh	r2, [r3, #20]
		if (data == Rx_info.start_char_notiMode) {
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c44:	7f9b      	ldrb	r3, [r3, #30]
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	78fa      	ldrb	r2, [r7, #3]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	bf0c      	ite	eq
 8004c4e:	2301      	moveq	r3, #1
 8004c50:	2300      	movne	r3, #0
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d00c      	beq.n	8004c72 <_ZN5Modem8simA76724RxCBEh+0x2b2>
			Rx_info.release_event++;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c5e:	7b9b      	ldrb	r3, [r3, #14]
 8004c60:	b25b      	sxtb	r3, r3
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	3301      	adds	r3, #1
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	b25a      	sxtb	r2, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c70:	739a      	strb	r2, [r3, #14]
		if (data == Rx_info.end_char && Rx_info.release_event >= Rx_info.start_char_notiModeCount) {
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c78:	7a1b      	ldrb	r3, [r3, #8]
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	78fa      	ldrb	r2, [r7, #3]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d10e      	bne.n	8004ca0 <_ZN5Modem8simA76724RxCBEh+0x2e0>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c88:	7b9b      	ldrb	r3, [r3, #14]
 8004c8a:	b25b      	sxtb	r3, r3
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c94:	7fdb      	ldrb	r3, [r3, #31]
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	db01      	blt.n	8004ca0 <_ZN5Modem8simA76724RxCBEh+0x2e0>
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e000      	b.n	8004ca2 <_ZN5Modem8simA76724RxCBEh+0x2e2>
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00a      	beq.n	8004cbc <_ZN5Modem8simA76724RxCBEh+0x2fc>
			set_event(rx_evt);
 8004ca6:	2100      	movs	r1, #0
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f7ff fde8 	bl	800487e <_ZN5Modem8simA76729set_eventENS0_9eventTypeE>
			serial_.RxintDis();
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8004cb4:	3304      	adds	r3, #4
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f000 fe04 	bl	80058c4 <_ZN13System_serial6serial8RxintDisEv>
}
 8004cbc:	bf00      	nop
 8004cbe:	3708      	adds	r7, #8
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh>:

void simA7672::TxCB(UART_HandleTypeDef *huart) {

}

void simA7672::RxCBStatic(UART_HandleTypeDef *huart, uint8_t data) {
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	460b      	mov	r3, r1
 8004cce:	70fb      	strb	r3, [r7, #3]
	// Find the instance and call its instance method
	uint8_t i = 0;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < numberofuart; i++) {
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	73fb      	strb	r3, [r7, #15]
 8004cd8:	e009      	b.n	8004cee <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh+0x2a>
		if (ClassInstances[i].huart == huart) {
 8004cda:	7bfb      	ldrb	r3, [r7, #15]
 8004cdc:	4a11      	ldr	r2, [pc, #68]	@ (8004d24 <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh+0x60>)
 8004cde:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d006      	beq.n	8004cf6 <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh+0x32>
	for (i = 0; i < numberofuart; i++) {
 8004ce8:	7bfb      	ldrb	r3, [r7, #15]
 8004cea:	3301      	adds	r3, #1
 8004cec:	73fb      	strb	r3, [r7, #15]
 8004cee:	7bfb      	ldrb	r3, [r7, #15]
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d9f2      	bls.n	8004cda <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh+0x16>
 8004cf4:	e000      	b.n	8004cf8 <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh+0x34>
			break;
 8004cf6:	bf00      	nop
		}
	}

	if (ClassInstances[i].Instance) {
 8004cf8:	7bfb      	ldrb	r3, [r7, #15]
 8004cfa:	4a0a      	ldr	r2, [pc, #40]	@ (8004d24 <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh+0x60>)
 8004cfc:	00db      	lsls	r3, r3, #3
 8004cfe:	4413      	add	r3, r2
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d009      	beq.n	8004d1a <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh+0x56>
		ClassInstances[i].Instance->RxCB(data); // Delegate to instance-specific method
 8004d06:	7bfb      	ldrb	r3, [r7, #15]
 8004d08:	4a06      	ldr	r2, [pc, #24]	@ (8004d24 <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh+0x60>)
 8004d0a:	00db      	lsls	r3, r3, #3
 8004d0c:	4413      	add	r3, r2
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	78fa      	ldrb	r2, [r7, #3]
 8004d12:	4611      	mov	r1, r2
 8004d14:	4618      	mov	r0, r3
 8004d16:	f7ff fe53 	bl	80049c0 <_ZN5Modem8simA76724RxCBEh>
	}

}
 8004d1a:	bf00      	nop
 8004d1c:	3710      	adds	r7, #16
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	20003454 	.word	0x20003454

08004d28 <_ZN5Modem8simA767210TxCBStaticEP20__UART_HandleTypeDef>:
void simA7672::TxCBStatic(UART_HandleTypeDef *huart) {
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]

}
 8004d30:	bf00      	nop
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <_ZN15sensor_TempHumd5AHT20C1EP17I2C_HandleTypeDefhm>:
}




AHT20::AHT20( I2C_HandleTypeDef *ui2c,uint8_t devAddr,uint32_t timeout)
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	603b      	str	r3, [r7, #0]
 8004d48:	4613      	mov	r3, r2
 8004d4a:	71fb      	strb	r3, [r7, #7]
{
	_aht20_ui2c=ui2c;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	68ba      	ldr	r2, [r7, #8]
 8004d50:	605a      	str	r2, [r3, #4]
	devAddr_=devAddr;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	79fa      	ldrb	r2, [r7, #7]
 8004d56:	721a      	strb	r2, [r3, #8]
	timeout_ = timeout;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	683a      	ldr	r2, [r7, #0]
 8004d5c:	601a      	str	r2, [r3, #0]
}
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	4618      	mov	r0, r3
 8004d62:	3714      	adds	r7, #20
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <_ZN15sensor_TempHumd5AHT207measureEPmS1_>:
	uint8_t cmd = AHT20_SOFT_RESET;
		HAL_I2C_Master_Transmit(_aht20_ui2c, devAddr_ << 1, &cmd, 1, timeout_);
	}
}
void AHT20::measure(uint32_t *temp_,uint32_t *humid_)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b08a      	sub	sp, #40	@ 0x28
 8004d70:	af02      	add	r7, sp, #8
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	607a      	str	r2, [r7, #4]
	uint16_t counter = 0;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	83fb      	strh	r3, [r7, #30]
	System_Rtos::delay(50);
 8004d7c:	2032      	movs	r0, #50	@ 0x32
 8004d7e:	f000 fb07 	bl	8005390 <_ZN11System_Rtos5delayEm>
	uint8_t ahtTData[3];
	uint8_t ahtRData[7];
	ahtTData[0]=0xAC;
 8004d82:	23ac      	movs	r3, #172	@ 0xac
 8004d84:	763b      	strb	r3, [r7, #24]
	ahtTData[1]=0x33;
 8004d86:	2333      	movs	r3, #51	@ 0x33
 8004d88:	767b      	strb	r3, [r7, #25]
	ahtTData[2]=0x00;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	76bb      	strb	r3, [r7, #26]

	if(check_Device() == AHT_OK)
 8004d8e:	68f8      	ldr	r0, [r7, #12]
 8004d90:	f000 f875 	bl	8004e7e <_ZN15sensor_TempHumd5AHT2012check_DeviceEv>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	bf0c      	ite	eq
 8004d9a:	2301      	moveq	r3, #1
 8004d9c:	2300      	movne	r3, #0
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d068      	beq.n	8004e76 <_ZN15sensor_TempHumd5AHT207measureEPmS1_+0x10a>
	{

	HAL_I2C_Master_Transmit(_aht20_ui2c, devAddr_<<1, ahtTData, 3, timeout_);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6858      	ldr	r0, [r3, #4]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	7a1b      	ldrb	r3, [r3, #8]
 8004dac:	005b      	lsls	r3, r3, #1
 8004dae:	b299      	uxth	r1, r3
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f107 0218 	add.w	r2, r7, #24
 8004db8:	9300      	str	r3, [sp, #0]
 8004dba:	2303      	movs	r3, #3
 8004dbc:	f003 ffce 	bl	8008d5c <HAL_I2C_Master_Transmit>
	System_Rtos::delay(100);
 8004dc0:	2064      	movs	r0, #100	@ 0x64
 8004dc2:	f000 fae5 	bl	8005390 <_ZN11System_Rtos5delayEm>
    while(1){
    	HAL_I2C_Master_Receive(_aht20_ui2c, devAddr_<<1, ahtRData, 7, timeout_);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6858      	ldr	r0, [r3, #4]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	7a1b      	ldrb	r3, [r3, #8]
 8004dce:	005b      	lsls	r3, r3, #1
 8004dd0:	b299      	uxth	r1, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f107 0210 	add.w	r2, r7, #16
 8004dda:	9300      	str	r3, [sp, #0]
 8004ddc:	2307      	movs	r3, #7
 8004dde:	f004 f8bb 	bl	8008f58 <HAL_I2C_Master_Receive>
    	DATA_State=ahtRData[0];
 8004de2:	7c3a      	ldrb	r2, [r7, #16]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	725a      	strb	r2, [r3, #9]
    	if((DATA_State&(1<<7))==0)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	7a5b      	ldrb	r3, [r3, #9]
 8004dec:	b25b      	sxtb	r3, r3
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	db36      	blt.n	8004e60 <_ZN15sensor_TempHumd5AHT207measureEPmS1_+0xf4>
    		{
    	    DATA_Humi=ahtRData[1];
 8004df2:	7c7b      	ldrb	r3, [r7, #17]
 8004df4:	461a      	mov	r2, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	611a      	str	r2, [r3, #16]
    	    DATA_Humi=(DATA_Humi<<8)|ahtRData[2];
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	021b      	lsls	r3, r3, #8
 8004e00:	7cba      	ldrb	r2, [r7, #18]
 8004e02:	431a      	orrs	r2, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	611a      	str	r2, [r3, #16]
    	    DATA_Humi=(DATA_Humi<<4)|(ahtRData[3]>>4);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	011b      	lsls	r3, r3, #4
 8004e0e:	7cfa      	ldrb	r2, [r7, #19]
 8004e10:	0912      	lsrs	r2, r2, #4
 8004e12:	b2d2      	uxtb	r2, r2
 8004e14:	431a      	orrs	r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	611a      	str	r2, [r3, #16]
    	    DATA_Temp=ahtRData[3]&0x0F;
 8004e1a:	7cfb      	ldrb	r3, [r7, #19]
 8004e1c:	f003 020f 	and.w	r2, r3, #15
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	60da      	str	r2, [r3, #12]
    	    DATA_Temp=(DATA_Temp<<8)|ahtRData[4];
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	021b      	lsls	r3, r3, #8
 8004e2a:	7d3a      	ldrb	r2, [r7, #20]
 8004e2c:	431a      	orrs	r2, r3
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	60da      	str	r2, [r3, #12]
    	    DATA_Temp=(DATA_Temp<<8)|ahtRData[5];
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	021b      	lsls	r3, r3, #8
 8004e38:	7d7a      	ldrb	r2, [r7, #21]
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	60da      	str	r2, [r3, #12]
    	    DATA_CRCreg= ahtRData[6];
 8004e40:	7dba      	ldrb	r2, [r7, #22]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	729a      	strb	r2, [r3, #10]

    	    *temp_ = temp();
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	f000 f83a 	bl	8004ec0 <_ZN15sensor_TempHumd5AHT204tempEv>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	601a      	str	r2, [r3, #0]
    	    *humid_ = humid();
 8004e52:	68f8      	ldr	r0, [r7, #12]
 8004e54:	f000 f870 	bl	8004f38 <_ZN15sensor_TempHumd5AHT205humidEv>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	601a      	str	r2, [r3, #0]
    		break;
 8004e5e:	e00a      	b.n	8004e76 <_ZN15sensor_TempHumd5AHT207measureEPmS1_+0x10a>
    		}
    	else {
    		counter++;
 8004e60:	8bfb      	ldrh	r3, [r7, #30]
 8004e62:	3301      	adds	r3, #1
 8004e64:	83fb      	strh	r3, [r7, #30]
    		System_Rtos::delay(10);
 8004e66:	200a      	movs	r0, #10
 8004e68:	f000 fa92 	bl	8005390 <_ZN11System_Rtos5delayEm>

    		if(counter > 50)
 8004e6c:	8bfb      	ldrh	r3, [r7, #30]
 8004e6e:	2b32      	cmp	r3, #50	@ 0x32
 8004e70:	d800      	bhi.n	8004e74 <_ZN15sensor_TempHumd5AHT207measureEPmS1_+0x108>
    	HAL_I2C_Master_Receive(_aht20_ui2c, devAddr_<<1, ahtRData, 7, timeout_);
 8004e72:	e7a8      	b.n	8004dc6 <_ZN15sensor_TempHumd5AHT207measureEPmS1_+0x5a>
    		{
    			break;
 8004e74:	bf00      	nop
    		}
    	}
    }
	}
}
 8004e76:	bf00      	nop
 8004e78:	3720      	adds	r7, #32
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}

08004e7e <_ZN15sensor_TempHumd5AHT2012check_DeviceEv>:

enum AHT20::status AHT20::check_Device()
{
 8004e7e:	b580      	push	{r7, lr}
 8004e80:	b084      	sub	sp, #16
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]

	status stat = AHT_OK;
 8004e86:	2300      	movs	r3, #0
 8004e88:	73fb      	strb	r3, [r7, #15]

	if(HAL_I2C_IsDeviceReady(_aht20_ui2c, devAddr_ << 1, 3, 1000) != HAL_OK)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6858      	ldr	r0, [r3, #4]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	7a1b      	ldrb	r3, [r3, #8]
 8004e92:	005b      	lsls	r3, r3, #1
 8004e94:	b299      	uxth	r1, r3
 8004e96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004e9a:	2203      	movs	r2, #3
 8004e9c:	f004 fa8e 	bl	80093bc <HAL_I2C_IsDeviceReady>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	bf14      	ite	ne
 8004ea6:	2301      	movne	r3, #1
 8004ea8:	2300      	moveq	r3, #0
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d001      	beq.n	8004eb4 <_ZN15sensor_TempHumd5AHT2012check_DeviceEv+0x36>
	{
		return AHT_ERR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e000      	b.n	8004eb6 <_ZN15sensor_TempHumd5AHT2012check_DeviceEv+0x38>
	}

	return stat;
 8004eb4:	7bfb      	ldrb	r3, [r7, #15]

}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3710      	adds	r7, #16
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
	...

08004ec0 <_ZN15sensor_TempHumd5AHT204tempEv>:


uint32_t AHT20::temp()
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
	uint32_t TEMP_CALC;
	TEMP_CALC= (((DATA_Temp/1024.0)/1024.0) * 200.0) -50.0;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f7fb fb19 	bl	8000504 <__aeabi_ui2d>
 8004ed2:	f04f 0200 	mov.w	r2, #0
 8004ed6:	4b15      	ldr	r3, [pc, #84]	@ (8004f2c <_ZN15sensor_TempHumd5AHT204tempEv+0x6c>)
 8004ed8:	f7fb fcb8 	bl	800084c <__aeabi_ddiv>
 8004edc:	4602      	mov	r2, r0
 8004ede:	460b      	mov	r3, r1
 8004ee0:	4610      	mov	r0, r2
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	f04f 0200 	mov.w	r2, #0
 8004ee8:	4b10      	ldr	r3, [pc, #64]	@ (8004f2c <_ZN15sensor_TempHumd5AHT204tempEv+0x6c>)
 8004eea:	f7fb fcaf 	bl	800084c <__aeabi_ddiv>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	460b      	mov	r3, r1
 8004ef2:	4610      	mov	r0, r2
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	f04f 0200 	mov.w	r2, #0
 8004efa:	4b0d      	ldr	r3, [pc, #52]	@ (8004f30 <_ZN15sensor_TempHumd5AHT204tempEv+0x70>)
 8004efc:	f7fb fb7c 	bl	80005f8 <__aeabi_dmul>
 8004f00:	4602      	mov	r2, r0
 8004f02:	460b      	mov	r3, r1
 8004f04:	4610      	mov	r0, r2
 8004f06:	4619      	mov	r1, r3
 8004f08:	f04f 0200 	mov.w	r2, #0
 8004f0c:	4b09      	ldr	r3, [pc, #36]	@ (8004f34 <_ZN15sensor_TempHumd5AHT204tempEv+0x74>)
 8004f0e:	f7fb f9bb 	bl	8000288 <__aeabi_dsub>
 8004f12:	4602      	mov	r2, r0
 8004f14:	460b      	mov	r3, r1
 8004f16:	4610      	mov	r0, r2
 8004f18:	4619      	mov	r1, r3
 8004f1a:	f7fb fe45 	bl	8000ba8 <__aeabi_d2uiz>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	60fb      	str	r3, [r7, #12]
	return TEMP_CALC;
 8004f22:	68fb      	ldr	r3, [r7, #12]
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3710      	adds	r7, #16
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	40900000 	.word	0x40900000
 8004f30:	40690000 	.word	0x40690000
 8004f34:	40490000 	.word	0x40490000

08004f38 <_ZN15sensor_TempHumd5AHT205humidEv>:



uint32_t AHT20::humid()
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
	uint32_t HUMID_CALC;
	HUMID_CALC = ((DATA_Humi/1024.0)/1024.0)*100;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	691b      	ldr	r3, [r3, #16]
 8004f44:	4618      	mov	r0, r3
 8004f46:	f7fb fadd 	bl	8000504 <__aeabi_ui2d>
 8004f4a:	f04f 0200 	mov.w	r2, #0
 8004f4e:	4b11      	ldr	r3, [pc, #68]	@ (8004f94 <_ZN15sensor_TempHumd5AHT205humidEv+0x5c>)
 8004f50:	f7fb fc7c 	bl	800084c <__aeabi_ddiv>
 8004f54:	4602      	mov	r2, r0
 8004f56:	460b      	mov	r3, r1
 8004f58:	4610      	mov	r0, r2
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	f04f 0200 	mov.w	r2, #0
 8004f60:	4b0c      	ldr	r3, [pc, #48]	@ (8004f94 <_ZN15sensor_TempHumd5AHT205humidEv+0x5c>)
 8004f62:	f7fb fc73 	bl	800084c <__aeabi_ddiv>
 8004f66:	4602      	mov	r2, r0
 8004f68:	460b      	mov	r3, r1
 8004f6a:	4610      	mov	r0, r2
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	f04f 0200 	mov.w	r2, #0
 8004f72:	4b09      	ldr	r3, [pc, #36]	@ (8004f98 <_ZN15sensor_TempHumd5AHT205humidEv+0x60>)
 8004f74:	f7fb fb40 	bl	80005f8 <__aeabi_dmul>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	4610      	mov	r0, r2
 8004f7e:	4619      	mov	r1, r3
 8004f80:	f7fb fe12 	bl	8000ba8 <__aeabi_d2uiz>
 8004f84:	4603      	mov	r3, r0
 8004f86:	60fb      	str	r3, [r7, #12]
	return HUMID_CALC;
 8004f88:	68fb      	ldr	r3, [r7, #12]
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3710      	adds	r7, #16
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	40900000 	.word	0x40900000
 8004f98:	40590000 	.word	0x40590000

08004f9c <_ZN17sensor_liquidMeas12liquidSensorC1EP17ADC_HandleTypeDef>:
#include "adc.h"

namespace sensor_liquidMeas {


liquidSensor::liquidSensor(ADC_HandleTypeDef *hadc)
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a10      	ldr	r2, [pc, #64]	@ (8004fec <_ZN17sensor_liquidMeas12liquidSensorC1EP17ADC_HandleTypeDef+0x50>)
 8004faa:	609a      	str	r2, [r3, #8]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	60da      	str	r2, [r3, #12]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f04f 0200 	mov.w	r2, #0
 8004fb8:	611a      	str	r2, [r3, #16]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a0b      	ldr	r2, [pc, #44]	@ (8004fec <_ZN17sensor_liquidMeas12liquidSensorC1EP17ADC_HandleTypeDef+0x50>)
 8004fbe:	615a      	str	r2, [r3, #20]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	761a      	strb	r2, [r3, #24]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	61da      	str	r2, [r3, #28]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	621a      	str	r2, [r3, #32]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	625a      	str	r2, [r3, #36]	@ 0x24
{
	hadc_sensor = hadc;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	683a      	ldr	r2, [r7, #0]
 8004fdc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr
 8004fec:	bf800000 	.word	0xbf800000

08004ff0 <_ZN17sensor_liquidMeas12liquidSensor16Measurement_loopENS0_4unitEfffPhPfmPmS4_>:

void liquidSensor::Measurement_loop(enum unit unit_,float LowSpan,float fullSpan,float VoltOut,uint8_t *getlevel,float *consumption,uint32_t curEpochTime,uint32_t *startEpochtime,uint32_t *endEpochtime)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b088      	sub	sp, #32
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	61f8      	str	r0, [r7, #28]
 8004ff8:	ed87 0a05 	vstr	s0, [r7, #20]
 8004ffc:	edc7 0a04 	vstr	s1, [r7, #16]
 8005000:	ed87 1a03 	vstr	s2, [r7, #12]
 8005004:	60ba      	str	r2, [r7, #8]
 8005006:	607b      	str	r3, [r7, #4]
 8005008:	460b      	mov	r3, r1
 800500a:	76fb      	strb	r3, [r7, #27]
	getLevel(unit_,LowSpan,fullSpan,VoltOut,getlevel);
 800500c:	7efb      	ldrb	r3, [r7, #27]
 800500e:	68ba      	ldr	r2, [r7, #8]
 8005010:	ed97 1a03 	vldr	s2, [r7, #12]
 8005014:	edd7 0a04 	vldr	s1, [r7, #16]
 8005018:	ed97 0a05 	vldr	s0, [r7, #20]
 800501c:	4619      	mov	r1, r3
 800501e:	69f8      	ldr	r0, [r7, #28]
 8005020:	f000 f80e 	bl	8005040 <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh>
	consumptionliters(consumption);
 8005024:	6879      	ldr	r1, [r7, #4]
 8005026:	69f8      	ldr	r0, [r7, #28]
 8005028:	f000 f8e8 	bl	80051fc <_ZN17sensor_liquidMeas12liquidSensor17consumptionlitersEPf>
	refuelingDetection(curEpochTime,startEpochtime,endEpochtime);
 800502c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800502e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005030:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005032:	69f8      	ldr	r0, [r7, #28]
 8005034:	f000 f91c 	bl	8005270 <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_>
}
 8005038:	bf00      	nop
 800503a:	3720      	adds	r7, #32
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh>:

liquidSensor::status liquidSensor::getLevel(enum unit unit_,float LowSpan,float fullSpan,float VoltOut,uint8_t *getlevel)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b09a      	sub	sp, #104	@ 0x68
 8005044:	af00      	add	r7, sp, #0
 8005046:	61f8      	str	r0, [r7, #28]
 8005048:	460b      	mov	r3, r1
 800504a:	ed87 0a05 	vstr	s0, [r7, #20]
 800504e:	edc7 0a04 	vstr	s1, [r7, #16]
 8005052:	ed87 1a03 	vstr	s2, [r7, #12]
 8005056:	60ba      	str	r2, [r7, #8]
 8005058:	76fb      	strb	r3, [r7, #27]


	enum status stat = liquidSensor_OK;
 800505a:	2300      	movs	r3, #0
 800505c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	float totalSpan = fullSpan - LowSpan;
 8005060:	ed97 7a04 	vldr	s14, [r7, #16]
 8005064:	edd7 7a05 	vldr	s15, [r7, #20]
 8005068:	ee77 7a67 	vsub.f32	s15, s14, s15
 800506c:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

	float current_mA;

	  uint32_t adcaverage[10] = {0};
 8005070:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005074:	2228      	movs	r2, #40	@ 0x28
 8005076:	2100      	movs	r1, #0
 8005078:	4618      	mov	r0, r3
 800507a:	f00a fc20 	bl	800f8be <memset>
	  uint32_t adcValue = 0;
 800507e:	2300      	movs	r3, #0
 8005080:	667b      	str	r3, [r7, #100]	@ 0x64




	if(hadc_sensor == NULL)
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005086:	2b00      	cmp	r3, #0
 8005088:	d101      	bne.n	800508e <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh+0x4e>
	{
		return liquidSensor_ERR;
 800508a:	2301      	movs	r3, #1
 800508c:	e0a8      	b.n	80051e0 <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh+0x1a0>
	}
    for(int i = 0; i< 10; i++)
 800508e:	2300      	movs	r3, #0
 8005090:	663b      	str	r3, [r7, #96]	@ 0x60
 8005092:	e030      	b.n	80050f6 <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh+0xb6>
    {
        CheckError(HAL_ADC_Start(hadc_sensor),liquidSensor_ERR,HAL_OK);
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005098:	4618      	mov	r0, r3
 800509a:	f002 f85b 	bl	8007154 <HAL_ADC_Start>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	bf14      	ite	ne
 80050a4:	2301      	movne	r3, #1
 80050a6:	2300      	moveq	r3, #0
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d001      	beq.n	80050b2 <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh+0x72>
 80050ae:	2301      	movs	r3, #1
 80050b0:	e096      	b.n	80051e0 <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh+0x1a0>
        CheckError(HAL_ADC_PollForConversion(hadc_sensor, 10000),liquidSensor_ERR,HAL_OK); //take the value
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050b6:	f242 7110 	movw	r1, #10000	@ 0x2710
 80050ba:	4618      	mov	r0, r3
 80050bc:	f002 f94f 	bl	800735e <HAL_ADC_PollForConversion>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	bf14      	ite	ne
 80050c6:	2301      	movne	r3, #1
 80050c8:	2300      	moveq	r3, #0
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d001      	beq.n	80050d4 <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh+0x94>
 80050d0:	2301      	movs	r3, #1
 80050d2:	e085      	b.n	80051e0 <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh+0x1a0>
        adcaverage[i] = HAL_ADC_GetValue(hadc_sensor);
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050d8:	4618      	mov	r0, r3
 80050da:	f002 fbeb 	bl	80078b4 <HAL_ADC_GetValue>
 80050de:	4602      	mov	r2, r0
 80050e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	3360      	adds	r3, #96	@ 0x60
 80050e6:	f107 0108 	add.w	r1, r7, #8
 80050ea:	440b      	add	r3, r1
 80050ec:	f843 2c44 	str.w	r2, [r3, #-68]
    for(int i = 0; i< 10; i++)
 80050f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80050f2:	3301      	adds	r3, #1
 80050f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80050f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80050f8:	2b09      	cmp	r3, #9
 80050fa:	ddcb      	ble.n	8005094 <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh+0x54>
    }
    HAL_ADC_Stop(hadc_sensor);
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005100:	4618      	mov	r0, r3
 8005102:	f002 f8f9 	bl	80072f8 <HAL_ADC_Stop>
    for(int i = 0; i< 10; i++)
 8005106:	2300      	movs	r3, #0
 8005108:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800510a:	e00d      	b.n	8005128 <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh+0xe8>
    {
    	adcValue = adcValue +  adcaverage[i];
 800510c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	3360      	adds	r3, #96	@ 0x60
 8005112:	f107 0208 	add.w	r2, r7, #8
 8005116:	4413      	add	r3, r2
 8005118:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800511c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800511e:	4413      	add	r3, r2
 8005120:	667b      	str	r3, [r7, #100]	@ 0x64
    for(int i = 0; i< 10; i++)
 8005122:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005124:	3301      	adds	r3, #1
 8005126:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005128:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800512a:	2b09      	cmp	r3, #9
 800512c:	ddee      	ble.n	800510c <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh+0xcc>
    }
    adcValue = adcValue/10;
 800512e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005130:	4a2d      	ldr	r2, [pc, #180]	@ (80051e8 <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh+0x1a8>)
 8005132:	fba2 2303 	umull	r2, r3, r2, r3
 8005136:	08db      	lsrs	r3, r3, #3
 8005138:	667b      	str	r3, [r7, #100]	@ 0x64
    float voltage = (adcValue / Resolution) * Vref;
 800513a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800513c:	ee07 3a90 	vmov	s15, r3
 8005140:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005144:	eddf 6a29 	vldr	s13, [pc, #164]	@ 80051ec <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh+0x1ac>
 8005148:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800514c:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 80051f0 <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh+0x1b0>
 8005150:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005154:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    current_mA = ((voltage/VoltOut) *  (max_cur - min_cur)) + min_cur;
 8005158:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 800515c:	ed97 7a03 	vldr	s14, [r7, #12]
 8005160:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005164:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8005168:	ee67 7a87 	vmul.f32	s15, s15, s14
 800516c:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8005170:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005174:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    fuel_level = (current_mA - min_cur) / (max_cur - min_cur) * totalSpan;
 8005178:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800517c:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8005180:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005184:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8005188:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800518c:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8005190:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	edc3 7a01 	vstr	s15, [r3, #4]
    tank_volumeLiters = (fuel_level/totalSpan) * max_liters;
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	edd3 6a01 	vldr	s13, [r3, #4]
 80051a0:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80051a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051a8:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80051f4 <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh+0x1b4>
 80051ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	edc3 7a00 	vstr	s15, [r3]
	*getlevel = (tank_volumeLiters/max_liters) * 100; //get percentage
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	ed93 7a00 	vldr	s14, [r3]
 80051bc:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 80051f4 <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh+0x1b4>
 80051c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80051c4:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80051f8 <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh+0x1b8>
 80051c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80051cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051d0:	edc7 7a01 	vstr	s15, [r7, #4]
 80051d4:	793b      	ldrb	r3, [r7, #4]
 80051d6:	b2da      	uxtb	r2, r3
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	701a      	strb	r2, [r3, #0]

	  return stat;
 80051dc:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3768      	adds	r7, #104	@ 0x68
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	cccccccd 	.word	0xcccccccd
 80051ec:	45800000 	.word	0x45800000
 80051f0:	40533333 	.word	0x40533333
 80051f4:	43fa0000 	.word	0x43fa0000
 80051f8:	42c80000 	.word	0x42c80000

080051fc <_ZN17sensor_liquidMeas12liquidSensor17consumptionlitersEPf>:

void liquidSensor::consumptionliters(float *consumption)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]

    uint32_t current_time = HAL_GetTick();
 8005206:	f001 ff31 	bl	800706c <HAL_GetTick>
 800520a:	60f8      	str	r0, [r7, #12]

    if(prev_volumeLiters < tank_volumeLiters)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	ed93 7a02 	vldr	s14, [r3, #8]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	edd3 7a00 	vldr	s15, [r3]
 8005218:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800521c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005220:	d507      	bpl.n	8005232 <_ZN17sensor_liquidMeas12liquidSensor17consumptionlitersEPf+0x36>
    {
        prev_volumeLiters = tank_volumeLiters;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	609a      	str	r2, [r3, #8]
        last_consumption_time = current_time;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	61da      	str	r2, [r3, #28]

        return;
 8005230:	e018      	b.n	8005264 <_ZN17sensor_liquidMeas12liquidSensor17consumptionlitersEPf+0x68>
    }

    if (current_time - last_consumption_time >= 3600000) { // 1hour
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	69db      	ldr	r3, [r3, #28]
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	4a0c      	ldr	r2, [pc, #48]	@ (800526c <_ZN17sensor_liquidMeas12liquidSensor17consumptionlitersEPf+0x70>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d311      	bcc.n	8005264 <_ZN17sensor_liquidMeas12liquidSensor17consumptionlitersEPf+0x68>
    	*consumption = prev_volumeLiters - tank_volumeLiters;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	ed93 7a02 	vldr	s14, [r3, #8]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	edd3 7a00 	vldr	s15, [r3]
 800524c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	edc3 7a00 	vstr	s15, [r3]

        // Update for next interval
        prev_volumeLiters = tank_volumeLiters;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	609a      	str	r2, [r3, #8]
        last_consumption_time = current_time;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	61da      	str	r2, [r3, #28]
    }

}
 8005264:	3710      	adds	r7, #16
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	0036ee80 	.word	0x0036ee80

08005270 <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_>:

void liquidSensor::refuelingDetection(uint32_t curEpochTime,uint32_t *startEpochtime,uint32_t *endEpochtime)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	607a      	str	r2, [r7, #4]
 800527c:	603b      	str	r3, [r7, #0]
	current_volume_change = tank_volumeLiters;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	611a      	str	r2, [r3, #16]
    if(prev_volume_change < 0)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	edd3 7a05 	vldr	s15, [r3, #20]
 800528c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005294:	d504      	bpl.n	80052a0 <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_+0x30>
    {
    	prev_volume_change = current_volume_change;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	691a      	ldr	r2, [r3, #16]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	615a      	str	r2, [r3, #20]

        return;
 800529e:	e044      	b.n	800532a <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_+0xba>
    }

    // Calculate the change in volume
  volume_change = current_volume_change - prev_volume_change;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	ed93 7a04 	vldr	s14, [r3, #16]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	edd3 7a05 	vldr	s15, [r3, #20]
 80052ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80052b4:	ee17 2a90 	vmov	r2, s15
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	60da      	str	r2, [r3, #12]

     refueling_start_time = HAL_GetTick();
 80052bc:	f001 fed6 	bl	800706c <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	621a      	str	r2, [r3, #32]


  if (!refueling_active) {
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	7e1b      	ldrb	r3, [r3, #24]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d111      	bne.n	80052f2 <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_+0x82>
	    // Detect start of refueling
      if (volume_change > refueling_threshold) {
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	2b05      	cmp	r3, #5
 80052d4:	dd25      	ble.n	8005322 <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_+0xb2>
    	  refueling_active = 1;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2201      	movs	r2, #1
 80052da:	761a      	strb	r2, [r3, #24]
    	  refueling_prev_time = refueling_start_time;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6a1a      	ldr	r2, [r3, #32]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	625a      	str	r2, [r3, #36]	@ 0x24
    	  *startEpochtime = curEpochTime;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	68ba      	ldr	r2, [r7, #8]
 80052e8:	601a      	str	r2, [r3, #0]
    	  *endEpochtime = 0; //make it zero so we know we are refueling now to erase previous end time so user dont get confused
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	2200      	movs	r2, #0
 80052ee:	601a      	str	r2, [r3, #0]
 80052f0:	e017      	b.n	8005322 <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_+0xb2>
      }
  }
  else
  {
	  if (volume_change <= 0) {
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	dc0f      	bgt.n	800531a <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_+0xaa>
		  if ((refueling_start_time - refueling_prev_time) >= refuel_stabilize_time) {
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6a1a      	ldr	r2, [r3, #32]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	f241 3287 	movw	r2, #4999	@ 0x1387
 8005308:	4293      	cmp	r3, r2
 800530a:	d90a      	bls.n	8005322 <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_+0xb2>

			  refueling_active = 0;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	761a      	strb	r2, [r3, #24]
			  *endEpochtime = curEpochTime;
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	68ba      	ldr	r2, [r7, #8]
 8005316:	601a      	str	r2, [r3, #0]
 8005318:	e003      	b.n	8005322 <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_+0xb2>

		  }
	  }
	  else
	  {
    	  refueling_prev_time = refueling_start_time;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6a1a      	ldr	r2, [r3, #32]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	625a      	str	r2, [r3, #36]	@ 0x24
	  }
  }

  // Update prev_volume for the next iteration
	prev_volume_change = current_volume_change;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	691a      	ldr	r2, [r3, #16]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	615a      	str	r2, [r3, #20]

}
 800532a:	3710      	adds	r7, #16
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <_ZN11sensor_pzem9PZEM_004TC1EP20__UART_HandleTypeDef>:
#include "System_Rtos.hpp"
#include "sensor_pzem.hpp"

namespace sensor_pzem {

PZEM_004T::PZEM_004T(UART_HandleTypeDef *huart) :
 8005330:	b580      	push	{r7, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
		serial_(huart) {
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	3304      	adds	r3, #4
 800533e:	6839      	ldr	r1, [r7, #0]
 8005340:	4618      	mov	r0, r3
 8005342:	f000 fa78 	bl	8005836 <_ZN13System_serial6serialC1EP20__UART_HandleTypeDef>
	huart_ = huart;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	683a      	ldr	r2, [r7, #0]
 800534a:	601a      	str	r2, [r3, #0]
}
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4618      	mov	r0, r3
 8005350:	3708      	adds	r7, #8
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
	...

08005358 <_ZN11sensor_pzem9PZEM_004T4initEv>:

void PZEM_004T::init() {
 8005358:	b580      	push	{r7, lr}
 800535a:	b082      	sub	sp, #8
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
	serial_.TransmitData(rst_buf, 4, 1000);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	1d18      	adds	r0, r3, #4
 8005364:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005368:	2204      	movs	r2, #4
 800536a:	4908      	ldr	r1, [pc, #32]	@ (800538c <_ZN11sensor_pzem9PZEM_004T4initEv+0x34>)
 800536c:	f000 fa85 	bl	800587a <_ZN13System_serial6serial12TransmitDataEPKhtm>
	serial_.ReceiveData(res_buf, 25, 500);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	1d18      	adds	r0, r3, #4
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f103 0108 	add.w	r1, r3, #8
 800537a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800537e:	2219      	movs	r2, #25
 8005380:	f000 fa68 	bl	8005854 <_ZN13System_serial6serial11ReceiveDataEPhtm>
}
 8005384:	bf00      	nop
 8005386:	3708      	adds	r7, #8
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}
 800538c:	08012480 	.word	0x08012480

08005390 <_ZN11System_Rtos5delayEm>:
#include "cstring"

namespace System_Rtos {

void delay(uint32_t d)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  vTaskDelay(pdMS_TO_TICKS(d));
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800539e:	fb02 f303 	mul.w	r3, r2, r3
 80053a2:	4a05      	ldr	r2, [pc, #20]	@ (80053b8 <_ZN11System_Rtos5delayEm+0x28>)
 80053a4:	fba2 2303 	umull	r2, r3, r2, r3
 80053a8:	099b      	lsrs	r3, r3, #6
 80053aa:	4618      	mov	r0, r3
 80053ac:	f007 fe64 	bl	800d078 <vTaskDelay>
}
 80053b0:	bf00      	nop
 80053b2:	3708      	adds	r7, #8
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	10624dd3 	.word	0x10624dd3

080053bc <_ZN11System_Rtos14freertos_TasksC1EPFvPvEPKctS1_m>:

freertos_Tasks::freertos_Tasks(TaskFunction_t pxTaskCode_, const char *pcName_, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	607a      	str	r2, [r7, #4]
 80053c8:	807b      	strh	r3, [r7, #2]
const configSTACK_DEPTH_TYPE usStackDepth_, void *const pvParameters_,
		UBaseType_t uxPriority_): taskHandle(0) {
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2200      	movs	r2, #0
 80053ce:	621a      	str	r2, [r3, #32]

	pxTask = pxTaskCode_;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	68ba      	ldr	r2, [r7, #8]
 80053d4:	601a      	str	r2, [r3, #0]
	std::strcpy(pcName, pcName_);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	3304      	adds	r3, #4
 80053da:	6879      	ldr	r1, [r7, #4]
 80053dc:	4618      	mov	r0, r3
 80053de:	f00a fb7a 	bl	800fad6 <strcpy>
	usStackDepth = usStackDepth_;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	887a      	ldrh	r2, [r7, #2]
 80053e6:	829a      	strh	r2, [r3, #20]
	pvParameters = pvParameters_;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	69ba      	ldr	r2, [r7, #24]
 80053ec:	619a      	str	r2, [r3, #24]
	uxPriority = uxPriority_;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	69fa      	ldr	r2, [r7, #28]
 80053f2:	61da      	str	r2, [r3, #28]


}
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	4618      	mov	r0, r3
 80053f8:	3710      	adds	r7, #16
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}

080053fe <_ZN11System_Rtos14freertos_Tasks10createTaskEv>:

void freertos_Tasks::createTask() {
 80053fe:	b5b0      	push	{r4, r5, r7, lr}
 8005400:	b084      	sub	sp, #16
 8005402:	af02      	add	r7, sp, #8
 8005404:	6078      	str	r0, [r7, #4]
	xTaskCreate(pxTask, pcName, usStackDepth, pvParameters, uxPriority,
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6818      	ldr	r0, [r3, #0]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	1d19      	adds	r1, r3, #4
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	8a9c      	ldrh	r4, [r3, #20]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	699d      	ldr	r5, [r3, #24]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	69db      	ldr	r3, [r3, #28]
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	3220      	adds	r2, #32
 800541e:	9201      	str	r2, [sp, #4]
 8005420:	9300      	str	r3, [sp, #0]
 8005422:	462b      	mov	r3, r5
 8005424:	4622      	mov	r2, r4
 8005426:	f007 fcc9 	bl	800cdbc <xTaskCreate>
			&taskHandle);
}
 800542a:	bf00      	nop
 800542c:	3708      	adds	r7, #8
 800542e:	46bd      	mov	sp, r7
 8005430:	bdb0      	pop	{r4, r5, r7, pc}

08005432 <_ZN11System_Rtos15freertos_queuesC1EttPh>:
}




freertos_queues::freertos_queues(uint16_t queLen_,uint16_t itemsize_, uint8_t *pucQueueStorage_)
 8005432:	b480      	push	{r7}
 8005434:	b085      	sub	sp, #20
 8005436:	af00      	add	r7, sp, #0
 8005438:	60f8      	str	r0, [r7, #12]
 800543a:	607b      	str	r3, [r7, #4]
 800543c:	460b      	mov	r3, r1
 800543e:	817b      	strh	r3, [r7, #10]
 8005440:	4613      	mov	r3, r2
 8005442:	813b      	strh	r3, [r7, #8]
{
	 queLen = queLen_;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	897a      	ldrh	r2, [r7, #10]
 8005448:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
	 itemsize = itemsize_;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	893a      	ldrh	r2, [r7, #8]
 8005450:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
	 pucQueueStorage = pucQueueStorage_;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	659a      	str	r2, [r3, #88]	@ 0x58

}
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	4618      	mov	r0, r3
 800545e:	3714      	adds	r7, #20
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <_ZN11System_Rtos15freertos_queues11queueCreateEv>:

void freertos_queues::queueCreate()
{
 8005468:	b590      	push	{r4, r7, lr}
 800546a:	b085      	sub	sp, #20
 800546c:	af02      	add	r7, sp, #8
 800546e:	6078      	str	r0, [r7, #4]
	xQueue = xQueueCreateStatic(queLen,itemsize,pucQueueStorage,&xStaticQueue);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005476:	4618      	mov	r0, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800547e:	461c      	mov	r4, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	3304      	adds	r3, #4
 8005488:	2100      	movs	r1, #0
 800548a:	9100      	str	r1, [sp, #0]
 800548c:	4621      	mov	r1, r4
 800548e:	f006 ffa5 	bl	800c3dc <xQueueGenericCreateStatic>
 8005492:	4602      	mov	r2, r0
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	601a      	str	r2, [r3, #0]
}
 8005498:	bf00      	nop
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	bd90      	pop	{r4, r7, pc}

080054a0 <_ZN11System_Rtos15freertos_queues9queueSendEPv>:


enum freertos_queues::queues_stat freertos_queues::queueSend(void *SendBuf)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
	enum queues_stat stat = queues_sent;
 80054aa:	2301      	movs	r3, #1
 80054ac:	73fb      	strb	r3, [r7, #15]

	if(xQueueSend(xQueue,SendBuf,pdMS_TO_TICKS(200)) != pdPASS)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6818      	ldr	r0, [r3, #0]
 80054b2:	2300      	movs	r3, #0
 80054b4:	22c8      	movs	r2, #200	@ 0xc8
 80054b6:	6839      	ldr	r1, [r7, #0]
 80054b8:	f007 f830 	bl	800c51c <xQueueGenericSend>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b01      	cmp	r3, #1
 80054c0:	bf14      	ite	ne
 80054c2:	2301      	movne	r3, #1
 80054c4:	2300      	moveq	r3, #0
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d001      	beq.n	80054d0 <_ZN11System_Rtos15freertos_queues9queueSendEPv+0x30>
	{
       return queues_err;
 80054cc:	2303      	movs	r3, #3
 80054ce:	e000      	b.n	80054d2 <_ZN11System_Rtos15freertos_queues9queueSendEPv+0x32>
	}


	return stat;
 80054d0:	7bfb      	ldrb	r3, [r7, #15]

}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3710      	adds	r7, #16
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}

080054da <_ZN11System_Rtos15freertos_queues12queueReceiveEPv>:
enum freertos_queues::queues_stat freertos_queues::queueReceive(void *RecvBuf)
{
 80054da:	b580      	push	{r7, lr}
 80054dc:	b084      	sub	sp, #16
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
 80054e2:	6039      	str	r1, [r7, #0]
	enum queues_stat stat = queues_nothing;
 80054e4:	2302      	movs	r3, #2
 80054e6:	73fb      	strb	r3, [r7, #15]

    if( xQueueReceive( xQueue,
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2232      	movs	r2, #50	@ 0x32
 80054ee:	6839      	ldr	r1, [r7, #0]
 80054f0:	4618      	mov	r0, r3
 80054f2:	f007 f9b3 	bl	800c85c <xQueueReceive>
 80054f6:	4603      	mov	r3, r0
    		           RecvBuf,
					   pdMS_TO_TICKS(50)) == pdPASS )
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	bf0c      	ite	eq
 80054fc:	2301      	moveq	r3, #1
 80054fe:	2300      	movne	r3, #0
 8005500:	b2db      	uxtb	r3, r3
    if( xQueueReceive( xQueue,
 8005502:	2b00      	cmp	r3, #0
 8005504:	d001      	beq.n	800550a <_ZN11System_Rtos15freertos_queues12queueReceiveEPv+0x30>
      {
    	 return queues_recived;
 8005506:	2300      	movs	r3, #0
 8005508:	e000      	b.n	800550c <_ZN11System_Rtos15freertos_queues12queueReceiveEPv+0x32>
      }


	return stat;
 800550a:	7bfb      	ldrb	r3, [r7, #15]
}
 800550c:	4618      	mov	r0, r3
 800550e:	3710      	adds	r7, #16
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <_Z16setModemCallbackPFvP20__UART_HandleTypeDefhEPFvS0_E>:

void setDisplayCallback(DisplayRxCB Rxcb, DisplayTxCB TxCB) {
	LocalDisplayRxCB = Rxcb;
	LocalDisplayTxCB = TxCB;
}
void setModemCallback(ModemRxCB Rxcb, ModemTxCB TxCB) {
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
	LocalModemRxCB = Rxcb;
 800551e:	4a06      	ldr	r2, [pc, #24]	@ (8005538 <_Z16setModemCallbackPFvP20__UART_HandleTypeDefhEPFvS0_E+0x24>)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6013      	str	r3, [r2, #0]
	LocalModemTxCB = TxCB;
 8005524:	4a05      	ldr	r2, [pc, #20]	@ (800553c <_Z16setModemCallbackPFvP20__UART_HandleTypeDefhEPFvS0_E+0x28>)
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	6013      	str	r3, [r2, #0]
}
 800552a:	bf00      	nop
 800552c:	370c      	adds	r7, #12
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop
 8005538:	20003474 	.word	0x20003474
 800553c:	20003480 	.word	0x20003480

08005540 <_Z19setInverterCallbackPFvP20__UART_HandleTypeDefhEPFvS0_E>:
void setInverterCallback(InverterRxCB Rxcb, InverterTxCB TxCB) {
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
	LocalInverterRxCB = Rxcb;
 800554a:	4a06      	ldr	r2, [pc, #24]	@ (8005564 <_Z19setInverterCallbackPFvP20__UART_HandleTypeDefhEPFvS0_E+0x24>)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6013      	str	r3, [r2, #0]
	LocalInverterTxCB = TxCB;
 8005550:	4a05      	ldr	r2, [pc, #20]	@ (8005568 <_Z19setInverterCallbackPFvP20__UART_HandleTypeDefhEPFvS0_E+0x28>)
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	6013      	str	r3, [r2, #0]
}
 8005556:	bf00      	nop
 8005558:	370c      	adds	r7, #12
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	20003478 	.word	0x20003478
 8005568:	20003484 	.word	0x20003484

0800556c <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef>:

HAL_StatusTypeDef My_UART_Receive_Endless(UART_HandleTypeDef *huart) {
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]


	uint16_t uhErr = (uint16_t) huart->ErrorCode;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005578:	81bb      	strh	r3, [r7, #12]
	uint16_t uhData;

	if (huart->RxState == HAL_UART_STATE_BUSY_RX) {
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005580:	b2db      	uxtb	r3, r3
 8005582:	2b22      	cmp	r3, #34	@ 0x22
 8005584:	bf0c      	ite	eq
 8005586:	2301      	moveq	r3, #1
 8005588:	2300      	movne	r3, #0
 800558a:	b2db      	uxtb	r3, r3
 800558c:	2b00      	cmp	r3, #0
 800558e:	d03f      	beq.n	8005610 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0xa4>

		uhData = ((uint16_t) READ_REG(huart->Instance->DR)) & 0x00FF;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	b29b      	uxth	r3, r3
 8005598:	b2db      	uxtb	r3, r3
 800559a:	81fb      	strh	r3, [r7, #14]

		if (uhErr != HAL_UART_ERROR_NONE)
 800559c:	89bb      	ldrh	r3, [r7, #12]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d007      	beq.n	80055b2 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0x46>
			uhData |= (uhErr << 8);
 80055a2:	89bb      	ldrh	r3, [r7, #12]
 80055a4:	021b      	lsls	r3, r3, #8
 80055a6:	b21a      	sxth	r2, r3
 80055a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	b21b      	sxth	r3, r3
 80055b0:	81fb      	strh	r3, [r7, #14]


		if (huart == &HMI_U) {
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a1a      	ldr	r2, [pc, #104]	@ (8005620 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0xb4>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d10a      	bne.n	80055d0 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0x64>

			if(LocalDisplayRxCB)
 80055ba:	4b1a      	ldr	r3, [pc, #104]	@ (8005624 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0xb8>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d006      	beq.n	80055d0 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0x64>
			{
				LocalDisplayRxCB(huart,(uint8_t)uhData);
 80055c2:	4b18      	ldr	r3, [pc, #96]	@ (8005624 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0xb8>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	89fa      	ldrh	r2, [r7, #14]
 80055c8:	b2d2      	uxtb	r2, r2
 80055ca:	4611      	mov	r1, r2
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	4798      	blx	r3
			}

		}

		if (huart == &GSM_U) {
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a15      	ldr	r2, [pc, #84]	@ (8005628 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0xbc>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d10a      	bne.n	80055ee <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0x82>
			if(LocalModemRxCB)
 80055d8:	4b14      	ldr	r3, [pc, #80]	@ (800562c <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0xc0>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d006      	beq.n	80055ee <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0x82>
			{
				LocalModemRxCB(huart,(uint8_t)uhData);
 80055e0:	4b12      	ldr	r3, [pc, #72]	@ (800562c <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0xc0>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	89fa      	ldrh	r2, [r7, #14]
 80055e6:	b2d2      	uxtb	r2, r2
 80055e8:	4611      	mov	r1, r2
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	4798      	blx	r3
			}

		}

		if (huart == &INVERTER_U) {
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a0f      	ldr	r2, [pc, #60]	@ (8005630 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0xc4>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d10a      	bne.n	800560c <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0xa0>

			if(LocalInverterRxCB)
 80055f6:	4b0f      	ldr	r3, [pc, #60]	@ (8005634 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0xc8>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d006      	beq.n	800560c <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0xa0>
			{
				LocalInverterRxCB(huart,(uint8_t)uhData);
 80055fe:	4b0d      	ldr	r3, [pc, #52]	@ (8005634 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0xc8>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	89fa      	ldrh	r2, [r7, #14]
 8005604:	b2d2      	uxtb	r2, r2
 8005606:	4611      	mov	r1, r2
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	4798      	blx	r3
			}

		}

		return HAL_OK;
 800560c:	2300      	movs	r3, #0
 800560e:	e003      	b.n	8005618 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0xac>
	} else {
		/* Clear RXNE interrupt flag */
		__HAL_UART_FLUSH_DRREGISTER(huart);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	685b      	ldr	r3, [r3, #4]

		return HAL_BUSY;
 8005616:	2302      	movs	r3, #2
	}
}
 8005618:	4618      	mov	r0, r3
 800561a:	3710      	adds	r7, #16
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}
 8005620:	200036c8 	.word	0x200036c8
 8005624:	20003470 	.word	0x20003470
 8005628:	20003758 	.word	0x20003758
 800562c:	20003474 	.word	0x20003474
 8005630:	200037a0 	.word	0x200037a0
 8005634:	20003478 	.word	0x20003478

08005638 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef>:
	      __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
	 }
}


void My_UART_IRQHandler(UART_HandleTypeDef *huart) {
 8005638:	b580      	push	{r7, lr}
 800563a:	b086      	sub	sp, #24
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]

	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	613b      	str	r3, [r7, #16]
	  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	695b      	ldr	r3, [r3, #20]
 8005656:	60fb      	str	r3, [r7, #12]
	  uint32_t errorflags = 0x00U;
 8005658:	2300      	movs	r3, #0
 800565a:	60bb      	str	r3, [r7, #8]

	  /* If no error occurs */
	  /* If no error occurs */
	  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	f003 030f 	and.w	r3, r3, #15
 8005662:	60bb      	str	r3, [r7, #8]
	  if (errorflags == RESET)
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d10d      	bne.n	8005686 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x4e>
	  {
	    /* UART in mode Receiver ---------------------------------------------------*/
	     if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	f003 0320 	and.w	r3, r3, #32
 8005670:	2b00      	cmp	r3, #0
 8005672:	d008      	beq.n	8005686 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x4e>
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	f003 0320 	and.w	r3, r3, #32
 800567a:	2b00      	cmp	r3, #0
 800567c:	d003      	beq.n	8005686 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x4e>
	    {

	      My_UART_Receive_Endless(huart);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f7ff ff74 	bl	800556c <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef>


	      return;
 8005684:	e0bc      	b.n	8005800 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1c8>
	    }
	  }

	  /* If some errors occur */
	  cr3its = READ_REG(huart->Instance->CR3);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	695b      	ldr	r3, [r3, #20]
 800568c:	60fb      	str	r3, [r7, #12]
	  if(   (errorflags != RESET)
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	2b00      	cmp	r3, #0
 8005692:	f000 8083 	beq.w	800579c <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x164>
	     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f003 0301 	and.w	r3, r3, #1
 800569c:	2b00      	cmp	r3, #0
 800569e:	d104      	bne.n	80056aa <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x72>
	         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d078      	beq.n	800579c <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x164>
	  {
	    /* UART parity error interrupt occurred -------------------------------------*/
	    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	f003 0301 	and.w	r3, r3, #1
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d00f      	beq.n	80056d4 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x9c>
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d00a      	beq.n	80056d4 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x9c>
	    {

	      __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_PE);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f06f 0201 	mvn.w	r2, #1
 80056c6:	601a      	str	r2, [r3, #0]

	      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056cc:	f043 0201 	orr.w	r2, r3, #1
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	645a      	str	r2, [r3, #68]	@ 0x44


	    }

	    /* UART frame error interrupt occurred --------------------------------------*/
	    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	f003 0302 	and.w	r3, r3, #2
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00f      	beq.n	80056fe <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0xc6>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f003 0301 	and.w	r3, r3, #1
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d00a      	beq.n	80056fe <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0xc6>
	    {
	    	__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_FE);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f06f 0202 	mvn.w	r2, #2
 80056f0:	601a      	str	r2, [r3, #0]

	      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056f6:	f043 0204 	orr.w	r2, r3, #4
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	645a      	str	r2, [r3, #68]	@ 0x44

	    }

	    /* UART noise error interrupt occurred --------------------------------------*/
	    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	f003 0304 	and.w	r3, r3, #4
 8005704:	2b00      	cmp	r3, #0
 8005706:	d00f      	beq.n	8005728 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0xf0>
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f003 0301 	and.w	r3, r3, #1
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00a      	beq.n	8005728 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0xf0>
	    {
	    	__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_NE);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f06f 0204 	mvn.w	r2, #4
 800571a:	601a      	str	r2, [r3, #0]

	      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005720:	f043 0202 	orr.w	r2, r3, #2
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	645a      	str	r2, [r3, #68]	@ 0x44
	    }

	    /* UART Over-Run interrupt occurred -----------------------------------------*/
	    if(((isrflags & USART_SR_ORE) != RESET) &&
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	f003 0308 	and.w	r3, r3, #8
 800572e:	2b00      	cmp	r3, #0
 8005730:	d014      	beq.n	800575c <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x124>
	       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	f003 0320 	and.w	r3, r3, #32
	    if(((isrflags & USART_SR_ORE) != RESET) &&
 8005738:	2b00      	cmp	r3, #0
 800573a:	d104      	bne.n	8005746 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x10e>
	       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f003 0301 	and.w	r3, r3, #1
 8005742:	2b00      	cmp	r3, #0
 8005744:	d00a      	beq.n	800575c <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x124>
	    {
	    	__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_ORE);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f06f 0208 	mvn.w	r2, #8
 800574e:	601a      	str	r2, [r3, #0]

	      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005754:	f043 0208 	orr.w	r2, r3, #8
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	645a      	str	r2, [r3, #68]	@ 0x44

	    }

	    /* Call UART Error Call back function if need be --------------------------*/
	    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005760:	2b00      	cmp	r3, #0
 8005762:	bf14      	ite	ne
 8005764:	2301      	movne	r3, #1
 8005766:	2300      	moveq	r3, #0
 8005768:	b2db      	uxtb	r3, r3
 800576a:	2b00      	cmp	r3, #0
 800576c:	d045      	beq.n	80057fa <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1c2>
	    {
	      /* UART in mode Receiver ---------------------------------------------------*/
	      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	f003 0320 	and.w	r3, r3, #32
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00a      	beq.n	800578e <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x156>
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	f003 0320 	and.w	r3, r3, #32
 800577e:	2b00      	cmp	r3, #0
 8005780:	d005      	beq.n	800578e <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x156>
	      {
	            // Erfassungs-SS weitermachen
	             huart->ErrorCode = HAL_UART_ERROR_NONE;   // loeschen
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	645a      	str	r2, [r3, #68]	@ 0x44
	            //__HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);  // Clear RXNE interrupt flag

	             __HAL_UART_FLUSH_DRREGISTER(huart);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	685b      	ldr	r3, [r3, #4]
	         consider error as blocking */
	      if (1)
	      {
	        /* Non Blocking error : transfer could go on.
	           Error is notified to user through user error callback */
	        HAL_UART_ErrorCallback(huart);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f006 f92c 	bl	800b9ec <HAL_UART_ErrorCallback>
	        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	645a      	str	r2, [r3, #68]	@ 0x44
	      }
	    }



	    return;
 800579a:	e02e      	b.n	80057fa <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1c2>
	  } /* End if some error occurs */



	  /* UART in mode Transmitter ------------------------------------------------*/
	  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d02c      	beq.n	8005800 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1c8>
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d027      	beq.n	8005800 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1c8>
	  {
			if (huart == &HMI_U) {
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a15      	ldr	r2, [pc, #84]	@ (8005808 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1d0>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d107      	bne.n	80057c8 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x190>

				if(LocalDisplayTxCB)
 80057b8:	4b14      	ldr	r3, [pc, #80]	@ (800580c <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1d4>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d003      	beq.n	80057c8 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x190>
				{
					LocalDisplayTxCB(huart);
 80057c0:	4b12      	ldr	r3, [pc, #72]	@ (800580c <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1d4>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	4798      	blx	r3
				}

			}

			if (huart == &GSM_U) {
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a11      	ldr	r2, [pc, #68]	@ (8005810 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1d8>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d107      	bne.n	80057e0 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1a8>
				if(LocalModemTxCB)
 80057d0:	4b10      	ldr	r3, [pc, #64]	@ (8005814 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1dc>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d003      	beq.n	80057e0 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1a8>
				{
					LocalModemTxCB(huart);
 80057d8:	4b0e      	ldr	r3, [pc, #56]	@ (8005814 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1dc>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	4798      	blx	r3
				}

			}

			if (huart == &INVERTER_U) {
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a0d      	ldr	r2, [pc, #52]	@ (8005818 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1e0>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d10a      	bne.n	80057fe <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1c6>

				if(LocalInverterTxCB)
 80057e8:	4b0c      	ldr	r3, [pc, #48]	@ (800581c <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1e4>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d006      	beq.n	80057fe <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1c6>
				{
					LocalInverterTxCB(huart);
 80057f0:	4b0a      	ldr	r3, [pc, #40]	@ (800581c <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1e4>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	4798      	blx	r3
				}

			}
	    return;
 80057f8:	e001      	b.n	80057fe <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1c6>
	    return;
 80057fa:	bf00      	nop
 80057fc:	e000      	b.n	8005800 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1c8>
	    return;
 80057fe:	bf00      	nop
	  }



}
 8005800:	3718      	adds	r7, #24
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	200036c8 	.word	0x200036c8
 800580c:	2000347c 	.word	0x2000347c
 8005810:	20003758 	.word	0x20003758
 8005814:	20003480 	.word	0x20003480
 8005818:	200037a0 	.word	0x200037a0
 800581c:	20003484 	.word	0x20003484

08005820 <My_UART_IRQHandlerC>:
extern "C"
{


    void My_UART_IRQHandlerC(UART_HandleTypeDef *huart)
    {
 8005820:	b580      	push	{r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
    	My_UART_IRQHandler(huart);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f7ff ff05 	bl	8005638 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef>
    }
 800582e:	bf00      	nop
 8005830:	3708      	adds	r7, #8
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}

08005836 <_ZN13System_serial6serialC1EP20__UART_HandleTypeDef>:

namespace System_serial {

//UART_HandleTypeDef *serial::Internal_UartHandler;

serial::serial(UART_HandleTypeDef *huart) {
 8005836:	b480      	push	{r7}
 8005838:	b083      	sub	sp, #12
 800583a:	af00      	add	r7, sp, #0
 800583c:	6078      	str	r0, [r7, #4]
 800583e:	6039      	str	r1, [r7, #0]
	Internal_UartHandler = huart;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	683a      	ldr	r2, [r7, #0]
 8005844:	601a      	str	r2, [r3, #0]
}
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4618      	mov	r0, r3
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <_ZN13System_serial6serial11ReceiveDataEPhtm>:

void serial::ReceiveData(uint8_t *data,uint16_t size,uint32_t timeout)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	603b      	str	r3, [r7, #0]
 8005860:	4613      	mov	r3, r2
 8005862:	80fb      	strh	r3, [r7, #6]

	HAL_UART_Receive(Internal_UartHandler, data, size, timeout);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6818      	ldr	r0, [r3, #0]
 8005868:	88fa      	ldrh	r2, [r7, #6]
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	68b9      	ldr	r1, [r7, #8]
 800586e:	f005 ff4e 	bl	800b70e <HAL_UART_Receive>

}
 8005872:	bf00      	nop
 8005874:	3710      	adds	r7, #16
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <_ZN13System_serial6serial12TransmitDataEPKhtm>:

void serial::TransmitData(const uint8_t *data, uint16_t size, uint32_t timeout) {
 800587a:	b580      	push	{r7, lr}
 800587c:	b084      	sub	sp, #16
 800587e:	af00      	add	r7, sp, #0
 8005880:	60f8      	str	r0, [r7, #12]
 8005882:	60b9      	str	r1, [r7, #8]
 8005884:	603b      	str	r3, [r7, #0]
 8005886:	4613      	mov	r3, r2
 8005888:	80fb      	strh	r3, [r7, #6]

	HAL_UART_Transmit(Internal_UartHandler, data, size, timeout);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6818      	ldr	r0, [r3, #0]
 800588e:	88fa      	ldrh	r2, [r7, #6]
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	68b9      	ldr	r1, [r7, #8]
 8005894:	f005 feb0 	bl	800b5f8 <HAL_UART_Transmit>


}
 8005898:	bf00      	nop
 800589a:	3710      	adds	r7, #16
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <_ZN13System_serial6serial7RxintEnEPht>:


void serial::RxintEn(uint8_t *buf,uint16_t size)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	4613      	mov	r3, r2
 80058ac:	80fb      	strh	r3, [r7, #6]
//	/__HAL_UART_CLEAR_OREFLAG(Internal_UartHandler);
	//buffer and length can be dummy as this function is just used to enable interrupts for specific uart
	HAL_UART_Receive_IT(Internal_UartHandler, buf, size);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	88fa      	ldrh	r2, [r7, #6]
 80058b4:	68b9      	ldr	r1, [r7, #8]
 80058b6:	4618      	mov	r0, r3
 80058b8:	f005 ffc0 	bl	800b83c <HAL_UART_Receive_IT>
}
 80058bc:	bf00      	nop
 80058be:	3710      	adds	r7, #16
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <_ZN13System_serial6serial8RxintDisEv>:
	HAL_UART_Transmit_IT(Internal_UartHandler,buf, size);
}


void serial::RxintDis()
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  HAL_UART_AbortReceive_IT(Internal_UartHandler);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4618      	mov	r0, r3
 80058d2:	f005 ffd9 	bl	800b888 <HAL_UART_AbortReceive_IT>
}
 80058d6:	bf00      	nop
 80058d8:	3708      	adds	r7, #8
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}

080058de <_ZSt6strchrPci>:
  { return __builtin_strchr(__s, __n); }
 80058de:	b580      	push	{r7, lr}
 80058e0:	b082      	sub	sp, #8
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
 80058e6:	6039      	str	r1, [r7, #0]
 80058e8:	6839      	ldr	r1, [r7, #0]
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f009 ffef 	bl	800f8ce <strchr>
 80058f0:	4603      	mov	r3, r0
 80058f2:	4618      	mov	r0, r3
 80058f4:	3708      	adds	r7, #8
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}

080058fa <_ZN10System_sys16Parsing_CheckingC1Ev>:
//TODO
//Put receiving buffer check as well due to overflow check its length as well

namespace System_sys {

Parsing_Checking::Parsing_Checking()
 80058fa:	b480      	push	{r7}
 80058fc:	b083      	sub	sp, #12
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
{

}
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4618      	mov	r0, r3
 8005906:	370c      	adds	r7, #12
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>:

enum Parsing_Checking::status Parsing_Checking::checkResponse_OK_ERR(const char *buffer,uint16_t bufferSize)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b086      	sub	sp, #24
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	4613      	mov	r3, r2
 800591c:	80fb      	strh	r3, [r7, #6]
	enum status stat = sys_notFound;
 800591e:	2302      	movs	r3, #2
 8005920:	75fb      	strb	r3, [r7, #23]

    if(std::strstr(buffer,"OK") != nullptr)
 8005922:	490c      	ldr	r1, [pc, #48]	@ (8005954 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct+0x44>)
 8005924:	68b8      	ldr	r0, [r7, #8]
 8005926:	f009 fff2 	bl	800f90e <strstr>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d002      	beq.n	8005936 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct+0x26>
    {
    	stat = sys_ok;
 8005930:	2300      	movs	r3, #0
 8005932:	75fb      	strb	r3, [r7, #23]
 8005934:	e008      	b.n	8005948 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct+0x38>

    }
    else if(std::strstr(buffer, "ERROR") != nullptr)
 8005936:	4908      	ldr	r1, [pc, #32]	@ (8005958 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct+0x48>)
 8005938:	68b8      	ldr	r0, [r7, #8]
 800593a:	f009 ffe8 	bl	800f90e <strstr>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d001      	beq.n	8005948 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct+0x38>
    {
    	stat = sys_err;
 8005944:	2301      	movs	r3, #1
 8005946:	75fb      	strb	r3, [r7, #23]

    }


    return stat;
 8005948:	7dfb      	ldrb	r3, [r7, #23]


}
 800594a:	4618      	mov	r0, r3
 800594c:	3718      	adds	r7, #24
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	080121b0 	.word	0x080121b0
 8005958:	080121b4 	.word	0x080121b4

0800595c <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>:

}

enum Parsing_Checking::status Parsing_Checking::parseSkipCharnDTillEndChar(char *buffer, uint16_t bufferLen,char *CheckString,
		                                                         uint8_t skipChar,uint8_t endChar,char *databuf)
{
 800595c:	b590      	push	{r4, r7, lr}
 800595e:	f5ad 7d07 	sub.w	sp, sp, #540	@ 0x21c
 8005962:	af00      	add	r7, sp, #0
 8005964:	f507 7406 	add.w	r4, r7, #536	@ 0x218
 8005968:	f5a4 7403 	sub.w	r4, r4, #524	@ 0x20c
 800596c:	6020      	str	r0, [r4, #0]
 800596e:	f507 7006 	add.w	r0, r7, #536	@ 0x218
 8005972:	f5a0 7004 	sub.w	r0, r0, #528	@ 0x210
 8005976:	6001      	str	r1, [r0, #0]
 8005978:	4611      	mov	r1, r2
 800597a:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 800597e:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 8005982:	6013      	str	r3, [r2, #0]
 8005984:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005988:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 800598c:	460a      	mov	r2, r1
 800598e:	801a      	strh	r2, [r3, #0]


	enum status stat = sys_notFound;
 8005990:	2302      	movs	r3, #2
 8005992:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
    uint16_t len = 0;
 8005996:	2300      	movs	r3, #0
 8005998:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
	char temp[500];

	std::strncpy(temp,buffer,bufferLen);
 800599c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80059a0:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 80059a4:	881a      	ldrh	r2, [r3, #0]
 80059a6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80059aa:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80059ae:	f107 0014 	add.w	r0, r7, #20
 80059b2:	6819      	ldr	r1, [r3, #0]
 80059b4:	f009 ff98 	bl	800f8e8 <strncpy>

	if(!std::strstr((const char *)temp,CheckString))
 80059b8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80059bc:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80059c0:	f107 0214 	add.w	r2, r7, #20
 80059c4:	6819      	ldr	r1, [r3, #0]
 80059c6:	4610      	mov	r0, r2
 80059c8:	f009 ffa1 	bl	800f90e <strstr>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d101      	bne.n	80059d6 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x7a>
	{

		return sys_notFound;
 80059d2:	2302      	movs	r3, #2
 80059d4:	e085      	b.n	8005ae2 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x186>

	}

	//this means we dont want to check anything below just need to check checkstring
	if(databuf == nullptr )
 80059d6:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d101      	bne.n	80059e2 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x86>
	{
		return sys_ok;
 80059de:	2300      	movs	r3, #0
 80059e0:	e07f      	b.n	8005ae2 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x186>
	char *Scolonpos;
	int Nendpos;
	char *Sendpos;


	Scolonpos = std::strchr(temp, skipChar);
 80059e2:	f897 2228 	ldrb.w	r2, [r7, #552]	@ 0x228
 80059e6:	f107 0314 	add.w	r3, r7, #20
 80059ea:	4611      	mov	r1, r2
 80059ec:	4618      	mov	r0, r3
 80059ee:	f7ff ff76 	bl	80058de <_ZSt6strchrPci>
 80059f2:	f8c7 0208 	str.w	r0, [r7, #520]	@ 0x208


	if(Scolonpos != nullptr)
 80059f6:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d016      	beq.n	8005a2c <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0xd0>
	{
		Ncolonpos = Scolonpos - temp;
 80059fe:	f107 0314 	add.w	r3, r7, #20
 8005a02:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 8005a06:	1ad3      	subs	r3, r2, r3
 8005a08:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
		if(skipChar == ':')
 8005a0c:	f897 3228 	ldrb.w	r3, [r7, #552]	@ 0x228
 8005a10:	2b3a      	cmp	r3, #58	@ 0x3a
 8005a12:	d105      	bne.n	8005a20 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0xc4>
        {
			Ncolonpos = Ncolonpos + 2;
 8005a14:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8005a18:	3302      	adds	r3, #2
 8005a1a:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 8005a1e:	e007      	b.n	8005a30 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0xd4>
        }
		else
		{
			Ncolonpos = Ncolonpos + 1;
 8005a20:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8005a24:	3301      	adds	r3, #1
 8005a26:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 8005a2a:	e001      	b.n	8005a30 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0xd4>
		}
	}
	else
	{
		return sys_notFound;
 8005a2c:	2302      	movs	r3, #2
 8005a2e:	e058      	b.n	8005ae2 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x186>
	}


	uint16_t buf_index = Ncolonpos;
 8005a30:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8005a34:	f8a7 320e 	strh.w	r3, [r7, #526]	@ 0x20e

	while(len < bufferLen - Ncolonpos && buf_index < bufferLen)
 8005a38:	e03c      	b.n	8005ab4 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x158>
	{

		if(buffer[buf_index] != endChar)
 8005a3a:	f8b7 320e 	ldrh.w	r3, [r7, #526]	@ 0x20e
 8005a3e:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8005a42:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 8005a46:	6812      	ldr	r2, [r2, #0]
 8005a48:	4413      	add	r3, r2
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	f897 222c 	ldrb.w	r2, [r7, #556]	@ 0x22c
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d00f      	beq.n	8005a74 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x118>
		{
			databuf[len] = buffer[buf_index];
 8005a54:	f8b7 320e 	ldrh.w	r3, [r7, #526]	@ 0x20e
 8005a58:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8005a5c:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 8005a60:	6812      	ldr	r2, [r2, #0]
 8005a62:	441a      	add	r2, r3
 8005a64:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8005a68:	f8d7 1230 	ldr.w	r1, [r7, #560]	@ 0x230
 8005a6c:	440b      	add	r3, r1
 8005a6e:	7812      	ldrb	r2, [r2, #0]
 8005a70:	701a      	strb	r2, [r3, #0]
 8005a72:	e015      	b.n	8005aa0 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x144>

		}else if(buffer[buf_index] == endChar)
 8005a74:	f8b7 320e 	ldrh.w	r3, [r7, #526]	@ 0x20e
 8005a78:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8005a7c:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 8005a80:	6812      	ldr	r2, [r2, #0]
 8005a82:	4413      	add	r3, r2
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	f897 222c 	ldrb.w	r2, [r7, #556]	@ 0x22c
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d108      	bne.n	8005aa0 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x144>
		{
			databuf[len] = 0x00;
 8005a8e:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8005a92:	f8d7 2230 	ldr.w	r2, [r7, #560]	@ 0x230
 8005a96:	4413      	add	r3, r2
 8005a98:	2200      	movs	r2, #0
 8005a9a:	701a      	strb	r2, [r3, #0]
			return sys_ok;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	e020      	b.n	8005ae2 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x186>
		}


		buf_index++;
 8005aa0:	f8b7 320e 	ldrh.w	r3, [r7, #526]	@ 0x20e
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	f8a7 320e 	strh.w	r3, [r7, #526]	@ 0x20e
		len++;
 8005aaa:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8005aae:	3301      	adds	r3, #1
 8005ab0:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
	while(len < bufferLen - Ncolonpos && buf_index < bufferLen)
 8005ab4:	f8b7 2216 	ldrh.w	r2, [r7, #534]	@ 0x216
 8005ab8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005abc:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 8005ac0:	8819      	ldrh	r1, [r3, #0]
 8005ac2:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8005ac6:	1acb      	subs	r3, r1, r3
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	da08      	bge.n	8005ade <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x182>
 8005acc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005ad0:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 8005ad4:	f8b7 220e 	ldrh.w	r2, [r7, #526]	@ 0x20e
 8005ad8:	881b      	ldrh	r3, [r3, #0]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d3ad      	bcc.n	8005a3a <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0xde>

	}


	  return stat;
 8005ade:	f897 320d 	ldrb.w	r3, [r7, #525]	@ 0x20d
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f507 7707 	add.w	r7, r7, #540	@ 0x21c
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd90      	pop	{r4, r7, pc}

08005aec <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct>:



enum Parsing_Checking::status Parsing_Checking::extractData(const char *buffer,const char *cmd,char midchar,char endchar,char *outputbuf,uint16_t outputSize)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b088      	sub	sp, #32
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	60f8      	str	r0, [r7, #12]
 8005af4:	60b9      	str	r1, [r7, #8]
 8005af6:	607a      	str	r2, [r7, #4]
 8005af8:	70fb      	strb	r3, [r7, #3]
	enum status stat = sys_ok;
 8005afa:	2300      	movs	r3, #0
 8005afc:	767b      	strb	r3, [r7, #25]


	//if buffer is null dont run as it does not make sense to run after this
	if(outputbuf == nullptr)
 8005afe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d101      	bne.n	8005b08 <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct+0x1c>
	{
		return sys_err;
 8005b04:	2301      	movs	r3, #1
 8005b06:	e040      	b.n	8005b8a <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct+0x9e>
	}

     char* commandStart = std::strstr(buffer, cmd);
 8005b08:	6879      	ldr	r1, [r7, #4]
 8005b0a:	68b8      	ldr	r0, [r7, #8]
 8005b0c:	f009 feff 	bl	800f90e <strstr>
 8005b10:	61f8      	str	r0, [r7, #28]
    if (!commandStart) {
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d101      	bne.n	8005b1c <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct+0x30>
        // Command not found
        return sys_notFound;
 8005b18:	2302      	movs	r3, #2
 8005b1a:	e036      	b.n	8005b8a <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct+0x9e>
    }



    // Move the pointer to the end of the command
    commandStart += std::strlen(cmd);
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f7fa fba7 	bl	8000270 <strlen>
 8005b22:	4602      	mov	r2, r0
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	4413      	add	r3, r2
 8005b28:	61fb      	str	r3, [r7, #28]
    commandStart++; //to skip space
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	61fb      	str	r3, [r7, #28]


     //Check for the mid character and skip it
     char* midCharPos = std::strchr(commandStart, midchar);
 8005b30:	78fb      	ldrb	r3, [r7, #3]
 8005b32:	4619      	mov	r1, r3
 8005b34:	69f8      	ldr	r0, [r7, #28]
 8005b36:	f7ff fed2 	bl	80058de <_ZSt6strchrPci>
 8005b3a:	6178      	str	r0, [r7, #20]
    if (!midCharPos) {
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d101      	bne.n	8005b46 <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct+0x5a>
        // Mid character not found
        return sys_notFound;
 8005b42:	2302      	movs	r3, #2
 8005b44:	e021      	b.n	8005b8a <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct+0x9e>
    }
    commandStart = midCharPos + 1;
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	3301      	adds	r3, #1
 8005b4a:	61fb      	str	r3, [r7, #28]



    // Copy the remaining part until the end character or end of string
    uint16_t i = 0;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	837b      	strh	r3, [r7, #26]
    while (*commandStart != endchar && i < outputSize - 1) {
 8005b50:	e00a      	b.n	8005b68 <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct+0x7c>
    	outputbuf[i++] = *commandStart++;
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	1c5a      	adds	r2, r3, #1
 8005b56:	61fa      	str	r2, [r7, #28]
 8005b58:	7819      	ldrb	r1, [r3, #0]
 8005b5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b5c:	8b7b      	ldrh	r3, [r7, #26]
 8005b5e:	1c58      	adds	r0, r3, #1
 8005b60:	8378      	strh	r0, [r7, #26]
 8005b62:	4413      	add	r3, r2
 8005b64:	460a      	mov	r2, r1
 8005b66:	701a      	strb	r2, [r3, #0]
    while (*commandStart != endchar && i < outputSize - 1) {
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d004      	beq.n	8005b7e <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct+0x92>
 8005b74:	8b7a      	ldrh	r2, [r7, #26]
 8005b76:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005b78:	3b01      	subs	r3, #1
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	dbe9      	blt.n	8005b52 <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct+0x66>
    }
    outputbuf[i] = '\0'; // Null-terminate the output buffer
 8005b7e:	8b7b      	ldrh	r3, [r7, #26]
 8005b80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b82:	4413      	add	r3, r2
 8005b84:	2200      	movs	r2, #0
 8005b86:	701a      	strb	r2, [r3, #0]


    return stat;
 8005b88:	7e7b      	ldrb	r3, [r7, #25]

}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3720      	adds	r7, #32
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <_ZN10System_sys16Parsing_Checking21extractdatainsegmentsEPcS1_tPth>:

enum Parsing_Checking::status Parsing_Checking::extractdatainsegments(char *input,char *output,uint16_t output_len,uint16_t *get_len,uint8_t skip_char)
{
 8005b92:	b480      	push	{r7}
 8005b94:	b087      	sub	sp, #28
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	60f8      	str	r0, [r7, #12]
 8005b9a:	60b9      	str	r1, [r7, #8]
 8005b9c:	607a      	str	r2, [r7, #4]
 8005b9e:	807b      	strh	r3, [r7, #2]

	enum status stat = sys_ok;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	757b      	strb	r3, [r7, #21]


	   if (!input || !output || output_len == 0 || !get_len) {
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d008      	beq.n	8005bbc <_ZN10System_sys16Parsing_Checking21extractdatainsegmentsEPcS1_tPth+0x2a>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d005      	beq.n	8005bbc <_ZN10System_sys16Parsing_Checking21extractdatainsegmentsEPcS1_tPth+0x2a>
 8005bb0:	887b      	ldrh	r3, [r7, #2]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d002      	beq.n	8005bbc <_ZN10System_sys16Parsing_Checking21extractdatainsegmentsEPcS1_tPth+0x2a>
 8005bb6:	6a3b      	ldr	r3, [r7, #32]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d101      	bne.n	8005bc0 <_ZN10System_sys16Parsing_Checking21extractdatainsegmentsEPcS1_tPth+0x2e>
	        return sys_err; // Invalid parameters
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e03a      	b.n	8005c36 <_ZN10System_sys16Parsing_Checking21extractdatainsegmentsEPcS1_tPth+0xa4>
	    }


	   uint16_t len = 0;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	82fb      	strh	r3, [r7, #22]


	   // Skip leading spaces (if any)
	    while (*input == skip_char || *input == '(') {
 8005bc4:	e002      	b.n	8005bcc <_ZN10System_sys16Parsing_Checking21extractdatainsegmentsEPcS1_tPth+0x3a>
	        input++;
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	3301      	adds	r3, #1
 8005bca:	60bb      	str	r3, [r7, #8]
	    while (*input == skip_char || *input == '(') {
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d0f6      	beq.n	8005bc6 <_ZN10System_sys16Parsing_Checking21extractdatainsegmentsEPcS1_tPth+0x34>
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	2b28      	cmp	r3, #40	@ 0x28
 8005bde:	d0f2      	beq.n	8005bc6 <_ZN10System_sys16Parsing_Checking21extractdatainsegmentsEPcS1_tPth+0x34>
	    }

	    // Extract characters until space or end of string
	      while (*input != '\0' && *input != skip_char && len < output_len - 1) {
 8005be0:	e00a      	b.n	8005bf8 <_ZN10System_sys16Parsing_Checking21extractdatainsegmentsEPcS1_tPth+0x66>
	          output[len++] = *input++;
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	1c5a      	adds	r2, r3, #1
 8005be6:	60ba      	str	r2, [r7, #8]
 8005be8:	7819      	ldrb	r1, [r3, #0]
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	8afb      	ldrh	r3, [r7, #22]
 8005bee:	1c58      	adds	r0, r3, #1
 8005bf0:	82f8      	strh	r0, [r7, #22]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	460a      	mov	r2, r1
 8005bf6:	701a      	strb	r2, [r3, #0]
	      while (*input != '\0' && *input != skip_char && len < output_len - 1) {
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d00a      	beq.n	8005c16 <_ZN10System_sys16Parsing_Checking21extractdatainsegmentsEPcS1_tPth+0x84>
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d004      	beq.n	8005c16 <_ZN10System_sys16Parsing_Checking21extractdatainsegmentsEPcS1_tPth+0x84>
 8005c0c:	8afa      	ldrh	r2, [r7, #22]
 8005c0e:	887b      	ldrh	r3, [r7, #2]
 8005c10:	3b01      	subs	r3, #1
 8005c12:	429a      	cmp	r2, r3
 8005c14:	dbe5      	blt.n	8005be2 <_ZN10System_sys16Parsing_Checking21extractdatainsegmentsEPcS1_tPth+0x50>
	      }

	    // Null-terminate the output
	     output[len] = '\0';
 8005c16:	8afb      	ldrh	r3, [r7, #22]
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	701a      	strb	r2, [r3, #0]

	     // If no data was extracted, return false
	        if (len == 0) {
 8005c20:	8afb      	ldrh	r3, [r7, #22]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d101      	bne.n	8005c2a <_ZN10System_sys16Parsing_Checking21extractdatainsegmentsEPcS1_tPth+0x98>
	            return sys_err;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e005      	b.n	8005c36 <_ZN10System_sys16Parsing_Checking21extractdatainsegmentsEPcS1_tPth+0xa4>
	        }

	        // Store the extracted length
	         *get_len = len+1;
 8005c2a:	8afb      	ldrh	r3, [r7, #22]
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	b29a      	uxth	r2, r3
 8005c30:	6a3b      	ldr	r3, [r7, #32]
 8005c32:	801a      	strh	r2, [r3, #0]

    return stat;
 8005c34:	7d7b      	ldrb	r3, [r7, #21]

}
 8005c36:	4618      	mov	r0, r3
 8005c38:	371c      	adds	r7, #28
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr

08005c42 <_ZN10System_sys16Parsing_Checking19binarystringToUint8EPcPh>:

enum Parsing_Checking::status Parsing_Checking::binarystringToUint8(char *binaryString,uint8_t *result)
{
 8005c42:	b580      	push	{r7, lr}
 8005c44:	b088      	sub	sp, #32
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	60f8      	str	r0, [r7, #12]
 8005c4a:	60b9      	str	r1, [r7, #8]
 8005c4c:	607a      	str	r2, [r7, #4]
	enum status stat = sys_ok;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	76fb      	strb	r3, [r7, #27]


	  // Check if the input string is valid
	    size_t length = std::strlen(binaryString);
 8005c52:	68b8      	ldr	r0, [r7, #8]
 8005c54:	f7fa fb0c 	bl	8000270 <strlen>
 8005c58:	6178      	str	r0, [r7, #20]

	    if (length == 0 || length > 8) {
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d002      	beq.n	8005c66 <_ZN10System_sys16Parsing_Checking19binarystringToUint8EPcPh+0x24>
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	2b08      	cmp	r3, #8
 8005c64:	d901      	bls.n	8005c6a <_ZN10System_sys16Parsing_Checking19binarystringToUint8EPcPh+0x28>
	        return sys_err;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e027      	b.n	8005cba <_ZN10System_sys16Parsing_Checking19binarystringToUint8EPcPh+0x78>
	    }

		*result = 0;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	701a      	strb	r2, [r3, #0]
	    // Iterate through each character in the string
	    for (size_t i = 0; i < length; ++i) {
 8005c70:	2300      	movs	r3, #0
 8005c72:	61fb      	str	r3, [r7, #28]
 8005c74:	e01c      	b.n	8005cb0 <_ZN10System_sys16Parsing_Checking19binarystringToUint8EPcPh+0x6e>
	        char c = binaryString[i];
 8005c76:	68ba      	ldr	r2, [r7, #8]
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	74fb      	strb	r3, [r7, #19]
	        if (c != '0' && c != '1') {
 8005c80:	7cfb      	ldrb	r3, [r7, #19]
 8005c82:	2b30      	cmp	r3, #48	@ 0x30
 8005c84:	d004      	beq.n	8005c90 <_ZN10System_sys16Parsing_Checking19binarystringToUint8EPcPh+0x4e>
 8005c86:	7cfb      	ldrb	r3, [r7, #19]
 8005c88:	2b31      	cmp	r3, #49	@ 0x31
 8005c8a:	d001      	beq.n	8005c90 <_ZN10System_sys16Parsing_Checking19binarystringToUint8EPcPh+0x4e>
	        	   return sys_err;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e014      	b.n	8005cba <_ZN10System_sys16Parsing_Checking19binarystringToUint8EPcPh+0x78>
	        }

	        // Shift result left by 1 bit and add the current bit
	        *result = (*result << 1) | (c - '0');
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	005b      	lsls	r3, r3, #1
 8005c96:	b25a      	sxtb	r2, r3
 8005c98:	7cfb      	ldrb	r3, [r7, #19]
 8005c9a:	3b30      	subs	r3, #48	@ 0x30
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	b25b      	sxtb	r3, r3
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	b25b      	sxtb	r3, r3
 8005ca4:	b2da      	uxtb	r2, r3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	701a      	strb	r2, [r3, #0]
	    for (size_t i = 0; i < length; ++i) {
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	3301      	adds	r3, #1
 8005cae:	61fb      	str	r3, [r7, #28]
 8005cb0:	69fa      	ldr	r2, [r7, #28]
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d3de      	bcc.n	8005c76 <_ZN10System_sys16Parsing_Checking19binarystringToUint8EPcPh+0x34>
	    }



    return stat;
 8005cb8:	7efb      	ldrb	r3, [r7, #27]

}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3720      	adds	r7, #32
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
	...

08005cc4 <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa>:

	    return epoch;
}

int32_t Parsing_Checking::convertToEpoch(RTC_DateTypeDef sDate,RTC_TimeTypeDef sTime,int8_t zone)
{
 8005cc4:	b082      	sub	sp, #8
 8005cc6:	b580      	push	{r7, lr}
 8005cc8:	b08c      	sub	sp, #48	@ 0x30
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
 8005cce:	6039      	str	r1, [r7, #0]
 8005cd0:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8005cd4:	e881 000c 	stmia.w	r1, {r2, r3}
	 int day,month ,year, hour, minute, second, timezoneOffset;


	    day = sDate.Date;
 8005cd8:	78bb      	ldrb	r3, [r7, #2]
 8005cda:	623b      	str	r3, [r7, #32]
		month = sDate.Month;
 8005cdc:	787b      	ldrb	r3, [r7, #1]
 8005cde:	61fb      	str	r3, [r7, #28]
	    year = sDate.Year;
 8005ce0:	78fb      	ldrb	r3, [r7, #3]
 8005ce2:	61bb      	str	r3, [r7, #24]

	    year += (year < 70) ? 2000 : 1900; // Convert year to full format
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	2b45      	cmp	r3, #69	@ 0x45
 8005ce8:	dc02      	bgt.n	8005cf0 <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x2c>
 8005cea:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8005cee:	e001      	b.n	8005cf4 <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x30>
 8005cf0:	f240 736c 	movw	r3, #1900	@ 0x76c
 8005cf4:	69ba      	ldr	r2, [r7, #24]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	61bb      	str	r3, [r7, #24]

	    hour = sTime.Hours;
 8005cfa:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8005cfe:	617b      	str	r3, [r7, #20]
		minute = sTime.Minutes;
 8005d00:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005d04:	613b      	str	r3, [r7, #16]
		second = sTime.Seconds;
 8005d06:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8005d0a:	60fb      	str	r3, [r7, #12]

	    timezoneOffset = zone * 60; // Convert offset hours to minutes
 8005d0c:	f997 204c 	ldrsb.w	r2, [r7, #76]	@ 0x4c
 8005d10:	4613      	mov	r3, r2
 8005d12:	011b      	lsls	r3, r3, #4
 8005d14:	1a9b      	subs	r3, r3, r2
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	60bb      	str	r3, [r7, #8]


	    // Convert date and time to seconds since 1970-01-01 (UTC)
	    int32_t epoch = 0;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	    // Add seconds for each complete year
	    for (int y = 1970; y < year; y++) {
 8005d1e:	f240 73b2 	movw	r3, #1970	@ 0x7b2
 8005d22:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d24:	e011      	b.n	8005d4a <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x86>
	        epoch += isLeapYear(y) ? DAYS_IN_LEAP_YEAR : DAYS_IN_YEAR;
 8005d26:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f000 f85d 	bl	8005de8 <_ZN10System_sys16Parsing_Checking10isLeapYearEi>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d002      	beq.n	8005d3a <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x76>
 8005d34:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 8005d38:	e001      	b.n	8005d3e <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x7a>
 8005d3a:	f240 136d 	movw	r3, #365	@ 0x16d
 8005d3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d40:	4413      	add	r3, r2
 8005d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    for (int y = 1970; y < year; y++) {
 8005d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d46:	3301      	adds	r3, #1
 8005d48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	dbe9      	blt.n	8005d26 <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x62>
	    }
	    epoch *= SECONDS_IN_DAY;
 8005d52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d54:	4a23      	ldr	r2, [pc, #140]	@ (8005de4 <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x120>)
 8005d56:	fb02 f303 	mul.w	r3, r2, r3
 8005d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c

	    // Add seconds for each complete month in the current year
	    for (int m = 1; m < month; m++) {
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d60:	e00e      	b.n	8005d80 <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0xbc>
	        epoch += daysInMonth(year, m) * SECONDS_IN_DAY;
 8005d62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d64:	69b9      	ldr	r1, [r7, #24]
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 f86e 	bl	8005e48 <_ZN10System_sys16Parsing_Checking11daysInMonthEii>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	4a1d      	ldr	r2, [pc, #116]	@ (8005de4 <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x120>)
 8005d70:	fb02 f303 	mul.w	r3, r2, r3
 8005d74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d76:	4413      	add	r3, r2
 8005d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    for (int m = 1; m < month; m++) {
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	dbec      	blt.n	8005d62 <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x9e>
	    }

	    // Add seconds for the days, hours, minutes, and seconds
	    epoch += (day - 1) * SECONDS_IN_DAY;
 8005d88:	6a3b      	ldr	r3, [r7, #32]
 8005d8a:	3b01      	subs	r3, #1
 8005d8c:	4a15      	ldr	r2, [pc, #84]	@ (8005de4 <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x120>)
 8005d8e:	fb02 f303 	mul.w	r3, r2, r3
 8005d92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d94:	4413      	add	r3, r2
 8005d96:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    epoch += hour * SECONDS_IN_HOUR;
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8005d9e:	fb02 f303 	mul.w	r3, r2, r3
 8005da2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005da4:	4413      	add	r3, r2
 8005da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    epoch += minute * SECONDS_IN_MINUTE;
 8005da8:	693a      	ldr	r2, [r7, #16]
 8005daa:	4613      	mov	r3, r2
 8005dac:	011b      	lsls	r3, r3, #4
 8005dae:	1a9b      	subs	r3, r3, r2
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	461a      	mov	r2, r3
 8005db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005db6:	4413      	add	r3, r2
 8005db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    epoch += second;
 8005dba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	4413      	add	r3, r2
 8005dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c

	    // Adjust for the timezone offset
	    epoch -= timezoneOffset * SECONDS_IN_MINUTE;
 8005dc2:	68ba      	ldr	r2, [r7, #8]
 8005dc4:	4613      	mov	r3, r2
 8005dc6:	0112      	lsls	r2, r2, #4
 8005dc8:	1a9b      	subs	r3, r3, r2
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	461a      	mov	r2, r3
 8005dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dd0:	4413      	add	r3, r2
 8005dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c

	    return epoch;
 8005dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3730      	adds	r7, #48	@ 0x30
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005de0:	b002      	add	sp, #8
 8005de2:	4770      	bx	lr
 8005de4:	00015180 	.word	0x00015180

08005de8 <_ZN10System_sys16Parsing_Checking10isLeapYearEi>:
	    HAL_RTC_SetDate(hrtc, &gDate, RTC_FORMAT_BIN);

}

bool Parsing_Checking::isLeapYear(int year)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
	  return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	f003 0303 	and.w	r3, r3, #3
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d10c      	bne.n	8005e16 <_ZN10System_sys16Parsing_Checking10isLeapYearEi+0x2e>
 8005dfc:	683a      	ldr	r2, [r7, #0]
 8005dfe:	4b11      	ldr	r3, [pc, #68]	@ (8005e44 <_ZN10System_sys16Parsing_Checking10isLeapYearEi+0x5c>)
 8005e00:	fb83 1302 	smull	r1, r3, r3, r2
 8005e04:	1159      	asrs	r1, r3, #5
 8005e06:	17d3      	asrs	r3, r2, #31
 8005e08:	1acb      	subs	r3, r1, r3
 8005e0a:	2164      	movs	r1, #100	@ 0x64
 8005e0c:	fb01 f303 	mul.w	r3, r1, r3
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d10d      	bne.n	8005e32 <_ZN10System_sys16Parsing_Checking10isLeapYearEi+0x4a>
 8005e16:	683a      	ldr	r2, [r7, #0]
 8005e18:	4b0a      	ldr	r3, [pc, #40]	@ (8005e44 <_ZN10System_sys16Parsing_Checking10isLeapYearEi+0x5c>)
 8005e1a:	fb83 1302 	smull	r1, r3, r3, r2
 8005e1e:	11d9      	asrs	r1, r3, #7
 8005e20:	17d3      	asrs	r3, r2, #31
 8005e22:	1acb      	subs	r3, r1, r3
 8005e24:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8005e28:	fb01 f303 	mul.w	r3, r1, r3
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d101      	bne.n	8005e36 <_ZN10System_sys16Parsing_Checking10isLeapYearEi+0x4e>
 8005e32:	2301      	movs	r3, #1
 8005e34:	e000      	b.n	8005e38 <_ZN10System_sys16Parsing_Checking10isLeapYearEi+0x50>
 8005e36:	2300      	movs	r3, #0
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	370c      	adds	r7, #12
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr
 8005e44:	51eb851f 	.word	0x51eb851f

08005e48 <_ZN10System_sys16Parsing_Checking11daysInMonthEii>:
int Parsing_Checking::daysInMonth(int year, int month)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	607a      	str	r2, [r7, #4]
    if (month == 2 && isLeapYear(year)) {
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2b02      	cmp	r3, #2
 8005e58:	d108      	bne.n	8005e6c <_ZN10System_sys16Parsing_Checking11daysInMonthEii+0x24>
 8005e5a:	68b9      	ldr	r1, [r7, #8]
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	f7ff ffc3 	bl	8005de8 <_ZN10System_sys16Parsing_Checking10isLeapYearEi>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d001      	beq.n	8005e6c <_ZN10System_sys16Parsing_Checking11daysInMonthEii+0x24>
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e000      	b.n	8005e6e <_ZN10System_sys16Parsing_Checking11daysInMonthEii+0x26>
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d001      	beq.n	8005e76 <_ZN10System_sys16Parsing_Checking11daysInMonthEii+0x2e>
        return 29;
 8005e72:	231d      	movs	r3, #29
 8005e74:	e004      	b.n	8005e80 <_ZN10System_sys16Parsing_Checking11daysInMonthEii+0x38>
    }
    return monthDays[month - 1];
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	4a03      	ldr	r2, [pc, #12]	@ (8005e88 <_ZN10System_sys16Parsing_Checking11daysInMonthEii+0x40>)
 8005e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3710      	adds	r7, #16
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	08012484 	.word	0x08012484

08005e8c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005e92:	463b      	mov	r3, r7
 8005e94:	2200      	movs	r2, #0
 8005e96:	601a      	str	r2, [r3, #0]
 8005e98:	605a      	str	r2, [r3, #4]
 8005e9a:	609a      	str	r2, [r3, #8]
 8005e9c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8005e9e:	4b21      	ldr	r3, [pc, #132]	@ (8005f24 <MX_ADC1_Init+0x98>)
 8005ea0:	4a21      	ldr	r2, [pc, #132]	@ (8005f28 <MX_ADC1_Init+0x9c>)
 8005ea2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8005ea4:	4b1f      	ldr	r3, [pc, #124]	@ (8005f24 <MX_ADC1_Init+0x98>)
 8005ea6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005eaa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005eac:	4b1d      	ldr	r3, [pc, #116]	@ (8005f24 <MX_ADC1_Init+0x98>)
 8005eae:	2200      	movs	r2, #0
 8005eb0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8005eb2:	4b1c      	ldr	r3, [pc, #112]	@ (8005f24 <MX_ADC1_Init+0x98>)
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8005eb8:	4b1a      	ldr	r3, [pc, #104]	@ (8005f24 <MX_ADC1_Init+0x98>)
 8005eba:	2200      	movs	r2, #0
 8005ebc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005ebe:	4b19      	ldr	r3, [pc, #100]	@ (8005f24 <MX_ADC1_Init+0x98>)
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005ec6:	4b17      	ldr	r3, [pc, #92]	@ (8005f24 <MX_ADC1_Init+0x98>)
 8005ec8:	2200      	movs	r2, #0
 8005eca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005ecc:	4b15      	ldr	r3, [pc, #84]	@ (8005f24 <MX_ADC1_Init+0x98>)
 8005ece:	4a17      	ldr	r2, [pc, #92]	@ (8005f2c <MX_ADC1_Init+0xa0>)
 8005ed0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005ed2:	4b14      	ldr	r3, [pc, #80]	@ (8005f24 <MX_ADC1_Init+0x98>)
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8005ed8:	4b12      	ldr	r3, [pc, #72]	@ (8005f24 <MX_ADC1_Init+0x98>)
 8005eda:	2201      	movs	r2, #1
 8005edc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8005ede:	4b11      	ldr	r3, [pc, #68]	@ (8005f24 <MX_ADC1_Init+0x98>)
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005ee6:	4b0f      	ldr	r3, [pc, #60]	@ (8005f24 <MX_ADC1_Init+0x98>)
 8005ee8:	2201      	movs	r2, #1
 8005eea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005eec:	480d      	ldr	r0, [pc, #52]	@ (8005f24 <MX_ADC1_Init+0x98>)
 8005eee:	f001 f8ed 	bl	80070cc <HAL_ADC_Init>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d001      	beq.n	8005efc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8005ef8:	f000 fb28 	bl	800654c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8005efc:	2300      	movs	r3, #0
 8005efe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005f00:	2301      	movs	r3, #1
 8005f02:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8005f04:	2307      	movs	r3, #7
 8005f06:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005f08:	463b      	mov	r3, r7
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	4805      	ldr	r0, [pc, #20]	@ (8005f24 <MX_ADC1_Init+0x98>)
 8005f0e:	f001 fcf3 	bl	80078f8 <HAL_ADC_ConfigChannel>
 8005f12:	4603      	mov	r3, r0
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d001      	beq.n	8005f1c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8005f18:	f000 fb18 	bl	800654c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8005f1c:	bf00      	nop
 8005f1e:	3710      	adds	r7, #16
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}
 8005f24:	20003488 	.word	0x20003488
 8005f28:	40012000 	.word	0x40012000
 8005f2c:	0f000001 	.word	0x0f000001

08005f30 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005f36:	463b      	mov	r3, r7
 8005f38:	2200      	movs	r2, #0
 8005f3a:	601a      	str	r2, [r3, #0]
 8005f3c:	605a      	str	r2, [r3, #4]
 8005f3e:	609a      	str	r2, [r3, #8]
 8005f40:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8005f42:	4b30      	ldr	r3, [pc, #192]	@ (8006004 <MX_ADC2_Init+0xd4>)
 8005f44:	4a30      	ldr	r2, [pc, #192]	@ (8006008 <MX_ADC2_Init+0xd8>)
 8005f46:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8005f48:	4b2e      	ldr	r3, [pc, #184]	@ (8006004 <MX_ADC2_Init+0xd4>)
 8005f4a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005f4e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8005f50:	4b2c      	ldr	r3, [pc, #176]	@ (8006004 <MX_ADC2_Init+0xd4>)
 8005f52:	2200      	movs	r2, #0
 8005f54:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8005f56:	4b2b      	ldr	r3, [pc, #172]	@ (8006004 <MX_ADC2_Init+0xd4>)
 8005f58:	2201      	movs	r2, #1
 8005f5a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8005f5c:	4b29      	ldr	r3, [pc, #164]	@ (8006004 <MX_ADC2_Init+0xd4>)
 8005f5e:	2200      	movs	r2, #0
 8005f60:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8005f62:	4b28      	ldr	r3, [pc, #160]	@ (8006004 <MX_ADC2_Init+0xd4>)
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8005f6a:	4b26      	ldr	r3, [pc, #152]	@ (8006004 <MX_ADC2_Init+0xd4>)
 8005f6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f70:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8005f72:	4b24      	ldr	r3, [pc, #144]	@ (8006004 <MX_ADC2_Init+0xd4>)
 8005f74:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8005f78:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005f7a:	4b22      	ldr	r3, [pc, #136]	@ (8006004 <MX_ADC2_Init+0xd4>)
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 3;
 8005f80:	4b20      	ldr	r3, [pc, #128]	@ (8006004 <MX_ADC2_Init+0xd4>)
 8005f82:	2203      	movs	r2, #3
 8005f84:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8005f86:	4b1f      	ldr	r3, [pc, #124]	@ (8006004 <MX_ADC2_Init+0xd4>)
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8005f8e:	4b1d      	ldr	r3, [pc, #116]	@ (8006004 <MX_ADC2_Init+0xd4>)
 8005f90:	2200      	movs	r2, #0
 8005f92:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005f94:	481b      	ldr	r0, [pc, #108]	@ (8006004 <MX_ADC2_Init+0xd4>)
 8005f96:	f001 f899 	bl	80070cc <HAL_ADC_Init>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d001      	beq.n	8005fa4 <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 8005fa0:	f000 fad4 	bl	800654c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8005fa4:	2304      	movs	r3, #4
 8005fa6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8005fac:	2305      	movs	r3, #5
 8005fae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005fb0:	463b      	mov	r3, r7
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	4813      	ldr	r0, [pc, #76]	@ (8006004 <MX_ADC2_Init+0xd4>)
 8005fb6:	f001 fc9f 	bl	80078f8 <HAL_ADC_ConfigChannel>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d001      	beq.n	8005fc4 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 8005fc0:	f000 fac4 	bl	800654c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8005fc4:	2305      	movs	r3, #5
 8005fc6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8005fc8:	2302      	movs	r3, #2
 8005fca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005fcc:	463b      	mov	r3, r7
 8005fce:	4619      	mov	r1, r3
 8005fd0:	480c      	ldr	r0, [pc, #48]	@ (8006004 <MX_ADC2_Init+0xd4>)
 8005fd2:	f001 fc91 	bl	80078f8 <HAL_ADC_ConfigChannel>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d001      	beq.n	8005fe0 <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 8005fdc:	f000 fab6 	bl	800654c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8005fe0:	2306      	movs	r3, #6
 8005fe2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005fe8:	463b      	mov	r3, r7
 8005fea:	4619      	mov	r1, r3
 8005fec:	4805      	ldr	r0, [pc, #20]	@ (8006004 <MX_ADC2_Init+0xd4>)
 8005fee:	f001 fc83 	bl	80078f8 <HAL_ADC_ConfigChannel>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d001      	beq.n	8005ffc <MX_ADC2_Init+0xcc>
  {
    Error_Handler();
 8005ff8:	f000 faa8 	bl	800654c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8005ffc:	bf00      	nop
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}
 8006004:	200034d0 	.word	0x200034d0
 8006008:	40012100 	.word	0x40012100

0800600c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b08c      	sub	sp, #48	@ 0x30
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006014:	f107 031c 	add.w	r3, r7, #28
 8006018:	2200      	movs	r2, #0
 800601a:	601a      	str	r2, [r3, #0]
 800601c:	605a      	str	r2, [r3, #4]
 800601e:	609a      	str	r2, [r3, #8]
 8006020:	60da      	str	r2, [r3, #12]
 8006022:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a4e      	ldr	r2, [pc, #312]	@ (8006164 <HAL_ADC_MspInit+0x158>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d130      	bne.n	8006090 <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800602e:	2300      	movs	r3, #0
 8006030:	61bb      	str	r3, [r7, #24]
 8006032:	4b4d      	ldr	r3, [pc, #308]	@ (8006168 <HAL_ADC_MspInit+0x15c>)
 8006034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006036:	4a4c      	ldr	r2, [pc, #304]	@ (8006168 <HAL_ADC_MspInit+0x15c>)
 8006038:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800603c:	6453      	str	r3, [r2, #68]	@ 0x44
 800603e:	4b4a      	ldr	r3, [pc, #296]	@ (8006168 <HAL_ADC_MspInit+0x15c>)
 8006040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006042:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006046:	61bb      	str	r3, [r7, #24]
 8006048:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800604a:	2300      	movs	r3, #0
 800604c:	617b      	str	r3, [r7, #20]
 800604e:	4b46      	ldr	r3, [pc, #280]	@ (8006168 <HAL_ADC_MspInit+0x15c>)
 8006050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006052:	4a45      	ldr	r2, [pc, #276]	@ (8006168 <HAL_ADC_MspInit+0x15c>)
 8006054:	f043 0301 	orr.w	r3, r3, #1
 8006058:	6313      	str	r3, [r2, #48]	@ 0x30
 800605a:	4b43      	ldr	r3, [pc, #268]	@ (8006168 <HAL_ADC_MspInit+0x15c>)
 800605c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800605e:	f003 0301 	and.w	r3, r3, #1
 8006062:	617b      	str	r3, [r7, #20]
 8006064:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = ADC1_0_LevelSensor_Pin;
 8006066:	2301      	movs	r3, #1
 8006068:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800606a:	2303      	movs	r3, #3
 800606c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800606e:	2300      	movs	r3, #0
 8006070:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ADC1_0_LevelSensor_GPIO_Port, &GPIO_InitStruct);
 8006072:	f107 031c 	add.w	r3, r7, #28
 8006076:	4619      	mov	r1, r3
 8006078:	483c      	ldr	r0, [pc, #240]	@ (800616c <HAL_ADC_MspInit+0x160>)
 800607a:	f002 fb5b 	bl	8008734 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 800607e:	2200      	movs	r2, #0
 8006080:	2105      	movs	r1, #5
 8006082:	2012      	movs	r0, #18
 8006084:	f001 ff9a 	bl	8007fbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8006088:	2012      	movs	r0, #18
 800608a:	f001 ffb3 	bl	8007ff4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800608e:	e065      	b.n	800615c <HAL_ADC_MspInit+0x150>
  else if(adcHandle->Instance==ADC2)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a36      	ldr	r2, [pc, #216]	@ (8006170 <HAL_ADC_MspInit+0x164>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d160      	bne.n	800615c <HAL_ADC_MspInit+0x150>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800609a:	2300      	movs	r3, #0
 800609c:	613b      	str	r3, [r7, #16]
 800609e:	4b32      	ldr	r3, [pc, #200]	@ (8006168 <HAL_ADC_MspInit+0x15c>)
 80060a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060a2:	4a31      	ldr	r2, [pc, #196]	@ (8006168 <HAL_ADC_MspInit+0x15c>)
 80060a4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80060a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80060aa:	4b2f      	ldr	r3, [pc, #188]	@ (8006168 <HAL_ADC_MspInit+0x15c>)
 80060ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060b2:	613b      	str	r3, [r7, #16]
 80060b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060b6:	2300      	movs	r3, #0
 80060b8:	60fb      	str	r3, [r7, #12]
 80060ba:	4b2b      	ldr	r3, [pc, #172]	@ (8006168 <HAL_ADC_MspInit+0x15c>)
 80060bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060be:	4a2a      	ldr	r2, [pc, #168]	@ (8006168 <HAL_ADC_MspInit+0x15c>)
 80060c0:	f043 0301 	orr.w	r3, r3, #1
 80060c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80060c6:	4b28      	ldr	r3, [pc, #160]	@ (8006168 <HAL_ADC_MspInit+0x15c>)
 80060c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060ca:	f003 0301 	and.w	r3, r3, #1
 80060ce:	60fb      	str	r3, [r7, #12]
 80060d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80060d2:	2370      	movs	r3, #112	@ 0x70
 80060d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80060d6:	2303      	movs	r3, #3
 80060d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060da:	2300      	movs	r3, #0
 80060dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060de:	f107 031c 	add.w	r3, r7, #28
 80060e2:	4619      	mov	r1, r3
 80060e4:	4821      	ldr	r0, [pc, #132]	@ (800616c <HAL_ADC_MspInit+0x160>)
 80060e6:	f002 fb25 	bl	8008734 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 80060ea:	4b22      	ldr	r3, [pc, #136]	@ (8006174 <HAL_ADC_MspInit+0x168>)
 80060ec:	4a22      	ldr	r2, [pc, #136]	@ (8006178 <HAL_ADC_MspInit+0x16c>)
 80060ee:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80060f0:	4b20      	ldr	r3, [pc, #128]	@ (8006174 <HAL_ADC_MspInit+0x168>)
 80060f2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80060f6:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80060f8:	4b1e      	ldr	r3, [pc, #120]	@ (8006174 <HAL_ADC_MspInit+0x168>)
 80060fa:	2200      	movs	r2, #0
 80060fc:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80060fe:	4b1d      	ldr	r3, [pc, #116]	@ (8006174 <HAL_ADC_MspInit+0x168>)
 8006100:	2200      	movs	r2, #0
 8006102:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8006104:	4b1b      	ldr	r3, [pc, #108]	@ (8006174 <HAL_ADC_MspInit+0x168>)
 8006106:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800610a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800610c:	4b19      	ldr	r3, [pc, #100]	@ (8006174 <HAL_ADC_MspInit+0x168>)
 800610e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006112:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006114:	4b17      	ldr	r3, [pc, #92]	@ (8006174 <HAL_ADC_MspInit+0x168>)
 8006116:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800611a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800611c:	4b15      	ldr	r3, [pc, #84]	@ (8006174 <HAL_ADC_MspInit+0x168>)
 800611e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006122:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8006124:	4b13      	ldr	r3, [pc, #76]	@ (8006174 <HAL_ADC_MspInit+0x168>)
 8006126:	2200      	movs	r2, #0
 8006128:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800612a:	4b12      	ldr	r3, [pc, #72]	@ (8006174 <HAL_ADC_MspInit+0x168>)
 800612c:	2200      	movs	r2, #0
 800612e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8006130:	4810      	ldr	r0, [pc, #64]	@ (8006174 <HAL_ADC_MspInit+0x168>)
 8006132:	f001 ff6d 	bl	8008010 <HAL_DMA_Init>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d001      	beq.n	8006140 <HAL_ADC_MspInit+0x134>
      Error_Handler();
 800613c:	f000 fa06 	bl	800654c <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	4a0c      	ldr	r2, [pc, #48]	@ (8006174 <HAL_ADC_MspInit+0x168>)
 8006144:	639a      	str	r2, [r3, #56]	@ 0x38
 8006146:	4a0b      	ldr	r2, [pc, #44]	@ (8006174 <HAL_ADC_MspInit+0x168>)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 800614c:	2200      	movs	r2, #0
 800614e:	2105      	movs	r1, #5
 8006150:	2012      	movs	r0, #18
 8006152:	f001 ff33 	bl	8007fbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8006156:	2012      	movs	r0, #18
 8006158:	f001 ff4c 	bl	8007ff4 <HAL_NVIC_EnableIRQ>
}
 800615c:	bf00      	nop
 800615e:	3730      	adds	r7, #48	@ 0x30
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}
 8006164:	40012000 	.word	0x40012000
 8006168:	40023800 	.word	0x40023800
 800616c:	40020000 	.word	0x40020000
 8006170:	40012100 	.word	0x40012100
 8006174:	20003518 	.word	0x20003518
 8006178:	40026440 	.word	0x40026440

0800617c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b082      	sub	sp, #8
 8006180:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006182:	2300      	movs	r3, #0
 8006184:	607b      	str	r3, [r7, #4]
 8006186:	4b0c      	ldr	r3, [pc, #48]	@ (80061b8 <MX_DMA_Init+0x3c>)
 8006188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800618a:	4a0b      	ldr	r2, [pc, #44]	@ (80061b8 <MX_DMA_Init+0x3c>)
 800618c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006190:	6313      	str	r3, [r2, #48]	@ 0x30
 8006192:	4b09      	ldr	r3, [pc, #36]	@ (80061b8 <MX_DMA_Init+0x3c>)
 8006194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006196:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800619a:	607b      	str	r3, [r7, #4]
 800619c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800619e:	2200      	movs	r2, #0
 80061a0:	2105      	movs	r1, #5
 80061a2:	203a      	movs	r0, #58	@ 0x3a
 80061a4:	f001 ff0a 	bl	8007fbc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80061a8:	203a      	movs	r0, #58	@ 0x3a
 80061aa:	f001 ff23 	bl	8007ff4 <HAL_NVIC_EnableIRQ>

}
 80061ae:	bf00      	nop
 80061b0:	3708      	adds	r7, #8
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	40023800 	.word	0x40023800

080061bc <MX_FREERTOS_Init>:
#include "main.h"
#include "app_main.hpp"

void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

void MX_FREERTOS_Init(void) {
 80061bc:	b580      	push	{r7, lr}
 80061be:	af00      	add	r7, sp, #0


	app_mainC();
 80061c0:	f7fc f88a 	bl	80022d8 <app_mainC>
    vTaskStartScheduler();
 80061c4:	f006 ff8e 	bl	800d0e4 <vTaskStartScheduler>
}
 80061c8:	bf00      	nop
 80061ca:	bd80      	pop	{r7, pc}

080061cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b08c      	sub	sp, #48	@ 0x30
 80061d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061d2:	f107 031c 	add.w	r3, r7, #28
 80061d6:	2200      	movs	r2, #0
 80061d8:	601a      	str	r2, [r3, #0]
 80061da:	605a      	str	r2, [r3, #4]
 80061dc:	609a      	str	r2, [r3, #8]
 80061de:	60da      	str	r2, [r3, #12]
 80061e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80061e2:	2300      	movs	r3, #0
 80061e4:	61bb      	str	r3, [r7, #24]
 80061e6:	4b49      	ldr	r3, [pc, #292]	@ (800630c <MX_GPIO_Init+0x140>)
 80061e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061ea:	4a48      	ldr	r2, [pc, #288]	@ (800630c <MX_GPIO_Init+0x140>)
 80061ec:	f043 0304 	orr.w	r3, r3, #4
 80061f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80061f2:	4b46      	ldr	r3, [pc, #280]	@ (800630c <MX_GPIO_Init+0x140>)
 80061f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061f6:	f003 0304 	and.w	r3, r3, #4
 80061fa:	61bb      	str	r3, [r7, #24]
 80061fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80061fe:	2300      	movs	r3, #0
 8006200:	617b      	str	r3, [r7, #20]
 8006202:	4b42      	ldr	r3, [pc, #264]	@ (800630c <MX_GPIO_Init+0x140>)
 8006204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006206:	4a41      	ldr	r2, [pc, #260]	@ (800630c <MX_GPIO_Init+0x140>)
 8006208:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800620c:	6313      	str	r3, [r2, #48]	@ 0x30
 800620e:	4b3f      	ldr	r3, [pc, #252]	@ (800630c <MX_GPIO_Init+0x140>)
 8006210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006212:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006216:	617b      	str	r3, [r7, #20]
 8006218:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800621a:	2300      	movs	r3, #0
 800621c:	613b      	str	r3, [r7, #16]
 800621e:	4b3b      	ldr	r3, [pc, #236]	@ (800630c <MX_GPIO_Init+0x140>)
 8006220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006222:	4a3a      	ldr	r2, [pc, #232]	@ (800630c <MX_GPIO_Init+0x140>)
 8006224:	f043 0301 	orr.w	r3, r3, #1
 8006228:	6313      	str	r3, [r2, #48]	@ 0x30
 800622a:	4b38      	ldr	r3, [pc, #224]	@ (800630c <MX_GPIO_Init+0x140>)
 800622c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800622e:	f003 0301 	and.w	r3, r3, #1
 8006232:	613b      	str	r3, [r7, #16]
 8006234:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006236:	2300      	movs	r3, #0
 8006238:	60fb      	str	r3, [r7, #12]
 800623a:	4b34      	ldr	r3, [pc, #208]	@ (800630c <MX_GPIO_Init+0x140>)
 800623c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800623e:	4a33      	ldr	r2, [pc, #204]	@ (800630c <MX_GPIO_Init+0x140>)
 8006240:	f043 0310 	orr.w	r3, r3, #16
 8006244:	6313      	str	r3, [r2, #48]	@ 0x30
 8006246:	4b31      	ldr	r3, [pc, #196]	@ (800630c <MX_GPIO_Init+0x140>)
 8006248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800624a:	f003 0310 	and.w	r3, r3, #16
 800624e:	60fb      	str	r3, [r7, #12]
 8006250:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006252:	2300      	movs	r3, #0
 8006254:	60bb      	str	r3, [r7, #8]
 8006256:	4b2d      	ldr	r3, [pc, #180]	@ (800630c <MX_GPIO_Init+0x140>)
 8006258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800625a:	4a2c      	ldr	r2, [pc, #176]	@ (800630c <MX_GPIO_Init+0x140>)
 800625c:	f043 0302 	orr.w	r3, r3, #2
 8006260:	6313      	str	r3, [r2, #48]	@ 0x30
 8006262:	4b2a      	ldr	r3, [pc, #168]	@ (800630c <MX_GPIO_Init+0x140>)
 8006264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006266:	f003 0302 	and.w	r3, r3, #2
 800626a:	60bb      	str	r3, [r7, #8]
 800626c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800626e:	2300      	movs	r3, #0
 8006270:	607b      	str	r3, [r7, #4]
 8006272:	4b26      	ldr	r3, [pc, #152]	@ (800630c <MX_GPIO_Init+0x140>)
 8006274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006276:	4a25      	ldr	r2, [pc, #148]	@ (800630c <MX_GPIO_Init+0x140>)
 8006278:	f043 0308 	orr.w	r3, r3, #8
 800627c:	6313      	str	r3, [r2, #48]	@ 0x30
 800627e:	4b23      	ldr	r3, [pc, #140]	@ (800630c <MX_GPIO_Init+0x140>)
 8006280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006282:	f003 0308 	and.w	r3, r3, #8
 8006286:	607b      	str	r3, [r7, #4]
 8006288:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(alive_led_GPIO_Port, alive_led_Pin, GPIO_PIN_RESET);
 800628a:	2200      	movs	r2, #0
 800628c:	2102      	movs	r1, #2
 800628e:	4820      	ldr	r0, [pc, #128]	@ (8006310 <MX_GPIO_Init+0x144>)
 8006290:	f002 fbec 	bl	8008a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DE_GPIO_Port, DE_Pin, GPIO_PIN_RESET);
 8006294:	2200      	movs	r2, #0
 8006296:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800629a:	481e      	ldr	r0, [pc, #120]	@ (8006314 <MX_GPIO_Init+0x148>)
 800629c:	f002 fbe6 	bl	8008a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Relay_cont_GPIO_Port, Relay_cont_Pin, GPIO_PIN_RESET);
 80062a0:	2200      	movs	r2, #0
 80062a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80062a6:	481c      	ldr	r0, [pc, #112]	@ (8006318 <MX_GPIO_Init+0x14c>)
 80062a8:	f002 fbe0 	bl	8008a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = alive_led_Pin;
 80062ac:	2302      	movs	r3, #2
 80062ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80062b0:	2301      	movs	r3, #1
 80062b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062b4:	2300      	movs	r3, #0
 80062b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062b8:	2300      	movs	r3, #0
 80062ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(alive_led_GPIO_Port, &GPIO_InitStruct);
 80062bc:	f107 031c 	add.w	r3, r7, #28
 80062c0:	4619      	mov	r1, r3
 80062c2:	4813      	ldr	r0, [pc, #76]	@ (8006310 <MX_GPIO_Init+0x144>)
 80062c4:	f002 fa36 	bl	8008734 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DE_Pin;
 80062c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80062ce:	2301      	movs	r3, #1
 80062d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062d2:	2300      	movs	r3, #0
 80062d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062d6:	2300      	movs	r3, #0
 80062d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(DE_GPIO_Port, &GPIO_InitStruct);
 80062da:	f107 031c 	add.w	r3, r7, #28
 80062de:	4619      	mov	r1, r3
 80062e0:	480c      	ldr	r0, [pc, #48]	@ (8006314 <MX_GPIO_Init+0x148>)
 80062e2:	f002 fa27 	bl	8008734 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Relay_cont_Pin;
 80062e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80062ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80062ec:	2301      	movs	r3, #1
 80062ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062f0:	2300      	movs	r3, #0
 80062f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062f4:	2300      	movs	r3, #0
 80062f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(Relay_cont_GPIO_Port, &GPIO_InitStruct);
 80062f8:	f107 031c 	add.w	r3, r7, #28
 80062fc:	4619      	mov	r1, r3
 80062fe:	4806      	ldr	r0, [pc, #24]	@ (8006318 <MX_GPIO_Init+0x14c>)
 8006300:	f002 fa18 	bl	8008734 <HAL_GPIO_Init>

}
 8006304:	bf00      	nop
 8006306:	3730      	adds	r7, #48	@ 0x30
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}
 800630c:	40023800 	.word	0x40023800
 8006310:	40020000 	.word	0x40020000
 8006314:	40021000 	.word	0x40021000
 8006318:	40020c00 	.word	0x40020c00

0800631c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006320:	4b12      	ldr	r3, [pc, #72]	@ (800636c <MX_I2C1_Init+0x50>)
 8006322:	4a13      	ldr	r2, [pc, #76]	@ (8006370 <MX_I2C1_Init+0x54>)
 8006324:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8006326:	4b11      	ldr	r3, [pc, #68]	@ (800636c <MX_I2C1_Init+0x50>)
 8006328:	4a12      	ldr	r2, [pc, #72]	@ (8006374 <MX_I2C1_Init+0x58>)
 800632a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800632c:	4b0f      	ldr	r3, [pc, #60]	@ (800636c <MX_I2C1_Init+0x50>)
 800632e:	2200      	movs	r2, #0
 8006330:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8006332:	4b0e      	ldr	r3, [pc, #56]	@ (800636c <MX_I2C1_Init+0x50>)
 8006334:	2200      	movs	r2, #0
 8006336:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006338:	4b0c      	ldr	r3, [pc, #48]	@ (800636c <MX_I2C1_Init+0x50>)
 800633a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800633e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006340:	4b0a      	ldr	r3, [pc, #40]	@ (800636c <MX_I2C1_Init+0x50>)
 8006342:	2200      	movs	r2, #0
 8006344:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8006346:	4b09      	ldr	r3, [pc, #36]	@ (800636c <MX_I2C1_Init+0x50>)
 8006348:	2200      	movs	r2, #0
 800634a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800634c:	4b07      	ldr	r3, [pc, #28]	@ (800636c <MX_I2C1_Init+0x50>)
 800634e:	2200      	movs	r2, #0
 8006350:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006352:	4b06      	ldr	r3, [pc, #24]	@ (800636c <MX_I2C1_Init+0x50>)
 8006354:	2200      	movs	r2, #0
 8006356:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006358:	4804      	ldr	r0, [pc, #16]	@ (800636c <MX_I2C1_Init+0x50>)
 800635a:	f002 fbbb 	bl	8008ad4 <HAL_I2C_Init>
 800635e:	4603      	mov	r3, r0
 8006360:	2b00      	cmp	r3, #0
 8006362:	d001      	beq.n	8006368 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8006364:	f000 f8f2 	bl	800654c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006368:	bf00      	nop
 800636a:	bd80      	pop	{r7, pc}
 800636c:	20003578 	.word	0x20003578
 8006370:	40005400 	.word	0x40005400
 8006374:	000186a0 	.word	0x000186a0

08006378 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b08a      	sub	sp, #40	@ 0x28
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006380:	f107 0314 	add.w	r3, r7, #20
 8006384:	2200      	movs	r2, #0
 8006386:	601a      	str	r2, [r3, #0]
 8006388:	605a      	str	r2, [r3, #4]
 800638a:	609a      	str	r2, [r3, #8]
 800638c:	60da      	str	r2, [r3, #12]
 800638e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a19      	ldr	r2, [pc, #100]	@ (80063fc <HAL_I2C_MspInit+0x84>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d12c      	bne.n	80063f4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800639a:	2300      	movs	r3, #0
 800639c:	613b      	str	r3, [r7, #16]
 800639e:	4b18      	ldr	r3, [pc, #96]	@ (8006400 <HAL_I2C_MspInit+0x88>)
 80063a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063a2:	4a17      	ldr	r2, [pc, #92]	@ (8006400 <HAL_I2C_MspInit+0x88>)
 80063a4:	f043 0302 	orr.w	r3, r3, #2
 80063a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80063aa:	4b15      	ldr	r3, [pc, #84]	@ (8006400 <HAL_I2C_MspInit+0x88>)
 80063ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063ae:	f003 0302 	and.w	r3, r3, #2
 80063b2:	613b      	str	r3, [r7, #16]
 80063b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80063b6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80063ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80063bc:	2312      	movs	r3, #18
 80063be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063c0:	2300      	movs	r3, #0
 80063c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063c4:	2303      	movs	r3, #3
 80063c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80063c8:	2304      	movs	r3, #4
 80063ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80063cc:	f107 0314 	add.w	r3, r7, #20
 80063d0:	4619      	mov	r1, r3
 80063d2:	480c      	ldr	r0, [pc, #48]	@ (8006404 <HAL_I2C_MspInit+0x8c>)
 80063d4:	f002 f9ae 	bl	8008734 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80063d8:	2300      	movs	r3, #0
 80063da:	60fb      	str	r3, [r7, #12]
 80063dc:	4b08      	ldr	r3, [pc, #32]	@ (8006400 <HAL_I2C_MspInit+0x88>)
 80063de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063e0:	4a07      	ldr	r2, [pc, #28]	@ (8006400 <HAL_I2C_MspInit+0x88>)
 80063e2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80063e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80063e8:	4b05      	ldr	r3, [pc, #20]	@ (8006400 <HAL_I2C_MspInit+0x88>)
 80063ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80063f0:	60fb      	str	r3, [r7, #12]
 80063f2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80063f4:	bf00      	nop
 80063f6:	3728      	adds	r7, #40	@ 0x28
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	40005400 	.word	0x40005400
 8006400:	40023800 	.word	0x40023800
 8006404:	40020400 	.word	0x40020400

08006408 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800640c:	f000 fdf8 	bl	8007000 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006410:	f000 f81e 	bl	8006450 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006414:	f7ff feda 	bl	80061cc <MX_GPIO_Init>
  MX_DMA_Init();
 8006418:	f7ff feb0 	bl	800617c <MX_DMA_Init>
  MX_ADC1_Init();
 800641c:	f7ff fd36 	bl	8005e8c <MX_ADC1_Init>
  MX_I2C1_Init();
 8006420:	f7ff ff7c 	bl	800631c <MX_I2C1_Init>
  MX_RTC_Init();
 8006424:	f000 f898 	bl	8006558 <MX_RTC_Init>
  MX_UART4_Init();
 8006428:	f000 fb34 	bl	8006a94 <MX_UART4_Init>
  MX_UART5_Init();
 800642c:	f000 fb5c 	bl	8006ae8 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8006430:	f000 fb84 	bl	8006b3c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8006434:	f000 fbac 	bl	8006b90 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8006438:	f000 fbd4 	bl	8006be4 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 800643c:	f000 fbfc 	bl	8006c38 <MX_USART6_UART_Init>
  MX_ADC2_Init();
 8006440:	f7ff fd76 	bl	8005f30 <MX_ADC2_Init>
  MX_TIM8_Init();
 8006444:	f000 fab4 	bl	80069b0 <MX_TIM8_Init>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
#endif
  MX_FREERTOS_Init();
 8006448:	f7ff feb8 	bl	80061bc <MX_FREERTOS_Init>
  while (1)
 800644c:	bf00      	nop
 800644e:	e7fd      	b.n	800644c <main+0x44>

08006450 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b094      	sub	sp, #80	@ 0x50
 8006454:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006456:	f107 0320 	add.w	r3, r7, #32
 800645a:	2230      	movs	r2, #48	@ 0x30
 800645c:	2100      	movs	r1, #0
 800645e:	4618      	mov	r0, r3
 8006460:	f009 fa2d 	bl	800f8be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006464:	f107 030c 	add.w	r3, r7, #12
 8006468:	2200      	movs	r2, #0
 800646a:	601a      	str	r2, [r3, #0]
 800646c:	605a      	str	r2, [r3, #4]
 800646e:	609a      	str	r2, [r3, #8]
 8006470:	60da      	str	r2, [r3, #12]
 8006472:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006474:	2300      	movs	r3, #0
 8006476:	60bb      	str	r3, [r7, #8]
 8006478:	4b29      	ldr	r3, [pc, #164]	@ (8006520 <SystemClock_Config+0xd0>)
 800647a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800647c:	4a28      	ldr	r2, [pc, #160]	@ (8006520 <SystemClock_Config+0xd0>)
 800647e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006482:	6413      	str	r3, [r2, #64]	@ 0x40
 8006484:	4b26      	ldr	r3, [pc, #152]	@ (8006520 <SystemClock_Config+0xd0>)
 8006486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006488:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800648c:	60bb      	str	r3, [r7, #8]
 800648e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006490:	2300      	movs	r3, #0
 8006492:	607b      	str	r3, [r7, #4]
 8006494:	4b23      	ldr	r3, [pc, #140]	@ (8006524 <SystemClock_Config+0xd4>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a22      	ldr	r2, [pc, #136]	@ (8006524 <SystemClock_Config+0xd4>)
 800649a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800649e:	6013      	str	r3, [r2, #0]
 80064a0:	4b20      	ldr	r3, [pc, #128]	@ (8006524 <SystemClock_Config+0xd4>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064a8:	607b      	str	r3, [r7, #4]
 80064aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80064ac:	230a      	movs	r3, #10
 80064ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80064b0:	2301      	movs	r3, #1
 80064b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80064b4:	2310      	movs	r3, #16
 80064b6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80064b8:	2301      	movs	r3, #1
 80064ba:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80064bc:	2302      	movs	r3, #2
 80064be:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80064c0:	2300      	movs	r3, #0
 80064c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80064c4:	2308      	movs	r3, #8
 80064c6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80064c8:	23a8      	movs	r3, #168	@ 0xa8
 80064ca:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80064cc:	2302      	movs	r3, #2
 80064ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80064d0:	2304      	movs	r3, #4
 80064d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80064d4:	f107 0320 	add.w	r3, r7, #32
 80064d8:	4618      	mov	r0, r3
 80064da:	f003 fc23 	bl	8009d24 <HAL_RCC_OscConfig>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d001      	beq.n	80064e8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80064e4:	f000 f832 	bl	800654c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80064e8:	230f      	movs	r3, #15
 80064ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80064ec:	2302      	movs	r3, #2
 80064ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80064f0:	2300      	movs	r3, #0
 80064f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80064f4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80064f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80064fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80064fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8006500:	f107 030c 	add.w	r3, r7, #12
 8006504:	2105      	movs	r1, #5
 8006506:	4618      	mov	r0, r3
 8006508:	f003 fe84 	bl	800a214 <HAL_RCC_ClockConfig>
 800650c:	4603      	mov	r3, r0
 800650e:	2b00      	cmp	r3, #0
 8006510:	d001      	beq.n	8006516 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8006512:	f000 f81b 	bl	800654c <Error_Handler>
  }
}
 8006516:	bf00      	nop
 8006518:	3750      	adds	r7, #80	@ 0x50
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop
 8006520:	40023800 	.word	0x40023800
 8006524:	40007000 	.word	0x40007000

08006528 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b082      	sub	sp, #8
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a04      	ldr	r2, [pc, #16]	@ (8006548 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d101      	bne.n	800653e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800653a:	f000 fd83 	bl	8007044 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800653e:	bf00      	nop
 8006540:	3708      	adds	r7, #8
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	40000400 	.word	0x40000400

0800654c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800654c:	b480      	push	{r7}
 800654e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006550:	b672      	cpsid	i
}
 8006552:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006554:	bf00      	nop
 8006556:	e7fd      	b.n	8006554 <Error_Handler+0x8>

08006558 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800655c:	4b0f      	ldr	r3, [pc, #60]	@ (800659c <MX_RTC_Init+0x44>)
 800655e:	4a10      	ldr	r2, [pc, #64]	@ (80065a0 <MX_RTC_Init+0x48>)
 8006560:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8006562:	4b0e      	ldr	r3, [pc, #56]	@ (800659c <MX_RTC_Init+0x44>)
 8006564:	2200      	movs	r2, #0
 8006566:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8006568:	4b0c      	ldr	r3, [pc, #48]	@ (800659c <MX_RTC_Init+0x44>)
 800656a:	227f      	movs	r2, #127	@ 0x7f
 800656c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800656e:	4b0b      	ldr	r3, [pc, #44]	@ (800659c <MX_RTC_Init+0x44>)
 8006570:	22ff      	movs	r2, #255	@ 0xff
 8006572:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8006574:	4b09      	ldr	r3, [pc, #36]	@ (800659c <MX_RTC_Init+0x44>)
 8006576:	2200      	movs	r2, #0
 8006578:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800657a:	4b08      	ldr	r3, [pc, #32]	@ (800659c <MX_RTC_Init+0x44>)
 800657c:	2200      	movs	r2, #0
 800657e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8006580:	4b06      	ldr	r3, [pc, #24]	@ (800659c <MX_RTC_Init+0x44>)
 8006582:	2200      	movs	r2, #0
 8006584:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8006586:	4805      	ldr	r0, [pc, #20]	@ (800659c <MX_RTC_Init+0x44>)
 8006588:	f004 f938 	bl	800a7fc <HAL_RTC_Init>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d001      	beq.n	8006596 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8006592:	f7ff ffdb 	bl	800654c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8006596:	bf00      	nop
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	200035cc 	.word	0x200035cc
 80065a0:	40002800 	.word	0x40002800

080065a4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b086      	sub	sp, #24
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80065ac:	f107 0308 	add.w	r3, r7, #8
 80065b0:	2200      	movs	r2, #0
 80065b2:	601a      	str	r2, [r3, #0]
 80065b4:	605a      	str	r2, [r3, #4]
 80065b6:	609a      	str	r2, [r3, #8]
 80065b8:	60da      	str	r2, [r3, #12]
  if(rtcHandle->Instance==RTC)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a0c      	ldr	r2, [pc, #48]	@ (80065f0 <HAL_RTC_MspInit+0x4c>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d111      	bne.n	80065e8 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80065c4:	2302      	movs	r3, #2
 80065c6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80065c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80065cc:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80065ce:	f107 0308 	add.w	r3, r7, #8
 80065d2:	4618      	mov	r0, r3
 80065d4:	f004 f830 	bl	800a638 <HAL_RCCEx_PeriphCLKConfig>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d001      	beq.n	80065e2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80065de:	f7ff ffb5 	bl	800654c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80065e2:	4b04      	ldr	r3, [pc, #16]	@ (80065f4 <HAL_RTC_MspInit+0x50>)
 80065e4:	2201      	movs	r2, #1
 80065e6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80065e8:	bf00      	nop
 80065ea:	3718      	adds	r7, #24
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}
 80065f0:	40002800 	.word	0x40002800
 80065f4:	42470e3c 	.word	0x42470e3c

080065f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b082      	sub	sp, #8
 80065fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80065fe:	2300      	movs	r3, #0
 8006600:	607b      	str	r3, [r7, #4]
 8006602:	4b12      	ldr	r3, [pc, #72]	@ (800664c <HAL_MspInit+0x54>)
 8006604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006606:	4a11      	ldr	r2, [pc, #68]	@ (800664c <HAL_MspInit+0x54>)
 8006608:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800660c:	6453      	str	r3, [r2, #68]	@ 0x44
 800660e:	4b0f      	ldr	r3, [pc, #60]	@ (800664c <HAL_MspInit+0x54>)
 8006610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006612:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006616:	607b      	str	r3, [r7, #4]
 8006618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800661a:	2300      	movs	r3, #0
 800661c:	603b      	str	r3, [r7, #0]
 800661e:	4b0b      	ldr	r3, [pc, #44]	@ (800664c <HAL_MspInit+0x54>)
 8006620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006622:	4a0a      	ldr	r2, [pc, #40]	@ (800664c <HAL_MspInit+0x54>)
 8006624:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006628:	6413      	str	r3, [r2, #64]	@ 0x40
 800662a:	4b08      	ldr	r3, [pc, #32]	@ (800664c <HAL_MspInit+0x54>)
 800662c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800662e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006632:	603b      	str	r3, [r7, #0]
 8006634:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006636:	2200      	movs	r2, #0
 8006638:	210f      	movs	r1, #15
 800663a:	f06f 0001 	mvn.w	r0, #1
 800663e:	f001 fcbd 	bl	8007fbc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006642:	bf00      	nop
 8006644:	3708      	adds	r7, #8
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	40023800 	.word	0x40023800

08006650 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b08e      	sub	sp, #56	@ 0x38
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8006658:	2300      	movs	r3, #0
 800665a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800665c:	2300      	movs	r3, #0
 800665e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8006660:	2300      	movs	r3, #0
 8006662:	60fb      	str	r3, [r7, #12]
 8006664:	4b33      	ldr	r3, [pc, #204]	@ (8006734 <HAL_InitTick+0xe4>)
 8006666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006668:	4a32      	ldr	r2, [pc, #200]	@ (8006734 <HAL_InitTick+0xe4>)
 800666a:	f043 0302 	orr.w	r3, r3, #2
 800666e:	6413      	str	r3, [r2, #64]	@ 0x40
 8006670:	4b30      	ldr	r3, [pc, #192]	@ (8006734 <HAL_InitTick+0xe4>)
 8006672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006674:	f003 0302 	and.w	r3, r3, #2
 8006678:	60fb      	str	r3, [r7, #12]
 800667a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800667c:	f107 0210 	add.w	r2, r7, #16
 8006680:	f107 0314 	add.w	r3, r7, #20
 8006684:	4611      	mov	r1, r2
 8006686:	4618      	mov	r0, r3
 8006688:	f003 ffa4 	bl	800a5d4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800668c:	6a3b      	ldr	r3, [r7, #32]
 800668e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8006690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006692:	2b00      	cmp	r3, #0
 8006694:	d103      	bne.n	800669e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8006696:	f003 ff75 	bl	800a584 <HAL_RCC_GetPCLK1Freq>
 800669a:	6378      	str	r0, [r7, #52]	@ 0x34
 800669c:	e004      	b.n	80066a8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800669e:	f003 ff71 	bl	800a584 <HAL_RCC_GetPCLK1Freq>
 80066a2:	4603      	mov	r3, r0
 80066a4:	005b      	lsls	r3, r3, #1
 80066a6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80066a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066aa:	4a23      	ldr	r2, [pc, #140]	@ (8006738 <HAL_InitTick+0xe8>)
 80066ac:	fba2 2303 	umull	r2, r3, r2, r3
 80066b0:	0c9b      	lsrs	r3, r3, #18
 80066b2:	3b01      	subs	r3, #1
 80066b4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80066b6:	4b21      	ldr	r3, [pc, #132]	@ (800673c <HAL_InitTick+0xec>)
 80066b8:	4a21      	ldr	r2, [pc, #132]	@ (8006740 <HAL_InitTick+0xf0>)
 80066ba:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 80066bc:	4b1f      	ldr	r3, [pc, #124]	@ (800673c <HAL_InitTick+0xec>)
 80066be:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80066c2:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80066c4:	4a1d      	ldr	r2, [pc, #116]	@ (800673c <HAL_InitTick+0xec>)
 80066c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066c8:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80066ca:	4b1c      	ldr	r3, [pc, #112]	@ (800673c <HAL_InitTick+0xec>)
 80066cc:	2200      	movs	r2, #0
 80066ce:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80066d0:	4b1a      	ldr	r3, [pc, #104]	@ (800673c <HAL_InitTick+0xec>)
 80066d2:	2200      	movs	r2, #0
 80066d4:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80066d6:	4b19      	ldr	r3, [pc, #100]	@ (800673c <HAL_InitTick+0xec>)
 80066d8:	2200      	movs	r2, #0
 80066da:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 80066dc:	4817      	ldr	r0, [pc, #92]	@ (800673c <HAL_InitTick+0xec>)
 80066de:	f004 fa5d 	bl	800ab9c <HAL_TIM_Base_Init>
 80066e2:	4603      	mov	r3, r0
 80066e4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80066e8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d11b      	bne.n	8006728 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 80066f0:	4812      	ldr	r0, [pc, #72]	@ (800673c <HAL_InitTick+0xec>)
 80066f2:	f004 fb0b 	bl	800ad0c <HAL_TIM_Base_Start_IT>
 80066f6:	4603      	mov	r3, r0
 80066f8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80066fc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006700:	2b00      	cmp	r3, #0
 8006702:	d111      	bne.n	8006728 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006704:	201d      	movs	r0, #29
 8006706:	f001 fc75 	bl	8007ff4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2b0f      	cmp	r3, #15
 800670e:	d808      	bhi.n	8006722 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8006710:	2200      	movs	r2, #0
 8006712:	6879      	ldr	r1, [r7, #4]
 8006714:	201d      	movs	r0, #29
 8006716:	f001 fc51 	bl	8007fbc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800671a:	4a0a      	ldr	r2, [pc, #40]	@ (8006744 <HAL_InitTick+0xf4>)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6013      	str	r3, [r2, #0]
 8006720:	e002      	b.n	8006728 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8006728:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800672c:	4618      	mov	r0, r3
 800672e:	3738      	adds	r7, #56	@ 0x38
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}
 8006734:	40023800 	.word	0x40023800
 8006738:	431bde83 	.word	0x431bde83
 800673c:	200035ec 	.word	0x200035ec
 8006740:	40000400 	.word	0x40000400
 8006744:	2000004c 	.word	0x2000004c

08006748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006748:	b480      	push	{r7}
 800674a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800674c:	bf00      	nop
 800674e:	e7fd      	b.n	800674c <NMI_Handler+0x4>

08006750 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006750:	b480      	push	{r7}
 8006752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006754:	bf00      	nop
 8006756:	e7fd      	b.n	8006754 <HardFault_Handler+0x4>

08006758 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006758:	b480      	push	{r7}
 800675a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800675c:	bf00      	nop
 800675e:	e7fd      	b.n	800675c <MemManage_Handler+0x4>

08006760 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006760:	b480      	push	{r7}
 8006762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006764:	bf00      	nop
 8006766:	e7fd      	b.n	8006764 <BusFault_Handler+0x4>

08006768 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006768:	b480      	push	{r7}
 800676a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800676c:	bf00      	nop
 800676e:	e7fd      	b.n	800676c <UsageFault_Handler+0x4>

08006770 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006770:	b480      	push	{r7}
 8006772:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006774:	bf00      	nop
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr
	...

08006780 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8006784:	4803      	ldr	r0, [pc, #12]	@ (8006794 <ADC_IRQHandler+0x14>)
 8006786:	f000 fe75 	bl	8007474 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800678a:	4803      	ldr	r0, [pc, #12]	@ (8006798 <ADC_IRQHandler+0x18>)
 800678c:	f000 fe72 	bl	8007474 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8006790:	bf00      	nop
 8006792:	bd80      	pop	{r7, pc}
 8006794:	20003488 	.word	0x20003488
 8006798:	200034d0 	.word	0x200034d0

0800679c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80067a0:	4802      	ldr	r0, [pc, #8]	@ (80067ac <TIM3_IRQHandler+0x10>)
 80067a2:	f004 fb23 	bl	800adec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80067a6:	bf00      	nop
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	200035ec 	.word	0x200035ec

080067b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */
#endif

  My_UART_IRQHandlerC(&huart2);
 80067b4:	4802      	ldr	r0, [pc, #8]	@ (80067c0 <USART2_IRQHandler+0x10>)
 80067b6:	f7ff f833 	bl	8005820 <My_UART_IRQHandlerC>
  /* USER CODE END USART2_IRQn 1 */
}
 80067ba:	bf00      	nop
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	20003758 	.word	0x20003758

080067c4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */
#endif

  My_UART_IRQHandlerC(&huart3);
 80067c8:	4802      	ldr	r0, [pc, #8]	@ (80067d4 <USART3_IRQHandler+0x10>)
 80067ca:	f7ff f829 	bl	8005820 <My_UART_IRQHandlerC>
  /* USER CODE END USART3_IRQn 1 */
}
 80067ce:	bf00      	nop
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	200037a0 	.word	0x200037a0

080067d8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
  /* USER CODE BEGIN UART5_IRQn 1 */
#endif

  My_UART_IRQHandlerC(&huart5);
 80067dc:	4802      	ldr	r0, [pc, #8]	@ (80067e8 <UART5_IRQHandler+0x10>)
 80067de:	f7ff f81f 	bl	8005820 <My_UART_IRQHandlerC>
  /* USER CODE END UART5_IRQn 1 */
}
 80067e2:	bf00      	nop
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	200036c8 	.word	0x200036c8

080067ec <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80067f0:	4802      	ldr	r0, [pc, #8]	@ (80067fc <DMA2_Stream2_IRQHandler+0x10>)
 80067f2:	f001 fd35 	bl	8008260 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80067f6:	bf00      	nop
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	20003518 	.word	0x20003518

08006800 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006800:	b480      	push	{r7}
 8006802:	af00      	add	r7, sp, #0
  return 1;
 8006804:	2301      	movs	r3, #1
}
 8006806:	4618      	mov	r0, r3
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <_kill>:

int _kill(int pid, int sig)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b082      	sub	sp, #8
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800681a:	f009 f92f 	bl	800fa7c <__errno>
 800681e:	4603      	mov	r3, r0
 8006820:	2216      	movs	r2, #22
 8006822:	601a      	str	r2, [r3, #0]
  return -1;
 8006824:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006828:	4618      	mov	r0, r3
 800682a:	3708      	adds	r7, #8
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <_exit>:

void _exit (int status)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006838:	f04f 31ff 	mov.w	r1, #4294967295
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f7ff ffe7 	bl	8006810 <_kill>
  while (1) {}    /* Make sure we hang here */
 8006842:	bf00      	nop
 8006844:	e7fd      	b.n	8006842 <_exit+0x12>

08006846 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006846:	b580      	push	{r7, lr}
 8006848:	b086      	sub	sp, #24
 800684a:	af00      	add	r7, sp, #0
 800684c:	60f8      	str	r0, [r7, #12]
 800684e:	60b9      	str	r1, [r7, #8]
 8006850:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006852:	2300      	movs	r3, #0
 8006854:	617b      	str	r3, [r7, #20]
 8006856:	e00a      	b.n	800686e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006858:	f3af 8000 	nop.w
 800685c:	4601      	mov	r1, r0
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	1c5a      	adds	r2, r3, #1
 8006862:	60ba      	str	r2, [r7, #8]
 8006864:	b2ca      	uxtb	r2, r1
 8006866:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	3301      	adds	r3, #1
 800686c:	617b      	str	r3, [r7, #20]
 800686e:	697a      	ldr	r2, [r7, #20]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	429a      	cmp	r2, r3
 8006874:	dbf0      	blt.n	8006858 <_read+0x12>
  }

  return len;
 8006876:	687b      	ldr	r3, [r7, #4]
}
 8006878:	4618      	mov	r0, r3
 800687a:	3718      	adds	r7, #24
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}

08006880 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b086      	sub	sp, #24
 8006884:	af00      	add	r7, sp, #0
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	60b9      	str	r1, [r7, #8]
 800688a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800688c:	2300      	movs	r3, #0
 800688e:	617b      	str	r3, [r7, #20]
 8006890:	e009      	b.n	80068a6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	1c5a      	adds	r2, r3, #1
 8006896:	60ba      	str	r2, [r7, #8]
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	4618      	mov	r0, r3
 800689c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	3301      	adds	r3, #1
 80068a4:	617b      	str	r3, [r7, #20]
 80068a6:	697a      	ldr	r2, [r7, #20]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	dbf1      	blt.n	8006892 <_write+0x12>
  }
  return len;
 80068ae:	687b      	ldr	r3, [r7, #4]
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3718      	adds	r7, #24
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <_close>:

int _close(int file)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b083      	sub	sp, #12
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80068c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	370c      	adds	r7, #12
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b083      	sub	sp, #12
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80068e0:	605a      	str	r2, [r3, #4]
  return 0;
 80068e2:	2300      	movs	r3, #0
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	370c      	adds	r7, #12
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr

080068f0 <_isatty>:

int _isatty(int file)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80068f8:	2301      	movs	r3, #1
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	370c      	adds	r7, #12
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr

08006906 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006906:	b480      	push	{r7}
 8006908:	b085      	sub	sp, #20
 800690a:	af00      	add	r7, sp, #0
 800690c:	60f8      	str	r0, [r7, #12]
 800690e:	60b9      	str	r1, [r7, #8]
 8006910:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	3714      	adds	r7, #20
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b086      	sub	sp, #24
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006928:	4a14      	ldr	r2, [pc, #80]	@ (800697c <_sbrk+0x5c>)
 800692a:	4b15      	ldr	r3, [pc, #84]	@ (8006980 <_sbrk+0x60>)
 800692c:	1ad3      	subs	r3, r2, r3
 800692e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006934:	4b13      	ldr	r3, [pc, #76]	@ (8006984 <_sbrk+0x64>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d102      	bne.n	8006942 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800693c:	4b11      	ldr	r3, [pc, #68]	@ (8006984 <_sbrk+0x64>)
 800693e:	4a12      	ldr	r2, [pc, #72]	@ (8006988 <_sbrk+0x68>)
 8006940:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006942:	4b10      	ldr	r3, [pc, #64]	@ (8006984 <_sbrk+0x64>)
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4413      	add	r3, r2
 800694a:	693a      	ldr	r2, [r7, #16]
 800694c:	429a      	cmp	r2, r3
 800694e:	d207      	bcs.n	8006960 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006950:	f009 f894 	bl	800fa7c <__errno>
 8006954:	4603      	mov	r3, r0
 8006956:	220c      	movs	r2, #12
 8006958:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800695a:	f04f 33ff 	mov.w	r3, #4294967295
 800695e:	e009      	b.n	8006974 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006960:	4b08      	ldr	r3, [pc, #32]	@ (8006984 <_sbrk+0x64>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006966:	4b07      	ldr	r3, [pc, #28]	@ (8006984 <_sbrk+0x64>)
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4413      	add	r3, r2
 800696e:	4a05      	ldr	r2, [pc, #20]	@ (8006984 <_sbrk+0x64>)
 8006970:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006972:	68fb      	ldr	r3, [r7, #12]
}
 8006974:	4618      	mov	r0, r3
 8006976:	3718      	adds	r7, #24
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}
 800697c:	20020000 	.word	0x20020000
 8006980:	00000400 	.word	0x00000400
 8006984:	20003634 	.word	0x20003634
 8006988:	2000e3a8 	.word	0x2000e3a8

0800698c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800698c:	b480      	push	{r7}
 800698e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006990:	4b06      	ldr	r3, [pc, #24]	@ (80069ac <SystemInit+0x20>)
 8006992:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006996:	4a05      	ldr	r2, [pc, #20]	@ (80069ac <SystemInit+0x20>)
 8006998:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800699c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80069a0:	bf00      	nop
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr
 80069aa:	bf00      	nop
 80069ac:	e000ed00 	.word	0xe000ed00

080069b0 <MX_TIM8_Init>:

TIM_HandleTypeDef htim8;

/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b086      	sub	sp, #24
 80069b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80069b6:	f107 0308 	add.w	r3, r7, #8
 80069ba:	2200      	movs	r2, #0
 80069bc:	601a      	str	r2, [r3, #0]
 80069be:	605a      	str	r2, [r3, #4]
 80069c0:	609a      	str	r2, [r3, #8]
 80069c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80069c4:	463b      	mov	r3, r7
 80069c6:	2200      	movs	r2, #0
 80069c8:	601a      	str	r2, [r3, #0]
 80069ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80069cc:	4b1e      	ldr	r3, [pc, #120]	@ (8006a48 <MX_TIM8_Init+0x98>)
 80069ce:	4a1f      	ldr	r2, [pc, #124]	@ (8006a4c <MX_TIM8_Init+0x9c>)
 80069d0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 168-1;
 80069d2:	4b1d      	ldr	r3, [pc, #116]	@ (8006a48 <MX_TIM8_Init+0x98>)
 80069d4:	22a7      	movs	r2, #167	@ 0xa7
 80069d6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80069d8:	4b1b      	ldr	r3, [pc, #108]	@ (8006a48 <MX_TIM8_Init+0x98>)
 80069da:	2200      	movs	r2, #0
 80069dc:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 2000-1;
 80069de:	4b1a      	ldr	r3, [pc, #104]	@ (8006a48 <MX_TIM8_Init+0x98>)
 80069e0:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80069e4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80069e6:	4b18      	ldr	r3, [pc, #96]	@ (8006a48 <MX_TIM8_Init+0x98>)
 80069e8:	2200      	movs	r2, #0
 80069ea:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80069ec:	4b16      	ldr	r3, [pc, #88]	@ (8006a48 <MX_TIM8_Init+0x98>)
 80069ee:	2200      	movs	r2, #0
 80069f0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80069f2:	4b15      	ldr	r3, [pc, #84]	@ (8006a48 <MX_TIM8_Init+0x98>)
 80069f4:	2200      	movs	r2, #0
 80069f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80069f8:	4813      	ldr	r0, [pc, #76]	@ (8006a48 <MX_TIM8_Init+0x98>)
 80069fa:	f004 f8cf 	bl	800ab9c <HAL_TIM_Base_Init>
 80069fe:	4603      	mov	r3, r0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d001      	beq.n	8006a08 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8006a04:	f7ff fda2 	bl	800654c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006a08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006a0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8006a0e:	f107 0308 	add.w	r3, r7, #8
 8006a12:	4619      	mov	r1, r3
 8006a14:	480c      	ldr	r0, [pc, #48]	@ (8006a48 <MX_TIM8_Init+0x98>)
 8006a16:	f004 fad9 	bl	800afcc <HAL_TIM_ConfigClockSource>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d001      	beq.n	8006a24 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8006a20:	f7ff fd94 	bl	800654c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8006a24:	2320      	movs	r3, #32
 8006a26:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8006a2c:	463b      	mov	r3, r7
 8006a2e:	4619      	mov	r1, r3
 8006a30:	4805      	ldr	r0, [pc, #20]	@ (8006a48 <MX_TIM8_Init+0x98>)
 8006a32:	f004 fd01 	bl	800b438 <HAL_TIMEx_MasterConfigSynchronization>
 8006a36:	4603      	mov	r3, r0
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d001      	beq.n	8006a40 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8006a3c:	f7ff fd86 	bl	800654c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8006a40:	bf00      	nop
 8006a42:	3718      	adds	r7, #24
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}
 8006a48:	20003638 	.word	0x20003638
 8006a4c:	40010400 	.word	0x40010400

08006a50 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b085      	sub	sp, #20
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a0b      	ldr	r2, [pc, #44]	@ (8006a8c <HAL_TIM_Base_MspInit+0x3c>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d10d      	bne.n	8006a7e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8006a62:	2300      	movs	r3, #0
 8006a64:	60fb      	str	r3, [r7, #12]
 8006a66:	4b0a      	ldr	r3, [pc, #40]	@ (8006a90 <HAL_TIM_Base_MspInit+0x40>)
 8006a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a6a:	4a09      	ldr	r2, [pc, #36]	@ (8006a90 <HAL_TIM_Base_MspInit+0x40>)
 8006a6c:	f043 0302 	orr.w	r3, r3, #2
 8006a70:	6453      	str	r3, [r2, #68]	@ 0x44
 8006a72:	4b07      	ldr	r3, [pc, #28]	@ (8006a90 <HAL_TIM_Base_MspInit+0x40>)
 8006a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a76:	f003 0302 	and.w	r3, r3, #2
 8006a7a:	60fb      	str	r3, [r7, #12]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8006a7e:	bf00      	nop
 8006a80:	3714      	adds	r7, #20
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr
 8006a8a:	bf00      	nop
 8006a8c:	40010400 	.word	0x40010400
 8006a90:	40023800 	.word	0x40023800

08006a94 <MX_UART4_Init>:
UART_HandleTypeDef huart3;
UART_HandleTypeDef huart6;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8006a98:	4b11      	ldr	r3, [pc, #68]	@ (8006ae0 <MX_UART4_Init+0x4c>)
 8006a9a:	4a12      	ldr	r2, [pc, #72]	@ (8006ae4 <MX_UART4_Init+0x50>)
 8006a9c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8006a9e:	4b10      	ldr	r3, [pc, #64]	@ (8006ae0 <MX_UART4_Init+0x4c>)
 8006aa0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8006aa4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8006aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8006ae0 <MX_UART4_Init+0x4c>)
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8006aac:	4b0c      	ldr	r3, [pc, #48]	@ (8006ae0 <MX_UART4_Init+0x4c>)
 8006aae:	2200      	movs	r2, #0
 8006ab0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8006ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8006ae0 <MX_UART4_Init+0x4c>)
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8006ab8:	4b09      	ldr	r3, [pc, #36]	@ (8006ae0 <MX_UART4_Init+0x4c>)
 8006aba:	220c      	movs	r2, #12
 8006abc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006abe:	4b08      	ldr	r3, [pc, #32]	@ (8006ae0 <MX_UART4_Init+0x4c>)
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8006ac4:	4b06      	ldr	r3, [pc, #24]	@ (8006ae0 <MX_UART4_Init+0x4c>)
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8006aca:	4805      	ldr	r0, [pc, #20]	@ (8006ae0 <MX_UART4_Init+0x4c>)
 8006acc:	f004 fd44 	bl	800b558 <HAL_UART_Init>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d001      	beq.n	8006ada <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8006ad6:	f7ff fd39 	bl	800654c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8006ada:	bf00      	nop
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	bf00      	nop
 8006ae0:	20003680 	.word	0x20003680
 8006ae4:	40004c00 	.word	0x40004c00

08006ae8 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8006aec:	4b11      	ldr	r3, [pc, #68]	@ (8006b34 <MX_UART5_Init+0x4c>)
 8006aee:	4a12      	ldr	r2, [pc, #72]	@ (8006b38 <MX_UART5_Init+0x50>)
 8006af0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8006af2:	4b10      	ldr	r3, [pc, #64]	@ (8006b34 <MX_UART5_Init+0x4c>)
 8006af4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006af8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8006afa:	4b0e      	ldr	r3, [pc, #56]	@ (8006b34 <MX_UART5_Init+0x4c>)
 8006afc:	2200      	movs	r2, #0
 8006afe:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8006b00:	4b0c      	ldr	r3, [pc, #48]	@ (8006b34 <MX_UART5_Init+0x4c>)
 8006b02:	2200      	movs	r2, #0
 8006b04:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8006b06:	4b0b      	ldr	r3, [pc, #44]	@ (8006b34 <MX_UART5_Init+0x4c>)
 8006b08:	2200      	movs	r2, #0
 8006b0a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8006b0c:	4b09      	ldr	r3, [pc, #36]	@ (8006b34 <MX_UART5_Init+0x4c>)
 8006b0e:	220c      	movs	r2, #12
 8006b10:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006b12:	4b08      	ldr	r3, [pc, #32]	@ (8006b34 <MX_UART5_Init+0x4c>)
 8006b14:	2200      	movs	r2, #0
 8006b16:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8006b18:	4b06      	ldr	r3, [pc, #24]	@ (8006b34 <MX_UART5_Init+0x4c>)
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8006b1e:	4805      	ldr	r0, [pc, #20]	@ (8006b34 <MX_UART5_Init+0x4c>)
 8006b20:	f004 fd1a 	bl	800b558 <HAL_UART_Init>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d001      	beq.n	8006b2e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8006b2a:	f7ff fd0f 	bl	800654c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8006b2e:	bf00      	nop
 8006b30:	bd80      	pop	{r7, pc}
 8006b32:	bf00      	nop
 8006b34:	200036c8 	.word	0x200036c8
 8006b38:	40005000 	.word	0x40005000

08006b3c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006b40:	4b11      	ldr	r3, [pc, #68]	@ (8006b88 <MX_USART1_UART_Init+0x4c>)
 8006b42:	4a12      	ldr	r2, [pc, #72]	@ (8006b8c <MX_USART1_UART_Init+0x50>)
 8006b44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8006b46:	4b10      	ldr	r3, [pc, #64]	@ (8006b88 <MX_USART1_UART_Init+0x4c>)
 8006b48:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8006b4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8006b88 <MX_USART1_UART_Init+0x4c>)
 8006b50:	2200      	movs	r2, #0
 8006b52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006b54:	4b0c      	ldr	r3, [pc, #48]	@ (8006b88 <MX_USART1_UART_Init+0x4c>)
 8006b56:	2200      	movs	r2, #0
 8006b58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8006b88 <MX_USART1_UART_Init+0x4c>)
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006b60:	4b09      	ldr	r3, [pc, #36]	@ (8006b88 <MX_USART1_UART_Init+0x4c>)
 8006b62:	220c      	movs	r2, #12
 8006b64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006b66:	4b08      	ldr	r3, [pc, #32]	@ (8006b88 <MX_USART1_UART_Init+0x4c>)
 8006b68:	2200      	movs	r2, #0
 8006b6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006b6c:	4b06      	ldr	r3, [pc, #24]	@ (8006b88 <MX_USART1_UART_Init+0x4c>)
 8006b6e:	2200      	movs	r2, #0
 8006b70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006b72:	4805      	ldr	r0, [pc, #20]	@ (8006b88 <MX_USART1_UART_Init+0x4c>)
 8006b74:	f004 fcf0 	bl	800b558 <HAL_UART_Init>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d001      	beq.n	8006b82 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8006b7e:	f7ff fce5 	bl	800654c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006b82:	bf00      	nop
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop
 8006b88:	20003710 	.word	0x20003710
 8006b8c:	40011000 	.word	0x40011000

08006b90 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006b94:	4b11      	ldr	r3, [pc, #68]	@ (8006bdc <MX_USART2_UART_Init+0x4c>)
 8006b96:	4a12      	ldr	r2, [pc, #72]	@ (8006be0 <MX_USART2_UART_Init+0x50>)
 8006b98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006b9a:	4b10      	ldr	r3, [pc, #64]	@ (8006bdc <MX_USART2_UART_Init+0x4c>)
 8006b9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006ba0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8006bdc <MX_USART2_UART_Init+0x4c>)
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8006bdc <MX_USART2_UART_Init+0x4c>)
 8006baa:	2200      	movs	r2, #0
 8006bac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006bae:	4b0b      	ldr	r3, [pc, #44]	@ (8006bdc <MX_USART2_UART_Init+0x4c>)
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006bb4:	4b09      	ldr	r3, [pc, #36]	@ (8006bdc <MX_USART2_UART_Init+0x4c>)
 8006bb6:	220c      	movs	r2, #12
 8006bb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006bba:	4b08      	ldr	r3, [pc, #32]	@ (8006bdc <MX_USART2_UART_Init+0x4c>)
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006bc0:	4b06      	ldr	r3, [pc, #24]	@ (8006bdc <MX_USART2_UART_Init+0x4c>)
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006bc6:	4805      	ldr	r0, [pc, #20]	@ (8006bdc <MX_USART2_UART_Init+0x4c>)
 8006bc8:	f004 fcc6 	bl	800b558 <HAL_UART_Init>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d001      	beq.n	8006bd6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006bd2:	f7ff fcbb 	bl	800654c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006bd6:	bf00      	nop
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	20003758 	.word	0x20003758
 8006be0:	40004400 	.word	0x40004400

08006be4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8006be8:	4b11      	ldr	r3, [pc, #68]	@ (8006c30 <MX_USART3_UART_Init+0x4c>)
 8006bea:	4a12      	ldr	r2, [pc, #72]	@ (8006c34 <MX_USART3_UART_Init+0x50>)
 8006bec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 2400;
 8006bee:	4b10      	ldr	r3, [pc, #64]	@ (8006c30 <MX_USART3_UART_Init+0x4c>)
 8006bf0:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8006bf4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8006c30 <MX_USART3_UART_Init+0x4c>)
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8006bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8006c30 <MX_USART3_UART_Init+0x4c>)
 8006bfe:	2200      	movs	r2, #0
 8006c00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8006c02:	4b0b      	ldr	r3, [pc, #44]	@ (8006c30 <MX_USART3_UART_Init+0x4c>)
 8006c04:	2200      	movs	r2, #0
 8006c06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006c08:	4b09      	ldr	r3, [pc, #36]	@ (8006c30 <MX_USART3_UART_Init+0x4c>)
 8006c0a:	220c      	movs	r2, #12
 8006c0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006c0e:	4b08      	ldr	r3, [pc, #32]	@ (8006c30 <MX_USART3_UART_Init+0x4c>)
 8006c10:	2200      	movs	r2, #0
 8006c12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006c14:	4b06      	ldr	r3, [pc, #24]	@ (8006c30 <MX_USART3_UART_Init+0x4c>)
 8006c16:	2200      	movs	r2, #0
 8006c18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006c1a:	4805      	ldr	r0, [pc, #20]	@ (8006c30 <MX_USART3_UART_Init+0x4c>)
 8006c1c:	f004 fc9c 	bl	800b558 <HAL_UART_Init>
 8006c20:	4603      	mov	r3, r0
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d001      	beq.n	8006c2a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8006c26:	f7ff fc91 	bl	800654c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8006c2a:	bf00      	nop
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	200037a0 	.word	0x200037a0
 8006c34:	40004800 	.word	0x40004800

08006c38 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8006c3c:	4b11      	ldr	r3, [pc, #68]	@ (8006c84 <MX_USART6_UART_Init+0x4c>)
 8006c3e:	4a12      	ldr	r2, [pc, #72]	@ (8006c88 <MX_USART6_UART_Init+0x50>)
 8006c40:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8006c42:	4b10      	ldr	r3, [pc, #64]	@ (8006c84 <MX_USART6_UART_Init+0x4c>)
 8006c44:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8006c48:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8006c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8006c84 <MX_USART6_UART_Init+0x4c>)
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8006c50:	4b0c      	ldr	r3, [pc, #48]	@ (8006c84 <MX_USART6_UART_Init+0x4c>)
 8006c52:	2200      	movs	r2, #0
 8006c54:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8006c56:	4b0b      	ldr	r3, [pc, #44]	@ (8006c84 <MX_USART6_UART_Init+0x4c>)
 8006c58:	2200      	movs	r2, #0
 8006c5a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8006c5c:	4b09      	ldr	r3, [pc, #36]	@ (8006c84 <MX_USART6_UART_Init+0x4c>)
 8006c5e:	220c      	movs	r2, #12
 8006c60:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006c62:	4b08      	ldr	r3, [pc, #32]	@ (8006c84 <MX_USART6_UART_Init+0x4c>)
 8006c64:	2200      	movs	r2, #0
 8006c66:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8006c68:	4b06      	ldr	r3, [pc, #24]	@ (8006c84 <MX_USART6_UART_Init+0x4c>)
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8006c6e:	4805      	ldr	r0, [pc, #20]	@ (8006c84 <MX_USART6_UART_Init+0x4c>)
 8006c70:	f004 fc72 	bl	800b558 <HAL_UART_Init>
 8006c74:	4603      	mov	r3, r0
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d001      	beq.n	8006c7e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8006c7a:	f7ff fc67 	bl	800654c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8006c7e:	bf00      	nop
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	200037e8 	.word	0x200037e8
 8006c88:	40011400 	.word	0x40011400

08006c8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b094      	sub	sp, #80	@ 0x50
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c94:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006c98:	2200      	movs	r2, #0
 8006c9a:	601a      	str	r2, [r3, #0]
 8006c9c:	605a      	str	r2, [r3, #4]
 8006c9e:	609a      	str	r2, [r3, #8]
 8006ca0:	60da      	str	r2, [r3, #12]
 8006ca2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a98      	ldr	r2, [pc, #608]	@ (8006f0c <HAL_UART_MspInit+0x280>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d12d      	bne.n	8006d0a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8006cae:	2300      	movs	r3, #0
 8006cb0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006cb2:	4b97      	ldr	r3, [pc, #604]	@ (8006f10 <HAL_UART_MspInit+0x284>)
 8006cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cb6:	4a96      	ldr	r2, [pc, #600]	@ (8006f10 <HAL_UART_MspInit+0x284>)
 8006cb8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006cbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8006cbe:	4b94      	ldr	r3, [pc, #592]	@ (8006f10 <HAL_UART_MspInit+0x284>)
 8006cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cc2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006cc6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006cc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006cca:	2300      	movs	r3, #0
 8006ccc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cce:	4b90      	ldr	r3, [pc, #576]	@ (8006f10 <HAL_UART_MspInit+0x284>)
 8006cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cd2:	4a8f      	ldr	r2, [pc, #572]	@ (8006f10 <HAL_UART_MspInit+0x284>)
 8006cd4:	f043 0304 	orr.w	r3, r3, #4
 8006cd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8006cda:	4b8d      	ldr	r3, [pc, #564]	@ (8006f10 <HAL_UART_MspInit+0x284>)
 8006cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cde:	f003 0304 	and.w	r3, r3, #4
 8006ce2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ce4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = PZEM3_UART4_TX_Pin|PZEM3_UART4_RX_Pin;
 8006ce6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cec:	2302      	movs	r3, #2
 8006cee:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006cf4:	2303      	movs	r3, #3
 8006cf6:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8006cf8:	2308      	movs	r3, #8
 8006cfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006cfc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006d00:	4619      	mov	r1, r3
 8006d02:	4884      	ldr	r0, [pc, #528]	@ (8006f14 <HAL_UART_MspInit+0x288>)
 8006d04:	f001 fd16 	bl	8008734 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8006d08:	e145      	b.n	8006f96 <HAL_UART_MspInit+0x30a>
  else if(uartHandle->Instance==UART5)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a82      	ldr	r2, [pc, #520]	@ (8006f18 <HAL_UART_MspInit+0x28c>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d153      	bne.n	8006dbc <HAL_UART_MspInit+0x130>
    __HAL_RCC_UART5_CLK_ENABLE();
 8006d14:	2300      	movs	r3, #0
 8006d16:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d18:	4b7d      	ldr	r3, [pc, #500]	@ (8006f10 <HAL_UART_MspInit+0x284>)
 8006d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d1c:	4a7c      	ldr	r2, [pc, #496]	@ (8006f10 <HAL_UART_MspInit+0x284>)
 8006d1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d22:	6413      	str	r3, [r2, #64]	@ 0x40
 8006d24:	4b7a      	ldr	r3, [pc, #488]	@ (8006f10 <HAL_UART_MspInit+0x284>)
 8006d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006d2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d30:	2300      	movs	r3, #0
 8006d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d34:	4b76      	ldr	r3, [pc, #472]	@ (8006f10 <HAL_UART_MspInit+0x284>)
 8006d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d38:	4a75      	ldr	r2, [pc, #468]	@ (8006f10 <HAL_UART_MspInit+0x284>)
 8006d3a:	f043 0304 	orr.w	r3, r3, #4
 8006d3e:	6313      	str	r3, [r2, #48]	@ 0x30
 8006d40:	4b73      	ldr	r3, [pc, #460]	@ (8006f10 <HAL_UART_MspInit+0x284>)
 8006d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d44:	f003 0304 	and.w	r3, r3, #4
 8006d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d50:	4b6f      	ldr	r3, [pc, #444]	@ (8006f10 <HAL_UART_MspInit+0x284>)
 8006d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d54:	4a6e      	ldr	r2, [pc, #440]	@ (8006f10 <HAL_UART_MspInit+0x284>)
 8006d56:	f043 0308 	orr.w	r3, r3, #8
 8006d5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8006d5c:	4b6c      	ldr	r3, [pc, #432]	@ (8006f10 <HAL_UART_MspInit+0x284>)
 8006d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d60:	f003 0308 	and.w	r3, r3, #8
 8006d64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = HMI_UART5_TX_Pin;
 8006d68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006d6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d6e:	2302      	movs	r3, #2
 8006d70:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d72:	2300      	movs	r3, #0
 8006d74:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d76:	2303      	movs	r3, #3
 8006d78:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8006d7a:	2308      	movs	r3, #8
 8006d7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(HMI_UART5_TX_GPIO_Port, &GPIO_InitStruct);
 8006d7e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006d82:	4619      	mov	r1, r3
 8006d84:	4863      	ldr	r0, [pc, #396]	@ (8006f14 <HAL_UART_MspInit+0x288>)
 8006d86:	f001 fcd5 	bl	8008734 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HMI_UART5_RX_Pin;
 8006d8a:	2304      	movs	r3, #4
 8006d8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d8e:	2302      	movs	r3, #2
 8006d90:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d92:	2300      	movs	r3, #0
 8006d94:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d96:	2303      	movs	r3, #3
 8006d98:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8006d9a:	2308      	movs	r3, #8
 8006d9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(HMI_UART5_RX_GPIO_Port, &GPIO_InitStruct);
 8006d9e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006da2:	4619      	mov	r1, r3
 8006da4:	485d      	ldr	r0, [pc, #372]	@ (8006f1c <HAL_UART_MspInit+0x290>)
 8006da6:	f001 fcc5 	bl	8008734 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8006daa:	2200      	movs	r2, #0
 8006dac:	2105      	movs	r1, #5
 8006dae:	2035      	movs	r0, #53	@ 0x35
 8006db0:	f001 f904 	bl	8007fbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8006db4:	2035      	movs	r0, #53	@ 0x35
 8006db6:	f001 f91d 	bl	8007ff4 <HAL_NVIC_EnableIRQ>
}
 8006dba:	e0ec      	b.n	8006f96 <HAL_UART_MspInit+0x30a>
  else if(uartHandle->Instance==USART1)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a57      	ldr	r2, [pc, #348]	@ (8006f20 <HAL_UART_MspInit+0x294>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d12d      	bne.n	8006e22 <HAL_UART_MspInit+0x196>
    __HAL_RCC_USART1_CLK_ENABLE();
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006dca:	4b51      	ldr	r3, [pc, #324]	@ (8006f10 <HAL_UART_MspInit+0x284>)
 8006dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dce:	4a50      	ldr	r2, [pc, #320]	@ (8006f10 <HAL_UART_MspInit+0x284>)
 8006dd0:	f043 0310 	orr.w	r3, r3, #16
 8006dd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8006dd6:	4b4e      	ldr	r3, [pc, #312]	@ (8006f10 <HAL_UART_MspInit+0x284>)
 8006dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dda:	f003 0310 	and.w	r3, r3, #16
 8006dde:	627b      	str	r3, [r7, #36]	@ 0x24
 8006de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006de2:	2300      	movs	r3, #0
 8006de4:	623b      	str	r3, [r7, #32]
 8006de6:	4b4a      	ldr	r3, [pc, #296]	@ (8006f10 <HAL_UART_MspInit+0x284>)
 8006de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dea:	4a49      	ldr	r2, [pc, #292]	@ (8006f10 <HAL_UART_MspInit+0x284>)
 8006dec:	f043 0301 	orr.w	r3, r3, #1
 8006df0:	6313      	str	r3, [r2, #48]	@ 0x30
 8006df2:	4b47      	ldr	r3, [pc, #284]	@ (8006f10 <HAL_UART_MspInit+0x284>)
 8006df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006df6:	f003 0301 	and.w	r3, r3, #1
 8006dfa:	623b      	str	r3, [r7, #32]
 8006dfc:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = PZEM1_USART1_TX_Pin|PZEM1_USART1_RX_Pin;
 8006dfe:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8006e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e04:	2302      	movs	r3, #2
 8006e06:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e0c:	2303      	movs	r3, #3
 8006e0e:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006e10:	2307      	movs	r3, #7
 8006e12:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e14:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006e18:	4619      	mov	r1, r3
 8006e1a:	4842      	ldr	r0, [pc, #264]	@ (8006f24 <HAL_UART_MspInit+0x298>)
 8006e1c:	f001 fc8a 	bl	8008734 <HAL_GPIO_Init>
}
 8006e20:	e0b9      	b.n	8006f96 <HAL_UART_MspInit+0x30a>
  else if(uartHandle->Instance==USART2)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a40      	ldr	r2, [pc, #256]	@ (8006f28 <HAL_UART_MspInit+0x29c>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d134      	bne.n	8006e96 <HAL_UART_MspInit+0x20a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	61fb      	str	r3, [r7, #28]
 8006e30:	4b37      	ldr	r3, [pc, #220]	@ (8006f10 <HAL_UART_MspInit+0x284>)
 8006e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e34:	4a36      	ldr	r2, [pc, #216]	@ (8006f10 <HAL_UART_MspInit+0x284>)
 8006e36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8006e3c:	4b34      	ldr	r3, [pc, #208]	@ (8006f10 <HAL_UART_MspInit+0x284>)
 8006e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e44:	61fb      	str	r3, [r7, #28]
 8006e46:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e48:	2300      	movs	r3, #0
 8006e4a:	61bb      	str	r3, [r7, #24]
 8006e4c:	4b30      	ldr	r3, [pc, #192]	@ (8006f10 <HAL_UART_MspInit+0x284>)
 8006e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e50:	4a2f      	ldr	r2, [pc, #188]	@ (8006f10 <HAL_UART_MspInit+0x284>)
 8006e52:	f043 0301 	orr.w	r3, r3, #1
 8006e56:	6313      	str	r3, [r2, #48]	@ 0x30
 8006e58:	4b2d      	ldr	r3, [pc, #180]	@ (8006f10 <HAL_UART_MspInit+0x284>)
 8006e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e5c:	f003 0301 	and.w	r3, r3, #1
 8006e60:	61bb      	str	r3, [r7, #24]
 8006e62:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GSM_USART2_TX_Pin|GSM_USART2_RX_Pin;
 8006e64:	230c      	movs	r3, #12
 8006e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e68:	2302      	movs	r3, #2
 8006e6a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e70:	2303      	movs	r3, #3
 8006e72:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006e74:	2307      	movs	r3, #7
 8006e76:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e78:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	4829      	ldr	r0, [pc, #164]	@ (8006f24 <HAL_UART_MspInit+0x298>)
 8006e80:	f001 fc58 	bl	8008734 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8006e84:	2200      	movs	r2, #0
 8006e86:	2105      	movs	r1, #5
 8006e88:	2026      	movs	r0, #38	@ 0x26
 8006e8a:	f001 f897 	bl	8007fbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006e8e:	2026      	movs	r0, #38	@ 0x26
 8006e90:	f001 f8b0 	bl	8007ff4 <HAL_NVIC_EnableIRQ>
}
 8006e94:	e07f      	b.n	8006f96 <HAL_UART_MspInit+0x30a>
  else if(uartHandle->Instance==USART3)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a24      	ldr	r2, [pc, #144]	@ (8006f2c <HAL_UART_MspInit+0x2a0>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d149      	bne.n	8006f34 <HAL_UART_MspInit+0x2a8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	617b      	str	r3, [r7, #20]
 8006ea4:	4b1a      	ldr	r3, [pc, #104]	@ (8006f10 <HAL_UART_MspInit+0x284>)
 8006ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ea8:	4a19      	ldr	r2, [pc, #100]	@ (8006f10 <HAL_UART_MspInit+0x284>)
 8006eaa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006eae:	6413      	str	r3, [r2, #64]	@ 0x40
 8006eb0:	4b17      	ldr	r3, [pc, #92]	@ (8006f10 <HAL_UART_MspInit+0x284>)
 8006eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eb4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006eb8:	617b      	str	r3, [r7, #20]
 8006eba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	613b      	str	r3, [r7, #16]
 8006ec0:	4b13      	ldr	r3, [pc, #76]	@ (8006f10 <HAL_UART_MspInit+0x284>)
 8006ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ec4:	4a12      	ldr	r2, [pc, #72]	@ (8006f10 <HAL_UART_MspInit+0x284>)
 8006ec6:	f043 0302 	orr.w	r3, r3, #2
 8006eca:	6313      	str	r3, [r2, #48]	@ 0x30
 8006ecc:	4b10      	ldr	r3, [pc, #64]	@ (8006f10 <HAL_UART_MspInit+0x284>)
 8006ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ed0:	f003 0302 	and.w	r3, r3, #2
 8006ed4:	613b      	str	r3, [r7, #16]
 8006ed6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = INVERTER_USART3_TX_Pin|INVERTER_USART3_RX_Pin;
 8006ed8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ede:	2302      	movs	r3, #2
 8006ee0:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ee6:	2303      	movs	r3, #3
 8006ee8:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006eea:	2307      	movs	r3, #7
 8006eec:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006eee:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006ef2:	4619      	mov	r1, r3
 8006ef4:	480e      	ldr	r0, [pc, #56]	@ (8006f30 <HAL_UART_MspInit+0x2a4>)
 8006ef6:	f001 fc1d 	bl	8008734 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8006efa:	2200      	movs	r2, #0
 8006efc:	2105      	movs	r1, #5
 8006efe:	2027      	movs	r0, #39	@ 0x27
 8006f00:	f001 f85c 	bl	8007fbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006f04:	2027      	movs	r0, #39	@ 0x27
 8006f06:	f001 f875 	bl	8007ff4 <HAL_NVIC_EnableIRQ>
}
 8006f0a:	e044      	b.n	8006f96 <HAL_UART_MspInit+0x30a>
 8006f0c:	40004c00 	.word	0x40004c00
 8006f10:	40023800 	.word	0x40023800
 8006f14:	40020800 	.word	0x40020800
 8006f18:	40005000 	.word	0x40005000
 8006f1c:	40020c00 	.word	0x40020c00
 8006f20:	40011000 	.word	0x40011000
 8006f24:	40020000 	.word	0x40020000
 8006f28:	40004400 	.word	0x40004400
 8006f2c:	40004800 	.word	0x40004800
 8006f30:	40020400 	.word	0x40020400
  else if(uartHandle->Instance==USART6)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a19      	ldr	r2, [pc, #100]	@ (8006fa0 <HAL_UART_MspInit+0x314>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d12b      	bne.n	8006f96 <HAL_UART_MspInit+0x30a>
    __HAL_RCC_USART6_CLK_ENABLE();
 8006f3e:	2300      	movs	r3, #0
 8006f40:	60fb      	str	r3, [r7, #12]
 8006f42:	4b18      	ldr	r3, [pc, #96]	@ (8006fa4 <HAL_UART_MspInit+0x318>)
 8006f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f46:	4a17      	ldr	r2, [pc, #92]	@ (8006fa4 <HAL_UART_MspInit+0x318>)
 8006f48:	f043 0320 	orr.w	r3, r3, #32
 8006f4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8006f4e:	4b15      	ldr	r3, [pc, #84]	@ (8006fa4 <HAL_UART_MspInit+0x318>)
 8006f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f52:	f003 0320 	and.w	r3, r3, #32
 8006f56:	60fb      	str	r3, [r7, #12]
 8006f58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	60bb      	str	r3, [r7, #8]
 8006f5e:	4b11      	ldr	r3, [pc, #68]	@ (8006fa4 <HAL_UART_MspInit+0x318>)
 8006f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f62:	4a10      	ldr	r2, [pc, #64]	@ (8006fa4 <HAL_UART_MspInit+0x318>)
 8006f64:	f043 0304 	orr.w	r3, r3, #4
 8006f68:	6313      	str	r3, [r2, #48]	@ 0x30
 8006f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8006fa4 <HAL_UART_MspInit+0x318>)
 8006f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f6e:	f003 0304 	and.w	r3, r3, #4
 8006f72:	60bb      	str	r3, [r7, #8]
 8006f74:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PZEM2_USART6_TX_Pin|PZEM2_USART6_RX_Pin;
 8006f76:	23c0      	movs	r3, #192	@ 0xc0
 8006f78:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f7a:	2302      	movs	r3, #2
 8006f7c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f82:	2303      	movs	r3, #3
 8006f84:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8006f86:	2308      	movs	r3, #8
 8006f88:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006f8a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006f8e:	4619      	mov	r1, r3
 8006f90:	4805      	ldr	r0, [pc, #20]	@ (8006fa8 <HAL_UART_MspInit+0x31c>)
 8006f92:	f001 fbcf 	bl	8008734 <HAL_GPIO_Init>
}
 8006f96:	bf00      	nop
 8006f98:	3750      	adds	r7, #80	@ 0x50
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	40011400 	.word	0x40011400
 8006fa4:	40023800 	.word	0x40023800
 8006fa8:	40020800 	.word	0x40020800

08006fac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006fac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006fe4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8006fb0:	f7ff fcec 	bl	800698c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006fb4:	480c      	ldr	r0, [pc, #48]	@ (8006fe8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006fb6:	490d      	ldr	r1, [pc, #52]	@ (8006fec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006fb8:	4a0d      	ldr	r2, [pc, #52]	@ (8006ff0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006fba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006fbc:	e002      	b.n	8006fc4 <LoopCopyDataInit>

08006fbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006fbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006fc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006fc2:	3304      	adds	r3, #4

08006fc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006fc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006fc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006fc8:	d3f9      	bcc.n	8006fbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006fca:	4a0a      	ldr	r2, [pc, #40]	@ (8006ff4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006fcc:	4c0a      	ldr	r4, [pc, #40]	@ (8006ff8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006fce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006fd0:	e001      	b.n	8006fd6 <LoopFillZerobss>

08006fd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006fd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006fd4:	3204      	adds	r2, #4

08006fd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006fd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006fd8:	d3fb      	bcc.n	8006fd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006fda:	f008 fd55 	bl	800fa88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006fde:	f7ff fa13 	bl	8006408 <main>
  bx  lr    
 8006fe2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006fe4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006fe8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006fec:	20000230 	.word	0x20000230
  ldr r2, =_sidata
 8006ff0:	08012864 	.word	0x08012864
  ldr r2, =_sbss
 8006ff4:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 8006ff8:	2000e3a4 	.word	0x2000e3a4

08006ffc <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006ffc:	e7fe      	b.n	8006ffc <CAN1_RX0_IRQHandler>
	...

08007000 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007004:	4b0e      	ldr	r3, [pc, #56]	@ (8007040 <HAL_Init+0x40>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a0d      	ldr	r2, [pc, #52]	@ (8007040 <HAL_Init+0x40>)
 800700a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800700e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007010:	4b0b      	ldr	r3, [pc, #44]	@ (8007040 <HAL_Init+0x40>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a0a      	ldr	r2, [pc, #40]	@ (8007040 <HAL_Init+0x40>)
 8007016:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800701a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800701c:	4b08      	ldr	r3, [pc, #32]	@ (8007040 <HAL_Init+0x40>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a07      	ldr	r2, [pc, #28]	@ (8007040 <HAL_Init+0x40>)
 8007022:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007026:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007028:	2003      	movs	r0, #3
 800702a:	f000 ffbc 	bl	8007fa6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800702e:	200f      	movs	r0, #15
 8007030:	f7ff fb0e 	bl	8006650 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007034:	f7ff fae0 	bl	80065f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007038:	2300      	movs	r3, #0
}
 800703a:	4618      	mov	r0, r3
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	40023c00 	.word	0x40023c00

08007044 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007044:	b480      	push	{r7}
 8007046:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007048:	4b06      	ldr	r3, [pc, #24]	@ (8007064 <HAL_IncTick+0x20>)
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	461a      	mov	r2, r3
 800704e:	4b06      	ldr	r3, [pc, #24]	@ (8007068 <HAL_IncTick+0x24>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4413      	add	r3, r2
 8007054:	4a04      	ldr	r2, [pc, #16]	@ (8007068 <HAL_IncTick+0x24>)
 8007056:	6013      	str	r3, [r2, #0]
}
 8007058:	bf00      	nop
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr
 8007062:	bf00      	nop
 8007064:	20000050 	.word	0x20000050
 8007068:	20003830 	.word	0x20003830

0800706c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800706c:	b480      	push	{r7}
 800706e:	af00      	add	r7, sp, #0
  return uwTick;
 8007070:	4b03      	ldr	r3, [pc, #12]	@ (8007080 <HAL_GetTick+0x14>)
 8007072:	681b      	ldr	r3, [r3, #0]
}
 8007074:	4618      	mov	r0, r3
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr
 800707e:	bf00      	nop
 8007080:	20003830 	.word	0x20003830

08007084 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8007084:	b480      	push	{r7}
 8007086:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8007088:	4b03      	ldr	r3, [pc, #12]	@ (8007098 <HAL_GetUIDw0+0x14>)
 800708a:	681b      	ldr	r3, [r3, #0]
}
 800708c:	4618      	mov	r0, r3
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr
 8007096:	bf00      	nop
 8007098:	1fff7a10 	.word	0x1fff7a10

0800709c <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800709c:	b480      	push	{r7}
 800709e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80070a0:	4b03      	ldr	r3, [pc, #12]	@ (80070b0 <HAL_GetUIDw1+0x14>)
 80070a2:	681b      	ldr	r3, [r3, #0]
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr
 80070ae:	bf00      	nop
 80070b0:	1fff7a14 	.word	0x1fff7a14

080070b4 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80070b4:	b480      	push	{r7}
 80070b6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80070b8:	4b03      	ldr	r3, [pc, #12]	@ (80070c8 <HAL_GetUIDw2+0x14>)
 80070ba:	681b      	ldr	r3, [r3, #0]
}
 80070bc:	4618      	mov	r0, r3
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr
 80070c6:	bf00      	nop
 80070c8:	1fff7a18 	.word	0x1fff7a18

080070cc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80070d4:	2300      	movs	r3, #0
 80070d6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d101      	bne.n	80070e2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	e033      	b.n	800714a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d109      	bne.n	80070fe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f7fe ff8e 	bl	800600c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2200      	movs	r2, #0
 80070fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007102:	f003 0310 	and.w	r3, r3, #16
 8007106:	2b00      	cmp	r3, #0
 8007108:	d118      	bne.n	800713c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800710e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8007112:	f023 0302 	bic.w	r3, r3, #2
 8007116:	f043 0202 	orr.w	r2, r3, #2
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 fd0c 	bl	8007b3c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800712e:	f023 0303 	bic.w	r3, r3, #3
 8007132:	f043 0201 	orr.w	r2, r3, #1
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	641a      	str	r2, [r3, #64]	@ 0x40
 800713a:	e001      	b.n	8007140 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007148:	7bfb      	ldrb	r3, [r7, #15]
}
 800714a:	4618      	mov	r0, r3
 800714c:	3710      	adds	r7, #16
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
	...

08007154 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8007154:	b480      	push	{r7}
 8007156:	b085      	sub	sp, #20
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800715c:	2300      	movs	r3, #0
 800715e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007166:	2b01      	cmp	r3, #1
 8007168:	d101      	bne.n	800716e <HAL_ADC_Start+0x1a>
 800716a:	2302      	movs	r3, #2
 800716c:	e0b2      	b.n	80072d4 <HAL_ADC_Start+0x180>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2201      	movs	r2, #1
 8007172:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	f003 0301 	and.w	r3, r3, #1
 8007180:	2b01      	cmp	r3, #1
 8007182:	d018      	beq.n	80071b6 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	689a      	ldr	r2, [r3, #8]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f042 0201 	orr.w	r2, r2, #1
 8007192:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007194:	4b52      	ldr	r3, [pc, #328]	@ (80072e0 <HAL_ADC_Start+0x18c>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a52      	ldr	r2, [pc, #328]	@ (80072e4 <HAL_ADC_Start+0x190>)
 800719a:	fba2 2303 	umull	r2, r3, r2, r3
 800719e:	0c9a      	lsrs	r2, r3, #18
 80071a0:	4613      	mov	r3, r2
 80071a2:	005b      	lsls	r3, r3, #1
 80071a4:	4413      	add	r3, r2
 80071a6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80071a8:	e002      	b.n	80071b0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	3b01      	subs	r3, #1
 80071ae:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d1f9      	bne.n	80071aa <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	f003 0301 	and.w	r3, r3, #1
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d17a      	bne.n	80072ba <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071c8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80071cc:	f023 0301 	bic.w	r3, r3, #1
 80071d0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d007      	beq.n	80071f6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071ea:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80071ee:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80071fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007202:	d106      	bne.n	8007212 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007208:	f023 0206 	bic.w	r2, r3, #6
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	645a      	str	r2, [r3, #68]	@ 0x44
 8007210:	e002      	b.n	8007218 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2200      	movs	r2, #0
 8007216:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007220:	4b31      	ldr	r3, [pc, #196]	@ (80072e8 <HAL_ADC_Start+0x194>)
 8007222:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800722c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	f003 031f 	and.w	r3, r3, #31
 8007236:	2b00      	cmp	r3, #0
 8007238:	d12a      	bne.n	8007290 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a2b      	ldr	r2, [pc, #172]	@ (80072ec <HAL_ADC_Start+0x198>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d015      	beq.n	8007270 <HAL_ADC_Start+0x11c>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a29      	ldr	r2, [pc, #164]	@ (80072f0 <HAL_ADC_Start+0x19c>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d105      	bne.n	800725a <HAL_ADC_Start+0x106>
 800724e:	4b26      	ldr	r3, [pc, #152]	@ (80072e8 <HAL_ADC_Start+0x194>)
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	f003 031f 	and.w	r3, r3, #31
 8007256:	2b00      	cmp	r3, #0
 8007258:	d00a      	beq.n	8007270 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a25      	ldr	r2, [pc, #148]	@ (80072f4 <HAL_ADC_Start+0x1a0>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d136      	bne.n	80072d2 <HAL_ADC_Start+0x17e>
 8007264:	4b20      	ldr	r3, [pc, #128]	@ (80072e8 <HAL_ADC_Start+0x194>)
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	f003 0310 	and.w	r3, r3, #16
 800726c:	2b00      	cmp	r3, #0
 800726e:	d130      	bne.n	80072d2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800727a:	2b00      	cmp	r3, #0
 800727c:	d129      	bne.n	80072d2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	689a      	ldr	r2, [r3, #8]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800728c:	609a      	str	r2, [r3, #8]
 800728e:	e020      	b.n	80072d2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a15      	ldr	r2, [pc, #84]	@ (80072ec <HAL_ADC_Start+0x198>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d11b      	bne.n	80072d2 <HAL_ADC_Start+0x17e>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d114      	bne.n	80072d2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	689a      	ldr	r2, [r3, #8]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80072b6:	609a      	str	r2, [r3, #8]
 80072b8:	e00b      	b.n	80072d2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072be:	f043 0210 	orr.w	r2, r3, #16
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072ca:	f043 0201 	orr.w	r2, r3, #1
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3714      	adds	r7, #20
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr
 80072e0:	20000048 	.word	0x20000048
 80072e4:	431bde83 	.word	0x431bde83
 80072e8:	40012300 	.word	0x40012300
 80072ec:	40012000 	.word	0x40012000
 80072f0:	40012100 	.word	0x40012100
 80072f4:	40012200 	.word	0x40012200

080072f8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007306:	2b01      	cmp	r3, #1
 8007308:	d101      	bne.n	800730e <HAL_ADC_Stop+0x16>
 800730a:	2302      	movs	r3, #2
 800730c:	e021      	b.n	8007352 <HAL_ADC_Stop+0x5a>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2201      	movs	r2, #1
 8007312:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	689a      	ldr	r2, [r3, #8]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f022 0201 	bic.w	r2, r2, #1
 8007324:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	f003 0301 	and.w	r3, r3, #1
 8007330:	2b00      	cmp	r3, #0
 8007332:	d109      	bne.n	8007348 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007338:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800733c:	f023 0301 	bic.w	r3, r3, #1
 8007340:	f043 0201 	orr.w	r2, r3, #1
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8007350:	2300      	movs	r3, #0
}
 8007352:	4618      	mov	r0, r3
 8007354:	370c      	adds	r7, #12
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr

0800735e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800735e:	b580      	push	{r7, lr}
 8007360:	b084      	sub	sp, #16
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
 8007366:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8007368:	2300      	movs	r3, #0
 800736a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007376:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800737a:	d113      	bne.n	80073a4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8007386:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800738a:	d10b      	bne.n	80073a4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007390:	f043 0220 	orr.w	r2, r3, #32
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2200      	movs	r2, #0
 800739c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80073a0:	2301      	movs	r3, #1
 80073a2:	e063      	b.n	800746c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80073a4:	f7ff fe62 	bl	800706c <HAL_GetTick>
 80073a8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80073aa:	e021      	b.n	80073f0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073b2:	d01d      	beq.n	80073f0 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d007      	beq.n	80073ca <HAL_ADC_PollForConversion+0x6c>
 80073ba:	f7ff fe57 	bl	800706c <HAL_GetTick>
 80073be:	4602      	mov	r2, r0
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	1ad3      	subs	r3, r2, r3
 80073c4:	683a      	ldr	r2, [r7, #0]
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d212      	bcs.n	80073f0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f003 0302 	and.w	r3, r3, #2
 80073d4:	2b02      	cmp	r3, #2
 80073d6:	d00b      	beq.n	80073f0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073dc:	f043 0204 	orr.w	r2, r3, #4
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2200      	movs	r2, #0
 80073e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80073ec:	2303      	movs	r3, #3
 80073ee:	e03d      	b.n	800746c <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f003 0302 	and.w	r3, r3, #2
 80073fa:	2b02      	cmp	r3, #2
 80073fc:	d1d6      	bne.n	80073ac <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f06f 0212 	mvn.w	r2, #18
 8007406:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800740c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800741e:	2b00      	cmp	r3, #0
 8007420:	d123      	bne.n	800746a <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007426:	2b00      	cmp	r3, #0
 8007428:	d11f      	bne.n	800746a <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007430:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007434:	2b00      	cmp	r3, #0
 8007436:	d006      	beq.n	8007446 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8007442:	2b00      	cmp	r3, #0
 8007444:	d111      	bne.n	800746a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800744a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007456:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800745a:	2b00      	cmp	r3, #0
 800745c:	d105      	bne.n	800746a <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007462:	f043 0201 	orr.w	r2, r3, #1
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800746a:	2300      	movs	r3, #0
}
 800746c:	4618      	mov	r0, r3
 800746e:	3710      	adds	r7, #16
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}

08007474 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b086      	sub	sp, #24
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800747c:	2300      	movs	r3, #0
 800747e:	617b      	str	r3, [r7, #20]
 8007480:	2300      	movs	r3, #0
 8007482:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f003 0302 	and.w	r3, r3, #2
 800749a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	f003 0320 	and.w	r3, r3, #32
 80074a2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d049      	beq.n	800753e <HAL_ADC_IRQHandler+0xca>
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d046      	beq.n	800753e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074b4:	f003 0310 	and.w	r3, r3, #16
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d105      	bne.n	80074c8 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074c0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d12b      	bne.n	800752e <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d127      	bne.n	800752e <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074e4:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d006      	beq.n	80074fa <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	689b      	ldr	r3, [r3, #8]
 80074f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d119      	bne.n	800752e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	685a      	ldr	r2, [r3, #4]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f022 0220 	bic.w	r2, r2, #32
 8007508:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800750e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800751a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800751e:	2b00      	cmp	r3, #0
 8007520:	d105      	bne.n	800752e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007526:	f043 0201 	orr.w	r2, r3, #1
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f7fa fa1c 	bl	800196c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f06f 0212 	mvn.w	r2, #18
 800753c:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f003 0304 	and.w	r3, r3, #4
 8007544:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800754c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d057      	beq.n	8007604 <HAL_ADC_IRQHandler+0x190>
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d054      	beq.n	8007604 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800755e:	f003 0310 	and.w	r3, r3, #16
 8007562:	2b00      	cmp	r3, #0
 8007564:	d105      	bne.n	8007572 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800756a:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800757c:	2b00      	cmp	r3, #0
 800757e:	d139      	bne.n	80075f4 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007586:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800758a:	2b00      	cmp	r3, #0
 800758c:	d006      	beq.n	800759c <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8007598:	2b00      	cmp	r3, #0
 800759a:	d12b      	bne.n	80075f4 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d124      	bne.n	80075f4 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d11d      	bne.n	80075f4 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d119      	bne.n	80075f4 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	685a      	ldr	r2, [r3, #4]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80075ce:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075d4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d105      	bne.n	80075f4 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075ec:	f043 0201 	orr.w	r2, r3, #1
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f000 fc1f 	bl	8007e38 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f06f 020c 	mvn.w	r2, #12
 8007602:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f003 0301 	and.w	r3, r3, #1
 800760a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007612:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d017      	beq.n	800764a <HAL_ADC_IRQHandler+0x1d6>
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d014      	beq.n	800764a <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f003 0301 	and.w	r3, r3, #1
 800762a:	2b01      	cmp	r3, #1
 800762c:	d10d      	bne.n	800764a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007632:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 f947 	bl	80078ce <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f06f 0201 	mvn.w	r2, #1
 8007648:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	f003 0320 	and.w	r3, r3, #32
 8007650:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007658:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d015      	beq.n	800768c <HAL_ADC_IRQHandler+0x218>
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d012      	beq.n	800768c <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800766a:	f043 0202 	orr.w	r2, r3, #2
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f06f 0220 	mvn.w	r2, #32
 800767a:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 f930 	bl	80078e2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f06f 0220 	mvn.w	r2, #32
 800768a:	601a      	str	r2, [r3, #0]
  }
}
 800768c:	bf00      	nop
 800768e:	3718      	adds	r7, #24
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}

08007694 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b086      	sub	sp, #24
 8007698:	af00      	add	r7, sp, #0
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	60b9      	str	r1, [r7, #8]
 800769e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80076a0:	2300      	movs	r3, #0
 80076a2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	d101      	bne.n	80076b2 <HAL_ADC_Start_DMA+0x1e>
 80076ae:	2302      	movs	r3, #2
 80076b0:	e0e9      	b.n	8007886 <HAL_ADC_Start_DMA+0x1f2>
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2201      	movs	r2, #1
 80076b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	f003 0301 	and.w	r3, r3, #1
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d018      	beq.n	80076fa <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	689a      	ldr	r2, [r3, #8]
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f042 0201 	orr.w	r2, r2, #1
 80076d6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80076d8:	4b6d      	ldr	r3, [pc, #436]	@ (8007890 <HAL_ADC_Start_DMA+0x1fc>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a6d      	ldr	r2, [pc, #436]	@ (8007894 <HAL_ADC_Start_DMA+0x200>)
 80076de:	fba2 2303 	umull	r2, r3, r2, r3
 80076e2:	0c9a      	lsrs	r2, r3, #18
 80076e4:	4613      	mov	r3, r2
 80076e6:	005b      	lsls	r3, r3, #1
 80076e8:	4413      	add	r3, r2
 80076ea:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80076ec:	e002      	b.n	80076f4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	3b01      	subs	r3, #1
 80076f2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d1f9      	bne.n	80076ee <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007704:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007708:	d107      	bne.n	800771a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	689a      	ldr	r2, [r3, #8]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007718:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	f003 0301 	and.w	r3, r3, #1
 8007724:	2b01      	cmp	r3, #1
 8007726:	f040 80a1 	bne.w	800786c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800772e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8007732:	f023 0301 	bic.w	r3, r3, #1
 8007736:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007748:	2b00      	cmp	r3, #0
 800774a:	d007      	beq.n	800775c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007750:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8007754:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007760:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007764:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007768:	d106      	bne.n	8007778 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800776e:	f023 0206 	bic.w	r2, r3, #6
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	645a      	str	r2, [r3, #68]	@ 0x44
 8007776:	e002      	b.n	800777e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2200      	movs	r2, #0
 800777c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2200      	movs	r2, #0
 8007782:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007786:	4b44      	ldr	r3, [pc, #272]	@ (8007898 <HAL_ADC_Start_DMA+0x204>)
 8007788:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800778e:	4a43      	ldr	r2, [pc, #268]	@ (800789c <HAL_ADC_Start_DMA+0x208>)
 8007790:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007796:	4a42      	ldr	r2, [pc, #264]	@ (80078a0 <HAL_ADC_Start_DMA+0x20c>)
 8007798:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800779e:	4a41      	ldr	r2, [pc, #260]	@ (80078a4 <HAL_ADC_Start_DMA+0x210>)
 80077a0:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80077aa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	685a      	ldr	r2, [r3, #4]
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80077ba:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	689a      	ldr	r2, [r3, #8]
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80077ca:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	334c      	adds	r3, #76	@ 0x4c
 80077d6:	4619      	mov	r1, r3
 80077d8:	68ba      	ldr	r2, [r7, #8]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f000 fcc6 	bl	800816c <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	f003 031f 	and.w	r3, r3, #31
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d12a      	bne.n	8007842 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a2d      	ldr	r2, [pc, #180]	@ (80078a8 <HAL_ADC_Start_DMA+0x214>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d015      	beq.n	8007822 <HAL_ADC_Start_DMA+0x18e>
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a2c      	ldr	r2, [pc, #176]	@ (80078ac <HAL_ADC_Start_DMA+0x218>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d105      	bne.n	800780c <HAL_ADC_Start_DMA+0x178>
 8007800:	4b25      	ldr	r3, [pc, #148]	@ (8007898 <HAL_ADC_Start_DMA+0x204>)
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	f003 031f 	and.w	r3, r3, #31
 8007808:	2b00      	cmp	r3, #0
 800780a:	d00a      	beq.n	8007822 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a27      	ldr	r2, [pc, #156]	@ (80078b0 <HAL_ADC_Start_DMA+0x21c>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d136      	bne.n	8007884 <HAL_ADC_Start_DMA+0x1f0>
 8007816:	4b20      	ldr	r3, [pc, #128]	@ (8007898 <HAL_ADC_Start_DMA+0x204>)
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	f003 0310 	and.w	r3, r3, #16
 800781e:	2b00      	cmp	r3, #0
 8007820:	d130      	bne.n	8007884 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800782c:	2b00      	cmp	r3, #0
 800782e:	d129      	bne.n	8007884 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	689a      	ldr	r2, [r3, #8]
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800783e:	609a      	str	r2, [r3, #8]
 8007840:	e020      	b.n	8007884 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a18      	ldr	r2, [pc, #96]	@ (80078a8 <HAL_ADC_Start_DMA+0x214>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d11b      	bne.n	8007884 <HAL_ADC_Start_DMA+0x1f0>
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007856:	2b00      	cmp	r3, #0
 8007858:	d114      	bne.n	8007884 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	689a      	ldr	r2, [r3, #8]
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8007868:	609a      	str	r2, [r3, #8]
 800786a:	e00b      	b.n	8007884 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007870:	f043 0210 	orr.w	r2, r3, #16
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800787c:	f043 0201 	orr.w	r2, r3, #1
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8007884:	2300      	movs	r3, #0
}
 8007886:	4618      	mov	r0, r3
 8007888:	3718      	adds	r7, #24
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
 800788e:	bf00      	nop
 8007890:	20000048 	.word	0x20000048
 8007894:	431bde83 	.word	0x431bde83
 8007898:	40012300 	.word	0x40012300
 800789c:	08007d35 	.word	0x08007d35
 80078a0:	08007def 	.word	0x08007def
 80078a4:	08007e0b 	.word	0x08007e0b
 80078a8:	40012000 	.word	0x40012000
 80078ac:	40012100 	.word	0x40012100
 80078b0:	40012200 	.word	0x40012200

080078b4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	370c      	adds	r7, #12
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr

080078ce <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80078ce:	b480      	push	{r7}
 80078d0:	b083      	sub	sp, #12
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80078d6:	bf00      	nop
 80078d8:	370c      	adds	r7, #12
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr

080078e2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80078e2:	b480      	push	{r7}
 80078e4:	b083      	sub	sp, #12
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80078ea:	bf00      	nop
 80078ec:	370c      	adds	r7, #12
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr
	...

080078f8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b085      	sub	sp, #20
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8007902:	2300      	movs	r3, #0
 8007904:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800790c:	2b01      	cmp	r3, #1
 800790e:	d101      	bne.n	8007914 <HAL_ADC_ConfigChannel+0x1c>
 8007910:	2302      	movs	r3, #2
 8007912:	e105      	b.n	8007b20 <HAL_ADC_ConfigChannel+0x228>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2201      	movs	r2, #1
 8007918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	2b09      	cmp	r3, #9
 8007922:	d925      	bls.n	8007970 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	68d9      	ldr	r1, [r3, #12]
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	b29b      	uxth	r3, r3
 8007930:	461a      	mov	r2, r3
 8007932:	4613      	mov	r3, r2
 8007934:	005b      	lsls	r3, r3, #1
 8007936:	4413      	add	r3, r2
 8007938:	3b1e      	subs	r3, #30
 800793a:	2207      	movs	r2, #7
 800793c:	fa02 f303 	lsl.w	r3, r2, r3
 8007940:	43da      	mvns	r2, r3
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	400a      	ands	r2, r1
 8007948:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	68d9      	ldr	r1, [r3, #12]
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	689a      	ldr	r2, [r3, #8]
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	b29b      	uxth	r3, r3
 800795a:	4618      	mov	r0, r3
 800795c:	4603      	mov	r3, r0
 800795e:	005b      	lsls	r3, r3, #1
 8007960:	4403      	add	r3, r0
 8007962:	3b1e      	subs	r3, #30
 8007964:	409a      	lsls	r2, r3
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	430a      	orrs	r2, r1
 800796c:	60da      	str	r2, [r3, #12]
 800796e:	e022      	b.n	80079b6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	6919      	ldr	r1, [r3, #16]
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	b29b      	uxth	r3, r3
 800797c:	461a      	mov	r2, r3
 800797e:	4613      	mov	r3, r2
 8007980:	005b      	lsls	r3, r3, #1
 8007982:	4413      	add	r3, r2
 8007984:	2207      	movs	r2, #7
 8007986:	fa02 f303 	lsl.w	r3, r2, r3
 800798a:	43da      	mvns	r2, r3
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	400a      	ands	r2, r1
 8007992:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	6919      	ldr	r1, [r3, #16]
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	689a      	ldr	r2, [r3, #8]
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	4618      	mov	r0, r3
 80079a6:	4603      	mov	r3, r0
 80079a8:	005b      	lsls	r3, r3, #1
 80079aa:	4403      	add	r3, r0
 80079ac:	409a      	lsls	r2, r3
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	430a      	orrs	r2, r1
 80079b4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	2b06      	cmp	r3, #6
 80079bc:	d824      	bhi.n	8007a08 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	685a      	ldr	r2, [r3, #4]
 80079c8:	4613      	mov	r3, r2
 80079ca:	009b      	lsls	r3, r3, #2
 80079cc:	4413      	add	r3, r2
 80079ce:	3b05      	subs	r3, #5
 80079d0:	221f      	movs	r2, #31
 80079d2:	fa02 f303 	lsl.w	r3, r2, r3
 80079d6:	43da      	mvns	r2, r3
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	400a      	ands	r2, r1
 80079de:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	4618      	mov	r0, r3
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	685a      	ldr	r2, [r3, #4]
 80079f2:	4613      	mov	r3, r2
 80079f4:	009b      	lsls	r3, r3, #2
 80079f6:	4413      	add	r3, r2
 80079f8:	3b05      	subs	r3, #5
 80079fa:	fa00 f203 	lsl.w	r2, r0, r3
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	430a      	orrs	r2, r1
 8007a04:	635a      	str	r2, [r3, #52]	@ 0x34
 8007a06:	e04c      	b.n	8007aa2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	2b0c      	cmp	r3, #12
 8007a0e:	d824      	bhi.n	8007a5a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	685a      	ldr	r2, [r3, #4]
 8007a1a:	4613      	mov	r3, r2
 8007a1c:	009b      	lsls	r3, r3, #2
 8007a1e:	4413      	add	r3, r2
 8007a20:	3b23      	subs	r3, #35	@ 0x23
 8007a22:	221f      	movs	r2, #31
 8007a24:	fa02 f303 	lsl.w	r3, r2, r3
 8007a28:	43da      	mvns	r2, r3
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	400a      	ands	r2, r1
 8007a30:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	4618      	mov	r0, r3
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	685a      	ldr	r2, [r3, #4]
 8007a44:	4613      	mov	r3, r2
 8007a46:	009b      	lsls	r3, r3, #2
 8007a48:	4413      	add	r3, r2
 8007a4a:	3b23      	subs	r3, #35	@ 0x23
 8007a4c:	fa00 f203 	lsl.w	r2, r0, r3
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	430a      	orrs	r2, r1
 8007a56:	631a      	str	r2, [r3, #48]	@ 0x30
 8007a58:	e023      	b.n	8007aa2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	685a      	ldr	r2, [r3, #4]
 8007a64:	4613      	mov	r3, r2
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	4413      	add	r3, r2
 8007a6a:	3b41      	subs	r3, #65	@ 0x41
 8007a6c:	221f      	movs	r2, #31
 8007a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a72:	43da      	mvns	r2, r3
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	400a      	ands	r2, r1
 8007a7a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	4618      	mov	r0, r3
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	685a      	ldr	r2, [r3, #4]
 8007a8e:	4613      	mov	r3, r2
 8007a90:	009b      	lsls	r3, r3, #2
 8007a92:	4413      	add	r3, r2
 8007a94:	3b41      	subs	r3, #65	@ 0x41
 8007a96:	fa00 f203 	lsl.w	r2, r0, r3
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	430a      	orrs	r2, r1
 8007aa0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007aa2:	4b22      	ldr	r3, [pc, #136]	@ (8007b2c <HAL_ADC_ConfigChannel+0x234>)
 8007aa4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a21      	ldr	r2, [pc, #132]	@ (8007b30 <HAL_ADC_ConfigChannel+0x238>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d109      	bne.n	8007ac4 <HAL_ADC_ConfigChannel+0x1cc>
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	2b12      	cmp	r3, #18
 8007ab6:	d105      	bne.n	8007ac4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a19      	ldr	r2, [pc, #100]	@ (8007b30 <HAL_ADC_ConfigChannel+0x238>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d123      	bne.n	8007b16 <HAL_ADC_ConfigChannel+0x21e>
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	2b10      	cmp	r3, #16
 8007ad4:	d003      	beq.n	8007ade <HAL_ADC_ConfigChannel+0x1e6>
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	2b11      	cmp	r3, #17
 8007adc:	d11b      	bne.n	8007b16 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	2b10      	cmp	r3, #16
 8007af0:	d111      	bne.n	8007b16 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007af2:	4b10      	ldr	r3, [pc, #64]	@ (8007b34 <HAL_ADC_ConfigChannel+0x23c>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a10      	ldr	r2, [pc, #64]	@ (8007b38 <HAL_ADC_ConfigChannel+0x240>)
 8007af8:	fba2 2303 	umull	r2, r3, r2, r3
 8007afc:	0c9a      	lsrs	r2, r3, #18
 8007afe:	4613      	mov	r3, r2
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	4413      	add	r3, r2
 8007b04:	005b      	lsls	r3, r3, #1
 8007b06:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8007b08:	e002      	b.n	8007b10 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	3b01      	subs	r3, #1
 8007b0e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d1f9      	bne.n	8007b0a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8007b1e:	2300      	movs	r3, #0
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3714      	adds	r7, #20
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr
 8007b2c:	40012300 	.word	0x40012300
 8007b30:	40012000 	.word	0x40012000
 8007b34:	20000048 	.word	0x20000048
 8007b38:	431bde83 	.word	0x431bde83

08007b3c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b085      	sub	sp, #20
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007b44:	4b79      	ldr	r3, [pc, #484]	@ (8007d2c <ADC_Init+0x1f0>)
 8007b46:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	685a      	ldr	r2, [r3, #4]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	431a      	orrs	r2, r3
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	685a      	ldr	r2, [r3, #4]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007b70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	6859      	ldr	r1, [r3, #4]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	691b      	ldr	r3, [r3, #16]
 8007b7c:	021a      	lsls	r2, r3, #8
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	430a      	orrs	r2, r1
 8007b84:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	685a      	ldr	r2, [r3, #4]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8007b94:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	6859      	ldr	r1, [r3, #4]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	689a      	ldr	r2, [r3, #8]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	430a      	orrs	r2, r1
 8007ba6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	689a      	ldr	r2, [r3, #8]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007bb6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	6899      	ldr	r1, [r3, #8]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	68da      	ldr	r2, [r3, #12]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	430a      	orrs	r2, r1
 8007bc8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bce:	4a58      	ldr	r2, [pc, #352]	@ (8007d30 <ADC_Init+0x1f4>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d022      	beq.n	8007c1a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	689a      	ldr	r2, [r3, #8]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007be2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	6899      	ldr	r1, [r3, #8]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	430a      	orrs	r2, r1
 8007bf4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	689a      	ldr	r2, [r3, #8]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8007c04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	6899      	ldr	r1, [r3, #8]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	430a      	orrs	r2, r1
 8007c16:	609a      	str	r2, [r3, #8]
 8007c18:	e00f      	b.n	8007c3a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	689a      	ldr	r2, [r3, #8]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007c28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	689a      	ldr	r2, [r3, #8]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8007c38:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	689a      	ldr	r2, [r3, #8]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f022 0202 	bic.w	r2, r2, #2
 8007c48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	6899      	ldr	r1, [r3, #8]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	7e1b      	ldrb	r3, [r3, #24]
 8007c54:	005a      	lsls	r2, r3, #1
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	430a      	orrs	r2, r1
 8007c5c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d01b      	beq.n	8007ca0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	685a      	ldr	r2, [r3, #4]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007c76:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	685a      	ldr	r2, [r3, #4]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8007c86:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	6859      	ldr	r1, [r3, #4]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c92:	3b01      	subs	r3, #1
 8007c94:	035a      	lsls	r2, r3, #13
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	430a      	orrs	r2, r1
 8007c9c:	605a      	str	r2, [r3, #4]
 8007c9e:	e007      	b.n	8007cb0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	685a      	ldr	r2, [r3, #4]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007cae:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8007cbe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	69db      	ldr	r3, [r3, #28]
 8007cca:	3b01      	subs	r3, #1
 8007ccc:	051a      	lsls	r2, r3, #20
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	430a      	orrs	r2, r1
 8007cd4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	689a      	ldr	r2, [r3, #8]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8007ce4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	6899      	ldr	r1, [r3, #8]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007cf2:	025a      	lsls	r2, r3, #9
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	430a      	orrs	r2, r1
 8007cfa:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	689a      	ldr	r2, [r3, #8]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	6899      	ldr	r1, [r3, #8]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	695b      	ldr	r3, [r3, #20]
 8007d16:	029a      	lsls	r2, r3, #10
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	430a      	orrs	r2, r1
 8007d1e:	609a      	str	r2, [r3, #8]
}
 8007d20:	bf00      	nop
 8007d22:	3714      	adds	r7, #20
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr
 8007d2c:	40012300 	.word	0x40012300
 8007d30:	0f000001 	.word	0x0f000001

08007d34 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b084      	sub	sp, #16
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d40:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d46:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d13c      	bne.n	8007dc8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d52:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d12b      	bne.n	8007dc0 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d127      	bne.n	8007dc0 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d76:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d006      	beq.n	8007d8c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	689b      	ldr	r3, [r3, #8]
 8007d84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d119      	bne.n	8007dc0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	685a      	ldr	r2, [r3, #4]
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f022 0220 	bic.w	r2, r2, #32
 8007d9a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007da0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d105      	bne.n	8007dc0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007db8:	f043 0201 	orr.w	r2, r3, #1
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007dc0:	68f8      	ldr	r0, [r7, #12]
 8007dc2:	f7f9 fdd3 	bl	800196c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007dc6:	e00e      	b.n	8007de6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dcc:	f003 0310 	and.w	r3, r3, #16
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d003      	beq.n	8007ddc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8007dd4:	68f8      	ldr	r0, [r7, #12]
 8007dd6:	f7ff fd84 	bl	80078e2 <HAL_ADC_ErrorCallback>
}
 8007dda:	e004      	b.n	8007de6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007de0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	4798      	blx	r3
}
 8007de6:	bf00      	nop
 8007de8:	3710      	adds	r7, #16
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}

08007dee <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007dee:	b580      	push	{r7, lr}
 8007df0:	b084      	sub	sp, #16
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dfa:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007dfc:	68f8      	ldr	r0, [r7, #12]
 8007dfe:	f7f9 fe01 	bl	8001a04 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007e02:	bf00      	nop
 8007e04:	3710      	adds	r7, #16
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}

08007e0a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8007e0a:	b580      	push	{r7, lr}
 8007e0c:	b084      	sub	sp, #16
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e16:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2240      	movs	r2, #64	@ 0x40
 8007e1c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e22:	f043 0204 	orr.w	r2, r3, #4
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007e2a:	68f8      	ldr	r0, [r7, #12]
 8007e2c:	f7ff fd59 	bl	80078e2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007e30:	bf00      	nop
 8007e32:	3710      	adds	r7, #16
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}

08007e38 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b083      	sub	sp, #12
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8007e40:	bf00      	nop
 8007e42:	370c      	adds	r7, #12
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b085      	sub	sp, #20
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f003 0307 	and.w	r3, r3, #7
 8007e5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8007e90 <__NVIC_SetPriorityGrouping+0x44>)
 8007e5e:	68db      	ldr	r3, [r3, #12]
 8007e60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007e62:	68ba      	ldr	r2, [r7, #8]
 8007e64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007e68:	4013      	ands	r3, r2
 8007e6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007e74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007e78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007e7e:	4a04      	ldr	r2, [pc, #16]	@ (8007e90 <__NVIC_SetPriorityGrouping+0x44>)
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	60d3      	str	r3, [r2, #12]
}
 8007e84:	bf00      	nop
 8007e86:	3714      	adds	r7, #20
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr
 8007e90:	e000ed00 	.word	0xe000ed00

08007e94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007e94:	b480      	push	{r7}
 8007e96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007e98:	4b04      	ldr	r3, [pc, #16]	@ (8007eac <__NVIC_GetPriorityGrouping+0x18>)
 8007e9a:	68db      	ldr	r3, [r3, #12]
 8007e9c:	0a1b      	lsrs	r3, r3, #8
 8007e9e:	f003 0307 	and.w	r3, r3, #7
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr
 8007eac:	e000ed00 	.word	0xe000ed00

08007eb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b083      	sub	sp, #12
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	db0b      	blt.n	8007eda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007ec2:	79fb      	ldrb	r3, [r7, #7]
 8007ec4:	f003 021f 	and.w	r2, r3, #31
 8007ec8:	4907      	ldr	r1, [pc, #28]	@ (8007ee8 <__NVIC_EnableIRQ+0x38>)
 8007eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ece:	095b      	lsrs	r3, r3, #5
 8007ed0:	2001      	movs	r0, #1
 8007ed2:	fa00 f202 	lsl.w	r2, r0, r2
 8007ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007eda:	bf00      	nop
 8007edc:	370c      	adds	r7, #12
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr
 8007ee6:	bf00      	nop
 8007ee8:	e000e100 	.word	0xe000e100

08007eec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	6039      	str	r1, [r7, #0]
 8007ef6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	db0a      	blt.n	8007f16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	b2da      	uxtb	r2, r3
 8007f04:	490c      	ldr	r1, [pc, #48]	@ (8007f38 <__NVIC_SetPriority+0x4c>)
 8007f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f0a:	0112      	lsls	r2, r2, #4
 8007f0c:	b2d2      	uxtb	r2, r2
 8007f0e:	440b      	add	r3, r1
 8007f10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007f14:	e00a      	b.n	8007f2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	b2da      	uxtb	r2, r3
 8007f1a:	4908      	ldr	r1, [pc, #32]	@ (8007f3c <__NVIC_SetPriority+0x50>)
 8007f1c:	79fb      	ldrb	r3, [r7, #7]
 8007f1e:	f003 030f 	and.w	r3, r3, #15
 8007f22:	3b04      	subs	r3, #4
 8007f24:	0112      	lsls	r2, r2, #4
 8007f26:	b2d2      	uxtb	r2, r2
 8007f28:	440b      	add	r3, r1
 8007f2a:	761a      	strb	r2, [r3, #24]
}
 8007f2c:	bf00      	nop
 8007f2e:	370c      	adds	r7, #12
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr
 8007f38:	e000e100 	.word	0xe000e100
 8007f3c:	e000ed00 	.word	0xe000ed00

08007f40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b089      	sub	sp, #36	@ 0x24
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	60f8      	str	r0, [r7, #12]
 8007f48:	60b9      	str	r1, [r7, #8]
 8007f4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f003 0307 	and.w	r3, r3, #7
 8007f52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007f54:	69fb      	ldr	r3, [r7, #28]
 8007f56:	f1c3 0307 	rsb	r3, r3, #7
 8007f5a:	2b04      	cmp	r3, #4
 8007f5c:	bf28      	it	cs
 8007f5e:	2304      	movcs	r3, #4
 8007f60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	3304      	adds	r3, #4
 8007f66:	2b06      	cmp	r3, #6
 8007f68:	d902      	bls.n	8007f70 <NVIC_EncodePriority+0x30>
 8007f6a:	69fb      	ldr	r3, [r7, #28]
 8007f6c:	3b03      	subs	r3, #3
 8007f6e:	e000      	b.n	8007f72 <NVIC_EncodePriority+0x32>
 8007f70:	2300      	movs	r3, #0
 8007f72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f74:	f04f 32ff 	mov.w	r2, #4294967295
 8007f78:	69bb      	ldr	r3, [r7, #24]
 8007f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f7e:	43da      	mvns	r2, r3
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	401a      	ands	r2, r3
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007f88:	f04f 31ff 	mov.w	r1, #4294967295
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8007f92:	43d9      	mvns	r1, r3
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f98:	4313      	orrs	r3, r2
         );
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3724      	adds	r7, #36	@ 0x24
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa4:	4770      	bx	lr

08007fa6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007fa6:	b580      	push	{r7, lr}
 8007fa8:	b082      	sub	sp, #8
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f7ff ff4c 	bl	8007e4c <__NVIC_SetPriorityGrouping>
}
 8007fb4:	bf00      	nop
 8007fb6:	3708      	adds	r7, #8
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b086      	sub	sp, #24
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	60b9      	str	r1, [r7, #8]
 8007fc6:	607a      	str	r2, [r7, #4]
 8007fc8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007fce:	f7ff ff61 	bl	8007e94 <__NVIC_GetPriorityGrouping>
 8007fd2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	68b9      	ldr	r1, [r7, #8]
 8007fd8:	6978      	ldr	r0, [r7, #20]
 8007fda:	f7ff ffb1 	bl	8007f40 <NVIC_EncodePriority>
 8007fde:	4602      	mov	r2, r0
 8007fe0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007fe4:	4611      	mov	r1, r2
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f7ff ff80 	bl	8007eec <__NVIC_SetPriority>
}
 8007fec:	bf00      	nop
 8007fee:	3718      	adds	r7, #24
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b082      	sub	sp, #8
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008002:	4618      	mov	r0, r3
 8008004:	f7ff ff54 	bl	8007eb0 <__NVIC_EnableIRQ>
}
 8008008:	bf00      	nop
 800800a:	3708      	adds	r7, #8
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}

08008010 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b086      	sub	sp, #24
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008018:	2300      	movs	r3, #0
 800801a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800801c:	f7ff f826 	bl	800706c <HAL_GetTick>
 8008020:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d101      	bne.n	800802c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008028:	2301      	movs	r3, #1
 800802a:	e099      	b.n	8008160 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2202      	movs	r2, #2
 8008030:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2200      	movs	r2, #0
 8008038:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	681a      	ldr	r2, [r3, #0]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f022 0201 	bic.w	r2, r2, #1
 800804a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800804c:	e00f      	b.n	800806e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800804e:	f7ff f80d 	bl	800706c <HAL_GetTick>
 8008052:	4602      	mov	r2, r0
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	1ad3      	subs	r3, r2, r3
 8008058:	2b05      	cmp	r3, #5
 800805a:	d908      	bls.n	800806e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2220      	movs	r2, #32
 8008060:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2203      	movs	r2, #3
 8008066:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800806a:	2303      	movs	r3, #3
 800806c:	e078      	b.n	8008160 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f003 0301 	and.w	r3, r3, #1
 8008078:	2b00      	cmp	r3, #0
 800807a:	d1e8      	bne.n	800804e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008084:	697a      	ldr	r2, [r7, #20]
 8008086:	4b38      	ldr	r3, [pc, #224]	@ (8008168 <HAL_DMA_Init+0x158>)
 8008088:	4013      	ands	r3, r2
 800808a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	685a      	ldr	r2, [r3, #4]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	689b      	ldr	r3, [r3, #8]
 8008094:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800809a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	691b      	ldr	r3, [r3, #16]
 80080a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80080a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	699b      	ldr	r3, [r3, #24]
 80080ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80080b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6a1b      	ldr	r3, [r3, #32]
 80080b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80080ba:	697a      	ldr	r2, [r7, #20]
 80080bc:	4313      	orrs	r3, r2
 80080be:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080c4:	2b04      	cmp	r3, #4
 80080c6:	d107      	bne.n	80080d8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080d0:	4313      	orrs	r3, r2
 80080d2:	697a      	ldr	r2, [r7, #20]
 80080d4:	4313      	orrs	r3, r2
 80080d6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	697a      	ldr	r2, [r7, #20]
 80080de:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	695b      	ldr	r3, [r3, #20]
 80080e6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	f023 0307 	bic.w	r3, r3, #7
 80080ee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080f4:	697a      	ldr	r2, [r7, #20]
 80080f6:	4313      	orrs	r3, r2
 80080f8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080fe:	2b04      	cmp	r3, #4
 8008100:	d117      	bne.n	8008132 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008106:	697a      	ldr	r2, [r7, #20]
 8008108:	4313      	orrs	r3, r2
 800810a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008110:	2b00      	cmp	r3, #0
 8008112:	d00e      	beq.n	8008132 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 fa91 	bl	800863c <DMA_CheckFifoParam>
 800811a:	4603      	mov	r3, r0
 800811c:	2b00      	cmp	r3, #0
 800811e:	d008      	beq.n	8008132 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2240      	movs	r2, #64	@ 0x40
 8008124:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2201      	movs	r2, #1
 800812a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800812e:	2301      	movs	r3, #1
 8008130:	e016      	b.n	8008160 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	697a      	ldr	r2, [r7, #20]
 8008138:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 fa48 	bl	80085d0 <DMA_CalcBaseAndBitshift>
 8008140:	4603      	mov	r3, r0
 8008142:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008148:	223f      	movs	r2, #63	@ 0x3f
 800814a:	409a      	lsls	r2, r3
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2200      	movs	r2, #0
 8008154:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2201      	movs	r2, #1
 800815a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800815e:	2300      	movs	r3, #0
}
 8008160:	4618      	mov	r0, r3
 8008162:	3718      	adds	r7, #24
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}
 8008168:	f010803f 	.word	0xf010803f

0800816c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b086      	sub	sp, #24
 8008170:	af00      	add	r7, sp, #0
 8008172:	60f8      	str	r0, [r7, #12]
 8008174:	60b9      	str	r1, [r7, #8]
 8008176:	607a      	str	r2, [r7, #4]
 8008178:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800817a:	2300      	movs	r3, #0
 800817c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008182:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800818a:	2b01      	cmp	r3, #1
 800818c:	d101      	bne.n	8008192 <HAL_DMA_Start_IT+0x26>
 800818e:	2302      	movs	r3, #2
 8008190:	e040      	b.n	8008214 <HAL_DMA_Start_IT+0xa8>
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2201      	movs	r2, #1
 8008196:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80081a0:	b2db      	uxtb	r3, r3
 80081a2:	2b01      	cmp	r3, #1
 80081a4:	d12f      	bne.n	8008206 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2202      	movs	r2, #2
 80081aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2200      	movs	r2, #0
 80081b2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	687a      	ldr	r2, [r7, #4]
 80081b8:	68b9      	ldr	r1, [r7, #8]
 80081ba:	68f8      	ldr	r0, [r7, #12]
 80081bc:	f000 f9da 	bl	8008574 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80081c4:	223f      	movs	r2, #63	@ 0x3f
 80081c6:	409a      	lsls	r2, r3
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	681a      	ldr	r2, [r3, #0]
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f042 0216 	orr.w	r2, r2, #22
 80081da:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d007      	beq.n	80081f4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f042 0208 	orr.w	r2, r2, #8
 80081f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f042 0201 	orr.w	r2, r2, #1
 8008202:	601a      	str	r2, [r3, #0]
 8008204:	e005      	b.n	8008212 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2200      	movs	r2, #0
 800820a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800820e:	2302      	movs	r3, #2
 8008210:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008212:	7dfb      	ldrb	r3, [r7, #23]
}
 8008214:	4618      	mov	r0, r3
 8008216:	3718      	adds	r7, #24
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800821c:	b480      	push	{r7}
 800821e:	b083      	sub	sp, #12
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800822a:	b2db      	uxtb	r3, r3
 800822c:	2b02      	cmp	r3, #2
 800822e:	d004      	beq.n	800823a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2280      	movs	r2, #128	@ 0x80
 8008234:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8008236:	2301      	movs	r3, #1
 8008238:	e00c      	b.n	8008254 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2205      	movs	r2, #5
 800823e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	681a      	ldr	r2, [r3, #0]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f022 0201 	bic.w	r2, r2, #1
 8008250:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008252:	2300      	movs	r3, #0
}
 8008254:	4618      	mov	r0, r3
 8008256:	370c      	adds	r7, #12
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr

08008260 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b086      	sub	sp, #24
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008268:	2300      	movs	r3, #0
 800826a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800826c:	4b8e      	ldr	r3, [pc, #568]	@ (80084a8 <HAL_DMA_IRQHandler+0x248>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a8e      	ldr	r2, [pc, #568]	@ (80084ac <HAL_DMA_IRQHandler+0x24c>)
 8008272:	fba2 2303 	umull	r2, r3, r2, r3
 8008276:	0a9b      	lsrs	r3, r3, #10
 8008278:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800827e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800828a:	2208      	movs	r2, #8
 800828c:	409a      	lsls	r2, r3
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	4013      	ands	r3, r2
 8008292:	2b00      	cmp	r3, #0
 8008294:	d01a      	beq.n	80082cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f003 0304 	and.w	r3, r3, #4
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d013      	beq.n	80082cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	681a      	ldr	r2, [r3, #0]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f022 0204 	bic.w	r2, r2, #4
 80082b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80082b8:	2208      	movs	r2, #8
 80082ba:	409a      	lsls	r2, r3
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082c4:	f043 0201 	orr.w	r2, r3, #1
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80082d0:	2201      	movs	r2, #1
 80082d2:	409a      	lsls	r2, r3
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	4013      	ands	r3, r2
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d012      	beq.n	8008302 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	695b      	ldr	r3, [r3, #20]
 80082e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d00b      	beq.n	8008302 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80082ee:	2201      	movs	r2, #1
 80082f0:	409a      	lsls	r2, r3
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082fa:	f043 0202 	orr.w	r2, r3, #2
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008306:	2204      	movs	r2, #4
 8008308:	409a      	lsls	r2, r3
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	4013      	ands	r3, r2
 800830e:	2b00      	cmp	r3, #0
 8008310:	d012      	beq.n	8008338 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f003 0302 	and.w	r3, r3, #2
 800831c:	2b00      	cmp	r3, #0
 800831e:	d00b      	beq.n	8008338 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008324:	2204      	movs	r2, #4
 8008326:	409a      	lsls	r2, r3
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008330:	f043 0204 	orr.w	r2, r3, #4
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800833c:	2210      	movs	r2, #16
 800833e:	409a      	lsls	r2, r3
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	4013      	ands	r3, r2
 8008344:	2b00      	cmp	r3, #0
 8008346:	d043      	beq.n	80083d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f003 0308 	and.w	r3, r3, #8
 8008352:	2b00      	cmp	r3, #0
 8008354:	d03c      	beq.n	80083d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800835a:	2210      	movs	r2, #16
 800835c:	409a      	lsls	r2, r3
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800836c:	2b00      	cmp	r3, #0
 800836e:	d018      	beq.n	80083a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800837a:	2b00      	cmp	r3, #0
 800837c:	d108      	bne.n	8008390 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008382:	2b00      	cmp	r3, #0
 8008384:	d024      	beq.n	80083d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	4798      	blx	r3
 800838e:	e01f      	b.n	80083d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008394:	2b00      	cmp	r3, #0
 8008396:	d01b      	beq.n	80083d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	4798      	blx	r3
 80083a0:	e016      	b.n	80083d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d107      	bne.n	80083c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	681a      	ldr	r2, [r3, #0]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f022 0208 	bic.w	r2, r2, #8
 80083be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d003      	beq.n	80083d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083d4:	2220      	movs	r2, #32
 80083d6:	409a      	lsls	r2, r3
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	4013      	ands	r3, r2
 80083dc:	2b00      	cmp	r3, #0
 80083de:	f000 808f 	beq.w	8008500 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f003 0310 	and.w	r3, r3, #16
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	f000 8087 	beq.w	8008500 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083f6:	2220      	movs	r2, #32
 80083f8:	409a      	lsls	r2, r3
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008404:	b2db      	uxtb	r3, r3
 8008406:	2b05      	cmp	r3, #5
 8008408:	d136      	bne.n	8008478 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	681a      	ldr	r2, [r3, #0]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f022 0216 	bic.w	r2, r2, #22
 8008418:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	695a      	ldr	r2, [r3, #20]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008428:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800842e:	2b00      	cmp	r3, #0
 8008430:	d103      	bne.n	800843a <HAL_DMA_IRQHandler+0x1da>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008436:	2b00      	cmp	r3, #0
 8008438:	d007      	beq.n	800844a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	681a      	ldr	r2, [r3, #0]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f022 0208 	bic.w	r2, r2, #8
 8008448:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800844e:	223f      	movs	r2, #63	@ 0x3f
 8008450:	409a      	lsls	r2, r3
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2201      	movs	r2, #1
 800845a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2200      	movs	r2, #0
 8008462:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800846a:	2b00      	cmp	r3, #0
 800846c:	d07e      	beq.n	800856c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	4798      	blx	r3
        }
        return;
 8008476:	e079      	b.n	800856c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008482:	2b00      	cmp	r3, #0
 8008484:	d01d      	beq.n	80084c2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008490:	2b00      	cmp	r3, #0
 8008492:	d10d      	bne.n	80084b0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008498:	2b00      	cmp	r3, #0
 800849a:	d031      	beq.n	8008500 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	4798      	blx	r3
 80084a4:	e02c      	b.n	8008500 <HAL_DMA_IRQHandler+0x2a0>
 80084a6:	bf00      	nop
 80084a8:	20000048 	.word	0x20000048
 80084ac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d023      	beq.n	8008500 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	4798      	blx	r3
 80084c0:	e01e      	b.n	8008500 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d10f      	bne.n	80084f0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	681a      	ldr	r2, [r3, #0]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f022 0210 	bic.w	r2, r2, #16
 80084de:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2201      	movs	r2, #1
 80084e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2200      	movs	r2, #0
 80084ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d003      	beq.n	8008500 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008504:	2b00      	cmp	r3, #0
 8008506:	d032      	beq.n	800856e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800850c:	f003 0301 	and.w	r3, r3, #1
 8008510:	2b00      	cmp	r3, #0
 8008512:	d022      	beq.n	800855a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2205      	movs	r2, #5
 8008518:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	681a      	ldr	r2, [r3, #0]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f022 0201 	bic.w	r2, r2, #1
 800852a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	3301      	adds	r3, #1
 8008530:	60bb      	str	r3, [r7, #8]
 8008532:	697a      	ldr	r2, [r7, #20]
 8008534:	429a      	cmp	r2, r3
 8008536:	d307      	bcc.n	8008548 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f003 0301 	and.w	r3, r3, #1
 8008542:	2b00      	cmp	r3, #0
 8008544:	d1f2      	bne.n	800852c <HAL_DMA_IRQHandler+0x2cc>
 8008546:	e000      	b.n	800854a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8008548:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2201      	movs	r2, #1
 800854e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2200      	movs	r2, #0
 8008556:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800855e:	2b00      	cmp	r3, #0
 8008560:	d005      	beq.n	800856e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	4798      	blx	r3
 800856a:	e000      	b.n	800856e <HAL_DMA_IRQHandler+0x30e>
        return;
 800856c:	bf00      	nop
    }
  }
}
 800856e:	3718      	adds	r7, #24
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008574:	b480      	push	{r7}
 8008576:	b085      	sub	sp, #20
 8008578:	af00      	add	r7, sp, #0
 800857a:	60f8      	str	r0, [r7, #12]
 800857c:	60b9      	str	r1, [r7, #8]
 800857e:	607a      	str	r2, [r7, #4]
 8008580:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	681a      	ldr	r2, [r3, #0]
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008590:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	683a      	ldr	r2, [r7, #0]
 8008598:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	689b      	ldr	r3, [r3, #8]
 800859e:	2b40      	cmp	r3, #64	@ 0x40
 80085a0:	d108      	bne.n	80085b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	687a      	ldr	r2, [r7, #4]
 80085a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	68ba      	ldr	r2, [r7, #8]
 80085b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80085b2:	e007      	b.n	80085c4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	68ba      	ldr	r2, [r7, #8]
 80085ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	687a      	ldr	r2, [r7, #4]
 80085c2:	60da      	str	r2, [r3, #12]
}
 80085c4:	bf00      	nop
 80085c6:	3714      	adds	r7, #20
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr

080085d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b085      	sub	sp, #20
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	b2db      	uxtb	r3, r3
 80085de:	3b10      	subs	r3, #16
 80085e0:	4a14      	ldr	r2, [pc, #80]	@ (8008634 <DMA_CalcBaseAndBitshift+0x64>)
 80085e2:	fba2 2303 	umull	r2, r3, r2, r3
 80085e6:	091b      	lsrs	r3, r3, #4
 80085e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80085ea:	4a13      	ldr	r2, [pc, #76]	@ (8008638 <DMA_CalcBaseAndBitshift+0x68>)
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	4413      	add	r3, r2
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	461a      	mov	r2, r3
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	2b03      	cmp	r3, #3
 80085fc:	d909      	bls.n	8008612 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8008606:	f023 0303 	bic.w	r3, r3, #3
 800860a:	1d1a      	adds	r2, r3, #4
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	659a      	str	r2, [r3, #88]	@ 0x58
 8008610:	e007      	b.n	8008622 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800861a:	f023 0303 	bic.w	r3, r3, #3
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8008626:	4618      	mov	r0, r3
 8008628:	3714      	adds	r7, #20
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr
 8008632:	bf00      	nop
 8008634:	aaaaaaab 	.word	0xaaaaaaab
 8008638:	080124cc 	.word	0x080124cc

0800863c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800863c:	b480      	push	{r7}
 800863e:	b085      	sub	sp, #20
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008644:	2300      	movs	r3, #0
 8008646:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800864c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	699b      	ldr	r3, [r3, #24]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d11f      	bne.n	8008696 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	2b03      	cmp	r3, #3
 800865a:	d856      	bhi.n	800870a <DMA_CheckFifoParam+0xce>
 800865c:	a201      	add	r2, pc, #4	@ (adr r2, 8008664 <DMA_CheckFifoParam+0x28>)
 800865e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008662:	bf00      	nop
 8008664:	08008675 	.word	0x08008675
 8008668:	08008687 	.word	0x08008687
 800866c:	08008675 	.word	0x08008675
 8008670:	0800870b 	.word	0x0800870b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008678:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800867c:	2b00      	cmp	r3, #0
 800867e:	d046      	beq.n	800870e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008680:	2301      	movs	r3, #1
 8008682:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008684:	e043      	b.n	800870e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800868a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800868e:	d140      	bne.n	8008712 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008690:	2301      	movs	r3, #1
 8008692:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008694:	e03d      	b.n	8008712 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	699b      	ldr	r3, [r3, #24]
 800869a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800869e:	d121      	bne.n	80086e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	2b03      	cmp	r3, #3
 80086a4:	d837      	bhi.n	8008716 <DMA_CheckFifoParam+0xda>
 80086a6:	a201      	add	r2, pc, #4	@ (adr r2, 80086ac <DMA_CheckFifoParam+0x70>)
 80086a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ac:	080086bd 	.word	0x080086bd
 80086b0:	080086c3 	.word	0x080086c3
 80086b4:	080086bd 	.word	0x080086bd
 80086b8:	080086d5 	.word	0x080086d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80086bc:	2301      	movs	r3, #1
 80086be:	73fb      	strb	r3, [r7, #15]
      break;
 80086c0:	e030      	b.n	8008724 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d025      	beq.n	800871a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80086ce:	2301      	movs	r3, #1
 80086d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80086d2:	e022      	b.n	800871a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086d8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80086dc:	d11f      	bne.n	800871e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80086de:	2301      	movs	r3, #1
 80086e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80086e2:	e01c      	b.n	800871e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	2b02      	cmp	r3, #2
 80086e8:	d903      	bls.n	80086f2 <DMA_CheckFifoParam+0xb6>
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	2b03      	cmp	r3, #3
 80086ee:	d003      	beq.n	80086f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80086f0:	e018      	b.n	8008724 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80086f2:	2301      	movs	r3, #1
 80086f4:	73fb      	strb	r3, [r7, #15]
      break;
 80086f6:	e015      	b.n	8008724 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008700:	2b00      	cmp	r3, #0
 8008702:	d00e      	beq.n	8008722 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008704:	2301      	movs	r3, #1
 8008706:	73fb      	strb	r3, [r7, #15]
      break;
 8008708:	e00b      	b.n	8008722 <DMA_CheckFifoParam+0xe6>
      break;
 800870a:	bf00      	nop
 800870c:	e00a      	b.n	8008724 <DMA_CheckFifoParam+0xe8>
      break;
 800870e:	bf00      	nop
 8008710:	e008      	b.n	8008724 <DMA_CheckFifoParam+0xe8>
      break;
 8008712:	bf00      	nop
 8008714:	e006      	b.n	8008724 <DMA_CheckFifoParam+0xe8>
      break;
 8008716:	bf00      	nop
 8008718:	e004      	b.n	8008724 <DMA_CheckFifoParam+0xe8>
      break;
 800871a:	bf00      	nop
 800871c:	e002      	b.n	8008724 <DMA_CheckFifoParam+0xe8>
      break;   
 800871e:	bf00      	nop
 8008720:	e000      	b.n	8008724 <DMA_CheckFifoParam+0xe8>
      break;
 8008722:	bf00      	nop
    }
  } 
  
  return status; 
 8008724:	7bfb      	ldrb	r3, [r7, #15]
}
 8008726:	4618      	mov	r0, r3
 8008728:	3714      	adds	r7, #20
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr
 8008732:	bf00      	nop

08008734 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008734:	b480      	push	{r7}
 8008736:	b089      	sub	sp, #36	@ 0x24
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800873e:	2300      	movs	r3, #0
 8008740:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008742:	2300      	movs	r3, #0
 8008744:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008746:	2300      	movs	r3, #0
 8008748:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800874a:	2300      	movs	r3, #0
 800874c:	61fb      	str	r3, [r7, #28]
 800874e:	e16b      	b.n	8008a28 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008750:	2201      	movs	r2, #1
 8008752:	69fb      	ldr	r3, [r7, #28]
 8008754:	fa02 f303 	lsl.w	r3, r2, r3
 8008758:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	697a      	ldr	r2, [r7, #20]
 8008760:	4013      	ands	r3, r2
 8008762:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008764:	693a      	ldr	r2, [r7, #16]
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	429a      	cmp	r2, r3
 800876a:	f040 815a 	bne.w	8008a22 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	f003 0303 	and.w	r3, r3, #3
 8008776:	2b01      	cmp	r3, #1
 8008778:	d005      	beq.n	8008786 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008782:	2b02      	cmp	r3, #2
 8008784:	d130      	bne.n	80087e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	689b      	ldr	r3, [r3, #8]
 800878a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800878c:	69fb      	ldr	r3, [r7, #28]
 800878e:	005b      	lsls	r3, r3, #1
 8008790:	2203      	movs	r2, #3
 8008792:	fa02 f303 	lsl.w	r3, r2, r3
 8008796:	43db      	mvns	r3, r3
 8008798:	69ba      	ldr	r2, [r7, #24]
 800879a:	4013      	ands	r3, r2
 800879c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	68da      	ldr	r2, [r3, #12]
 80087a2:	69fb      	ldr	r3, [r7, #28]
 80087a4:	005b      	lsls	r3, r3, #1
 80087a6:	fa02 f303 	lsl.w	r3, r2, r3
 80087aa:	69ba      	ldr	r2, [r7, #24]
 80087ac:	4313      	orrs	r3, r2
 80087ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	69ba      	ldr	r2, [r7, #24]
 80087b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80087bc:	2201      	movs	r2, #1
 80087be:	69fb      	ldr	r3, [r7, #28]
 80087c0:	fa02 f303 	lsl.w	r3, r2, r3
 80087c4:	43db      	mvns	r3, r3
 80087c6:	69ba      	ldr	r2, [r7, #24]
 80087c8:	4013      	ands	r3, r2
 80087ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	091b      	lsrs	r3, r3, #4
 80087d2:	f003 0201 	and.w	r2, r3, #1
 80087d6:	69fb      	ldr	r3, [r7, #28]
 80087d8:	fa02 f303 	lsl.w	r3, r2, r3
 80087dc:	69ba      	ldr	r2, [r7, #24]
 80087de:	4313      	orrs	r3, r2
 80087e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	69ba      	ldr	r2, [r7, #24]
 80087e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	685b      	ldr	r3, [r3, #4]
 80087ec:	f003 0303 	and.w	r3, r3, #3
 80087f0:	2b03      	cmp	r3, #3
 80087f2:	d017      	beq.n	8008824 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	68db      	ldr	r3, [r3, #12]
 80087f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80087fa:	69fb      	ldr	r3, [r7, #28]
 80087fc:	005b      	lsls	r3, r3, #1
 80087fe:	2203      	movs	r2, #3
 8008800:	fa02 f303 	lsl.w	r3, r2, r3
 8008804:	43db      	mvns	r3, r3
 8008806:	69ba      	ldr	r2, [r7, #24]
 8008808:	4013      	ands	r3, r2
 800880a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	689a      	ldr	r2, [r3, #8]
 8008810:	69fb      	ldr	r3, [r7, #28]
 8008812:	005b      	lsls	r3, r3, #1
 8008814:	fa02 f303 	lsl.w	r3, r2, r3
 8008818:	69ba      	ldr	r2, [r7, #24]
 800881a:	4313      	orrs	r3, r2
 800881c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	69ba      	ldr	r2, [r7, #24]
 8008822:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	f003 0303 	and.w	r3, r3, #3
 800882c:	2b02      	cmp	r3, #2
 800882e:	d123      	bne.n	8008878 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008830:	69fb      	ldr	r3, [r7, #28]
 8008832:	08da      	lsrs	r2, r3, #3
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	3208      	adds	r2, #8
 8008838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800883c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800883e:	69fb      	ldr	r3, [r7, #28]
 8008840:	f003 0307 	and.w	r3, r3, #7
 8008844:	009b      	lsls	r3, r3, #2
 8008846:	220f      	movs	r2, #15
 8008848:	fa02 f303 	lsl.w	r3, r2, r3
 800884c:	43db      	mvns	r3, r3
 800884e:	69ba      	ldr	r2, [r7, #24]
 8008850:	4013      	ands	r3, r2
 8008852:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	691a      	ldr	r2, [r3, #16]
 8008858:	69fb      	ldr	r3, [r7, #28]
 800885a:	f003 0307 	and.w	r3, r3, #7
 800885e:	009b      	lsls	r3, r3, #2
 8008860:	fa02 f303 	lsl.w	r3, r2, r3
 8008864:	69ba      	ldr	r2, [r7, #24]
 8008866:	4313      	orrs	r3, r2
 8008868:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800886a:	69fb      	ldr	r3, [r7, #28]
 800886c:	08da      	lsrs	r2, r3, #3
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	3208      	adds	r2, #8
 8008872:	69b9      	ldr	r1, [r7, #24]
 8008874:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800887e:	69fb      	ldr	r3, [r7, #28]
 8008880:	005b      	lsls	r3, r3, #1
 8008882:	2203      	movs	r2, #3
 8008884:	fa02 f303 	lsl.w	r3, r2, r3
 8008888:	43db      	mvns	r3, r3
 800888a:	69ba      	ldr	r2, [r7, #24]
 800888c:	4013      	ands	r3, r2
 800888e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	f003 0203 	and.w	r2, r3, #3
 8008898:	69fb      	ldr	r3, [r7, #28]
 800889a:	005b      	lsls	r3, r3, #1
 800889c:	fa02 f303 	lsl.w	r3, r2, r3
 80088a0:	69ba      	ldr	r2, [r7, #24]
 80088a2:	4313      	orrs	r3, r2
 80088a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	69ba      	ldr	r2, [r7, #24]
 80088aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	f000 80b4 	beq.w	8008a22 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80088ba:	2300      	movs	r3, #0
 80088bc:	60fb      	str	r3, [r7, #12]
 80088be:	4b60      	ldr	r3, [pc, #384]	@ (8008a40 <HAL_GPIO_Init+0x30c>)
 80088c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088c2:	4a5f      	ldr	r2, [pc, #380]	@ (8008a40 <HAL_GPIO_Init+0x30c>)
 80088c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80088c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80088ca:	4b5d      	ldr	r3, [pc, #372]	@ (8008a40 <HAL_GPIO_Init+0x30c>)
 80088cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80088d2:	60fb      	str	r3, [r7, #12]
 80088d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80088d6:	4a5b      	ldr	r2, [pc, #364]	@ (8008a44 <HAL_GPIO_Init+0x310>)
 80088d8:	69fb      	ldr	r3, [r7, #28]
 80088da:	089b      	lsrs	r3, r3, #2
 80088dc:	3302      	adds	r3, #2
 80088de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80088e4:	69fb      	ldr	r3, [r7, #28]
 80088e6:	f003 0303 	and.w	r3, r3, #3
 80088ea:	009b      	lsls	r3, r3, #2
 80088ec:	220f      	movs	r2, #15
 80088ee:	fa02 f303 	lsl.w	r3, r2, r3
 80088f2:	43db      	mvns	r3, r3
 80088f4:	69ba      	ldr	r2, [r7, #24]
 80088f6:	4013      	ands	r3, r2
 80088f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	4a52      	ldr	r2, [pc, #328]	@ (8008a48 <HAL_GPIO_Init+0x314>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d02b      	beq.n	800895a <HAL_GPIO_Init+0x226>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	4a51      	ldr	r2, [pc, #324]	@ (8008a4c <HAL_GPIO_Init+0x318>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d025      	beq.n	8008956 <HAL_GPIO_Init+0x222>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	4a50      	ldr	r2, [pc, #320]	@ (8008a50 <HAL_GPIO_Init+0x31c>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d01f      	beq.n	8008952 <HAL_GPIO_Init+0x21e>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	4a4f      	ldr	r2, [pc, #316]	@ (8008a54 <HAL_GPIO_Init+0x320>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d019      	beq.n	800894e <HAL_GPIO_Init+0x21a>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	4a4e      	ldr	r2, [pc, #312]	@ (8008a58 <HAL_GPIO_Init+0x324>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d013      	beq.n	800894a <HAL_GPIO_Init+0x216>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	4a4d      	ldr	r2, [pc, #308]	@ (8008a5c <HAL_GPIO_Init+0x328>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d00d      	beq.n	8008946 <HAL_GPIO_Init+0x212>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	4a4c      	ldr	r2, [pc, #304]	@ (8008a60 <HAL_GPIO_Init+0x32c>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d007      	beq.n	8008942 <HAL_GPIO_Init+0x20e>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	4a4b      	ldr	r2, [pc, #300]	@ (8008a64 <HAL_GPIO_Init+0x330>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d101      	bne.n	800893e <HAL_GPIO_Init+0x20a>
 800893a:	2307      	movs	r3, #7
 800893c:	e00e      	b.n	800895c <HAL_GPIO_Init+0x228>
 800893e:	2308      	movs	r3, #8
 8008940:	e00c      	b.n	800895c <HAL_GPIO_Init+0x228>
 8008942:	2306      	movs	r3, #6
 8008944:	e00a      	b.n	800895c <HAL_GPIO_Init+0x228>
 8008946:	2305      	movs	r3, #5
 8008948:	e008      	b.n	800895c <HAL_GPIO_Init+0x228>
 800894a:	2304      	movs	r3, #4
 800894c:	e006      	b.n	800895c <HAL_GPIO_Init+0x228>
 800894e:	2303      	movs	r3, #3
 8008950:	e004      	b.n	800895c <HAL_GPIO_Init+0x228>
 8008952:	2302      	movs	r3, #2
 8008954:	e002      	b.n	800895c <HAL_GPIO_Init+0x228>
 8008956:	2301      	movs	r3, #1
 8008958:	e000      	b.n	800895c <HAL_GPIO_Init+0x228>
 800895a:	2300      	movs	r3, #0
 800895c:	69fa      	ldr	r2, [r7, #28]
 800895e:	f002 0203 	and.w	r2, r2, #3
 8008962:	0092      	lsls	r2, r2, #2
 8008964:	4093      	lsls	r3, r2
 8008966:	69ba      	ldr	r2, [r7, #24]
 8008968:	4313      	orrs	r3, r2
 800896a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800896c:	4935      	ldr	r1, [pc, #212]	@ (8008a44 <HAL_GPIO_Init+0x310>)
 800896e:	69fb      	ldr	r3, [r7, #28]
 8008970:	089b      	lsrs	r3, r3, #2
 8008972:	3302      	adds	r3, #2
 8008974:	69ba      	ldr	r2, [r7, #24]
 8008976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800897a:	4b3b      	ldr	r3, [pc, #236]	@ (8008a68 <HAL_GPIO_Init+0x334>)
 800897c:	689b      	ldr	r3, [r3, #8]
 800897e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	43db      	mvns	r3, r3
 8008984:	69ba      	ldr	r2, [r7, #24]
 8008986:	4013      	ands	r3, r2
 8008988:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008992:	2b00      	cmp	r3, #0
 8008994:	d003      	beq.n	800899e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8008996:	69ba      	ldr	r2, [r7, #24]
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	4313      	orrs	r3, r2
 800899c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800899e:	4a32      	ldr	r2, [pc, #200]	@ (8008a68 <HAL_GPIO_Init+0x334>)
 80089a0:	69bb      	ldr	r3, [r7, #24]
 80089a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80089a4:	4b30      	ldr	r3, [pc, #192]	@ (8008a68 <HAL_GPIO_Init+0x334>)
 80089a6:	68db      	ldr	r3, [r3, #12]
 80089a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	43db      	mvns	r3, r3
 80089ae:	69ba      	ldr	r2, [r7, #24]
 80089b0:	4013      	ands	r3, r2
 80089b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d003      	beq.n	80089c8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80089c0:	69ba      	ldr	r2, [r7, #24]
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	4313      	orrs	r3, r2
 80089c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80089c8:	4a27      	ldr	r2, [pc, #156]	@ (8008a68 <HAL_GPIO_Init+0x334>)
 80089ca:	69bb      	ldr	r3, [r7, #24]
 80089cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80089ce:	4b26      	ldr	r3, [pc, #152]	@ (8008a68 <HAL_GPIO_Init+0x334>)
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	43db      	mvns	r3, r3
 80089d8:	69ba      	ldr	r2, [r7, #24]
 80089da:	4013      	ands	r3, r2
 80089dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d003      	beq.n	80089f2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80089ea:	69ba      	ldr	r2, [r7, #24]
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	4313      	orrs	r3, r2
 80089f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80089f2:	4a1d      	ldr	r2, [pc, #116]	@ (8008a68 <HAL_GPIO_Init+0x334>)
 80089f4:	69bb      	ldr	r3, [r7, #24]
 80089f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80089f8:	4b1b      	ldr	r3, [pc, #108]	@ (8008a68 <HAL_GPIO_Init+0x334>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	43db      	mvns	r3, r3
 8008a02:	69ba      	ldr	r2, [r7, #24]
 8008a04:	4013      	ands	r3, r2
 8008a06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d003      	beq.n	8008a1c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008a14:	69ba      	ldr	r2, [r7, #24]
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	4313      	orrs	r3, r2
 8008a1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008a1c:	4a12      	ldr	r2, [pc, #72]	@ (8008a68 <HAL_GPIO_Init+0x334>)
 8008a1e:	69bb      	ldr	r3, [r7, #24]
 8008a20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008a22:	69fb      	ldr	r3, [r7, #28]
 8008a24:	3301      	adds	r3, #1
 8008a26:	61fb      	str	r3, [r7, #28]
 8008a28:	69fb      	ldr	r3, [r7, #28]
 8008a2a:	2b0f      	cmp	r3, #15
 8008a2c:	f67f ae90 	bls.w	8008750 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008a30:	bf00      	nop
 8008a32:	bf00      	nop
 8008a34:	3724      	adds	r7, #36	@ 0x24
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	4770      	bx	lr
 8008a3e:	bf00      	nop
 8008a40:	40023800 	.word	0x40023800
 8008a44:	40013800 	.word	0x40013800
 8008a48:	40020000 	.word	0x40020000
 8008a4c:	40020400 	.word	0x40020400
 8008a50:	40020800 	.word	0x40020800
 8008a54:	40020c00 	.word	0x40020c00
 8008a58:	40021000 	.word	0x40021000
 8008a5c:	40021400 	.word	0x40021400
 8008a60:	40021800 	.word	0x40021800
 8008a64:	40021c00 	.word	0x40021c00
 8008a68:	40013c00 	.word	0x40013c00

08008a6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b083      	sub	sp, #12
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	460b      	mov	r3, r1
 8008a76:	807b      	strh	r3, [r7, #2]
 8008a78:	4613      	mov	r3, r2
 8008a7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008a7c:	787b      	ldrb	r3, [r7, #1]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d003      	beq.n	8008a8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008a82:	887a      	ldrh	r2, [r7, #2]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008a88:	e003      	b.n	8008a92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008a8a:	887b      	ldrh	r3, [r7, #2]
 8008a8c:	041a      	lsls	r2, r3, #16
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	619a      	str	r2, [r3, #24]
}
 8008a92:	bf00      	nop
 8008a94:	370c      	adds	r7, #12
 8008a96:	46bd      	mov	sp, r7
 8008a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9c:	4770      	bx	lr

08008a9e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008a9e:	b480      	push	{r7}
 8008aa0:	b085      	sub	sp, #20
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	6078      	str	r0, [r7, #4]
 8008aa6:	460b      	mov	r3, r1
 8008aa8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	695b      	ldr	r3, [r3, #20]
 8008aae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008ab0:	887a      	ldrh	r2, [r7, #2]
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	4013      	ands	r3, r2
 8008ab6:	041a      	lsls	r2, r3, #16
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	43d9      	mvns	r1, r3
 8008abc:	887b      	ldrh	r3, [r7, #2]
 8008abe:	400b      	ands	r3, r1
 8008ac0:	431a      	orrs	r2, r3
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	619a      	str	r2, [r3, #24]
}
 8008ac6:	bf00      	nop
 8008ac8:	3714      	adds	r7, #20
 8008aca:	46bd      	mov	sp, r7
 8008acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad0:	4770      	bx	lr
	...

08008ad4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b084      	sub	sp, #16
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d101      	bne.n	8008ae6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	e12b      	b.n	8008d3e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008aec:	b2db      	uxtb	r3, r3
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d106      	bne.n	8008b00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2200      	movs	r2, #0
 8008af6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f7fd fc3c 	bl	8006378 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2224      	movs	r2, #36	@ 0x24
 8008b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f022 0201 	bic.w	r2, r2, #1
 8008b16:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	681a      	ldr	r2, [r3, #0]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008b26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	681a      	ldr	r2, [r3, #0]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008b36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008b38:	f001 fd24 	bl	800a584 <HAL_RCC_GetPCLK1Freq>
 8008b3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	4a81      	ldr	r2, [pc, #516]	@ (8008d48 <HAL_I2C_Init+0x274>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d807      	bhi.n	8008b58 <HAL_I2C_Init+0x84>
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	4a80      	ldr	r2, [pc, #512]	@ (8008d4c <HAL_I2C_Init+0x278>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	bf94      	ite	ls
 8008b50:	2301      	movls	r3, #1
 8008b52:	2300      	movhi	r3, #0
 8008b54:	b2db      	uxtb	r3, r3
 8008b56:	e006      	b.n	8008b66 <HAL_I2C_Init+0x92>
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	4a7d      	ldr	r2, [pc, #500]	@ (8008d50 <HAL_I2C_Init+0x27c>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	bf94      	ite	ls
 8008b60:	2301      	movls	r3, #1
 8008b62:	2300      	movhi	r3, #0
 8008b64:	b2db      	uxtb	r3, r3
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d001      	beq.n	8008b6e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	e0e7      	b.n	8008d3e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	4a78      	ldr	r2, [pc, #480]	@ (8008d54 <HAL_I2C_Init+0x280>)
 8008b72:	fba2 2303 	umull	r2, r3, r2, r3
 8008b76:	0c9b      	lsrs	r3, r3, #18
 8008b78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	68ba      	ldr	r2, [r7, #8]
 8008b8a:	430a      	orrs	r2, r1
 8008b8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	6a1b      	ldr	r3, [r3, #32]
 8008b94:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	4a6a      	ldr	r2, [pc, #424]	@ (8008d48 <HAL_I2C_Init+0x274>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d802      	bhi.n	8008ba8 <HAL_I2C_Init+0xd4>
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	3301      	adds	r3, #1
 8008ba6:	e009      	b.n	8008bbc <HAL_I2C_Init+0xe8>
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8008bae:	fb02 f303 	mul.w	r3, r2, r3
 8008bb2:	4a69      	ldr	r2, [pc, #420]	@ (8008d58 <HAL_I2C_Init+0x284>)
 8008bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8008bb8:	099b      	lsrs	r3, r3, #6
 8008bba:	3301      	adds	r3, #1
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	6812      	ldr	r2, [r2, #0]
 8008bc0:	430b      	orrs	r3, r1
 8008bc2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	69db      	ldr	r3, [r3, #28]
 8008bca:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8008bce:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	495c      	ldr	r1, [pc, #368]	@ (8008d48 <HAL_I2C_Init+0x274>)
 8008bd8:	428b      	cmp	r3, r1
 8008bda:	d819      	bhi.n	8008c10 <HAL_I2C_Init+0x13c>
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	1e59      	subs	r1, r3, #1
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	685b      	ldr	r3, [r3, #4]
 8008be4:	005b      	lsls	r3, r3, #1
 8008be6:	fbb1 f3f3 	udiv	r3, r1, r3
 8008bea:	1c59      	adds	r1, r3, #1
 8008bec:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008bf0:	400b      	ands	r3, r1
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d00a      	beq.n	8008c0c <HAL_I2C_Init+0x138>
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	1e59      	subs	r1, r3, #1
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	005b      	lsls	r3, r3, #1
 8008c00:	fbb1 f3f3 	udiv	r3, r1, r3
 8008c04:	3301      	adds	r3, #1
 8008c06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c0a:	e051      	b.n	8008cb0 <HAL_I2C_Init+0x1dc>
 8008c0c:	2304      	movs	r3, #4
 8008c0e:	e04f      	b.n	8008cb0 <HAL_I2C_Init+0x1dc>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	689b      	ldr	r3, [r3, #8]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d111      	bne.n	8008c3c <HAL_I2C_Init+0x168>
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	1e58      	subs	r0, r3, #1
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6859      	ldr	r1, [r3, #4]
 8008c20:	460b      	mov	r3, r1
 8008c22:	005b      	lsls	r3, r3, #1
 8008c24:	440b      	add	r3, r1
 8008c26:	fbb0 f3f3 	udiv	r3, r0, r3
 8008c2a:	3301      	adds	r3, #1
 8008c2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	bf0c      	ite	eq
 8008c34:	2301      	moveq	r3, #1
 8008c36:	2300      	movne	r3, #0
 8008c38:	b2db      	uxtb	r3, r3
 8008c3a:	e012      	b.n	8008c62 <HAL_I2C_Init+0x18e>
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	1e58      	subs	r0, r3, #1
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6859      	ldr	r1, [r3, #4]
 8008c44:	460b      	mov	r3, r1
 8008c46:	009b      	lsls	r3, r3, #2
 8008c48:	440b      	add	r3, r1
 8008c4a:	0099      	lsls	r1, r3, #2
 8008c4c:	440b      	add	r3, r1
 8008c4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008c52:	3301      	adds	r3, #1
 8008c54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	bf0c      	ite	eq
 8008c5c:	2301      	moveq	r3, #1
 8008c5e:	2300      	movne	r3, #0
 8008c60:	b2db      	uxtb	r3, r3
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d001      	beq.n	8008c6a <HAL_I2C_Init+0x196>
 8008c66:	2301      	movs	r3, #1
 8008c68:	e022      	b.n	8008cb0 <HAL_I2C_Init+0x1dc>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	689b      	ldr	r3, [r3, #8]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d10e      	bne.n	8008c90 <HAL_I2C_Init+0x1bc>
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	1e58      	subs	r0, r3, #1
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6859      	ldr	r1, [r3, #4]
 8008c7a:	460b      	mov	r3, r1
 8008c7c:	005b      	lsls	r3, r3, #1
 8008c7e:	440b      	add	r3, r1
 8008c80:	fbb0 f3f3 	udiv	r3, r0, r3
 8008c84:	3301      	adds	r3, #1
 8008c86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c8e:	e00f      	b.n	8008cb0 <HAL_I2C_Init+0x1dc>
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	1e58      	subs	r0, r3, #1
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6859      	ldr	r1, [r3, #4]
 8008c98:	460b      	mov	r3, r1
 8008c9a:	009b      	lsls	r3, r3, #2
 8008c9c:	440b      	add	r3, r1
 8008c9e:	0099      	lsls	r1, r3, #2
 8008ca0:	440b      	add	r3, r1
 8008ca2:	fbb0 f3f3 	udiv	r3, r0, r3
 8008ca6:	3301      	adds	r3, #1
 8008ca8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008cac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008cb0:	6879      	ldr	r1, [r7, #4]
 8008cb2:	6809      	ldr	r1, [r1, #0]
 8008cb4:	4313      	orrs	r3, r2
 8008cb6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	69da      	ldr	r2, [r3, #28]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6a1b      	ldr	r3, [r3, #32]
 8008cca:	431a      	orrs	r2, r3
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	430a      	orrs	r2, r1
 8008cd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	689b      	ldr	r3, [r3, #8]
 8008cda:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8008cde:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008ce2:	687a      	ldr	r2, [r7, #4]
 8008ce4:	6911      	ldr	r1, [r2, #16]
 8008ce6:	687a      	ldr	r2, [r7, #4]
 8008ce8:	68d2      	ldr	r2, [r2, #12]
 8008cea:	4311      	orrs	r1, r2
 8008cec:	687a      	ldr	r2, [r7, #4]
 8008cee:	6812      	ldr	r2, [r2, #0]
 8008cf0:	430b      	orrs	r3, r1
 8008cf2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	68db      	ldr	r3, [r3, #12]
 8008cfa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	695a      	ldr	r2, [r3, #20]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	699b      	ldr	r3, [r3, #24]
 8008d06:	431a      	orrs	r2, r3
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	430a      	orrs	r2, r1
 8008d0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	681a      	ldr	r2, [r3, #0]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f042 0201 	orr.w	r2, r2, #1
 8008d1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2200      	movs	r2, #0
 8008d24:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2220      	movs	r2, #32
 8008d2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2200      	movs	r2, #0
 8008d32:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2200      	movs	r2, #0
 8008d38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8008d3c:	2300      	movs	r3, #0
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3710      	adds	r7, #16
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}
 8008d46:	bf00      	nop
 8008d48:	000186a0 	.word	0x000186a0
 8008d4c:	001e847f 	.word	0x001e847f
 8008d50:	003d08ff 	.word	0x003d08ff
 8008d54:	431bde83 	.word	0x431bde83
 8008d58:	10624dd3 	.word	0x10624dd3

08008d5c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b088      	sub	sp, #32
 8008d60:	af02      	add	r7, sp, #8
 8008d62:	60f8      	str	r0, [r7, #12]
 8008d64:	607a      	str	r2, [r7, #4]
 8008d66:	461a      	mov	r2, r3
 8008d68:	460b      	mov	r3, r1
 8008d6a:	817b      	strh	r3, [r7, #10]
 8008d6c:	4613      	mov	r3, r2
 8008d6e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008d70:	f7fe f97c 	bl	800706c <HAL_GetTick>
 8008d74:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d7c:	b2db      	uxtb	r3, r3
 8008d7e:	2b20      	cmp	r3, #32
 8008d80:	f040 80e0 	bne.w	8008f44 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	9300      	str	r3, [sp, #0]
 8008d88:	2319      	movs	r3, #25
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	4970      	ldr	r1, [pc, #448]	@ (8008f50 <HAL_I2C_Master_Transmit+0x1f4>)
 8008d8e:	68f8      	ldr	r0, [r7, #12]
 8008d90:	f000 fd92 	bl	80098b8 <I2C_WaitOnFlagUntilTimeout>
 8008d94:	4603      	mov	r3, r0
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d001      	beq.n	8008d9e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8008d9a:	2302      	movs	r3, #2
 8008d9c:	e0d3      	b.n	8008f46 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008da4:	2b01      	cmp	r3, #1
 8008da6:	d101      	bne.n	8008dac <HAL_I2C_Master_Transmit+0x50>
 8008da8:	2302      	movs	r3, #2
 8008daa:	e0cc      	b.n	8008f46 <HAL_I2C_Master_Transmit+0x1ea>
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	2201      	movs	r2, #1
 8008db0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f003 0301 	and.w	r3, r3, #1
 8008dbe:	2b01      	cmp	r3, #1
 8008dc0:	d007      	beq.n	8008dd2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	681a      	ldr	r2, [r3, #0]
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f042 0201 	orr.w	r2, r2, #1
 8008dd0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	681a      	ldr	r2, [r3, #0]
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008de0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	2221      	movs	r2, #33	@ 0x21
 8008de6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	2210      	movs	r2, #16
 8008dee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2200      	movs	r2, #0
 8008df6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	893a      	ldrh	r2, [r7, #8]
 8008e02:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e08:	b29a      	uxth	r2, r3
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	4a50      	ldr	r2, [pc, #320]	@ (8008f54 <HAL_I2C_Master_Transmit+0x1f8>)
 8008e12:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008e14:	8979      	ldrh	r1, [r7, #10]
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	6a3a      	ldr	r2, [r7, #32]
 8008e1a:	68f8      	ldr	r0, [r7, #12]
 8008e1c:	f000 fbfc 	bl	8009618 <I2C_MasterRequestWrite>
 8008e20:	4603      	mov	r3, r0
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d001      	beq.n	8008e2a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8008e26:	2301      	movs	r3, #1
 8008e28:	e08d      	b.n	8008f46 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	613b      	str	r3, [r7, #16]
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	695b      	ldr	r3, [r3, #20]
 8008e34:	613b      	str	r3, [r7, #16]
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	699b      	ldr	r3, [r3, #24]
 8008e3c:	613b      	str	r3, [r7, #16]
 8008e3e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8008e40:	e066      	b.n	8008f10 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008e42:	697a      	ldr	r2, [r7, #20]
 8008e44:	6a39      	ldr	r1, [r7, #32]
 8008e46:	68f8      	ldr	r0, [r7, #12]
 8008e48:	f000 fe50 	bl	8009aec <I2C_WaitOnTXEFlagUntilTimeout>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d00d      	beq.n	8008e6e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e56:	2b04      	cmp	r3, #4
 8008e58:	d107      	bne.n	8008e6a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	681a      	ldr	r2, [r3, #0]
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008e68:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	e06b      	b.n	8008f46 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e72:	781a      	ldrb	r2, [r3, #0]
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e7e:	1c5a      	adds	r2, r3, #1
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e88:	b29b      	uxth	r3, r3
 8008e8a:	3b01      	subs	r3, #1
 8008e8c:	b29a      	uxth	r2, r3
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e96:	3b01      	subs	r3, #1
 8008e98:	b29a      	uxth	r2, r3
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	695b      	ldr	r3, [r3, #20]
 8008ea4:	f003 0304 	and.w	r3, r3, #4
 8008ea8:	2b04      	cmp	r3, #4
 8008eaa:	d11b      	bne.n	8008ee4 <HAL_I2C_Master_Transmit+0x188>
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d017      	beq.n	8008ee4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008eb8:	781a      	ldrb	r2, [r3, #0]
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ec4:	1c5a      	adds	r2, r3, #1
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	3b01      	subs	r3, #1
 8008ed2:	b29a      	uxth	r2, r3
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008edc:	3b01      	subs	r3, #1
 8008ede:	b29a      	uxth	r2, r3
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ee4:	697a      	ldr	r2, [r7, #20]
 8008ee6:	6a39      	ldr	r1, [r7, #32]
 8008ee8:	68f8      	ldr	r0, [r7, #12]
 8008eea:	f000 fe47 	bl	8009b7c <I2C_WaitOnBTFFlagUntilTimeout>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d00d      	beq.n	8008f10 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ef8:	2b04      	cmp	r3, #4
 8008efa:	d107      	bne.n	8008f0c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	681a      	ldr	r2, [r3, #0]
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008f0a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	e01a      	b.n	8008f46 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d194      	bne.n	8008e42 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	681a      	ldr	r2, [r3, #0]
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008f26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2220      	movs	r2, #32
 8008f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	2200      	movs	r2, #0
 8008f34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008f40:	2300      	movs	r3, #0
 8008f42:	e000      	b.n	8008f46 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8008f44:	2302      	movs	r3, #2
  }
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3718      	adds	r7, #24
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}
 8008f4e:	bf00      	nop
 8008f50:	00100002 	.word	0x00100002
 8008f54:	ffff0000 	.word	0xffff0000

08008f58 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b08c      	sub	sp, #48	@ 0x30
 8008f5c:	af02      	add	r7, sp, #8
 8008f5e:	60f8      	str	r0, [r7, #12]
 8008f60:	607a      	str	r2, [r7, #4]
 8008f62:	461a      	mov	r2, r3
 8008f64:	460b      	mov	r3, r1
 8008f66:	817b      	strh	r3, [r7, #10]
 8008f68:	4613      	mov	r3, r2
 8008f6a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008f6c:	f7fe f87e 	bl	800706c <HAL_GetTick>
 8008f70:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008f78:	b2db      	uxtb	r3, r3
 8008f7a:	2b20      	cmp	r3, #32
 8008f7c:	f040 8217 	bne.w	80093ae <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f82:	9300      	str	r3, [sp, #0]
 8008f84:	2319      	movs	r3, #25
 8008f86:	2201      	movs	r2, #1
 8008f88:	497c      	ldr	r1, [pc, #496]	@ (800917c <HAL_I2C_Master_Receive+0x224>)
 8008f8a:	68f8      	ldr	r0, [r7, #12]
 8008f8c:	f000 fc94 	bl	80098b8 <I2C_WaitOnFlagUntilTimeout>
 8008f90:	4603      	mov	r3, r0
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d001      	beq.n	8008f9a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8008f96:	2302      	movs	r3, #2
 8008f98:	e20a      	b.n	80093b0 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d101      	bne.n	8008fa8 <HAL_I2C_Master_Receive+0x50>
 8008fa4:	2302      	movs	r3, #2
 8008fa6:	e203      	b.n	80093b0 <HAL_I2C_Master_Receive+0x458>
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	2201      	movs	r2, #1
 8008fac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f003 0301 	and.w	r3, r3, #1
 8008fba:	2b01      	cmp	r3, #1
 8008fbc:	d007      	beq.n	8008fce <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	681a      	ldr	r2, [r3, #0]
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f042 0201 	orr.w	r2, r2, #1
 8008fcc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	681a      	ldr	r2, [r3, #0]
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008fdc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	2222      	movs	r2, #34	@ 0x22
 8008fe2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	2210      	movs	r2, #16
 8008fea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	687a      	ldr	r2, [r7, #4]
 8008ff8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	893a      	ldrh	r2, [r7, #8]
 8008ffe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009004:	b29a      	uxth	r2, r3
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	4a5c      	ldr	r2, [pc, #368]	@ (8009180 <HAL_I2C_Master_Receive+0x228>)
 800900e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009010:	8979      	ldrh	r1, [r7, #10]
 8009012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009014:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009016:	68f8      	ldr	r0, [r7, #12]
 8009018:	f000 fb80 	bl	800971c <I2C_MasterRequestRead>
 800901c:	4603      	mov	r3, r0
 800901e:	2b00      	cmp	r3, #0
 8009020:	d001      	beq.n	8009026 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8009022:	2301      	movs	r3, #1
 8009024:	e1c4      	b.n	80093b0 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800902a:	2b00      	cmp	r3, #0
 800902c:	d113      	bne.n	8009056 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800902e:	2300      	movs	r3, #0
 8009030:	623b      	str	r3, [r7, #32]
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	695b      	ldr	r3, [r3, #20]
 8009038:	623b      	str	r3, [r7, #32]
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	699b      	ldr	r3, [r3, #24]
 8009040:	623b      	str	r3, [r7, #32]
 8009042:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	681a      	ldr	r2, [r3, #0]
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009052:	601a      	str	r2, [r3, #0]
 8009054:	e198      	b.n	8009388 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800905a:	2b01      	cmp	r3, #1
 800905c:	d11b      	bne.n	8009096 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	681a      	ldr	r2, [r3, #0]
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800906c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800906e:	2300      	movs	r3, #0
 8009070:	61fb      	str	r3, [r7, #28]
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	695b      	ldr	r3, [r3, #20]
 8009078:	61fb      	str	r3, [r7, #28]
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	699b      	ldr	r3, [r3, #24]
 8009080:	61fb      	str	r3, [r7, #28]
 8009082:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	681a      	ldr	r2, [r3, #0]
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009092:	601a      	str	r2, [r3, #0]
 8009094:	e178      	b.n	8009388 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800909a:	2b02      	cmp	r3, #2
 800909c:	d11b      	bne.n	80090d6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	681a      	ldr	r2, [r3, #0]
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80090ac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	681a      	ldr	r2, [r3, #0]
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80090bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80090be:	2300      	movs	r3, #0
 80090c0:	61bb      	str	r3, [r7, #24]
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	695b      	ldr	r3, [r3, #20]
 80090c8:	61bb      	str	r3, [r7, #24]
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	699b      	ldr	r3, [r3, #24]
 80090d0:	61bb      	str	r3, [r7, #24]
 80090d2:	69bb      	ldr	r3, [r7, #24]
 80090d4:	e158      	b.n	8009388 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	681a      	ldr	r2, [r3, #0]
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80090e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80090e6:	2300      	movs	r3, #0
 80090e8:	617b      	str	r3, [r7, #20]
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	695b      	ldr	r3, [r3, #20]
 80090f0:	617b      	str	r3, [r7, #20]
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	699b      	ldr	r3, [r3, #24]
 80090f8:	617b      	str	r3, [r7, #20]
 80090fa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80090fc:	e144      	b.n	8009388 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009102:	2b03      	cmp	r3, #3
 8009104:	f200 80f1 	bhi.w	80092ea <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800910c:	2b01      	cmp	r3, #1
 800910e:	d123      	bne.n	8009158 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009110:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009112:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009114:	68f8      	ldr	r0, [r7, #12]
 8009116:	f000 fd79 	bl	8009c0c <I2C_WaitOnRXNEFlagUntilTimeout>
 800911a:	4603      	mov	r3, r0
 800911c:	2b00      	cmp	r3, #0
 800911e:	d001      	beq.n	8009124 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8009120:	2301      	movs	r3, #1
 8009122:	e145      	b.n	80093b0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	691a      	ldr	r2, [r3, #16]
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800912e:	b2d2      	uxtb	r2, r2
 8009130:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009136:	1c5a      	adds	r2, r3, #1
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009140:	3b01      	subs	r3, #1
 8009142:	b29a      	uxth	r2, r3
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800914c:	b29b      	uxth	r3, r3
 800914e:	3b01      	subs	r3, #1
 8009150:	b29a      	uxth	r2, r3
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009156:	e117      	b.n	8009388 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800915c:	2b02      	cmp	r3, #2
 800915e:	d14e      	bne.n	80091fe <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009162:	9300      	str	r3, [sp, #0]
 8009164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009166:	2200      	movs	r2, #0
 8009168:	4906      	ldr	r1, [pc, #24]	@ (8009184 <HAL_I2C_Master_Receive+0x22c>)
 800916a:	68f8      	ldr	r0, [r7, #12]
 800916c:	f000 fba4 	bl	80098b8 <I2C_WaitOnFlagUntilTimeout>
 8009170:	4603      	mov	r3, r0
 8009172:	2b00      	cmp	r3, #0
 8009174:	d008      	beq.n	8009188 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8009176:	2301      	movs	r3, #1
 8009178:	e11a      	b.n	80093b0 <HAL_I2C_Master_Receive+0x458>
 800917a:	bf00      	nop
 800917c:	00100002 	.word	0x00100002
 8009180:	ffff0000 	.word	0xffff0000
 8009184:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	681a      	ldr	r2, [r3, #0]
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009196:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	691a      	ldr	r2, [r3, #16]
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091a2:	b2d2      	uxtb	r2, r2
 80091a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091aa:	1c5a      	adds	r2, r3, #1
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80091b4:	3b01      	subs	r3, #1
 80091b6:	b29a      	uxth	r2, r3
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80091c0:	b29b      	uxth	r3, r3
 80091c2:	3b01      	subs	r3, #1
 80091c4:	b29a      	uxth	r2, r3
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	691a      	ldr	r2, [r3, #16]
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091d4:	b2d2      	uxtb	r2, r2
 80091d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091dc:	1c5a      	adds	r2, r3, #1
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80091e6:	3b01      	subs	r3, #1
 80091e8:	b29a      	uxth	r2, r3
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	3b01      	subs	r3, #1
 80091f6:	b29a      	uxth	r2, r3
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80091fc:	e0c4      	b.n	8009388 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80091fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009200:	9300      	str	r3, [sp, #0]
 8009202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009204:	2200      	movs	r2, #0
 8009206:	496c      	ldr	r1, [pc, #432]	@ (80093b8 <HAL_I2C_Master_Receive+0x460>)
 8009208:	68f8      	ldr	r0, [r7, #12]
 800920a:	f000 fb55 	bl	80098b8 <I2C_WaitOnFlagUntilTimeout>
 800920e:	4603      	mov	r3, r0
 8009210:	2b00      	cmp	r3, #0
 8009212:	d001      	beq.n	8009218 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8009214:	2301      	movs	r3, #1
 8009216:	e0cb      	b.n	80093b0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	681a      	ldr	r2, [r3, #0]
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009226:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	691a      	ldr	r2, [r3, #16]
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009232:	b2d2      	uxtb	r2, r2
 8009234:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800923a:	1c5a      	adds	r2, r3, #1
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009244:	3b01      	subs	r3, #1
 8009246:	b29a      	uxth	r2, r3
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009250:	b29b      	uxth	r3, r3
 8009252:	3b01      	subs	r3, #1
 8009254:	b29a      	uxth	r2, r3
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800925a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800925c:	9300      	str	r3, [sp, #0]
 800925e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009260:	2200      	movs	r2, #0
 8009262:	4955      	ldr	r1, [pc, #340]	@ (80093b8 <HAL_I2C_Master_Receive+0x460>)
 8009264:	68f8      	ldr	r0, [r7, #12]
 8009266:	f000 fb27 	bl	80098b8 <I2C_WaitOnFlagUntilTimeout>
 800926a:	4603      	mov	r3, r0
 800926c:	2b00      	cmp	r3, #0
 800926e:	d001      	beq.n	8009274 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8009270:	2301      	movs	r3, #1
 8009272:	e09d      	b.n	80093b0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	681a      	ldr	r2, [r3, #0]
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009282:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	691a      	ldr	r2, [r3, #16]
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800928e:	b2d2      	uxtb	r2, r2
 8009290:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009296:	1c5a      	adds	r2, r3, #1
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80092a0:	3b01      	subs	r3, #1
 80092a2:	b29a      	uxth	r2, r3
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80092ac:	b29b      	uxth	r3, r3
 80092ae:	3b01      	subs	r3, #1
 80092b0:	b29a      	uxth	r2, r3
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	691a      	ldr	r2, [r3, #16]
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092c0:	b2d2      	uxtb	r2, r2
 80092c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092c8:	1c5a      	adds	r2, r3, #1
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80092d2:	3b01      	subs	r3, #1
 80092d4:	b29a      	uxth	r2, r3
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80092de:	b29b      	uxth	r3, r3
 80092e0:	3b01      	subs	r3, #1
 80092e2:	b29a      	uxth	r2, r3
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80092e8:	e04e      	b.n	8009388 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80092ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092ec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80092ee:	68f8      	ldr	r0, [r7, #12]
 80092f0:	f000 fc8c 	bl	8009c0c <I2C_WaitOnRXNEFlagUntilTimeout>
 80092f4:	4603      	mov	r3, r0
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d001      	beq.n	80092fe <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80092fa:	2301      	movs	r3, #1
 80092fc:	e058      	b.n	80093b0 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	691a      	ldr	r2, [r3, #16]
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009308:	b2d2      	uxtb	r2, r2
 800930a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009310:	1c5a      	adds	r2, r3, #1
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800931a:	3b01      	subs	r3, #1
 800931c:	b29a      	uxth	r2, r3
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009326:	b29b      	uxth	r3, r3
 8009328:	3b01      	subs	r3, #1
 800932a:	b29a      	uxth	r2, r3
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	695b      	ldr	r3, [r3, #20]
 8009336:	f003 0304 	and.w	r3, r3, #4
 800933a:	2b04      	cmp	r3, #4
 800933c:	d124      	bne.n	8009388 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009342:	2b03      	cmp	r3, #3
 8009344:	d107      	bne.n	8009356 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	681a      	ldr	r2, [r3, #0]
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009354:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	691a      	ldr	r2, [r3, #16]
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009360:	b2d2      	uxtb	r2, r2
 8009362:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009368:	1c5a      	adds	r2, r3, #1
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009372:	3b01      	subs	r3, #1
 8009374:	b29a      	uxth	r2, r3
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800937e:	b29b      	uxth	r3, r3
 8009380:	3b01      	subs	r3, #1
 8009382:	b29a      	uxth	r2, r3
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800938c:	2b00      	cmp	r3, #0
 800938e:	f47f aeb6 	bne.w	80090fe <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2220      	movs	r2, #32
 8009396:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2200      	movs	r2, #0
 800939e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2200      	movs	r2, #0
 80093a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80093aa:	2300      	movs	r3, #0
 80093ac:	e000      	b.n	80093b0 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80093ae:	2302      	movs	r3, #2
  }
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3728      	adds	r7, #40	@ 0x28
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}
 80093b8:	00010004 	.word	0x00010004

080093bc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b08a      	sub	sp, #40	@ 0x28
 80093c0:	af02      	add	r7, sp, #8
 80093c2:	60f8      	str	r0, [r7, #12]
 80093c4:	607a      	str	r2, [r7, #4]
 80093c6:	603b      	str	r3, [r7, #0]
 80093c8:	460b      	mov	r3, r1
 80093ca:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80093cc:	f7fd fe4e 	bl	800706c <HAL_GetTick>
 80093d0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80093d2:	2300      	movs	r3, #0
 80093d4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80093dc:	b2db      	uxtb	r3, r3
 80093de:	2b20      	cmp	r3, #32
 80093e0:	f040 8111 	bne.w	8009606 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80093e4:	69fb      	ldr	r3, [r7, #28]
 80093e6:	9300      	str	r3, [sp, #0]
 80093e8:	2319      	movs	r3, #25
 80093ea:	2201      	movs	r2, #1
 80093ec:	4988      	ldr	r1, [pc, #544]	@ (8009610 <HAL_I2C_IsDeviceReady+0x254>)
 80093ee:	68f8      	ldr	r0, [r7, #12]
 80093f0:	f000 fa62 	bl	80098b8 <I2C_WaitOnFlagUntilTimeout>
 80093f4:	4603      	mov	r3, r0
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d001      	beq.n	80093fe <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80093fa:	2302      	movs	r3, #2
 80093fc:	e104      	b.n	8009608 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009404:	2b01      	cmp	r3, #1
 8009406:	d101      	bne.n	800940c <HAL_I2C_IsDeviceReady+0x50>
 8009408:	2302      	movs	r3, #2
 800940a:	e0fd      	b.n	8009608 <HAL_I2C_IsDeviceReady+0x24c>
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	2201      	movs	r2, #1
 8009410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f003 0301 	and.w	r3, r3, #1
 800941e:	2b01      	cmp	r3, #1
 8009420:	d007      	beq.n	8009432 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	681a      	ldr	r2, [r3, #0]
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f042 0201 	orr.w	r2, r2, #1
 8009430:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	681a      	ldr	r2, [r3, #0]
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009440:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	2224      	movs	r2, #36	@ 0x24
 8009446:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	2200      	movs	r2, #0
 800944e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	4a70      	ldr	r2, [pc, #448]	@ (8009614 <HAL_I2C_IsDeviceReady+0x258>)
 8009454:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	681a      	ldr	r2, [r3, #0]
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009464:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8009466:	69fb      	ldr	r3, [r7, #28]
 8009468:	9300      	str	r3, [sp, #0]
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	2200      	movs	r2, #0
 800946e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009472:	68f8      	ldr	r0, [r7, #12]
 8009474:	f000 fa20 	bl	80098b8 <I2C_WaitOnFlagUntilTimeout>
 8009478:	4603      	mov	r3, r0
 800947a:	2b00      	cmp	r3, #0
 800947c:	d00d      	beq.n	800949a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009488:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800948c:	d103      	bne.n	8009496 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009494:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8009496:	2303      	movs	r3, #3
 8009498:	e0b6      	b.n	8009608 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800949a:	897b      	ldrh	r3, [r7, #10]
 800949c:	b2db      	uxtb	r3, r3
 800949e:	461a      	mov	r2, r3
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80094a8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80094aa:	f7fd fddf 	bl	800706c <HAL_GetTick>
 80094ae:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	695b      	ldr	r3, [r3, #20]
 80094b6:	f003 0302 	and.w	r3, r3, #2
 80094ba:	2b02      	cmp	r3, #2
 80094bc:	bf0c      	ite	eq
 80094be:	2301      	moveq	r3, #1
 80094c0:	2300      	movne	r3, #0
 80094c2:	b2db      	uxtb	r3, r3
 80094c4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	695b      	ldr	r3, [r3, #20]
 80094cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80094d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80094d4:	bf0c      	ite	eq
 80094d6:	2301      	moveq	r3, #1
 80094d8:	2300      	movne	r3, #0
 80094da:	b2db      	uxtb	r3, r3
 80094dc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80094de:	e025      	b.n	800952c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80094e0:	f7fd fdc4 	bl	800706c <HAL_GetTick>
 80094e4:	4602      	mov	r2, r0
 80094e6:	69fb      	ldr	r3, [r7, #28]
 80094e8:	1ad3      	subs	r3, r2, r3
 80094ea:	683a      	ldr	r2, [r7, #0]
 80094ec:	429a      	cmp	r2, r3
 80094ee:	d302      	bcc.n	80094f6 <HAL_I2C_IsDeviceReady+0x13a>
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d103      	bne.n	80094fe <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	22a0      	movs	r2, #160	@ 0xa0
 80094fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	695b      	ldr	r3, [r3, #20]
 8009504:	f003 0302 	and.w	r3, r3, #2
 8009508:	2b02      	cmp	r3, #2
 800950a:	bf0c      	ite	eq
 800950c:	2301      	moveq	r3, #1
 800950e:	2300      	movne	r3, #0
 8009510:	b2db      	uxtb	r3, r3
 8009512:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	695b      	ldr	r3, [r3, #20]
 800951a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800951e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009522:	bf0c      	ite	eq
 8009524:	2301      	moveq	r3, #1
 8009526:	2300      	movne	r3, #0
 8009528:	b2db      	uxtb	r3, r3
 800952a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009532:	b2db      	uxtb	r3, r3
 8009534:	2ba0      	cmp	r3, #160	@ 0xa0
 8009536:	d005      	beq.n	8009544 <HAL_I2C_IsDeviceReady+0x188>
 8009538:	7dfb      	ldrb	r3, [r7, #23]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d102      	bne.n	8009544 <HAL_I2C_IsDeviceReady+0x188>
 800953e:	7dbb      	ldrb	r3, [r7, #22]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d0cd      	beq.n	80094e0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	2220      	movs	r2, #32
 8009548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	695b      	ldr	r3, [r3, #20]
 8009552:	f003 0302 	and.w	r3, r3, #2
 8009556:	2b02      	cmp	r3, #2
 8009558:	d129      	bne.n	80095ae <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	681a      	ldr	r2, [r3, #0]
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009568:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800956a:	2300      	movs	r3, #0
 800956c:	613b      	str	r3, [r7, #16]
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	695b      	ldr	r3, [r3, #20]
 8009574:	613b      	str	r3, [r7, #16]
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	699b      	ldr	r3, [r3, #24]
 800957c:	613b      	str	r3, [r7, #16]
 800957e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009580:	69fb      	ldr	r3, [r7, #28]
 8009582:	9300      	str	r3, [sp, #0]
 8009584:	2319      	movs	r3, #25
 8009586:	2201      	movs	r2, #1
 8009588:	4921      	ldr	r1, [pc, #132]	@ (8009610 <HAL_I2C_IsDeviceReady+0x254>)
 800958a:	68f8      	ldr	r0, [r7, #12]
 800958c:	f000 f994 	bl	80098b8 <I2C_WaitOnFlagUntilTimeout>
 8009590:	4603      	mov	r3, r0
 8009592:	2b00      	cmp	r3, #0
 8009594:	d001      	beq.n	800959a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8009596:	2301      	movs	r3, #1
 8009598:	e036      	b.n	8009608 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2220      	movs	r2, #32
 800959e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	2200      	movs	r2, #0
 80095a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80095aa:	2300      	movs	r3, #0
 80095ac:	e02c      	b.n	8009608 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	681a      	ldr	r2, [r3, #0]
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80095bc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80095c6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80095c8:	69fb      	ldr	r3, [r7, #28]
 80095ca:	9300      	str	r3, [sp, #0]
 80095cc:	2319      	movs	r3, #25
 80095ce:	2201      	movs	r2, #1
 80095d0:	490f      	ldr	r1, [pc, #60]	@ (8009610 <HAL_I2C_IsDeviceReady+0x254>)
 80095d2:	68f8      	ldr	r0, [r7, #12]
 80095d4:	f000 f970 	bl	80098b8 <I2C_WaitOnFlagUntilTimeout>
 80095d8:	4603      	mov	r3, r0
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d001      	beq.n	80095e2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80095de:	2301      	movs	r3, #1
 80095e0:	e012      	b.n	8009608 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80095e2:	69bb      	ldr	r3, [r7, #24]
 80095e4:	3301      	adds	r3, #1
 80095e6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80095e8:	69ba      	ldr	r2, [r7, #24]
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	429a      	cmp	r2, r3
 80095ee:	f4ff af32 	bcc.w	8009456 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	2220      	movs	r2, #32
 80095f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	2200      	movs	r2, #0
 80095fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8009602:	2301      	movs	r3, #1
 8009604:	e000      	b.n	8009608 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8009606:	2302      	movs	r3, #2
  }
}
 8009608:	4618      	mov	r0, r3
 800960a:	3720      	adds	r7, #32
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}
 8009610:	00100002 	.word	0x00100002
 8009614:	ffff0000 	.word	0xffff0000

08009618 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b088      	sub	sp, #32
 800961c:	af02      	add	r7, sp, #8
 800961e:	60f8      	str	r0, [r7, #12]
 8009620:	607a      	str	r2, [r7, #4]
 8009622:	603b      	str	r3, [r7, #0]
 8009624:	460b      	mov	r3, r1
 8009626:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800962c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	2b08      	cmp	r3, #8
 8009632:	d006      	beq.n	8009642 <I2C_MasterRequestWrite+0x2a>
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	2b01      	cmp	r3, #1
 8009638:	d003      	beq.n	8009642 <I2C_MasterRequestWrite+0x2a>
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009640:	d108      	bne.n	8009654 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	681a      	ldr	r2, [r3, #0]
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009650:	601a      	str	r2, [r3, #0]
 8009652:	e00b      	b.n	800966c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009658:	2b12      	cmp	r3, #18
 800965a:	d107      	bne.n	800966c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	681a      	ldr	r2, [r3, #0]
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800966a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	9300      	str	r3, [sp, #0]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2200      	movs	r2, #0
 8009674:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009678:	68f8      	ldr	r0, [r7, #12]
 800967a:	f000 f91d 	bl	80098b8 <I2C_WaitOnFlagUntilTimeout>
 800967e:	4603      	mov	r3, r0
 8009680:	2b00      	cmp	r3, #0
 8009682:	d00d      	beq.n	80096a0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800968e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009692:	d103      	bne.n	800969c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800969a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800969c:	2303      	movs	r3, #3
 800969e:	e035      	b.n	800970c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	691b      	ldr	r3, [r3, #16]
 80096a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80096a8:	d108      	bne.n	80096bc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80096aa:	897b      	ldrh	r3, [r7, #10]
 80096ac:	b2db      	uxtb	r3, r3
 80096ae:	461a      	mov	r2, r3
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80096b8:	611a      	str	r2, [r3, #16]
 80096ba:	e01b      	b.n	80096f4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80096bc:	897b      	ldrh	r3, [r7, #10]
 80096be:	11db      	asrs	r3, r3, #7
 80096c0:	b2db      	uxtb	r3, r3
 80096c2:	f003 0306 	and.w	r3, r3, #6
 80096c6:	b2db      	uxtb	r3, r3
 80096c8:	f063 030f 	orn	r3, r3, #15
 80096cc:	b2da      	uxtb	r2, r3
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	687a      	ldr	r2, [r7, #4]
 80096d8:	490e      	ldr	r1, [pc, #56]	@ (8009714 <I2C_MasterRequestWrite+0xfc>)
 80096da:	68f8      	ldr	r0, [r7, #12]
 80096dc:	f000 f966 	bl	80099ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80096e0:	4603      	mov	r3, r0
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d001      	beq.n	80096ea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80096e6:	2301      	movs	r3, #1
 80096e8:	e010      	b.n	800970c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80096ea:	897b      	ldrh	r3, [r7, #10]
 80096ec:	b2da      	uxtb	r2, r3
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	687a      	ldr	r2, [r7, #4]
 80096f8:	4907      	ldr	r1, [pc, #28]	@ (8009718 <I2C_MasterRequestWrite+0x100>)
 80096fa:	68f8      	ldr	r0, [r7, #12]
 80096fc:	f000 f956 	bl	80099ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009700:	4603      	mov	r3, r0
 8009702:	2b00      	cmp	r3, #0
 8009704:	d001      	beq.n	800970a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8009706:	2301      	movs	r3, #1
 8009708:	e000      	b.n	800970c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800970a:	2300      	movs	r3, #0
}
 800970c:	4618      	mov	r0, r3
 800970e:	3718      	adds	r7, #24
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}
 8009714:	00010008 	.word	0x00010008
 8009718:	00010002 	.word	0x00010002

0800971c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b088      	sub	sp, #32
 8009720:	af02      	add	r7, sp, #8
 8009722:	60f8      	str	r0, [r7, #12]
 8009724:	607a      	str	r2, [r7, #4]
 8009726:	603b      	str	r3, [r7, #0]
 8009728:	460b      	mov	r3, r1
 800972a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009730:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	681a      	ldr	r2, [r3, #0]
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009740:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	2b08      	cmp	r3, #8
 8009746:	d006      	beq.n	8009756 <I2C_MasterRequestRead+0x3a>
 8009748:	697b      	ldr	r3, [r7, #20]
 800974a:	2b01      	cmp	r3, #1
 800974c:	d003      	beq.n	8009756 <I2C_MasterRequestRead+0x3a>
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009754:	d108      	bne.n	8009768 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	681a      	ldr	r2, [r3, #0]
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009764:	601a      	str	r2, [r3, #0]
 8009766:	e00b      	b.n	8009780 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800976c:	2b11      	cmp	r3, #17
 800976e:	d107      	bne.n	8009780 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	681a      	ldr	r2, [r3, #0]
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800977e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	9300      	str	r3, [sp, #0]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2200      	movs	r2, #0
 8009788:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800978c:	68f8      	ldr	r0, [r7, #12]
 800978e:	f000 f893 	bl	80098b8 <I2C_WaitOnFlagUntilTimeout>
 8009792:	4603      	mov	r3, r0
 8009794:	2b00      	cmp	r3, #0
 8009796:	d00d      	beq.n	80097b4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80097a6:	d103      	bne.n	80097b0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80097ae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80097b0:	2303      	movs	r3, #3
 80097b2:	e079      	b.n	80098a8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	691b      	ldr	r3, [r3, #16]
 80097b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80097bc:	d108      	bne.n	80097d0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80097be:	897b      	ldrh	r3, [r7, #10]
 80097c0:	b2db      	uxtb	r3, r3
 80097c2:	f043 0301 	orr.w	r3, r3, #1
 80097c6:	b2da      	uxtb	r2, r3
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	611a      	str	r2, [r3, #16]
 80097ce:	e05f      	b.n	8009890 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80097d0:	897b      	ldrh	r3, [r7, #10]
 80097d2:	11db      	asrs	r3, r3, #7
 80097d4:	b2db      	uxtb	r3, r3
 80097d6:	f003 0306 	and.w	r3, r3, #6
 80097da:	b2db      	uxtb	r3, r3
 80097dc:	f063 030f 	orn	r3, r3, #15
 80097e0:	b2da      	uxtb	r2, r3
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	687a      	ldr	r2, [r7, #4]
 80097ec:	4930      	ldr	r1, [pc, #192]	@ (80098b0 <I2C_MasterRequestRead+0x194>)
 80097ee:	68f8      	ldr	r0, [r7, #12]
 80097f0:	f000 f8dc 	bl	80099ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80097f4:	4603      	mov	r3, r0
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d001      	beq.n	80097fe <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80097fa:	2301      	movs	r3, #1
 80097fc:	e054      	b.n	80098a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80097fe:	897b      	ldrh	r3, [r7, #10]
 8009800:	b2da      	uxtb	r2, r3
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	687a      	ldr	r2, [r7, #4]
 800980c:	4929      	ldr	r1, [pc, #164]	@ (80098b4 <I2C_MasterRequestRead+0x198>)
 800980e:	68f8      	ldr	r0, [r7, #12]
 8009810:	f000 f8cc 	bl	80099ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009814:	4603      	mov	r3, r0
 8009816:	2b00      	cmp	r3, #0
 8009818:	d001      	beq.n	800981e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800981a:	2301      	movs	r3, #1
 800981c:	e044      	b.n	80098a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800981e:	2300      	movs	r3, #0
 8009820:	613b      	str	r3, [r7, #16]
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	695b      	ldr	r3, [r3, #20]
 8009828:	613b      	str	r3, [r7, #16]
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	699b      	ldr	r3, [r3, #24]
 8009830:	613b      	str	r3, [r7, #16]
 8009832:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	681a      	ldr	r2, [r3, #0]
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009842:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	9300      	str	r3, [sp, #0]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2200      	movs	r2, #0
 800984c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009850:	68f8      	ldr	r0, [r7, #12]
 8009852:	f000 f831 	bl	80098b8 <I2C_WaitOnFlagUntilTimeout>
 8009856:	4603      	mov	r3, r0
 8009858:	2b00      	cmp	r3, #0
 800985a:	d00d      	beq.n	8009878 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009866:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800986a:	d103      	bne.n	8009874 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009872:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8009874:	2303      	movs	r3, #3
 8009876:	e017      	b.n	80098a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8009878:	897b      	ldrh	r3, [r7, #10]
 800987a:	11db      	asrs	r3, r3, #7
 800987c:	b2db      	uxtb	r3, r3
 800987e:	f003 0306 	and.w	r3, r3, #6
 8009882:	b2db      	uxtb	r3, r3
 8009884:	f063 030e 	orn	r3, r3, #14
 8009888:	b2da      	uxtb	r2, r3
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	687a      	ldr	r2, [r7, #4]
 8009894:	4907      	ldr	r1, [pc, #28]	@ (80098b4 <I2C_MasterRequestRead+0x198>)
 8009896:	68f8      	ldr	r0, [r7, #12]
 8009898:	f000 f888 	bl	80099ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800989c:	4603      	mov	r3, r0
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d001      	beq.n	80098a6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80098a2:	2301      	movs	r3, #1
 80098a4:	e000      	b.n	80098a8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80098a6:	2300      	movs	r3, #0
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	3718      	adds	r7, #24
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}
 80098b0:	00010008 	.word	0x00010008
 80098b4:	00010002 	.word	0x00010002

080098b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b084      	sub	sp, #16
 80098bc:	af00      	add	r7, sp, #0
 80098be:	60f8      	str	r0, [r7, #12]
 80098c0:	60b9      	str	r1, [r7, #8]
 80098c2:	603b      	str	r3, [r7, #0]
 80098c4:	4613      	mov	r3, r2
 80098c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80098c8:	e048      	b.n	800995c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098d0:	d044      	beq.n	800995c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098d2:	f7fd fbcb 	bl	800706c <HAL_GetTick>
 80098d6:	4602      	mov	r2, r0
 80098d8:	69bb      	ldr	r3, [r7, #24]
 80098da:	1ad3      	subs	r3, r2, r3
 80098dc:	683a      	ldr	r2, [r7, #0]
 80098de:	429a      	cmp	r2, r3
 80098e0:	d302      	bcc.n	80098e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d139      	bne.n	800995c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	0c1b      	lsrs	r3, r3, #16
 80098ec:	b2db      	uxtb	r3, r3
 80098ee:	2b01      	cmp	r3, #1
 80098f0:	d10d      	bne.n	800990e <I2C_WaitOnFlagUntilTimeout+0x56>
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	695b      	ldr	r3, [r3, #20]
 80098f8:	43da      	mvns	r2, r3
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	4013      	ands	r3, r2
 80098fe:	b29b      	uxth	r3, r3
 8009900:	2b00      	cmp	r3, #0
 8009902:	bf0c      	ite	eq
 8009904:	2301      	moveq	r3, #1
 8009906:	2300      	movne	r3, #0
 8009908:	b2db      	uxtb	r3, r3
 800990a:	461a      	mov	r2, r3
 800990c:	e00c      	b.n	8009928 <I2C_WaitOnFlagUntilTimeout+0x70>
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	699b      	ldr	r3, [r3, #24]
 8009914:	43da      	mvns	r2, r3
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	4013      	ands	r3, r2
 800991a:	b29b      	uxth	r3, r3
 800991c:	2b00      	cmp	r3, #0
 800991e:	bf0c      	ite	eq
 8009920:	2301      	moveq	r3, #1
 8009922:	2300      	movne	r3, #0
 8009924:	b2db      	uxtb	r3, r3
 8009926:	461a      	mov	r2, r3
 8009928:	79fb      	ldrb	r3, [r7, #7]
 800992a:	429a      	cmp	r2, r3
 800992c:	d116      	bne.n	800995c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	2200      	movs	r2, #0
 8009932:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	2220      	movs	r2, #32
 8009938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	2200      	movs	r2, #0
 8009940:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009948:	f043 0220 	orr.w	r2, r3, #32
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	2200      	movs	r2, #0
 8009954:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009958:	2301      	movs	r3, #1
 800995a:	e023      	b.n	80099a4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	0c1b      	lsrs	r3, r3, #16
 8009960:	b2db      	uxtb	r3, r3
 8009962:	2b01      	cmp	r3, #1
 8009964:	d10d      	bne.n	8009982 <I2C_WaitOnFlagUntilTimeout+0xca>
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	695b      	ldr	r3, [r3, #20]
 800996c:	43da      	mvns	r2, r3
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	4013      	ands	r3, r2
 8009972:	b29b      	uxth	r3, r3
 8009974:	2b00      	cmp	r3, #0
 8009976:	bf0c      	ite	eq
 8009978:	2301      	moveq	r3, #1
 800997a:	2300      	movne	r3, #0
 800997c:	b2db      	uxtb	r3, r3
 800997e:	461a      	mov	r2, r3
 8009980:	e00c      	b.n	800999c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	699b      	ldr	r3, [r3, #24]
 8009988:	43da      	mvns	r2, r3
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	4013      	ands	r3, r2
 800998e:	b29b      	uxth	r3, r3
 8009990:	2b00      	cmp	r3, #0
 8009992:	bf0c      	ite	eq
 8009994:	2301      	moveq	r3, #1
 8009996:	2300      	movne	r3, #0
 8009998:	b2db      	uxtb	r3, r3
 800999a:	461a      	mov	r2, r3
 800999c:	79fb      	ldrb	r3, [r7, #7]
 800999e:	429a      	cmp	r2, r3
 80099a0:	d093      	beq.n	80098ca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80099a2:	2300      	movs	r3, #0
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3710      	adds	r7, #16
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}

080099ac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b084      	sub	sp, #16
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	60f8      	str	r0, [r7, #12]
 80099b4:	60b9      	str	r1, [r7, #8]
 80099b6:	607a      	str	r2, [r7, #4]
 80099b8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80099ba:	e071      	b.n	8009aa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	695b      	ldr	r3, [r3, #20]
 80099c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80099c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80099ca:	d123      	bne.n	8009a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	681a      	ldr	r2, [r3, #0]
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80099da:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80099e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	2200      	movs	r2, #0
 80099ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	2220      	movs	r2, #32
 80099f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2200      	movs	r2, #0
 80099f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a00:	f043 0204 	orr.w	r2, r3, #4
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009a10:	2301      	movs	r3, #1
 8009a12:	e067      	b.n	8009ae4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a1a:	d041      	beq.n	8009aa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a1c:	f7fd fb26 	bl	800706c <HAL_GetTick>
 8009a20:	4602      	mov	r2, r0
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	1ad3      	subs	r3, r2, r3
 8009a26:	687a      	ldr	r2, [r7, #4]
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d302      	bcc.n	8009a32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d136      	bne.n	8009aa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	0c1b      	lsrs	r3, r3, #16
 8009a36:	b2db      	uxtb	r3, r3
 8009a38:	2b01      	cmp	r3, #1
 8009a3a:	d10c      	bne.n	8009a56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	695b      	ldr	r3, [r3, #20]
 8009a42:	43da      	mvns	r2, r3
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	4013      	ands	r3, r2
 8009a48:	b29b      	uxth	r3, r3
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	bf14      	ite	ne
 8009a4e:	2301      	movne	r3, #1
 8009a50:	2300      	moveq	r3, #0
 8009a52:	b2db      	uxtb	r3, r3
 8009a54:	e00b      	b.n	8009a6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	699b      	ldr	r3, [r3, #24]
 8009a5c:	43da      	mvns	r2, r3
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	4013      	ands	r3, r2
 8009a62:	b29b      	uxth	r3, r3
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	bf14      	ite	ne
 8009a68:	2301      	movne	r3, #1
 8009a6a:	2300      	moveq	r3, #0
 8009a6c:	b2db      	uxtb	r3, r3
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d016      	beq.n	8009aa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	2200      	movs	r2, #0
 8009a76:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	2220      	movs	r2, #32
 8009a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	2200      	movs	r2, #0
 8009a84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a8c:	f043 0220 	orr.w	r2, r3, #32
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	2200      	movs	r2, #0
 8009a98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	e021      	b.n	8009ae4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	0c1b      	lsrs	r3, r3, #16
 8009aa4:	b2db      	uxtb	r3, r3
 8009aa6:	2b01      	cmp	r3, #1
 8009aa8:	d10c      	bne.n	8009ac4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	695b      	ldr	r3, [r3, #20]
 8009ab0:	43da      	mvns	r2, r3
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	4013      	ands	r3, r2
 8009ab6:	b29b      	uxth	r3, r3
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	bf14      	ite	ne
 8009abc:	2301      	movne	r3, #1
 8009abe:	2300      	moveq	r3, #0
 8009ac0:	b2db      	uxtb	r3, r3
 8009ac2:	e00b      	b.n	8009adc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	699b      	ldr	r3, [r3, #24]
 8009aca:	43da      	mvns	r2, r3
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	4013      	ands	r3, r2
 8009ad0:	b29b      	uxth	r3, r3
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	bf14      	ite	ne
 8009ad6:	2301      	movne	r3, #1
 8009ad8:	2300      	moveq	r3, #0
 8009ada:	b2db      	uxtb	r3, r3
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	f47f af6d 	bne.w	80099bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8009ae2:	2300      	movs	r3, #0
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3710      	adds	r7, #16
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b084      	sub	sp, #16
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	60f8      	str	r0, [r7, #12]
 8009af4:	60b9      	str	r1, [r7, #8]
 8009af6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009af8:	e034      	b.n	8009b64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009afa:	68f8      	ldr	r0, [r7, #12]
 8009afc:	f000 f8e3 	bl	8009cc6 <I2C_IsAcknowledgeFailed>
 8009b00:	4603      	mov	r3, r0
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d001      	beq.n	8009b0a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009b06:	2301      	movs	r3, #1
 8009b08:	e034      	b.n	8009b74 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b10:	d028      	beq.n	8009b64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b12:	f7fd faab 	bl	800706c <HAL_GetTick>
 8009b16:	4602      	mov	r2, r0
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	1ad3      	subs	r3, r2, r3
 8009b1c:	68ba      	ldr	r2, [r7, #8]
 8009b1e:	429a      	cmp	r2, r3
 8009b20:	d302      	bcc.n	8009b28 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d11d      	bne.n	8009b64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	695b      	ldr	r3, [r3, #20]
 8009b2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b32:	2b80      	cmp	r3, #128	@ 0x80
 8009b34:	d016      	beq.n	8009b64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	2220      	movs	r2, #32
 8009b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	2200      	movs	r2, #0
 8009b48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b50:	f043 0220 	orr.w	r2, r3, #32
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009b60:	2301      	movs	r3, #1
 8009b62:	e007      	b.n	8009b74 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	695b      	ldr	r3, [r3, #20]
 8009b6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b6e:	2b80      	cmp	r3, #128	@ 0x80
 8009b70:	d1c3      	bne.n	8009afa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009b72:	2300      	movs	r3, #0
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	3710      	adds	r7, #16
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}

08009b7c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b084      	sub	sp, #16
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	60f8      	str	r0, [r7, #12]
 8009b84:	60b9      	str	r1, [r7, #8]
 8009b86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009b88:	e034      	b.n	8009bf4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009b8a:	68f8      	ldr	r0, [r7, #12]
 8009b8c:	f000 f89b 	bl	8009cc6 <I2C_IsAcknowledgeFailed>
 8009b90:	4603      	mov	r3, r0
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d001      	beq.n	8009b9a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009b96:	2301      	movs	r3, #1
 8009b98:	e034      	b.n	8009c04 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ba0:	d028      	beq.n	8009bf4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ba2:	f7fd fa63 	bl	800706c <HAL_GetTick>
 8009ba6:	4602      	mov	r2, r0
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	1ad3      	subs	r3, r2, r3
 8009bac:	68ba      	ldr	r2, [r7, #8]
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d302      	bcc.n	8009bb8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d11d      	bne.n	8009bf4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	695b      	ldr	r3, [r3, #20]
 8009bbe:	f003 0304 	and.w	r3, r3, #4
 8009bc2:	2b04      	cmp	r3, #4
 8009bc4:	d016      	beq.n	8009bf4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	2220      	movs	r2, #32
 8009bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009be0:	f043 0220 	orr.w	r2, r3, #32
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	2200      	movs	r2, #0
 8009bec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	e007      	b.n	8009c04 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	695b      	ldr	r3, [r3, #20]
 8009bfa:	f003 0304 	and.w	r3, r3, #4
 8009bfe:	2b04      	cmp	r3, #4
 8009c00:	d1c3      	bne.n	8009b8a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009c02:	2300      	movs	r3, #0
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	3710      	adds	r7, #16
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}

08009c0c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b084      	sub	sp, #16
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	60f8      	str	r0, [r7, #12]
 8009c14:	60b9      	str	r1, [r7, #8]
 8009c16:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009c18:	e049      	b.n	8009cae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	695b      	ldr	r3, [r3, #20]
 8009c20:	f003 0310 	and.w	r3, r3, #16
 8009c24:	2b10      	cmp	r3, #16
 8009c26:	d119      	bne.n	8009c5c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f06f 0210 	mvn.w	r2, #16
 8009c30:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	2200      	movs	r2, #0
 8009c36:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	2220      	movs	r2, #32
 8009c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	2200      	movs	r2, #0
 8009c44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	2200      	movs	r2, #0
 8009c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009c58:	2301      	movs	r3, #1
 8009c5a:	e030      	b.n	8009cbe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c5c:	f7fd fa06 	bl	800706c <HAL_GetTick>
 8009c60:	4602      	mov	r2, r0
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	1ad3      	subs	r3, r2, r3
 8009c66:	68ba      	ldr	r2, [r7, #8]
 8009c68:	429a      	cmp	r2, r3
 8009c6a:	d302      	bcc.n	8009c72 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d11d      	bne.n	8009cae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	695b      	ldr	r3, [r3, #20]
 8009c78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c7c:	2b40      	cmp	r3, #64	@ 0x40
 8009c7e:	d016      	beq.n	8009cae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	2200      	movs	r2, #0
 8009c84:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	2220      	movs	r2, #32
 8009c8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	2200      	movs	r2, #0
 8009c92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c9a:	f043 0220 	orr.w	r2, r3, #32
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8009caa:	2301      	movs	r3, #1
 8009cac:	e007      	b.n	8009cbe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	695b      	ldr	r3, [r3, #20]
 8009cb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cb8:	2b40      	cmp	r3, #64	@ 0x40
 8009cba:	d1ae      	bne.n	8009c1a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009cbc:	2300      	movs	r3, #0
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3710      	adds	r7, #16
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}

08009cc6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009cc6:	b480      	push	{r7}
 8009cc8:	b083      	sub	sp, #12
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	695b      	ldr	r3, [r3, #20]
 8009cd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009cd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009cdc:	d11b      	bne.n	8009d16 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009ce6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2200      	movs	r2, #0
 8009cec:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2220      	movs	r2, #32
 8009cf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d02:	f043 0204 	orr.w	r2, r3, #4
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8009d12:	2301      	movs	r3, #1
 8009d14:	e000      	b.n	8009d18 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009d16:	2300      	movs	r3, #0
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	370c      	adds	r7, #12
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d22:	4770      	bx	lr

08009d24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b086      	sub	sp, #24
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d101      	bne.n	8009d36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009d32:	2301      	movs	r3, #1
 8009d34:	e267      	b.n	800a206 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f003 0301 	and.w	r3, r3, #1
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d075      	beq.n	8009e2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8009d42:	4b88      	ldr	r3, [pc, #544]	@ (8009f64 <HAL_RCC_OscConfig+0x240>)
 8009d44:	689b      	ldr	r3, [r3, #8]
 8009d46:	f003 030c 	and.w	r3, r3, #12
 8009d4a:	2b04      	cmp	r3, #4
 8009d4c:	d00c      	beq.n	8009d68 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009d4e:	4b85      	ldr	r3, [pc, #532]	@ (8009f64 <HAL_RCC_OscConfig+0x240>)
 8009d50:	689b      	ldr	r3, [r3, #8]
 8009d52:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8009d56:	2b08      	cmp	r3, #8
 8009d58:	d112      	bne.n	8009d80 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009d5a:	4b82      	ldr	r3, [pc, #520]	@ (8009f64 <HAL_RCC_OscConfig+0x240>)
 8009d5c:	685b      	ldr	r3, [r3, #4]
 8009d5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009d62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009d66:	d10b      	bne.n	8009d80 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009d68:	4b7e      	ldr	r3, [pc, #504]	@ (8009f64 <HAL_RCC_OscConfig+0x240>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d05b      	beq.n	8009e2c <HAL_RCC_OscConfig+0x108>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	685b      	ldr	r3, [r3, #4]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d157      	bne.n	8009e2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	e242      	b.n	800a206 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	685b      	ldr	r3, [r3, #4]
 8009d84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d88:	d106      	bne.n	8009d98 <HAL_RCC_OscConfig+0x74>
 8009d8a:	4b76      	ldr	r3, [pc, #472]	@ (8009f64 <HAL_RCC_OscConfig+0x240>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	4a75      	ldr	r2, [pc, #468]	@ (8009f64 <HAL_RCC_OscConfig+0x240>)
 8009d90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009d94:	6013      	str	r3, [r2, #0]
 8009d96:	e01d      	b.n	8009dd4 <HAL_RCC_OscConfig+0xb0>
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	685b      	ldr	r3, [r3, #4]
 8009d9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009da0:	d10c      	bne.n	8009dbc <HAL_RCC_OscConfig+0x98>
 8009da2:	4b70      	ldr	r3, [pc, #448]	@ (8009f64 <HAL_RCC_OscConfig+0x240>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	4a6f      	ldr	r2, [pc, #444]	@ (8009f64 <HAL_RCC_OscConfig+0x240>)
 8009da8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009dac:	6013      	str	r3, [r2, #0]
 8009dae:	4b6d      	ldr	r3, [pc, #436]	@ (8009f64 <HAL_RCC_OscConfig+0x240>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	4a6c      	ldr	r2, [pc, #432]	@ (8009f64 <HAL_RCC_OscConfig+0x240>)
 8009db4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009db8:	6013      	str	r3, [r2, #0]
 8009dba:	e00b      	b.n	8009dd4 <HAL_RCC_OscConfig+0xb0>
 8009dbc:	4b69      	ldr	r3, [pc, #420]	@ (8009f64 <HAL_RCC_OscConfig+0x240>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4a68      	ldr	r2, [pc, #416]	@ (8009f64 <HAL_RCC_OscConfig+0x240>)
 8009dc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009dc6:	6013      	str	r3, [r2, #0]
 8009dc8:	4b66      	ldr	r3, [pc, #408]	@ (8009f64 <HAL_RCC_OscConfig+0x240>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	4a65      	ldr	r2, [pc, #404]	@ (8009f64 <HAL_RCC_OscConfig+0x240>)
 8009dce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009dd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	685b      	ldr	r3, [r3, #4]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d013      	beq.n	8009e04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ddc:	f7fd f946 	bl	800706c <HAL_GetTick>
 8009de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009de2:	e008      	b.n	8009df6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009de4:	f7fd f942 	bl	800706c <HAL_GetTick>
 8009de8:	4602      	mov	r2, r0
 8009dea:	693b      	ldr	r3, [r7, #16]
 8009dec:	1ad3      	subs	r3, r2, r3
 8009dee:	2b64      	cmp	r3, #100	@ 0x64
 8009df0:	d901      	bls.n	8009df6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009df2:	2303      	movs	r3, #3
 8009df4:	e207      	b.n	800a206 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009df6:	4b5b      	ldr	r3, [pc, #364]	@ (8009f64 <HAL_RCC_OscConfig+0x240>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d0f0      	beq.n	8009de4 <HAL_RCC_OscConfig+0xc0>
 8009e02:	e014      	b.n	8009e2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e04:	f7fd f932 	bl	800706c <HAL_GetTick>
 8009e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009e0a:	e008      	b.n	8009e1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009e0c:	f7fd f92e 	bl	800706c <HAL_GetTick>
 8009e10:	4602      	mov	r2, r0
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	1ad3      	subs	r3, r2, r3
 8009e16:	2b64      	cmp	r3, #100	@ 0x64
 8009e18:	d901      	bls.n	8009e1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009e1a:	2303      	movs	r3, #3
 8009e1c:	e1f3      	b.n	800a206 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009e1e:	4b51      	ldr	r3, [pc, #324]	@ (8009f64 <HAL_RCC_OscConfig+0x240>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d1f0      	bne.n	8009e0c <HAL_RCC_OscConfig+0xe8>
 8009e2a:	e000      	b.n	8009e2e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009e2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f003 0302 	and.w	r3, r3, #2
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d063      	beq.n	8009f02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8009e3a:	4b4a      	ldr	r3, [pc, #296]	@ (8009f64 <HAL_RCC_OscConfig+0x240>)
 8009e3c:	689b      	ldr	r3, [r3, #8]
 8009e3e:	f003 030c 	and.w	r3, r3, #12
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d00b      	beq.n	8009e5e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009e46:	4b47      	ldr	r3, [pc, #284]	@ (8009f64 <HAL_RCC_OscConfig+0x240>)
 8009e48:	689b      	ldr	r3, [r3, #8]
 8009e4a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8009e4e:	2b08      	cmp	r3, #8
 8009e50:	d11c      	bne.n	8009e8c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009e52:	4b44      	ldr	r3, [pc, #272]	@ (8009f64 <HAL_RCC_OscConfig+0x240>)
 8009e54:	685b      	ldr	r3, [r3, #4]
 8009e56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d116      	bne.n	8009e8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009e5e:	4b41      	ldr	r3, [pc, #260]	@ (8009f64 <HAL_RCC_OscConfig+0x240>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f003 0302 	and.w	r3, r3, #2
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d005      	beq.n	8009e76 <HAL_RCC_OscConfig+0x152>
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	68db      	ldr	r3, [r3, #12]
 8009e6e:	2b01      	cmp	r3, #1
 8009e70:	d001      	beq.n	8009e76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009e72:	2301      	movs	r3, #1
 8009e74:	e1c7      	b.n	800a206 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009e76:	4b3b      	ldr	r3, [pc, #236]	@ (8009f64 <HAL_RCC_OscConfig+0x240>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	691b      	ldr	r3, [r3, #16]
 8009e82:	00db      	lsls	r3, r3, #3
 8009e84:	4937      	ldr	r1, [pc, #220]	@ (8009f64 <HAL_RCC_OscConfig+0x240>)
 8009e86:	4313      	orrs	r3, r2
 8009e88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009e8a:	e03a      	b.n	8009f02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	68db      	ldr	r3, [r3, #12]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d020      	beq.n	8009ed6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009e94:	4b34      	ldr	r3, [pc, #208]	@ (8009f68 <HAL_RCC_OscConfig+0x244>)
 8009e96:	2201      	movs	r2, #1
 8009e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e9a:	f7fd f8e7 	bl	800706c <HAL_GetTick>
 8009e9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009ea0:	e008      	b.n	8009eb4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009ea2:	f7fd f8e3 	bl	800706c <HAL_GetTick>
 8009ea6:	4602      	mov	r2, r0
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	1ad3      	subs	r3, r2, r3
 8009eac:	2b02      	cmp	r3, #2
 8009eae:	d901      	bls.n	8009eb4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009eb0:	2303      	movs	r3, #3
 8009eb2:	e1a8      	b.n	800a206 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009eb4:	4b2b      	ldr	r3, [pc, #172]	@ (8009f64 <HAL_RCC_OscConfig+0x240>)
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f003 0302 	and.w	r3, r3, #2
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d0f0      	beq.n	8009ea2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009ec0:	4b28      	ldr	r3, [pc, #160]	@ (8009f64 <HAL_RCC_OscConfig+0x240>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	691b      	ldr	r3, [r3, #16]
 8009ecc:	00db      	lsls	r3, r3, #3
 8009ece:	4925      	ldr	r1, [pc, #148]	@ (8009f64 <HAL_RCC_OscConfig+0x240>)
 8009ed0:	4313      	orrs	r3, r2
 8009ed2:	600b      	str	r3, [r1, #0]
 8009ed4:	e015      	b.n	8009f02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009ed6:	4b24      	ldr	r3, [pc, #144]	@ (8009f68 <HAL_RCC_OscConfig+0x244>)
 8009ed8:	2200      	movs	r2, #0
 8009eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009edc:	f7fd f8c6 	bl	800706c <HAL_GetTick>
 8009ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009ee2:	e008      	b.n	8009ef6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009ee4:	f7fd f8c2 	bl	800706c <HAL_GetTick>
 8009ee8:	4602      	mov	r2, r0
 8009eea:	693b      	ldr	r3, [r7, #16]
 8009eec:	1ad3      	subs	r3, r2, r3
 8009eee:	2b02      	cmp	r3, #2
 8009ef0:	d901      	bls.n	8009ef6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009ef2:	2303      	movs	r3, #3
 8009ef4:	e187      	b.n	800a206 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009ef6:	4b1b      	ldr	r3, [pc, #108]	@ (8009f64 <HAL_RCC_OscConfig+0x240>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f003 0302 	and.w	r3, r3, #2
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d1f0      	bne.n	8009ee4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f003 0308 	and.w	r3, r3, #8
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d036      	beq.n	8009f7c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	695b      	ldr	r3, [r3, #20]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d016      	beq.n	8009f44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009f16:	4b15      	ldr	r3, [pc, #84]	@ (8009f6c <HAL_RCC_OscConfig+0x248>)
 8009f18:	2201      	movs	r2, #1
 8009f1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f1c:	f7fd f8a6 	bl	800706c <HAL_GetTick>
 8009f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009f22:	e008      	b.n	8009f36 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009f24:	f7fd f8a2 	bl	800706c <HAL_GetTick>
 8009f28:	4602      	mov	r2, r0
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	1ad3      	subs	r3, r2, r3
 8009f2e:	2b02      	cmp	r3, #2
 8009f30:	d901      	bls.n	8009f36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009f32:	2303      	movs	r3, #3
 8009f34:	e167      	b.n	800a206 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009f36:	4b0b      	ldr	r3, [pc, #44]	@ (8009f64 <HAL_RCC_OscConfig+0x240>)
 8009f38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009f3a:	f003 0302 	and.w	r3, r3, #2
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d0f0      	beq.n	8009f24 <HAL_RCC_OscConfig+0x200>
 8009f42:	e01b      	b.n	8009f7c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009f44:	4b09      	ldr	r3, [pc, #36]	@ (8009f6c <HAL_RCC_OscConfig+0x248>)
 8009f46:	2200      	movs	r2, #0
 8009f48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009f4a:	f7fd f88f 	bl	800706c <HAL_GetTick>
 8009f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009f50:	e00e      	b.n	8009f70 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009f52:	f7fd f88b 	bl	800706c <HAL_GetTick>
 8009f56:	4602      	mov	r2, r0
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	1ad3      	subs	r3, r2, r3
 8009f5c:	2b02      	cmp	r3, #2
 8009f5e:	d907      	bls.n	8009f70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009f60:	2303      	movs	r3, #3
 8009f62:	e150      	b.n	800a206 <HAL_RCC_OscConfig+0x4e2>
 8009f64:	40023800 	.word	0x40023800
 8009f68:	42470000 	.word	0x42470000
 8009f6c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009f70:	4b88      	ldr	r3, [pc, #544]	@ (800a194 <HAL_RCC_OscConfig+0x470>)
 8009f72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009f74:	f003 0302 	and.w	r3, r3, #2
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d1ea      	bne.n	8009f52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f003 0304 	and.w	r3, r3, #4
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	f000 8097 	beq.w	800a0b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009f8e:	4b81      	ldr	r3, [pc, #516]	@ (800a194 <HAL_RCC_OscConfig+0x470>)
 8009f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d10f      	bne.n	8009fba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	60bb      	str	r3, [r7, #8]
 8009f9e:	4b7d      	ldr	r3, [pc, #500]	@ (800a194 <HAL_RCC_OscConfig+0x470>)
 8009fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fa2:	4a7c      	ldr	r2, [pc, #496]	@ (800a194 <HAL_RCC_OscConfig+0x470>)
 8009fa4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009fa8:	6413      	str	r3, [r2, #64]	@ 0x40
 8009faa:	4b7a      	ldr	r3, [pc, #488]	@ (800a194 <HAL_RCC_OscConfig+0x470>)
 8009fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009fb2:	60bb      	str	r3, [r7, #8]
 8009fb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009fba:	4b77      	ldr	r3, [pc, #476]	@ (800a198 <HAL_RCC_OscConfig+0x474>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d118      	bne.n	8009ff8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009fc6:	4b74      	ldr	r3, [pc, #464]	@ (800a198 <HAL_RCC_OscConfig+0x474>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	4a73      	ldr	r2, [pc, #460]	@ (800a198 <HAL_RCC_OscConfig+0x474>)
 8009fcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009fd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009fd2:	f7fd f84b 	bl	800706c <HAL_GetTick>
 8009fd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009fd8:	e008      	b.n	8009fec <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009fda:	f7fd f847 	bl	800706c <HAL_GetTick>
 8009fde:	4602      	mov	r2, r0
 8009fe0:	693b      	ldr	r3, [r7, #16]
 8009fe2:	1ad3      	subs	r3, r2, r3
 8009fe4:	2b02      	cmp	r3, #2
 8009fe6:	d901      	bls.n	8009fec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009fe8:	2303      	movs	r3, #3
 8009fea:	e10c      	b.n	800a206 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009fec:	4b6a      	ldr	r3, [pc, #424]	@ (800a198 <HAL_RCC_OscConfig+0x474>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d0f0      	beq.n	8009fda <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	689b      	ldr	r3, [r3, #8]
 8009ffc:	2b01      	cmp	r3, #1
 8009ffe:	d106      	bne.n	800a00e <HAL_RCC_OscConfig+0x2ea>
 800a000:	4b64      	ldr	r3, [pc, #400]	@ (800a194 <HAL_RCC_OscConfig+0x470>)
 800a002:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a004:	4a63      	ldr	r2, [pc, #396]	@ (800a194 <HAL_RCC_OscConfig+0x470>)
 800a006:	f043 0301 	orr.w	r3, r3, #1
 800a00a:	6713      	str	r3, [r2, #112]	@ 0x70
 800a00c:	e01c      	b.n	800a048 <HAL_RCC_OscConfig+0x324>
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	689b      	ldr	r3, [r3, #8]
 800a012:	2b05      	cmp	r3, #5
 800a014:	d10c      	bne.n	800a030 <HAL_RCC_OscConfig+0x30c>
 800a016:	4b5f      	ldr	r3, [pc, #380]	@ (800a194 <HAL_RCC_OscConfig+0x470>)
 800a018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a01a:	4a5e      	ldr	r2, [pc, #376]	@ (800a194 <HAL_RCC_OscConfig+0x470>)
 800a01c:	f043 0304 	orr.w	r3, r3, #4
 800a020:	6713      	str	r3, [r2, #112]	@ 0x70
 800a022:	4b5c      	ldr	r3, [pc, #368]	@ (800a194 <HAL_RCC_OscConfig+0x470>)
 800a024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a026:	4a5b      	ldr	r2, [pc, #364]	@ (800a194 <HAL_RCC_OscConfig+0x470>)
 800a028:	f043 0301 	orr.w	r3, r3, #1
 800a02c:	6713      	str	r3, [r2, #112]	@ 0x70
 800a02e:	e00b      	b.n	800a048 <HAL_RCC_OscConfig+0x324>
 800a030:	4b58      	ldr	r3, [pc, #352]	@ (800a194 <HAL_RCC_OscConfig+0x470>)
 800a032:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a034:	4a57      	ldr	r2, [pc, #348]	@ (800a194 <HAL_RCC_OscConfig+0x470>)
 800a036:	f023 0301 	bic.w	r3, r3, #1
 800a03a:	6713      	str	r3, [r2, #112]	@ 0x70
 800a03c:	4b55      	ldr	r3, [pc, #340]	@ (800a194 <HAL_RCC_OscConfig+0x470>)
 800a03e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a040:	4a54      	ldr	r2, [pc, #336]	@ (800a194 <HAL_RCC_OscConfig+0x470>)
 800a042:	f023 0304 	bic.w	r3, r3, #4
 800a046:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	689b      	ldr	r3, [r3, #8]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d015      	beq.n	800a07c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a050:	f7fd f80c 	bl	800706c <HAL_GetTick>
 800a054:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a056:	e00a      	b.n	800a06e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a058:	f7fd f808 	bl	800706c <HAL_GetTick>
 800a05c:	4602      	mov	r2, r0
 800a05e:	693b      	ldr	r3, [r7, #16]
 800a060:	1ad3      	subs	r3, r2, r3
 800a062:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a066:	4293      	cmp	r3, r2
 800a068:	d901      	bls.n	800a06e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800a06a:	2303      	movs	r3, #3
 800a06c:	e0cb      	b.n	800a206 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a06e:	4b49      	ldr	r3, [pc, #292]	@ (800a194 <HAL_RCC_OscConfig+0x470>)
 800a070:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a072:	f003 0302 	and.w	r3, r3, #2
 800a076:	2b00      	cmp	r3, #0
 800a078:	d0ee      	beq.n	800a058 <HAL_RCC_OscConfig+0x334>
 800a07a:	e014      	b.n	800a0a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a07c:	f7fc fff6 	bl	800706c <HAL_GetTick>
 800a080:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a082:	e00a      	b.n	800a09a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a084:	f7fc fff2 	bl	800706c <HAL_GetTick>
 800a088:	4602      	mov	r2, r0
 800a08a:	693b      	ldr	r3, [r7, #16]
 800a08c:	1ad3      	subs	r3, r2, r3
 800a08e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a092:	4293      	cmp	r3, r2
 800a094:	d901      	bls.n	800a09a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800a096:	2303      	movs	r3, #3
 800a098:	e0b5      	b.n	800a206 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a09a:	4b3e      	ldr	r3, [pc, #248]	@ (800a194 <HAL_RCC_OscConfig+0x470>)
 800a09c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a09e:	f003 0302 	and.w	r3, r3, #2
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d1ee      	bne.n	800a084 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a0a6:	7dfb      	ldrb	r3, [r7, #23]
 800a0a8:	2b01      	cmp	r3, #1
 800a0aa:	d105      	bne.n	800a0b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a0ac:	4b39      	ldr	r3, [pc, #228]	@ (800a194 <HAL_RCC_OscConfig+0x470>)
 800a0ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0b0:	4a38      	ldr	r2, [pc, #224]	@ (800a194 <HAL_RCC_OscConfig+0x470>)
 800a0b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a0b6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	699b      	ldr	r3, [r3, #24]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	f000 80a1 	beq.w	800a204 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a0c2:	4b34      	ldr	r3, [pc, #208]	@ (800a194 <HAL_RCC_OscConfig+0x470>)
 800a0c4:	689b      	ldr	r3, [r3, #8]
 800a0c6:	f003 030c 	and.w	r3, r3, #12
 800a0ca:	2b08      	cmp	r3, #8
 800a0cc:	d05c      	beq.n	800a188 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	699b      	ldr	r3, [r3, #24]
 800a0d2:	2b02      	cmp	r3, #2
 800a0d4:	d141      	bne.n	800a15a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a0d6:	4b31      	ldr	r3, [pc, #196]	@ (800a19c <HAL_RCC_OscConfig+0x478>)
 800a0d8:	2200      	movs	r2, #0
 800a0da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a0dc:	f7fc ffc6 	bl	800706c <HAL_GetTick>
 800a0e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a0e2:	e008      	b.n	800a0f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a0e4:	f7fc ffc2 	bl	800706c <HAL_GetTick>
 800a0e8:	4602      	mov	r2, r0
 800a0ea:	693b      	ldr	r3, [r7, #16]
 800a0ec:	1ad3      	subs	r3, r2, r3
 800a0ee:	2b02      	cmp	r3, #2
 800a0f0:	d901      	bls.n	800a0f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800a0f2:	2303      	movs	r3, #3
 800a0f4:	e087      	b.n	800a206 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a0f6:	4b27      	ldr	r3, [pc, #156]	@ (800a194 <HAL_RCC_OscConfig+0x470>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d1f0      	bne.n	800a0e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	69da      	ldr	r2, [r3, #28]
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6a1b      	ldr	r3, [r3, #32]
 800a10a:	431a      	orrs	r2, r3
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a110:	019b      	lsls	r3, r3, #6
 800a112:	431a      	orrs	r2, r3
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a118:	085b      	lsrs	r3, r3, #1
 800a11a:	3b01      	subs	r3, #1
 800a11c:	041b      	lsls	r3, r3, #16
 800a11e:	431a      	orrs	r2, r3
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a124:	061b      	lsls	r3, r3, #24
 800a126:	491b      	ldr	r1, [pc, #108]	@ (800a194 <HAL_RCC_OscConfig+0x470>)
 800a128:	4313      	orrs	r3, r2
 800a12a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a12c:	4b1b      	ldr	r3, [pc, #108]	@ (800a19c <HAL_RCC_OscConfig+0x478>)
 800a12e:	2201      	movs	r2, #1
 800a130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a132:	f7fc ff9b 	bl	800706c <HAL_GetTick>
 800a136:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a138:	e008      	b.n	800a14c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a13a:	f7fc ff97 	bl	800706c <HAL_GetTick>
 800a13e:	4602      	mov	r2, r0
 800a140:	693b      	ldr	r3, [r7, #16]
 800a142:	1ad3      	subs	r3, r2, r3
 800a144:	2b02      	cmp	r3, #2
 800a146:	d901      	bls.n	800a14c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a148:	2303      	movs	r3, #3
 800a14a:	e05c      	b.n	800a206 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a14c:	4b11      	ldr	r3, [pc, #68]	@ (800a194 <HAL_RCC_OscConfig+0x470>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a154:	2b00      	cmp	r3, #0
 800a156:	d0f0      	beq.n	800a13a <HAL_RCC_OscConfig+0x416>
 800a158:	e054      	b.n	800a204 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a15a:	4b10      	ldr	r3, [pc, #64]	@ (800a19c <HAL_RCC_OscConfig+0x478>)
 800a15c:	2200      	movs	r2, #0
 800a15e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a160:	f7fc ff84 	bl	800706c <HAL_GetTick>
 800a164:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a166:	e008      	b.n	800a17a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a168:	f7fc ff80 	bl	800706c <HAL_GetTick>
 800a16c:	4602      	mov	r2, r0
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	1ad3      	subs	r3, r2, r3
 800a172:	2b02      	cmp	r3, #2
 800a174:	d901      	bls.n	800a17a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800a176:	2303      	movs	r3, #3
 800a178:	e045      	b.n	800a206 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a17a:	4b06      	ldr	r3, [pc, #24]	@ (800a194 <HAL_RCC_OscConfig+0x470>)
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a182:	2b00      	cmp	r3, #0
 800a184:	d1f0      	bne.n	800a168 <HAL_RCC_OscConfig+0x444>
 800a186:	e03d      	b.n	800a204 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	699b      	ldr	r3, [r3, #24]
 800a18c:	2b01      	cmp	r3, #1
 800a18e:	d107      	bne.n	800a1a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800a190:	2301      	movs	r3, #1
 800a192:	e038      	b.n	800a206 <HAL_RCC_OscConfig+0x4e2>
 800a194:	40023800 	.word	0x40023800
 800a198:	40007000 	.word	0x40007000
 800a19c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a1a0:	4b1b      	ldr	r3, [pc, #108]	@ (800a210 <HAL_RCC_OscConfig+0x4ec>)
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	699b      	ldr	r3, [r3, #24]
 800a1aa:	2b01      	cmp	r3, #1
 800a1ac:	d028      	beq.n	800a200 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	d121      	bne.n	800a200 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	d11a      	bne.n	800a200 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a1ca:	68fa      	ldr	r2, [r7, #12]
 800a1cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800a1d0:	4013      	ands	r3, r2
 800a1d2:	687a      	ldr	r2, [r7, #4]
 800a1d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a1d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	d111      	bne.n	800a200 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1e6:	085b      	lsrs	r3, r3, #1
 800a1e8:	3b01      	subs	r3, #1
 800a1ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a1ec:	429a      	cmp	r2, r3
 800a1ee:	d107      	bne.n	800a200 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	d001      	beq.n	800a204 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800a200:	2301      	movs	r3, #1
 800a202:	e000      	b.n	800a206 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800a204:	2300      	movs	r3, #0
}
 800a206:	4618      	mov	r0, r3
 800a208:	3718      	adds	r7, #24
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}
 800a20e:	bf00      	nop
 800a210:	40023800 	.word	0x40023800

0800a214 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b084      	sub	sp, #16
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
 800a21c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d101      	bne.n	800a228 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a224:	2301      	movs	r3, #1
 800a226:	e0cc      	b.n	800a3c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a228:	4b68      	ldr	r3, [pc, #416]	@ (800a3cc <HAL_RCC_ClockConfig+0x1b8>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f003 0307 	and.w	r3, r3, #7
 800a230:	683a      	ldr	r2, [r7, #0]
 800a232:	429a      	cmp	r2, r3
 800a234:	d90c      	bls.n	800a250 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a236:	4b65      	ldr	r3, [pc, #404]	@ (800a3cc <HAL_RCC_ClockConfig+0x1b8>)
 800a238:	683a      	ldr	r2, [r7, #0]
 800a23a:	b2d2      	uxtb	r2, r2
 800a23c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a23e:	4b63      	ldr	r3, [pc, #396]	@ (800a3cc <HAL_RCC_ClockConfig+0x1b8>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f003 0307 	and.w	r3, r3, #7
 800a246:	683a      	ldr	r2, [r7, #0]
 800a248:	429a      	cmp	r2, r3
 800a24a:	d001      	beq.n	800a250 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a24c:	2301      	movs	r3, #1
 800a24e:	e0b8      	b.n	800a3c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f003 0302 	and.w	r3, r3, #2
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d020      	beq.n	800a29e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f003 0304 	and.w	r3, r3, #4
 800a264:	2b00      	cmp	r3, #0
 800a266:	d005      	beq.n	800a274 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a268:	4b59      	ldr	r3, [pc, #356]	@ (800a3d0 <HAL_RCC_ClockConfig+0x1bc>)
 800a26a:	689b      	ldr	r3, [r3, #8]
 800a26c:	4a58      	ldr	r2, [pc, #352]	@ (800a3d0 <HAL_RCC_ClockConfig+0x1bc>)
 800a26e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800a272:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	f003 0308 	and.w	r3, r3, #8
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d005      	beq.n	800a28c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a280:	4b53      	ldr	r3, [pc, #332]	@ (800a3d0 <HAL_RCC_ClockConfig+0x1bc>)
 800a282:	689b      	ldr	r3, [r3, #8]
 800a284:	4a52      	ldr	r2, [pc, #328]	@ (800a3d0 <HAL_RCC_ClockConfig+0x1bc>)
 800a286:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800a28a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a28c:	4b50      	ldr	r3, [pc, #320]	@ (800a3d0 <HAL_RCC_ClockConfig+0x1bc>)
 800a28e:	689b      	ldr	r3, [r3, #8]
 800a290:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	689b      	ldr	r3, [r3, #8]
 800a298:	494d      	ldr	r1, [pc, #308]	@ (800a3d0 <HAL_RCC_ClockConfig+0x1bc>)
 800a29a:	4313      	orrs	r3, r2
 800a29c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f003 0301 	and.w	r3, r3, #1
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d044      	beq.n	800a334 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	685b      	ldr	r3, [r3, #4]
 800a2ae:	2b01      	cmp	r3, #1
 800a2b0:	d107      	bne.n	800a2c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a2b2:	4b47      	ldr	r3, [pc, #284]	@ (800a3d0 <HAL_RCC_ClockConfig+0x1bc>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d119      	bne.n	800a2f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a2be:	2301      	movs	r3, #1
 800a2c0:	e07f      	b.n	800a3c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	685b      	ldr	r3, [r3, #4]
 800a2c6:	2b02      	cmp	r3, #2
 800a2c8:	d003      	beq.n	800a2d2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a2ce:	2b03      	cmp	r3, #3
 800a2d0:	d107      	bne.n	800a2e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a2d2:	4b3f      	ldr	r3, [pc, #252]	@ (800a3d0 <HAL_RCC_ClockConfig+0x1bc>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d109      	bne.n	800a2f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a2de:	2301      	movs	r3, #1
 800a2e0:	e06f      	b.n	800a3c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a2e2:	4b3b      	ldr	r3, [pc, #236]	@ (800a3d0 <HAL_RCC_ClockConfig+0x1bc>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f003 0302 	and.w	r3, r3, #2
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d101      	bne.n	800a2f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	e067      	b.n	800a3c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a2f2:	4b37      	ldr	r3, [pc, #220]	@ (800a3d0 <HAL_RCC_ClockConfig+0x1bc>)
 800a2f4:	689b      	ldr	r3, [r3, #8]
 800a2f6:	f023 0203 	bic.w	r2, r3, #3
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	685b      	ldr	r3, [r3, #4]
 800a2fe:	4934      	ldr	r1, [pc, #208]	@ (800a3d0 <HAL_RCC_ClockConfig+0x1bc>)
 800a300:	4313      	orrs	r3, r2
 800a302:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a304:	f7fc feb2 	bl	800706c <HAL_GetTick>
 800a308:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a30a:	e00a      	b.n	800a322 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a30c:	f7fc feae 	bl	800706c <HAL_GetTick>
 800a310:	4602      	mov	r2, r0
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	1ad3      	subs	r3, r2, r3
 800a316:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d901      	bls.n	800a322 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a31e:	2303      	movs	r3, #3
 800a320:	e04f      	b.n	800a3c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a322:	4b2b      	ldr	r3, [pc, #172]	@ (800a3d0 <HAL_RCC_ClockConfig+0x1bc>)
 800a324:	689b      	ldr	r3, [r3, #8]
 800a326:	f003 020c 	and.w	r2, r3, #12
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	685b      	ldr	r3, [r3, #4]
 800a32e:	009b      	lsls	r3, r3, #2
 800a330:	429a      	cmp	r2, r3
 800a332:	d1eb      	bne.n	800a30c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a334:	4b25      	ldr	r3, [pc, #148]	@ (800a3cc <HAL_RCC_ClockConfig+0x1b8>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f003 0307 	and.w	r3, r3, #7
 800a33c:	683a      	ldr	r2, [r7, #0]
 800a33e:	429a      	cmp	r2, r3
 800a340:	d20c      	bcs.n	800a35c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a342:	4b22      	ldr	r3, [pc, #136]	@ (800a3cc <HAL_RCC_ClockConfig+0x1b8>)
 800a344:	683a      	ldr	r2, [r7, #0]
 800a346:	b2d2      	uxtb	r2, r2
 800a348:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a34a:	4b20      	ldr	r3, [pc, #128]	@ (800a3cc <HAL_RCC_ClockConfig+0x1b8>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f003 0307 	and.w	r3, r3, #7
 800a352:	683a      	ldr	r2, [r7, #0]
 800a354:	429a      	cmp	r2, r3
 800a356:	d001      	beq.n	800a35c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a358:	2301      	movs	r3, #1
 800a35a:	e032      	b.n	800a3c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f003 0304 	and.w	r3, r3, #4
 800a364:	2b00      	cmp	r3, #0
 800a366:	d008      	beq.n	800a37a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a368:	4b19      	ldr	r3, [pc, #100]	@ (800a3d0 <HAL_RCC_ClockConfig+0x1bc>)
 800a36a:	689b      	ldr	r3, [r3, #8]
 800a36c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	68db      	ldr	r3, [r3, #12]
 800a374:	4916      	ldr	r1, [pc, #88]	@ (800a3d0 <HAL_RCC_ClockConfig+0x1bc>)
 800a376:	4313      	orrs	r3, r2
 800a378:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f003 0308 	and.w	r3, r3, #8
 800a382:	2b00      	cmp	r3, #0
 800a384:	d009      	beq.n	800a39a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a386:	4b12      	ldr	r3, [pc, #72]	@ (800a3d0 <HAL_RCC_ClockConfig+0x1bc>)
 800a388:	689b      	ldr	r3, [r3, #8]
 800a38a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	691b      	ldr	r3, [r3, #16]
 800a392:	00db      	lsls	r3, r3, #3
 800a394:	490e      	ldr	r1, [pc, #56]	@ (800a3d0 <HAL_RCC_ClockConfig+0x1bc>)
 800a396:	4313      	orrs	r3, r2
 800a398:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a39a:	f000 f821 	bl	800a3e0 <HAL_RCC_GetSysClockFreq>
 800a39e:	4602      	mov	r2, r0
 800a3a0:	4b0b      	ldr	r3, [pc, #44]	@ (800a3d0 <HAL_RCC_ClockConfig+0x1bc>)
 800a3a2:	689b      	ldr	r3, [r3, #8]
 800a3a4:	091b      	lsrs	r3, r3, #4
 800a3a6:	f003 030f 	and.w	r3, r3, #15
 800a3aa:	490a      	ldr	r1, [pc, #40]	@ (800a3d4 <HAL_RCC_ClockConfig+0x1c0>)
 800a3ac:	5ccb      	ldrb	r3, [r1, r3]
 800a3ae:	fa22 f303 	lsr.w	r3, r2, r3
 800a3b2:	4a09      	ldr	r2, [pc, #36]	@ (800a3d8 <HAL_RCC_ClockConfig+0x1c4>)
 800a3b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800a3b6:	4b09      	ldr	r3, [pc, #36]	@ (800a3dc <HAL_RCC_ClockConfig+0x1c8>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f7fc f948 	bl	8006650 <HAL_InitTick>

  return HAL_OK;
 800a3c0:	2300      	movs	r3, #0
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3710      	adds	r7, #16
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}
 800a3ca:	bf00      	nop
 800a3cc:	40023c00 	.word	0x40023c00
 800a3d0:	40023800 	.word	0x40023800
 800a3d4:	080124b4 	.word	0x080124b4
 800a3d8:	20000048 	.word	0x20000048
 800a3dc:	2000004c 	.word	0x2000004c

0800a3e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a3e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a3e4:	b090      	sub	sp, #64	@ 0x40
 800a3e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a3f8:	4b59      	ldr	r3, [pc, #356]	@ (800a560 <HAL_RCC_GetSysClockFreq+0x180>)
 800a3fa:	689b      	ldr	r3, [r3, #8]
 800a3fc:	f003 030c 	and.w	r3, r3, #12
 800a400:	2b08      	cmp	r3, #8
 800a402:	d00d      	beq.n	800a420 <HAL_RCC_GetSysClockFreq+0x40>
 800a404:	2b08      	cmp	r3, #8
 800a406:	f200 80a1 	bhi.w	800a54c <HAL_RCC_GetSysClockFreq+0x16c>
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d002      	beq.n	800a414 <HAL_RCC_GetSysClockFreq+0x34>
 800a40e:	2b04      	cmp	r3, #4
 800a410:	d003      	beq.n	800a41a <HAL_RCC_GetSysClockFreq+0x3a>
 800a412:	e09b      	b.n	800a54c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a414:	4b53      	ldr	r3, [pc, #332]	@ (800a564 <HAL_RCC_GetSysClockFreq+0x184>)
 800a416:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a418:	e09b      	b.n	800a552 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a41a:	4b53      	ldr	r3, [pc, #332]	@ (800a568 <HAL_RCC_GetSysClockFreq+0x188>)
 800a41c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a41e:	e098      	b.n	800a552 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a420:	4b4f      	ldr	r3, [pc, #316]	@ (800a560 <HAL_RCC_GetSysClockFreq+0x180>)
 800a422:	685b      	ldr	r3, [r3, #4]
 800a424:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a428:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a42a:	4b4d      	ldr	r3, [pc, #308]	@ (800a560 <HAL_RCC_GetSysClockFreq+0x180>)
 800a42c:	685b      	ldr	r3, [r3, #4]
 800a42e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a432:	2b00      	cmp	r3, #0
 800a434:	d028      	beq.n	800a488 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a436:	4b4a      	ldr	r3, [pc, #296]	@ (800a560 <HAL_RCC_GetSysClockFreq+0x180>)
 800a438:	685b      	ldr	r3, [r3, #4]
 800a43a:	099b      	lsrs	r3, r3, #6
 800a43c:	2200      	movs	r2, #0
 800a43e:	623b      	str	r3, [r7, #32]
 800a440:	627a      	str	r2, [r7, #36]	@ 0x24
 800a442:	6a3b      	ldr	r3, [r7, #32]
 800a444:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800a448:	2100      	movs	r1, #0
 800a44a:	4b47      	ldr	r3, [pc, #284]	@ (800a568 <HAL_RCC_GetSysClockFreq+0x188>)
 800a44c:	fb03 f201 	mul.w	r2, r3, r1
 800a450:	2300      	movs	r3, #0
 800a452:	fb00 f303 	mul.w	r3, r0, r3
 800a456:	4413      	add	r3, r2
 800a458:	4a43      	ldr	r2, [pc, #268]	@ (800a568 <HAL_RCC_GetSysClockFreq+0x188>)
 800a45a:	fba0 1202 	umull	r1, r2, r0, r2
 800a45e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a460:	460a      	mov	r2, r1
 800a462:	62ba      	str	r2, [r7, #40]	@ 0x28
 800a464:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a466:	4413      	add	r3, r2
 800a468:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a46a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a46c:	2200      	movs	r2, #0
 800a46e:	61bb      	str	r3, [r7, #24]
 800a470:	61fa      	str	r2, [r7, #28]
 800a472:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a476:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800a47a:	f7f6 fc05 	bl	8000c88 <__aeabi_uldivmod>
 800a47e:	4602      	mov	r2, r0
 800a480:	460b      	mov	r3, r1
 800a482:	4613      	mov	r3, r2
 800a484:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a486:	e053      	b.n	800a530 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a488:	4b35      	ldr	r3, [pc, #212]	@ (800a560 <HAL_RCC_GetSysClockFreq+0x180>)
 800a48a:	685b      	ldr	r3, [r3, #4]
 800a48c:	099b      	lsrs	r3, r3, #6
 800a48e:	2200      	movs	r2, #0
 800a490:	613b      	str	r3, [r7, #16]
 800a492:	617a      	str	r2, [r7, #20]
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800a49a:	f04f 0b00 	mov.w	fp, #0
 800a49e:	4652      	mov	r2, sl
 800a4a0:	465b      	mov	r3, fp
 800a4a2:	f04f 0000 	mov.w	r0, #0
 800a4a6:	f04f 0100 	mov.w	r1, #0
 800a4aa:	0159      	lsls	r1, r3, #5
 800a4ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a4b0:	0150      	lsls	r0, r2, #5
 800a4b2:	4602      	mov	r2, r0
 800a4b4:	460b      	mov	r3, r1
 800a4b6:	ebb2 080a 	subs.w	r8, r2, sl
 800a4ba:	eb63 090b 	sbc.w	r9, r3, fp
 800a4be:	f04f 0200 	mov.w	r2, #0
 800a4c2:	f04f 0300 	mov.w	r3, #0
 800a4c6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800a4ca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800a4ce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800a4d2:	ebb2 0408 	subs.w	r4, r2, r8
 800a4d6:	eb63 0509 	sbc.w	r5, r3, r9
 800a4da:	f04f 0200 	mov.w	r2, #0
 800a4de:	f04f 0300 	mov.w	r3, #0
 800a4e2:	00eb      	lsls	r3, r5, #3
 800a4e4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a4e8:	00e2      	lsls	r2, r4, #3
 800a4ea:	4614      	mov	r4, r2
 800a4ec:	461d      	mov	r5, r3
 800a4ee:	eb14 030a 	adds.w	r3, r4, sl
 800a4f2:	603b      	str	r3, [r7, #0]
 800a4f4:	eb45 030b 	adc.w	r3, r5, fp
 800a4f8:	607b      	str	r3, [r7, #4]
 800a4fa:	f04f 0200 	mov.w	r2, #0
 800a4fe:	f04f 0300 	mov.w	r3, #0
 800a502:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a506:	4629      	mov	r1, r5
 800a508:	028b      	lsls	r3, r1, #10
 800a50a:	4621      	mov	r1, r4
 800a50c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a510:	4621      	mov	r1, r4
 800a512:	028a      	lsls	r2, r1, #10
 800a514:	4610      	mov	r0, r2
 800a516:	4619      	mov	r1, r3
 800a518:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a51a:	2200      	movs	r2, #0
 800a51c:	60bb      	str	r3, [r7, #8]
 800a51e:	60fa      	str	r2, [r7, #12]
 800a520:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a524:	f7f6 fbb0 	bl	8000c88 <__aeabi_uldivmod>
 800a528:	4602      	mov	r2, r0
 800a52a:	460b      	mov	r3, r1
 800a52c:	4613      	mov	r3, r2
 800a52e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800a530:	4b0b      	ldr	r3, [pc, #44]	@ (800a560 <HAL_RCC_GetSysClockFreq+0x180>)
 800a532:	685b      	ldr	r3, [r3, #4]
 800a534:	0c1b      	lsrs	r3, r3, #16
 800a536:	f003 0303 	and.w	r3, r3, #3
 800a53a:	3301      	adds	r3, #1
 800a53c:	005b      	lsls	r3, r3, #1
 800a53e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800a540:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a544:	fbb2 f3f3 	udiv	r3, r2, r3
 800a548:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a54a:	e002      	b.n	800a552 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a54c:	4b05      	ldr	r3, [pc, #20]	@ (800a564 <HAL_RCC_GetSysClockFreq+0x184>)
 800a54e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a550:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800a554:	4618      	mov	r0, r3
 800a556:	3740      	adds	r7, #64	@ 0x40
 800a558:	46bd      	mov	sp, r7
 800a55a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a55e:	bf00      	nop
 800a560:	40023800 	.word	0x40023800
 800a564:	00f42400 	.word	0x00f42400
 800a568:	017d7840 	.word	0x017d7840

0800a56c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a56c:	b480      	push	{r7}
 800a56e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a570:	4b03      	ldr	r3, [pc, #12]	@ (800a580 <HAL_RCC_GetHCLKFreq+0x14>)
 800a572:	681b      	ldr	r3, [r3, #0]
}
 800a574:	4618      	mov	r0, r3
 800a576:	46bd      	mov	sp, r7
 800a578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57c:	4770      	bx	lr
 800a57e:	bf00      	nop
 800a580:	20000048 	.word	0x20000048

0800a584 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a588:	f7ff fff0 	bl	800a56c <HAL_RCC_GetHCLKFreq>
 800a58c:	4602      	mov	r2, r0
 800a58e:	4b05      	ldr	r3, [pc, #20]	@ (800a5a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a590:	689b      	ldr	r3, [r3, #8]
 800a592:	0a9b      	lsrs	r3, r3, #10
 800a594:	f003 0307 	and.w	r3, r3, #7
 800a598:	4903      	ldr	r1, [pc, #12]	@ (800a5a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a59a:	5ccb      	ldrb	r3, [r1, r3]
 800a59c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	bd80      	pop	{r7, pc}
 800a5a4:	40023800 	.word	0x40023800
 800a5a8:	080124c4 	.word	0x080124c4

0800a5ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a5b0:	f7ff ffdc 	bl	800a56c <HAL_RCC_GetHCLKFreq>
 800a5b4:	4602      	mov	r2, r0
 800a5b6:	4b05      	ldr	r3, [pc, #20]	@ (800a5cc <HAL_RCC_GetPCLK2Freq+0x20>)
 800a5b8:	689b      	ldr	r3, [r3, #8]
 800a5ba:	0b5b      	lsrs	r3, r3, #13
 800a5bc:	f003 0307 	and.w	r3, r3, #7
 800a5c0:	4903      	ldr	r1, [pc, #12]	@ (800a5d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a5c2:	5ccb      	ldrb	r3, [r1, r3]
 800a5c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	bd80      	pop	{r7, pc}
 800a5cc:	40023800 	.word	0x40023800
 800a5d0:	080124c4 	.word	0x080124c4

0800a5d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b083      	sub	sp, #12
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
 800a5dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	220f      	movs	r2, #15
 800a5e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a5e4:	4b12      	ldr	r3, [pc, #72]	@ (800a630 <HAL_RCC_GetClockConfig+0x5c>)
 800a5e6:	689b      	ldr	r3, [r3, #8]
 800a5e8:	f003 0203 	and.w	r2, r3, #3
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a5f0:	4b0f      	ldr	r3, [pc, #60]	@ (800a630 <HAL_RCC_GetClockConfig+0x5c>)
 800a5f2:	689b      	ldr	r3, [r3, #8]
 800a5f4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a5fc:	4b0c      	ldr	r3, [pc, #48]	@ (800a630 <HAL_RCC_GetClockConfig+0x5c>)
 800a5fe:	689b      	ldr	r3, [r3, #8]
 800a600:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800a608:	4b09      	ldr	r3, [pc, #36]	@ (800a630 <HAL_RCC_GetClockConfig+0x5c>)
 800a60a:	689b      	ldr	r3, [r3, #8]
 800a60c:	08db      	lsrs	r3, r3, #3
 800a60e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a616:	4b07      	ldr	r3, [pc, #28]	@ (800a634 <HAL_RCC_GetClockConfig+0x60>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f003 0207 	and.w	r2, r3, #7
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	601a      	str	r2, [r3, #0]
}
 800a622:	bf00      	nop
 800a624:	370c      	adds	r7, #12
 800a626:	46bd      	mov	sp, r7
 800a628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62c:	4770      	bx	lr
 800a62e:	bf00      	nop
 800a630:	40023800 	.word	0x40023800
 800a634:	40023c00 	.word	0x40023c00

0800a638 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b086      	sub	sp, #24
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a640:	2300      	movs	r3, #0
 800a642:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800a644:	2300      	movs	r3, #0
 800a646:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f003 0301 	and.w	r3, r3, #1
 800a650:	2b00      	cmp	r3, #0
 800a652:	d105      	bne.n	800a660 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d035      	beq.n	800a6cc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a660:	4b62      	ldr	r3, [pc, #392]	@ (800a7ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800a662:	2200      	movs	r2, #0
 800a664:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a666:	f7fc fd01 	bl	800706c <HAL_GetTick>
 800a66a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a66c:	e008      	b.n	800a680 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a66e:	f7fc fcfd 	bl	800706c <HAL_GetTick>
 800a672:	4602      	mov	r2, r0
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	1ad3      	subs	r3, r2, r3
 800a678:	2b02      	cmp	r3, #2
 800a67a:	d901      	bls.n	800a680 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a67c:	2303      	movs	r3, #3
 800a67e:	e0b0      	b.n	800a7e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a680:	4b5b      	ldr	r3, [pc, #364]	@ (800a7f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d1f0      	bne.n	800a66e <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	685b      	ldr	r3, [r3, #4]
 800a690:	019a      	lsls	r2, r3, #6
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	689b      	ldr	r3, [r3, #8]
 800a696:	071b      	lsls	r3, r3, #28
 800a698:	4955      	ldr	r1, [pc, #340]	@ (800a7f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a69a:	4313      	orrs	r3, r2
 800a69c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a6a0:	4b52      	ldr	r3, [pc, #328]	@ (800a7ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a6a6:	f7fc fce1 	bl	800706c <HAL_GetTick>
 800a6aa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a6ac:	e008      	b.n	800a6c0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a6ae:	f7fc fcdd 	bl	800706c <HAL_GetTick>
 800a6b2:	4602      	mov	r2, r0
 800a6b4:	697b      	ldr	r3, [r7, #20]
 800a6b6:	1ad3      	subs	r3, r2, r3
 800a6b8:	2b02      	cmp	r3, #2
 800a6ba:	d901      	bls.n	800a6c0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a6bc:	2303      	movs	r3, #3
 800a6be:	e090      	b.n	800a7e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a6c0:	4b4b      	ldr	r3, [pc, #300]	@ (800a7f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d0f0      	beq.n	800a6ae <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f003 0302 	and.w	r3, r3, #2
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	f000 8083 	beq.w	800a7e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a6da:	2300      	movs	r3, #0
 800a6dc:	60fb      	str	r3, [r7, #12]
 800a6de:	4b44      	ldr	r3, [pc, #272]	@ (800a7f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a6e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6e2:	4a43      	ldr	r2, [pc, #268]	@ (800a7f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a6e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a6e8:	6413      	str	r3, [r2, #64]	@ 0x40
 800a6ea:	4b41      	ldr	r3, [pc, #260]	@ (800a7f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a6ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a6f2:	60fb      	str	r3, [r7, #12]
 800a6f4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800a6f6:	4b3f      	ldr	r3, [pc, #252]	@ (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	4a3e      	ldr	r2, [pc, #248]	@ (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a6fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a700:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a702:	f7fc fcb3 	bl	800706c <HAL_GetTick>
 800a706:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800a708:	e008      	b.n	800a71c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a70a:	f7fc fcaf 	bl	800706c <HAL_GetTick>
 800a70e:	4602      	mov	r2, r0
 800a710:	697b      	ldr	r3, [r7, #20]
 800a712:	1ad3      	subs	r3, r2, r3
 800a714:	2b02      	cmp	r3, #2
 800a716:	d901      	bls.n	800a71c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800a718:	2303      	movs	r3, #3
 800a71a:	e062      	b.n	800a7e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800a71c:	4b35      	ldr	r3, [pc, #212]	@ (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a724:	2b00      	cmp	r3, #0
 800a726:	d0f0      	beq.n	800a70a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a728:	4b31      	ldr	r3, [pc, #196]	@ (800a7f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a72a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a72c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a730:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d02f      	beq.n	800a798 <HAL_RCCEx_PeriphCLKConfig+0x160>
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	68db      	ldr	r3, [r3, #12]
 800a73c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a740:	693a      	ldr	r2, [r7, #16]
 800a742:	429a      	cmp	r2, r3
 800a744:	d028      	beq.n	800a798 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a746:	4b2a      	ldr	r3, [pc, #168]	@ (800a7f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a748:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a74a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a74e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a750:	4b29      	ldr	r3, [pc, #164]	@ (800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800a752:	2201      	movs	r2, #1
 800a754:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a756:	4b28      	ldr	r3, [pc, #160]	@ (800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800a758:	2200      	movs	r2, #0
 800a75a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800a75c:	4a24      	ldr	r2, [pc, #144]	@ (800a7f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a762:	4b23      	ldr	r3, [pc, #140]	@ (800a7f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a766:	f003 0301 	and.w	r3, r3, #1
 800a76a:	2b01      	cmp	r3, #1
 800a76c:	d114      	bne.n	800a798 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800a76e:	f7fc fc7d 	bl	800706c <HAL_GetTick>
 800a772:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a774:	e00a      	b.n	800a78c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a776:	f7fc fc79 	bl	800706c <HAL_GetTick>
 800a77a:	4602      	mov	r2, r0
 800a77c:	697b      	ldr	r3, [r7, #20]
 800a77e:	1ad3      	subs	r3, r2, r3
 800a780:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a784:	4293      	cmp	r3, r2
 800a786:	d901      	bls.n	800a78c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800a788:	2303      	movs	r3, #3
 800a78a:	e02a      	b.n	800a7e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a78c:	4b18      	ldr	r3, [pc, #96]	@ (800a7f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a78e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a790:	f003 0302 	and.w	r3, r3, #2
 800a794:	2b00      	cmp	r3, #0
 800a796:	d0ee      	beq.n	800a776 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	68db      	ldr	r3, [r3, #12]
 800a79c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a7a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a7a4:	d10d      	bne.n	800a7c2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800a7a6:	4b12      	ldr	r3, [pc, #72]	@ (800a7f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a7a8:	689b      	ldr	r3, [r3, #8]
 800a7aa:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	68db      	ldr	r3, [r3, #12]
 800a7b2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800a7b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a7ba:	490d      	ldr	r1, [pc, #52]	@ (800a7f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a7bc:	4313      	orrs	r3, r2
 800a7be:	608b      	str	r3, [r1, #8]
 800a7c0:	e005      	b.n	800a7ce <HAL_RCCEx_PeriphCLKConfig+0x196>
 800a7c2:	4b0b      	ldr	r3, [pc, #44]	@ (800a7f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a7c4:	689b      	ldr	r3, [r3, #8]
 800a7c6:	4a0a      	ldr	r2, [pc, #40]	@ (800a7f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a7c8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800a7cc:	6093      	str	r3, [r2, #8]
 800a7ce:	4b08      	ldr	r3, [pc, #32]	@ (800a7f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a7d0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	68db      	ldr	r3, [r3, #12]
 800a7d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a7da:	4905      	ldr	r1, [pc, #20]	@ (800a7f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a7dc:	4313      	orrs	r3, r2
 800a7de:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800a7e0:	2300      	movs	r3, #0
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3718      	adds	r7, #24
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}
 800a7ea:	bf00      	nop
 800a7ec:	42470068 	.word	0x42470068
 800a7f0:	40023800 	.word	0x40023800
 800a7f4:	40007000 	.word	0x40007000
 800a7f8:	42470e40 	.word	0x42470e40

0800a7fc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b084      	sub	sp, #16
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a804:	2301      	movs	r3, #1
 800a806:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d101      	bne.n	800a812 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800a80e:	2301      	movs	r3, #1
 800a810:	e073      	b.n	800a8fa <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	7f5b      	ldrb	r3, [r3, #29]
 800a816:	b2db      	uxtb	r3, r3
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d105      	bne.n	800a828 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2200      	movs	r2, #0
 800a820:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f7fb febe 	bl	80065a4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2202      	movs	r2, #2
 800a82c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	68db      	ldr	r3, [r3, #12]
 800a834:	f003 0310 	and.w	r3, r3, #16
 800a838:	2b10      	cmp	r3, #16
 800a83a:	d055      	beq.n	800a8e8 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	22ca      	movs	r2, #202	@ 0xca
 800a842:	625a      	str	r2, [r3, #36]	@ 0x24
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	2253      	movs	r2, #83	@ 0x53
 800a84a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f000 f92b 	bl	800aaa8 <RTC_EnterInitMode>
 800a852:	4603      	mov	r3, r0
 800a854:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800a856:	7bfb      	ldrb	r3, [r7, #15]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d12c      	bne.n	800a8b6 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	689b      	ldr	r3, [r3, #8]
 800a862:	687a      	ldr	r2, [r7, #4]
 800a864:	6812      	ldr	r2, [r2, #0]
 800a866:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a86a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a86e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	6899      	ldr	r1, [r3, #8]
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	685a      	ldr	r2, [r3, #4]
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	691b      	ldr	r3, [r3, #16]
 800a87e:	431a      	orrs	r2, r3
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	695b      	ldr	r3, [r3, #20]
 800a884:	431a      	orrs	r2, r3
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	430a      	orrs	r2, r1
 800a88c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	687a      	ldr	r2, [r7, #4]
 800a894:	68d2      	ldr	r2, [r2, #12]
 800a896:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	6919      	ldr	r1, [r3, #16]
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	689b      	ldr	r3, [r3, #8]
 800a8a2:	041a      	lsls	r2, r3, #16
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	430a      	orrs	r2, r1
 800a8aa:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800a8ac:	6878      	ldr	r0, [r7, #4]
 800a8ae:	f000 f932 	bl	800ab16 <RTC_ExitInitMode>
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800a8b6:	7bfb      	ldrb	r3, [r7, #15]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d110      	bne.n	800a8de <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800a8ca:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	699a      	ldr	r2, [r3, #24]
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	430a      	orrs	r2, r1
 800a8dc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	22ff      	movs	r2, #255	@ 0xff
 800a8e4:	625a      	str	r2, [r3, #36]	@ 0x24
 800a8e6:	e001      	b.n	800a8ec <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800a8ec:	7bfb      	ldrb	r3, [r7, #15]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d102      	bne.n	800a8f8 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2201      	movs	r2, #1
 800a8f6:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800a8f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3710      	adds	r7, #16
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}

0800a902 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a902:	b580      	push	{r7, lr}
 800a904:	b086      	sub	sp, #24
 800a906:	af00      	add	r7, sp, #0
 800a908:	60f8      	str	r0, [r7, #12]
 800a90a:	60b9      	str	r1, [r7, #8]
 800a90c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800a90e:	2300      	movs	r3, #0
 800a910:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	691b      	ldr	r3, [r3, #16]
 800a922:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800a934:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800a938:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800a93a:	697b      	ldr	r3, [r7, #20]
 800a93c:	0c1b      	lsrs	r3, r3, #16
 800a93e:	b2db      	uxtb	r3, r3
 800a940:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a944:	b2da      	uxtb	r2, r3
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800a94a:	697b      	ldr	r3, [r7, #20]
 800a94c:	0a1b      	lsrs	r3, r3, #8
 800a94e:	b2db      	uxtb	r3, r3
 800a950:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a954:	b2da      	uxtb	r2, r3
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	b2db      	uxtb	r3, r3
 800a95e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a962:	b2da      	uxtb	r2, r3
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800a968:	697b      	ldr	r3, [r7, #20]
 800a96a:	0d9b      	lsrs	r3, r3, #22
 800a96c:	b2db      	uxtb	r3, r3
 800a96e:	f003 0301 	and.w	r3, r3, #1
 800a972:	b2da      	uxtb	r2, r3
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d11a      	bne.n	800a9b4 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	781b      	ldrb	r3, [r3, #0]
 800a982:	4618      	mov	r0, r3
 800a984:	f000 f8ec 	bl	800ab60 <RTC_Bcd2ToByte>
 800a988:	4603      	mov	r3, r0
 800a98a:	461a      	mov	r2, r3
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	785b      	ldrb	r3, [r3, #1]
 800a994:	4618      	mov	r0, r3
 800a996:	f000 f8e3 	bl	800ab60 <RTC_Bcd2ToByte>
 800a99a:	4603      	mov	r3, r0
 800a99c:	461a      	mov	r2, r3
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	789b      	ldrb	r3, [r3, #2]
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f000 f8da 	bl	800ab60 <RTC_Bcd2ToByte>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	461a      	mov	r2, r3
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800a9b4:	2300      	movs	r3, #0
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3718      	adds	r7, #24
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}

0800a9be <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a9be:	b580      	push	{r7, lr}
 800a9c0:	b086      	sub	sp, #24
 800a9c2:	af00      	add	r7, sp, #0
 800a9c4:	60f8      	str	r0, [r7, #12]
 800a9c6:	60b9      	str	r1, [r7, #8]
 800a9c8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	685b      	ldr	r3, [r3, #4]
 800a9d4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800a9d8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a9dc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800a9de:	697b      	ldr	r3, [r7, #20]
 800a9e0:	0c1b      	lsrs	r3, r3, #16
 800a9e2:	b2da      	uxtb	r2, r3
 800a9e4:	68bb      	ldr	r3, [r7, #8]
 800a9e6:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800a9e8:	697b      	ldr	r3, [r7, #20]
 800a9ea:	0a1b      	lsrs	r3, r3, #8
 800a9ec:	b2db      	uxtb	r3, r3
 800a9ee:	f003 031f 	and.w	r3, r3, #31
 800a9f2:	b2da      	uxtb	r2, r3
 800a9f4:	68bb      	ldr	r3, [r7, #8]
 800a9f6:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800a9f8:	697b      	ldr	r3, [r7, #20]
 800a9fa:	b2db      	uxtb	r3, r3
 800a9fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aa00:	b2da      	uxtb	r2, r3
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	0b5b      	lsrs	r3, r3, #13
 800aa0a:	b2db      	uxtb	r3, r3
 800aa0c:	f003 0307 	and.w	r3, r3, #7
 800aa10:	b2da      	uxtb	r2, r3
 800aa12:	68bb      	ldr	r3, [r7, #8]
 800aa14:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d11a      	bne.n	800aa52 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	78db      	ldrb	r3, [r3, #3]
 800aa20:	4618      	mov	r0, r3
 800aa22:	f000 f89d 	bl	800ab60 <RTC_Bcd2ToByte>
 800aa26:	4603      	mov	r3, r0
 800aa28:	461a      	mov	r2, r3
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800aa2e:	68bb      	ldr	r3, [r7, #8]
 800aa30:	785b      	ldrb	r3, [r3, #1]
 800aa32:	4618      	mov	r0, r3
 800aa34:	f000 f894 	bl	800ab60 <RTC_Bcd2ToByte>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	461a      	mov	r2, r3
 800aa3c:	68bb      	ldr	r3, [r7, #8]
 800aa3e:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	789b      	ldrb	r3, [r3, #2]
 800aa44:	4618      	mov	r0, r3
 800aa46:	f000 f88b 	bl	800ab60 <RTC_Bcd2ToByte>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	461a      	mov	r2, r3
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800aa52:	2300      	movs	r3, #0
}
 800aa54:	4618      	mov	r0, r3
 800aa56:	3718      	adds	r7, #24
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bd80      	pop	{r7, pc}

0800aa5c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b084      	sub	sp, #16
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800aa64:	2300      	movs	r3, #0
 800aa66:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	4a0d      	ldr	r2, [pc, #52]	@ (800aaa4 <HAL_RTC_WaitForSynchro+0x48>)
 800aa6e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800aa70:	f7fc fafc 	bl	800706c <HAL_GetTick>
 800aa74:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800aa76:	e009      	b.n	800aa8c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800aa78:	f7fc faf8 	bl	800706c <HAL_GetTick>
 800aa7c:	4602      	mov	r2, r0
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	1ad3      	subs	r3, r2, r3
 800aa82:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800aa86:	d901      	bls.n	800aa8c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800aa88:	2303      	movs	r3, #3
 800aa8a:	e007      	b.n	800aa9c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	68db      	ldr	r3, [r3, #12]
 800aa92:	f003 0320 	and.w	r3, r3, #32
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d0ee      	beq.n	800aa78 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800aa9a:	2300      	movs	r3, #0
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3710      	adds	r7, #16
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}
 800aaa4:	00017f5f 	.word	0x00017f5f

0800aaa8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b084      	sub	sp, #16
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800aab0:	2300      	movs	r3, #0
 800aab2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800aab4:	2300      	movs	r3, #0
 800aab6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	68db      	ldr	r3, [r3, #12]
 800aabe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d122      	bne.n	800ab0c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	68da      	ldr	r2, [r3, #12]
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800aad4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800aad6:	f7fc fac9 	bl	800706c <HAL_GetTick>
 800aada:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800aadc:	e00c      	b.n	800aaf8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800aade:	f7fc fac5 	bl	800706c <HAL_GetTick>
 800aae2:	4602      	mov	r2, r0
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	1ad3      	subs	r3, r2, r3
 800aae8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800aaec:	d904      	bls.n	800aaf8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2204      	movs	r2, #4
 800aaf2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800aaf4:	2301      	movs	r3, #1
 800aaf6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	68db      	ldr	r3, [r3, #12]
 800aafe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d102      	bne.n	800ab0c <RTC_EnterInitMode+0x64>
 800ab06:	7bfb      	ldrb	r3, [r7, #15]
 800ab08:	2b01      	cmp	r3, #1
 800ab0a:	d1e8      	bne.n	800aade <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800ab0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3710      	adds	r7, #16
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}

0800ab16 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800ab16:	b580      	push	{r7, lr}
 800ab18:	b084      	sub	sp, #16
 800ab1a:	af00      	add	r7, sp, #0
 800ab1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	68da      	ldr	r2, [r3, #12]
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ab30:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	689b      	ldr	r3, [r3, #8]
 800ab38:	f003 0320 	and.w	r3, r3, #32
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d10a      	bne.n	800ab56 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f7ff ff8b 	bl	800aa5c <HAL_RTC_WaitForSynchro>
 800ab46:	4603      	mov	r3, r0
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d004      	beq.n	800ab56 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2204      	movs	r2, #4
 800ab50:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800ab52:	2301      	movs	r3, #1
 800ab54:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800ab56:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	3710      	adds	r7, #16
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}

0800ab60 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800ab60:	b480      	push	{r7}
 800ab62:	b085      	sub	sp, #20
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	4603      	mov	r3, r0
 800ab68:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800ab6e:	79fb      	ldrb	r3, [r7, #7]
 800ab70:	091b      	lsrs	r3, r3, #4
 800ab72:	b2db      	uxtb	r3, r3
 800ab74:	461a      	mov	r2, r3
 800ab76:	4613      	mov	r3, r2
 800ab78:	009b      	lsls	r3, r3, #2
 800ab7a:	4413      	add	r3, r2
 800ab7c:	005b      	lsls	r3, r3, #1
 800ab7e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	b2da      	uxtb	r2, r3
 800ab84:	79fb      	ldrb	r3, [r7, #7]
 800ab86:	f003 030f 	and.w	r3, r3, #15
 800ab8a:	b2db      	uxtb	r3, r3
 800ab8c:	4413      	add	r3, r2
 800ab8e:	b2db      	uxtb	r3, r3
}
 800ab90:	4618      	mov	r0, r3
 800ab92:	3714      	adds	r7, #20
 800ab94:	46bd      	mov	sp, r7
 800ab96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9a:	4770      	bx	lr

0800ab9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b082      	sub	sp, #8
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d101      	bne.n	800abae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800abaa:	2301      	movs	r3, #1
 800abac:	e041      	b.n	800ac32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800abb4:	b2db      	uxtb	r3, r3
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d106      	bne.n	800abc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2200      	movs	r2, #0
 800abbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f7fb ff44 	bl	8006a50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2202      	movs	r2, #2
 800abcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681a      	ldr	r2, [r3, #0]
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	3304      	adds	r3, #4
 800abd8:	4619      	mov	r1, r3
 800abda:	4610      	mov	r0, r2
 800abdc:	f000 fae6 	bl	800b1ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2201      	movs	r2, #1
 800abe4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2201      	movs	r2, #1
 800abec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2201      	movs	r2, #1
 800abf4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2201      	movs	r2, #1
 800abfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2201      	movs	r2, #1
 800ac04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2201      	movs	r2, #1
 800ac0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2201      	movs	r2, #1
 800ac14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2201      	movs	r2, #1
 800ac1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2201      	movs	r2, #1
 800ac24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2201      	movs	r2, #1
 800ac2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ac30:	2300      	movs	r3, #0
}
 800ac32:	4618      	mov	r0, r3
 800ac34:	3708      	adds	r7, #8
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}
	...

0800ac3c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b085      	sub	sp, #20
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ac4a:	b2db      	uxtb	r3, r3
 800ac4c:	2b01      	cmp	r3, #1
 800ac4e:	d001      	beq.n	800ac54 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800ac50:	2301      	movs	r3, #1
 800ac52:	e046      	b.n	800ace2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2202      	movs	r2, #2
 800ac58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	4a23      	ldr	r2, [pc, #140]	@ (800acf0 <HAL_TIM_Base_Start+0xb4>)
 800ac62:	4293      	cmp	r3, r2
 800ac64:	d022      	beq.n	800acac <HAL_TIM_Base_Start+0x70>
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac6e:	d01d      	beq.n	800acac <HAL_TIM_Base_Start+0x70>
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	4a1f      	ldr	r2, [pc, #124]	@ (800acf4 <HAL_TIM_Base_Start+0xb8>)
 800ac76:	4293      	cmp	r3, r2
 800ac78:	d018      	beq.n	800acac <HAL_TIM_Base_Start+0x70>
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	4a1e      	ldr	r2, [pc, #120]	@ (800acf8 <HAL_TIM_Base_Start+0xbc>)
 800ac80:	4293      	cmp	r3, r2
 800ac82:	d013      	beq.n	800acac <HAL_TIM_Base_Start+0x70>
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	4a1c      	ldr	r2, [pc, #112]	@ (800acfc <HAL_TIM_Base_Start+0xc0>)
 800ac8a:	4293      	cmp	r3, r2
 800ac8c:	d00e      	beq.n	800acac <HAL_TIM_Base_Start+0x70>
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	4a1b      	ldr	r2, [pc, #108]	@ (800ad00 <HAL_TIM_Base_Start+0xc4>)
 800ac94:	4293      	cmp	r3, r2
 800ac96:	d009      	beq.n	800acac <HAL_TIM_Base_Start+0x70>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	4a19      	ldr	r2, [pc, #100]	@ (800ad04 <HAL_TIM_Base_Start+0xc8>)
 800ac9e:	4293      	cmp	r3, r2
 800aca0:	d004      	beq.n	800acac <HAL_TIM_Base_Start+0x70>
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	4a18      	ldr	r2, [pc, #96]	@ (800ad08 <HAL_TIM_Base_Start+0xcc>)
 800aca8:	4293      	cmp	r3, r2
 800acaa:	d111      	bne.n	800acd0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	689b      	ldr	r3, [r3, #8]
 800acb2:	f003 0307 	and.w	r3, r3, #7
 800acb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	2b06      	cmp	r3, #6
 800acbc:	d010      	beq.n	800ace0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	681a      	ldr	r2, [r3, #0]
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	f042 0201 	orr.w	r2, r2, #1
 800accc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800acce:	e007      	b.n	800ace0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	681a      	ldr	r2, [r3, #0]
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	f042 0201 	orr.w	r2, r2, #1
 800acde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ace0:	2300      	movs	r3, #0
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	3714      	adds	r7, #20
 800ace6:	46bd      	mov	sp, r7
 800ace8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acec:	4770      	bx	lr
 800acee:	bf00      	nop
 800acf0:	40010000 	.word	0x40010000
 800acf4:	40000400 	.word	0x40000400
 800acf8:	40000800 	.word	0x40000800
 800acfc:	40000c00 	.word	0x40000c00
 800ad00:	40010400 	.word	0x40010400
 800ad04:	40014000 	.word	0x40014000
 800ad08:	40001800 	.word	0x40001800

0800ad0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ad0c:	b480      	push	{r7}
 800ad0e:	b085      	sub	sp, #20
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ad1a:	b2db      	uxtb	r3, r3
 800ad1c:	2b01      	cmp	r3, #1
 800ad1e:	d001      	beq.n	800ad24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ad20:	2301      	movs	r3, #1
 800ad22:	e04e      	b.n	800adc2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2202      	movs	r2, #2
 800ad28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	68da      	ldr	r2, [r3, #12]
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	f042 0201 	orr.w	r2, r2, #1
 800ad3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	4a23      	ldr	r2, [pc, #140]	@ (800add0 <HAL_TIM_Base_Start_IT+0xc4>)
 800ad42:	4293      	cmp	r3, r2
 800ad44:	d022      	beq.n	800ad8c <HAL_TIM_Base_Start_IT+0x80>
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad4e:	d01d      	beq.n	800ad8c <HAL_TIM_Base_Start_IT+0x80>
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	4a1f      	ldr	r2, [pc, #124]	@ (800add4 <HAL_TIM_Base_Start_IT+0xc8>)
 800ad56:	4293      	cmp	r3, r2
 800ad58:	d018      	beq.n	800ad8c <HAL_TIM_Base_Start_IT+0x80>
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	4a1e      	ldr	r2, [pc, #120]	@ (800add8 <HAL_TIM_Base_Start_IT+0xcc>)
 800ad60:	4293      	cmp	r3, r2
 800ad62:	d013      	beq.n	800ad8c <HAL_TIM_Base_Start_IT+0x80>
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	4a1c      	ldr	r2, [pc, #112]	@ (800addc <HAL_TIM_Base_Start_IT+0xd0>)
 800ad6a:	4293      	cmp	r3, r2
 800ad6c:	d00e      	beq.n	800ad8c <HAL_TIM_Base_Start_IT+0x80>
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	4a1b      	ldr	r2, [pc, #108]	@ (800ade0 <HAL_TIM_Base_Start_IT+0xd4>)
 800ad74:	4293      	cmp	r3, r2
 800ad76:	d009      	beq.n	800ad8c <HAL_TIM_Base_Start_IT+0x80>
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	4a19      	ldr	r2, [pc, #100]	@ (800ade4 <HAL_TIM_Base_Start_IT+0xd8>)
 800ad7e:	4293      	cmp	r3, r2
 800ad80:	d004      	beq.n	800ad8c <HAL_TIM_Base_Start_IT+0x80>
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	4a18      	ldr	r2, [pc, #96]	@ (800ade8 <HAL_TIM_Base_Start_IT+0xdc>)
 800ad88:	4293      	cmp	r3, r2
 800ad8a:	d111      	bne.n	800adb0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	689b      	ldr	r3, [r3, #8]
 800ad92:	f003 0307 	and.w	r3, r3, #7
 800ad96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	2b06      	cmp	r3, #6
 800ad9c:	d010      	beq.n	800adc0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	681a      	ldr	r2, [r3, #0]
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f042 0201 	orr.w	r2, r2, #1
 800adac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800adae:	e007      	b.n	800adc0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	681a      	ldr	r2, [r3, #0]
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f042 0201 	orr.w	r2, r2, #1
 800adbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800adc0:	2300      	movs	r3, #0
}
 800adc2:	4618      	mov	r0, r3
 800adc4:	3714      	adds	r7, #20
 800adc6:	46bd      	mov	sp, r7
 800adc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adcc:	4770      	bx	lr
 800adce:	bf00      	nop
 800add0:	40010000 	.word	0x40010000
 800add4:	40000400 	.word	0x40000400
 800add8:	40000800 	.word	0x40000800
 800addc:	40000c00 	.word	0x40000c00
 800ade0:	40010400 	.word	0x40010400
 800ade4:	40014000 	.word	0x40014000
 800ade8:	40001800 	.word	0x40001800

0800adec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b084      	sub	sp, #16
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	68db      	ldr	r3, [r3, #12]
 800adfa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	691b      	ldr	r3, [r3, #16]
 800ae02:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	f003 0302 	and.w	r3, r3, #2
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d020      	beq.n	800ae50 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	f003 0302 	and.w	r3, r3, #2
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d01b      	beq.n	800ae50 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f06f 0202 	mvn.w	r2, #2
 800ae20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2201      	movs	r2, #1
 800ae26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	699b      	ldr	r3, [r3, #24]
 800ae2e:	f003 0303 	and.w	r3, r3, #3
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d003      	beq.n	800ae3e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f000 f999 	bl	800b16e <HAL_TIM_IC_CaptureCallback>
 800ae3c:	e005      	b.n	800ae4a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f000 f98b 	bl	800b15a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f000 f99c 	bl	800b182 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	f003 0304 	and.w	r3, r3, #4
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d020      	beq.n	800ae9c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	f003 0304 	and.w	r3, r3, #4
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d01b      	beq.n	800ae9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	f06f 0204 	mvn.w	r2, #4
 800ae6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2202      	movs	r2, #2
 800ae72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	699b      	ldr	r3, [r3, #24]
 800ae7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d003      	beq.n	800ae8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f000 f973 	bl	800b16e <HAL_TIM_IC_CaptureCallback>
 800ae88:	e005      	b.n	800ae96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	f000 f965 	bl	800b15a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	f000 f976 	bl	800b182 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2200      	movs	r2, #0
 800ae9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ae9c:	68bb      	ldr	r3, [r7, #8]
 800ae9e:	f003 0308 	and.w	r3, r3, #8
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d020      	beq.n	800aee8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	f003 0308 	and.w	r3, r3, #8
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d01b      	beq.n	800aee8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f06f 0208 	mvn.w	r2, #8
 800aeb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2204      	movs	r2, #4
 800aebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	69db      	ldr	r3, [r3, #28]
 800aec6:	f003 0303 	and.w	r3, r3, #3
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d003      	beq.n	800aed6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	f000 f94d 	bl	800b16e <HAL_TIM_IC_CaptureCallback>
 800aed4:	e005      	b.n	800aee2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f000 f93f 	bl	800b15a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aedc:	6878      	ldr	r0, [r7, #4]
 800aede:	f000 f950 	bl	800b182 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2200      	movs	r2, #0
 800aee6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	f003 0310 	and.w	r3, r3, #16
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d020      	beq.n	800af34 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	f003 0310 	and.w	r3, r3, #16
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d01b      	beq.n	800af34 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f06f 0210 	mvn.w	r2, #16
 800af04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2208      	movs	r2, #8
 800af0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	69db      	ldr	r3, [r3, #28]
 800af12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800af16:	2b00      	cmp	r3, #0
 800af18:	d003      	beq.n	800af22 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f000 f927 	bl	800b16e <HAL_TIM_IC_CaptureCallback>
 800af20:	e005      	b.n	800af2e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af22:	6878      	ldr	r0, [r7, #4]
 800af24:	f000 f919 	bl	800b15a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f000 f92a 	bl	800b182 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	2200      	movs	r2, #0
 800af32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800af34:	68bb      	ldr	r3, [r7, #8]
 800af36:	f003 0301 	and.w	r3, r3, #1
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d00c      	beq.n	800af58 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	f003 0301 	and.w	r3, r3, #1
 800af44:	2b00      	cmp	r3, #0
 800af46:	d007      	beq.n	800af58 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	f06f 0201 	mvn.w	r2, #1
 800af50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800af52:	6878      	ldr	r0, [r7, #4]
 800af54:	f7fb fae8 	bl	8006528 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d00c      	beq.n	800af7c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d007      	beq.n	800af7c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800af74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f000 fae4 	bl	800b544 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800af7c:	68bb      	ldr	r3, [r7, #8]
 800af7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af82:	2b00      	cmp	r3, #0
 800af84:	d00c      	beq.n	800afa0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d007      	beq.n	800afa0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800af98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f000 f8fb 	bl	800b196 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800afa0:	68bb      	ldr	r3, [r7, #8]
 800afa2:	f003 0320 	and.w	r3, r3, #32
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d00c      	beq.n	800afc4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	f003 0320 	and.w	r3, r3, #32
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d007      	beq.n	800afc4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	f06f 0220 	mvn.w	r2, #32
 800afbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f000 fab6 	bl	800b530 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800afc4:	bf00      	nop
 800afc6:	3710      	adds	r7, #16
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}

0800afcc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b084      	sub	sp, #16
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
 800afd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800afd6:	2300      	movs	r3, #0
 800afd8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800afe0:	2b01      	cmp	r3, #1
 800afe2:	d101      	bne.n	800afe8 <HAL_TIM_ConfigClockSource+0x1c>
 800afe4:	2302      	movs	r3, #2
 800afe6:	e0b4      	b.n	800b152 <HAL_TIM_ConfigClockSource+0x186>
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2201      	movs	r2, #1
 800afec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2202      	movs	r2, #2
 800aff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	689b      	ldr	r3, [r3, #8]
 800affe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b006:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b00e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	68ba      	ldr	r2, [r7, #8]
 800b016:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b020:	d03e      	beq.n	800b0a0 <HAL_TIM_ConfigClockSource+0xd4>
 800b022:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b026:	f200 8087 	bhi.w	800b138 <HAL_TIM_ConfigClockSource+0x16c>
 800b02a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b02e:	f000 8086 	beq.w	800b13e <HAL_TIM_ConfigClockSource+0x172>
 800b032:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b036:	d87f      	bhi.n	800b138 <HAL_TIM_ConfigClockSource+0x16c>
 800b038:	2b70      	cmp	r3, #112	@ 0x70
 800b03a:	d01a      	beq.n	800b072 <HAL_TIM_ConfigClockSource+0xa6>
 800b03c:	2b70      	cmp	r3, #112	@ 0x70
 800b03e:	d87b      	bhi.n	800b138 <HAL_TIM_ConfigClockSource+0x16c>
 800b040:	2b60      	cmp	r3, #96	@ 0x60
 800b042:	d050      	beq.n	800b0e6 <HAL_TIM_ConfigClockSource+0x11a>
 800b044:	2b60      	cmp	r3, #96	@ 0x60
 800b046:	d877      	bhi.n	800b138 <HAL_TIM_ConfigClockSource+0x16c>
 800b048:	2b50      	cmp	r3, #80	@ 0x50
 800b04a:	d03c      	beq.n	800b0c6 <HAL_TIM_ConfigClockSource+0xfa>
 800b04c:	2b50      	cmp	r3, #80	@ 0x50
 800b04e:	d873      	bhi.n	800b138 <HAL_TIM_ConfigClockSource+0x16c>
 800b050:	2b40      	cmp	r3, #64	@ 0x40
 800b052:	d058      	beq.n	800b106 <HAL_TIM_ConfigClockSource+0x13a>
 800b054:	2b40      	cmp	r3, #64	@ 0x40
 800b056:	d86f      	bhi.n	800b138 <HAL_TIM_ConfigClockSource+0x16c>
 800b058:	2b30      	cmp	r3, #48	@ 0x30
 800b05a:	d064      	beq.n	800b126 <HAL_TIM_ConfigClockSource+0x15a>
 800b05c:	2b30      	cmp	r3, #48	@ 0x30
 800b05e:	d86b      	bhi.n	800b138 <HAL_TIM_ConfigClockSource+0x16c>
 800b060:	2b20      	cmp	r3, #32
 800b062:	d060      	beq.n	800b126 <HAL_TIM_ConfigClockSource+0x15a>
 800b064:	2b20      	cmp	r3, #32
 800b066:	d867      	bhi.n	800b138 <HAL_TIM_ConfigClockSource+0x16c>
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d05c      	beq.n	800b126 <HAL_TIM_ConfigClockSource+0x15a>
 800b06c:	2b10      	cmp	r3, #16
 800b06e:	d05a      	beq.n	800b126 <HAL_TIM_ConfigClockSource+0x15a>
 800b070:	e062      	b.n	800b138 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b082:	f000 f9b9 	bl	800b3f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	689b      	ldr	r3, [r3, #8]
 800b08c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b094:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	68ba      	ldr	r2, [r7, #8]
 800b09c:	609a      	str	r2, [r3, #8]
      break;
 800b09e:	e04f      	b.n	800b140 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b0b0:	f000 f9a2 	bl	800b3f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	689a      	ldr	r2, [r3, #8]
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b0c2:	609a      	str	r2, [r3, #8]
      break;
 800b0c4:	e03c      	b.n	800b140 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b0d2:	461a      	mov	r2, r3
 800b0d4:	f000 f916 	bl	800b304 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	2150      	movs	r1, #80	@ 0x50
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f000 f96f 	bl	800b3c2 <TIM_ITRx_SetConfig>
      break;
 800b0e4:	e02c      	b.n	800b140 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b0f2:	461a      	mov	r2, r3
 800b0f4:	f000 f935 	bl	800b362 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	2160      	movs	r1, #96	@ 0x60
 800b0fe:	4618      	mov	r0, r3
 800b100:	f000 f95f 	bl	800b3c2 <TIM_ITRx_SetConfig>
      break;
 800b104:	e01c      	b.n	800b140 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b112:	461a      	mov	r2, r3
 800b114:	f000 f8f6 	bl	800b304 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	2140      	movs	r1, #64	@ 0x40
 800b11e:	4618      	mov	r0, r3
 800b120:	f000 f94f 	bl	800b3c2 <TIM_ITRx_SetConfig>
      break;
 800b124:	e00c      	b.n	800b140 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681a      	ldr	r2, [r3, #0]
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	4619      	mov	r1, r3
 800b130:	4610      	mov	r0, r2
 800b132:	f000 f946 	bl	800b3c2 <TIM_ITRx_SetConfig>
      break;
 800b136:	e003      	b.n	800b140 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b138:	2301      	movs	r3, #1
 800b13a:	73fb      	strb	r3, [r7, #15]
      break;
 800b13c:	e000      	b.n	800b140 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b13e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2201      	movs	r2, #1
 800b144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2200      	movs	r2, #0
 800b14c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b150:	7bfb      	ldrb	r3, [r7, #15]
}
 800b152:	4618      	mov	r0, r3
 800b154:	3710      	adds	r7, #16
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}

0800b15a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b15a:	b480      	push	{r7}
 800b15c:	b083      	sub	sp, #12
 800b15e:	af00      	add	r7, sp, #0
 800b160:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b162:	bf00      	nop
 800b164:	370c      	adds	r7, #12
 800b166:	46bd      	mov	sp, r7
 800b168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16c:	4770      	bx	lr

0800b16e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b16e:	b480      	push	{r7}
 800b170:	b083      	sub	sp, #12
 800b172:	af00      	add	r7, sp, #0
 800b174:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b176:	bf00      	nop
 800b178:	370c      	adds	r7, #12
 800b17a:	46bd      	mov	sp, r7
 800b17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b180:	4770      	bx	lr

0800b182 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b182:	b480      	push	{r7}
 800b184:	b083      	sub	sp, #12
 800b186:	af00      	add	r7, sp, #0
 800b188:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b18a:	bf00      	nop
 800b18c:	370c      	adds	r7, #12
 800b18e:	46bd      	mov	sp, r7
 800b190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b194:	4770      	bx	lr

0800b196 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b196:	b480      	push	{r7}
 800b198:	b083      	sub	sp, #12
 800b19a:	af00      	add	r7, sp, #0
 800b19c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b19e:	bf00      	nop
 800b1a0:	370c      	adds	r7, #12
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a8:	4770      	bx	lr
	...

0800b1ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b1ac:	b480      	push	{r7}
 800b1ae:	b085      	sub	sp, #20
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
 800b1b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	4a46      	ldr	r2, [pc, #280]	@ (800b2d8 <TIM_Base_SetConfig+0x12c>)
 800b1c0:	4293      	cmp	r3, r2
 800b1c2:	d013      	beq.n	800b1ec <TIM_Base_SetConfig+0x40>
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b1ca:	d00f      	beq.n	800b1ec <TIM_Base_SetConfig+0x40>
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	4a43      	ldr	r2, [pc, #268]	@ (800b2dc <TIM_Base_SetConfig+0x130>)
 800b1d0:	4293      	cmp	r3, r2
 800b1d2:	d00b      	beq.n	800b1ec <TIM_Base_SetConfig+0x40>
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	4a42      	ldr	r2, [pc, #264]	@ (800b2e0 <TIM_Base_SetConfig+0x134>)
 800b1d8:	4293      	cmp	r3, r2
 800b1da:	d007      	beq.n	800b1ec <TIM_Base_SetConfig+0x40>
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	4a41      	ldr	r2, [pc, #260]	@ (800b2e4 <TIM_Base_SetConfig+0x138>)
 800b1e0:	4293      	cmp	r3, r2
 800b1e2:	d003      	beq.n	800b1ec <TIM_Base_SetConfig+0x40>
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	4a40      	ldr	r2, [pc, #256]	@ (800b2e8 <TIM_Base_SetConfig+0x13c>)
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	d108      	bne.n	800b1fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b1f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	685b      	ldr	r3, [r3, #4]
 800b1f8:	68fa      	ldr	r2, [r7, #12]
 800b1fa:	4313      	orrs	r3, r2
 800b1fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	4a35      	ldr	r2, [pc, #212]	@ (800b2d8 <TIM_Base_SetConfig+0x12c>)
 800b202:	4293      	cmp	r3, r2
 800b204:	d02b      	beq.n	800b25e <TIM_Base_SetConfig+0xb2>
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b20c:	d027      	beq.n	800b25e <TIM_Base_SetConfig+0xb2>
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	4a32      	ldr	r2, [pc, #200]	@ (800b2dc <TIM_Base_SetConfig+0x130>)
 800b212:	4293      	cmp	r3, r2
 800b214:	d023      	beq.n	800b25e <TIM_Base_SetConfig+0xb2>
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	4a31      	ldr	r2, [pc, #196]	@ (800b2e0 <TIM_Base_SetConfig+0x134>)
 800b21a:	4293      	cmp	r3, r2
 800b21c:	d01f      	beq.n	800b25e <TIM_Base_SetConfig+0xb2>
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	4a30      	ldr	r2, [pc, #192]	@ (800b2e4 <TIM_Base_SetConfig+0x138>)
 800b222:	4293      	cmp	r3, r2
 800b224:	d01b      	beq.n	800b25e <TIM_Base_SetConfig+0xb2>
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	4a2f      	ldr	r2, [pc, #188]	@ (800b2e8 <TIM_Base_SetConfig+0x13c>)
 800b22a:	4293      	cmp	r3, r2
 800b22c:	d017      	beq.n	800b25e <TIM_Base_SetConfig+0xb2>
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	4a2e      	ldr	r2, [pc, #184]	@ (800b2ec <TIM_Base_SetConfig+0x140>)
 800b232:	4293      	cmp	r3, r2
 800b234:	d013      	beq.n	800b25e <TIM_Base_SetConfig+0xb2>
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	4a2d      	ldr	r2, [pc, #180]	@ (800b2f0 <TIM_Base_SetConfig+0x144>)
 800b23a:	4293      	cmp	r3, r2
 800b23c:	d00f      	beq.n	800b25e <TIM_Base_SetConfig+0xb2>
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	4a2c      	ldr	r2, [pc, #176]	@ (800b2f4 <TIM_Base_SetConfig+0x148>)
 800b242:	4293      	cmp	r3, r2
 800b244:	d00b      	beq.n	800b25e <TIM_Base_SetConfig+0xb2>
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	4a2b      	ldr	r2, [pc, #172]	@ (800b2f8 <TIM_Base_SetConfig+0x14c>)
 800b24a:	4293      	cmp	r3, r2
 800b24c:	d007      	beq.n	800b25e <TIM_Base_SetConfig+0xb2>
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	4a2a      	ldr	r2, [pc, #168]	@ (800b2fc <TIM_Base_SetConfig+0x150>)
 800b252:	4293      	cmp	r3, r2
 800b254:	d003      	beq.n	800b25e <TIM_Base_SetConfig+0xb2>
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	4a29      	ldr	r2, [pc, #164]	@ (800b300 <TIM_Base_SetConfig+0x154>)
 800b25a:	4293      	cmp	r3, r2
 800b25c:	d108      	bne.n	800b270 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b264:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	68db      	ldr	r3, [r3, #12]
 800b26a:	68fa      	ldr	r2, [r7, #12]
 800b26c:	4313      	orrs	r3, r2
 800b26e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	695b      	ldr	r3, [r3, #20]
 800b27a:	4313      	orrs	r3, r2
 800b27c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	68fa      	ldr	r2, [r7, #12]
 800b282:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	689a      	ldr	r2, [r3, #8]
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	681a      	ldr	r2, [r3, #0]
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	4a10      	ldr	r2, [pc, #64]	@ (800b2d8 <TIM_Base_SetConfig+0x12c>)
 800b298:	4293      	cmp	r3, r2
 800b29a:	d003      	beq.n	800b2a4 <TIM_Base_SetConfig+0xf8>
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	4a12      	ldr	r2, [pc, #72]	@ (800b2e8 <TIM_Base_SetConfig+0x13c>)
 800b2a0:	4293      	cmp	r3, r2
 800b2a2:	d103      	bne.n	800b2ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	691a      	ldr	r2, [r3, #16]
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2201      	movs	r2, #1
 800b2b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	691b      	ldr	r3, [r3, #16]
 800b2b6:	f003 0301 	and.w	r3, r3, #1
 800b2ba:	2b01      	cmp	r3, #1
 800b2bc:	d105      	bne.n	800b2ca <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	691b      	ldr	r3, [r3, #16]
 800b2c2:	f023 0201 	bic.w	r2, r3, #1
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	611a      	str	r2, [r3, #16]
  }
}
 800b2ca:	bf00      	nop
 800b2cc:	3714      	adds	r7, #20
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d4:	4770      	bx	lr
 800b2d6:	bf00      	nop
 800b2d8:	40010000 	.word	0x40010000
 800b2dc:	40000400 	.word	0x40000400
 800b2e0:	40000800 	.word	0x40000800
 800b2e4:	40000c00 	.word	0x40000c00
 800b2e8:	40010400 	.word	0x40010400
 800b2ec:	40014000 	.word	0x40014000
 800b2f0:	40014400 	.word	0x40014400
 800b2f4:	40014800 	.word	0x40014800
 800b2f8:	40001800 	.word	0x40001800
 800b2fc:	40001c00 	.word	0x40001c00
 800b300:	40002000 	.word	0x40002000

0800b304 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b304:	b480      	push	{r7}
 800b306:	b087      	sub	sp, #28
 800b308:	af00      	add	r7, sp, #0
 800b30a:	60f8      	str	r0, [r7, #12]
 800b30c:	60b9      	str	r1, [r7, #8]
 800b30e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	6a1b      	ldr	r3, [r3, #32]
 800b314:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	6a1b      	ldr	r3, [r3, #32]
 800b31a:	f023 0201 	bic.w	r2, r3, #1
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	699b      	ldr	r3, [r3, #24]
 800b326:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b328:	693b      	ldr	r3, [r7, #16]
 800b32a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b32e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	011b      	lsls	r3, r3, #4
 800b334:	693a      	ldr	r2, [r7, #16]
 800b336:	4313      	orrs	r3, r2
 800b338:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	f023 030a 	bic.w	r3, r3, #10
 800b340:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b342:	697a      	ldr	r2, [r7, #20]
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	4313      	orrs	r3, r2
 800b348:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	693a      	ldr	r2, [r7, #16]
 800b34e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	697a      	ldr	r2, [r7, #20]
 800b354:	621a      	str	r2, [r3, #32]
}
 800b356:	bf00      	nop
 800b358:	371c      	adds	r7, #28
 800b35a:	46bd      	mov	sp, r7
 800b35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b360:	4770      	bx	lr

0800b362 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b362:	b480      	push	{r7}
 800b364:	b087      	sub	sp, #28
 800b366:	af00      	add	r7, sp, #0
 800b368:	60f8      	str	r0, [r7, #12]
 800b36a:	60b9      	str	r1, [r7, #8]
 800b36c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	6a1b      	ldr	r3, [r3, #32]
 800b372:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	6a1b      	ldr	r3, [r3, #32]
 800b378:	f023 0210 	bic.w	r2, r3, #16
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	699b      	ldr	r3, [r3, #24]
 800b384:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b386:	693b      	ldr	r3, [r7, #16]
 800b388:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b38c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	031b      	lsls	r3, r3, #12
 800b392:	693a      	ldr	r2, [r7, #16]
 800b394:	4313      	orrs	r3, r2
 800b396:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b398:	697b      	ldr	r3, [r7, #20]
 800b39a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b39e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	011b      	lsls	r3, r3, #4
 800b3a4:	697a      	ldr	r2, [r7, #20]
 800b3a6:	4313      	orrs	r3, r2
 800b3a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	693a      	ldr	r2, [r7, #16]
 800b3ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	697a      	ldr	r2, [r7, #20]
 800b3b4:	621a      	str	r2, [r3, #32]
}
 800b3b6:	bf00      	nop
 800b3b8:	371c      	adds	r7, #28
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c0:	4770      	bx	lr

0800b3c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b3c2:	b480      	push	{r7}
 800b3c4:	b085      	sub	sp, #20
 800b3c6:	af00      	add	r7, sp, #0
 800b3c8:	6078      	str	r0, [r7, #4]
 800b3ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	689b      	ldr	r3, [r3, #8]
 800b3d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b3d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b3da:	683a      	ldr	r2, [r7, #0]
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	4313      	orrs	r3, r2
 800b3e0:	f043 0307 	orr.w	r3, r3, #7
 800b3e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	68fa      	ldr	r2, [r7, #12]
 800b3ea:	609a      	str	r2, [r3, #8]
}
 800b3ec:	bf00      	nop
 800b3ee:	3714      	adds	r7, #20
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f6:	4770      	bx	lr

0800b3f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	b087      	sub	sp, #28
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	60f8      	str	r0, [r7, #12]
 800b400:	60b9      	str	r1, [r7, #8]
 800b402:	607a      	str	r2, [r7, #4]
 800b404:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	689b      	ldr	r3, [r3, #8]
 800b40a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b40c:	697b      	ldr	r3, [r7, #20]
 800b40e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b412:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	021a      	lsls	r2, r3, #8
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	431a      	orrs	r2, r3
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	4313      	orrs	r3, r2
 800b420:	697a      	ldr	r2, [r7, #20]
 800b422:	4313      	orrs	r3, r2
 800b424:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	697a      	ldr	r2, [r7, #20]
 800b42a:	609a      	str	r2, [r3, #8]
}
 800b42c:	bf00      	nop
 800b42e:	371c      	adds	r7, #28
 800b430:	46bd      	mov	sp, r7
 800b432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b436:	4770      	bx	lr

0800b438 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b438:	b480      	push	{r7}
 800b43a:	b085      	sub	sp, #20
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
 800b440:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b448:	2b01      	cmp	r3, #1
 800b44a:	d101      	bne.n	800b450 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b44c:	2302      	movs	r3, #2
 800b44e:	e05a      	b.n	800b506 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2201      	movs	r2, #1
 800b454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2202      	movs	r2, #2
 800b45c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	685b      	ldr	r3, [r3, #4]
 800b466:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	689b      	ldr	r3, [r3, #8]
 800b46e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b476:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	68fa      	ldr	r2, [r7, #12]
 800b47e:	4313      	orrs	r3, r2
 800b480:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	68fa      	ldr	r2, [r7, #12]
 800b488:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	4a21      	ldr	r2, [pc, #132]	@ (800b514 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b490:	4293      	cmp	r3, r2
 800b492:	d022      	beq.n	800b4da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b49c:	d01d      	beq.n	800b4da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	4a1d      	ldr	r2, [pc, #116]	@ (800b518 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b4a4:	4293      	cmp	r3, r2
 800b4a6:	d018      	beq.n	800b4da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	4a1b      	ldr	r2, [pc, #108]	@ (800b51c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b4ae:	4293      	cmp	r3, r2
 800b4b0:	d013      	beq.n	800b4da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	4a1a      	ldr	r2, [pc, #104]	@ (800b520 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b4b8:	4293      	cmp	r3, r2
 800b4ba:	d00e      	beq.n	800b4da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	4a18      	ldr	r2, [pc, #96]	@ (800b524 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b4c2:	4293      	cmp	r3, r2
 800b4c4:	d009      	beq.n	800b4da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	4a17      	ldr	r2, [pc, #92]	@ (800b528 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b4cc:	4293      	cmp	r3, r2
 800b4ce:	d004      	beq.n	800b4da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	4a15      	ldr	r2, [pc, #84]	@ (800b52c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b4d6:	4293      	cmp	r3, r2
 800b4d8:	d10c      	bne.n	800b4f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b4da:	68bb      	ldr	r3, [r7, #8]
 800b4dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b4e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	685b      	ldr	r3, [r3, #4]
 800b4e6:	68ba      	ldr	r2, [r7, #8]
 800b4e8:	4313      	orrs	r3, r2
 800b4ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	68ba      	ldr	r2, [r7, #8]
 800b4f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2201      	movs	r2, #1
 800b4f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2200      	movs	r2, #0
 800b500:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b504:	2300      	movs	r3, #0
}
 800b506:	4618      	mov	r0, r3
 800b508:	3714      	adds	r7, #20
 800b50a:	46bd      	mov	sp, r7
 800b50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b510:	4770      	bx	lr
 800b512:	bf00      	nop
 800b514:	40010000 	.word	0x40010000
 800b518:	40000400 	.word	0x40000400
 800b51c:	40000800 	.word	0x40000800
 800b520:	40000c00 	.word	0x40000c00
 800b524:	40010400 	.word	0x40010400
 800b528:	40014000 	.word	0x40014000
 800b52c:	40001800 	.word	0x40001800

0800b530 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b530:	b480      	push	{r7}
 800b532:	b083      	sub	sp, #12
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b538:	bf00      	nop
 800b53a:	370c      	adds	r7, #12
 800b53c:	46bd      	mov	sp, r7
 800b53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b542:	4770      	bx	lr

0800b544 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b544:	b480      	push	{r7}
 800b546:	b083      	sub	sp, #12
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b54c:	bf00      	nop
 800b54e:	370c      	adds	r7, #12
 800b550:	46bd      	mov	sp, r7
 800b552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b556:	4770      	bx	lr

0800b558 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b082      	sub	sp, #8
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d101      	bne.n	800b56a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b566:	2301      	movs	r3, #1
 800b568:	e042      	b.n	800b5f0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b570:	b2db      	uxtb	r3, r3
 800b572:	2b00      	cmp	r3, #0
 800b574:	d106      	bne.n	800b584 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	2200      	movs	r2, #0
 800b57a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f7fb fb84 	bl	8006c8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2224      	movs	r2, #36	@ 0x24
 800b588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	68da      	ldr	r2, [r3, #12]
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b59a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b59c:	6878      	ldr	r0, [r7, #4]
 800b59e:	f000 fb47 	bl	800bc30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	691a      	ldr	r2, [r3, #16]
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b5b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	695a      	ldr	r2, [r3, #20]
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b5c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	68da      	ldr	r2, [r3, #12]
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b5d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2220      	movs	r2, #32
 800b5dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2220      	movs	r2, #32
 800b5e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800b5ee:	2300      	movs	r3, #0
}
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	3708      	adds	r7, #8
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	bd80      	pop	{r7, pc}

0800b5f8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b08a      	sub	sp, #40	@ 0x28
 800b5fc:	af02      	add	r7, sp, #8
 800b5fe:	60f8      	str	r0, [r7, #12]
 800b600:	60b9      	str	r1, [r7, #8]
 800b602:	603b      	str	r3, [r7, #0]
 800b604:	4613      	mov	r3, r2
 800b606:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b608:	2300      	movs	r3, #0
 800b60a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b612:	b2db      	uxtb	r3, r3
 800b614:	2b20      	cmp	r3, #32
 800b616:	d175      	bne.n	800b704 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b618:	68bb      	ldr	r3, [r7, #8]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d002      	beq.n	800b624 <HAL_UART_Transmit+0x2c>
 800b61e:	88fb      	ldrh	r3, [r7, #6]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d101      	bne.n	800b628 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b624:	2301      	movs	r3, #1
 800b626:	e06e      	b.n	800b706 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	2200      	movs	r2, #0
 800b62c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	2221      	movs	r2, #33	@ 0x21
 800b632:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b636:	f7fb fd19 	bl	800706c <HAL_GetTick>
 800b63a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	88fa      	ldrh	r2, [r7, #6]
 800b640:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	88fa      	ldrh	r2, [r7, #6]
 800b646:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	689b      	ldr	r3, [r3, #8]
 800b64c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b650:	d108      	bne.n	800b664 <HAL_UART_Transmit+0x6c>
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	691b      	ldr	r3, [r3, #16]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d104      	bne.n	800b664 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b65a:	2300      	movs	r3, #0
 800b65c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	61bb      	str	r3, [r7, #24]
 800b662:	e003      	b.n	800b66c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b668:	2300      	movs	r3, #0
 800b66a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b66c:	e02e      	b.n	800b6cc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	9300      	str	r3, [sp, #0]
 800b672:	697b      	ldr	r3, [r7, #20]
 800b674:	2200      	movs	r2, #0
 800b676:	2180      	movs	r1, #128	@ 0x80
 800b678:	68f8      	ldr	r0, [r7, #12]
 800b67a:	f000 f9cb 	bl	800ba14 <UART_WaitOnFlagUntilTimeout>
 800b67e:	4603      	mov	r3, r0
 800b680:	2b00      	cmp	r3, #0
 800b682:	d005      	beq.n	800b690 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	2220      	movs	r2, #32
 800b688:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800b68c:	2303      	movs	r3, #3
 800b68e:	e03a      	b.n	800b706 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800b690:	69fb      	ldr	r3, [r7, #28]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d10b      	bne.n	800b6ae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b696:	69bb      	ldr	r3, [r7, #24]
 800b698:	881b      	ldrh	r3, [r3, #0]
 800b69a:	461a      	mov	r2, r3
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b6a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b6a6:	69bb      	ldr	r3, [r7, #24]
 800b6a8:	3302      	adds	r3, #2
 800b6aa:	61bb      	str	r3, [r7, #24]
 800b6ac:	e007      	b.n	800b6be <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b6ae:	69fb      	ldr	r3, [r7, #28]
 800b6b0:	781a      	ldrb	r2, [r3, #0]
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b6b8:	69fb      	ldr	r3, [r7, #28]
 800b6ba:	3301      	adds	r3, #1
 800b6bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b6c2:	b29b      	uxth	r3, r3
 800b6c4:	3b01      	subs	r3, #1
 800b6c6:	b29a      	uxth	r2, r3
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b6d0:	b29b      	uxth	r3, r3
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d1cb      	bne.n	800b66e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	9300      	str	r3, [sp, #0]
 800b6da:	697b      	ldr	r3, [r7, #20]
 800b6dc:	2200      	movs	r2, #0
 800b6de:	2140      	movs	r1, #64	@ 0x40
 800b6e0:	68f8      	ldr	r0, [r7, #12]
 800b6e2:	f000 f997 	bl	800ba14 <UART_WaitOnFlagUntilTimeout>
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d005      	beq.n	800b6f8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	2220      	movs	r2, #32
 800b6f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800b6f4:	2303      	movs	r3, #3
 800b6f6:	e006      	b.n	800b706 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	2220      	movs	r2, #32
 800b6fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800b700:	2300      	movs	r3, #0
 800b702:	e000      	b.n	800b706 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800b704:	2302      	movs	r3, #2
  }
}
 800b706:	4618      	mov	r0, r3
 800b708:	3720      	adds	r7, #32
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bd80      	pop	{r7, pc}

0800b70e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b70e:	b580      	push	{r7, lr}
 800b710:	b08a      	sub	sp, #40	@ 0x28
 800b712:	af02      	add	r7, sp, #8
 800b714:	60f8      	str	r0, [r7, #12]
 800b716:	60b9      	str	r1, [r7, #8]
 800b718:	603b      	str	r3, [r7, #0]
 800b71a:	4613      	mov	r3, r2
 800b71c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b71e:	2300      	movs	r3, #0
 800b720:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b728:	b2db      	uxtb	r3, r3
 800b72a:	2b20      	cmp	r3, #32
 800b72c:	f040 8081 	bne.w	800b832 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d002      	beq.n	800b73c <HAL_UART_Receive+0x2e>
 800b736:	88fb      	ldrh	r3, [r7, #6]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d101      	bne.n	800b740 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800b73c:	2301      	movs	r3, #1
 800b73e:	e079      	b.n	800b834 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	2200      	movs	r2, #0
 800b744:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	2222      	movs	r2, #34	@ 0x22
 800b74a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	2200      	movs	r2, #0
 800b752:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b754:	f7fb fc8a 	bl	800706c <HAL_GetTick>
 800b758:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	88fa      	ldrh	r2, [r7, #6]
 800b75e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	88fa      	ldrh	r2, [r7, #6]
 800b764:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	689b      	ldr	r3, [r3, #8]
 800b76a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b76e:	d108      	bne.n	800b782 <HAL_UART_Receive+0x74>
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	691b      	ldr	r3, [r3, #16]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d104      	bne.n	800b782 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800b778:	2300      	movs	r3, #0
 800b77a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b77c:	68bb      	ldr	r3, [r7, #8]
 800b77e:	61bb      	str	r3, [r7, #24]
 800b780:	e003      	b.n	800b78a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b786:	2300      	movs	r3, #0
 800b788:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800b78a:	e047      	b.n	800b81c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	9300      	str	r3, [sp, #0]
 800b790:	697b      	ldr	r3, [r7, #20]
 800b792:	2200      	movs	r2, #0
 800b794:	2120      	movs	r1, #32
 800b796:	68f8      	ldr	r0, [r7, #12]
 800b798:	f000 f93c 	bl	800ba14 <UART_WaitOnFlagUntilTimeout>
 800b79c:	4603      	mov	r3, r0
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d005      	beq.n	800b7ae <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	2220      	movs	r2, #32
 800b7a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800b7aa:	2303      	movs	r3, #3
 800b7ac:	e042      	b.n	800b834 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800b7ae:	69fb      	ldr	r3, [r7, #28]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d10c      	bne.n	800b7ce <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	685b      	ldr	r3, [r3, #4]
 800b7ba:	b29b      	uxth	r3, r3
 800b7bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7c0:	b29a      	uxth	r2, r3
 800b7c2:	69bb      	ldr	r3, [r7, #24]
 800b7c4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800b7c6:	69bb      	ldr	r3, [r7, #24]
 800b7c8:	3302      	adds	r3, #2
 800b7ca:	61bb      	str	r3, [r7, #24]
 800b7cc:	e01f      	b.n	800b80e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	689b      	ldr	r3, [r3, #8]
 800b7d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b7d6:	d007      	beq.n	800b7e8 <HAL_UART_Receive+0xda>
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	689b      	ldr	r3, [r3, #8]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d10a      	bne.n	800b7f6 <HAL_UART_Receive+0xe8>
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	691b      	ldr	r3, [r3, #16]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d106      	bne.n	800b7f6 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	685b      	ldr	r3, [r3, #4]
 800b7ee:	b2da      	uxtb	r2, r3
 800b7f0:	69fb      	ldr	r3, [r7, #28]
 800b7f2:	701a      	strb	r2, [r3, #0]
 800b7f4:	e008      	b.n	800b808 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	685b      	ldr	r3, [r3, #4]
 800b7fc:	b2db      	uxtb	r3, r3
 800b7fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b802:	b2da      	uxtb	r2, r3
 800b804:	69fb      	ldr	r3, [r7, #28]
 800b806:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800b808:	69fb      	ldr	r3, [r7, #28]
 800b80a:	3301      	adds	r3, #1
 800b80c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b812:	b29b      	uxth	r3, r3
 800b814:	3b01      	subs	r3, #1
 800b816:	b29a      	uxth	r2, r3
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b820:	b29b      	uxth	r3, r3
 800b822:	2b00      	cmp	r3, #0
 800b824:	d1b2      	bne.n	800b78c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	2220      	movs	r2, #32
 800b82a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800b82e:	2300      	movs	r3, #0
 800b830:	e000      	b.n	800b834 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800b832:	2302      	movs	r3, #2
  }
}
 800b834:	4618      	mov	r0, r3
 800b836:	3720      	adds	r7, #32
 800b838:	46bd      	mov	sp, r7
 800b83a:	bd80      	pop	{r7, pc}

0800b83c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b084      	sub	sp, #16
 800b840:	af00      	add	r7, sp, #0
 800b842:	60f8      	str	r0, [r7, #12]
 800b844:	60b9      	str	r1, [r7, #8]
 800b846:	4613      	mov	r3, r2
 800b848:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b850:	b2db      	uxtb	r3, r3
 800b852:	2b20      	cmp	r3, #32
 800b854:	d112      	bne.n	800b87c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800b856:	68bb      	ldr	r3, [r7, #8]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d002      	beq.n	800b862 <HAL_UART_Receive_IT+0x26>
 800b85c:	88fb      	ldrh	r3, [r7, #6]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d101      	bne.n	800b866 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b862:	2301      	movs	r3, #1
 800b864:	e00b      	b.n	800b87e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	2200      	movs	r2, #0
 800b86a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b86c:	88fb      	ldrh	r3, [r7, #6]
 800b86e:	461a      	mov	r2, r3
 800b870:	68b9      	ldr	r1, [r7, #8]
 800b872:	68f8      	ldr	r0, [r7, #12]
 800b874:	f000 f927 	bl	800bac6 <UART_Start_Receive_IT>
 800b878:	4603      	mov	r3, r0
 800b87a:	e000      	b.n	800b87e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800b87c:	2302      	movs	r3, #2
  }
}
 800b87e:	4618      	mov	r0, r3
 800b880:	3710      	adds	r7, #16
 800b882:	46bd      	mov	sp, r7
 800b884:	bd80      	pop	{r7, pc}
	...

0800b888 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b09a      	sub	sp, #104	@ 0x68
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	330c      	adds	r3, #12
 800b896:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b898:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b89a:	e853 3f00 	ldrex	r3, [r3]
 800b89e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b8a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b8a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b8a6:	667b      	str	r3, [r7, #100]	@ 0x64
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	330c      	adds	r3, #12
 800b8ae:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b8b0:	657a      	str	r2, [r7, #84]	@ 0x54
 800b8b2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8b4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b8b6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b8b8:	e841 2300 	strex	r3, r2, [r1]
 800b8bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b8be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d1e5      	bne.n	800b890 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	3314      	adds	r3, #20
 800b8ca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8ce:	e853 3f00 	ldrex	r3, [r3]
 800b8d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b8d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8d6:	f023 0301 	bic.w	r3, r3, #1
 800b8da:	663b      	str	r3, [r7, #96]	@ 0x60
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	3314      	adds	r3, #20
 800b8e2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b8e4:	643a      	str	r2, [r7, #64]	@ 0x40
 800b8e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b8ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b8ec:	e841 2300 	strex	r3, r2, [r1]
 800b8f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b8f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d1e5      	bne.n	800b8c4 <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8fc:	2b01      	cmp	r3, #1
 800b8fe:	d119      	bne.n	800b934 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	330c      	adds	r3, #12
 800b906:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b908:	6a3b      	ldr	r3, [r7, #32]
 800b90a:	e853 3f00 	ldrex	r3, [r3]
 800b90e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b910:	69fb      	ldr	r3, [r7, #28]
 800b912:	f023 0310 	bic.w	r3, r3, #16
 800b916:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	330c      	adds	r3, #12
 800b91e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b920:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b922:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b924:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b926:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b928:	e841 2300 	strex	r3, r2, [r1]
 800b92c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b92e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b930:	2b00      	cmp	r3, #0
 800b932:	d1e5      	bne.n	800b900 <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	695b      	ldr	r3, [r3, #20]
 800b93a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b93e:	2b40      	cmp	r3, #64	@ 0x40
 800b940:	d13f      	bne.n	800b9c2 <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	3314      	adds	r3, #20
 800b948:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	e853 3f00 	ldrex	r3, [r3]
 800b950:	60bb      	str	r3, [r7, #8]
   return(result);
 800b952:	68bb      	ldr	r3, [r7, #8]
 800b954:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b958:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	3314      	adds	r3, #20
 800b960:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b962:	61ba      	str	r2, [r7, #24]
 800b964:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b966:	6979      	ldr	r1, [r7, #20]
 800b968:	69ba      	ldr	r2, [r7, #24]
 800b96a:	e841 2300 	strex	r3, r2, [r1]
 800b96e:	613b      	str	r3, [r7, #16]
   return(result);
 800b970:	693b      	ldr	r3, [r7, #16]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d1e5      	bne.n	800b942 <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d013      	beq.n	800b9a6 <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b982:	4a19      	ldr	r2, [pc, #100]	@ (800b9e8 <HAL_UART_AbortReceive_IT+0x160>)
 800b984:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b98a:	4618      	mov	r0, r3
 800b98c:	f7fc fc46 	bl	800821c <HAL_DMA_Abort_IT>
 800b990:	4603      	mov	r3, r0
 800b992:	2b00      	cmp	r3, #0
 800b994:	d022      	beq.n	800b9dc <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b99a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b99c:	687a      	ldr	r2, [r7, #4]
 800b99e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800b9a0:	4610      	mov	r0, r2
 800b9a2:	4798      	blx	r3
 800b9a4:	e01a      	b.n	800b9dc <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	85da      	strh	r2, [r3, #46]	@ 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2220      	movs	r2, #32
 800b9b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f000 f820 	bl	800ba00 <HAL_UART_AbortReceiveCpltCallback>
 800b9c0:	e00c      	b.n	800b9dc <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2220      	movs	r2, #32
 800b9cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	f000 f812 	bl	800ba00 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800b9dc:	2300      	movs	r3, #0
}
 800b9de:	4618      	mov	r0, r3
 800b9e0:	3768      	adds	r7, #104	@ 0x68
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	bd80      	pop	{r7, pc}
 800b9e6:	bf00      	nop
 800b9e8:	0800bc01 	.word	0x0800bc01

0800b9ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b9ec:	b480      	push	{r7}
 800b9ee:	b083      	sub	sp, #12
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b9f4:	bf00      	nop
 800b9f6:	370c      	adds	r7, #12
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fe:	4770      	bx	lr

0800ba00 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800ba00:	b480      	push	{r7}
 800ba02:	b083      	sub	sp, #12
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800ba08:	bf00      	nop
 800ba0a:	370c      	adds	r7, #12
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba12:	4770      	bx	lr

0800ba14 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b086      	sub	sp, #24
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	60f8      	str	r0, [r7, #12]
 800ba1c:	60b9      	str	r1, [r7, #8]
 800ba1e:	603b      	str	r3, [r7, #0]
 800ba20:	4613      	mov	r3, r2
 800ba22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ba24:	e03b      	b.n	800ba9e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba26:	6a3b      	ldr	r3, [r7, #32]
 800ba28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba2c:	d037      	beq.n	800ba9e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba2e:	f7fb fb1d 	bl	800706c <HAL_GetTick>
 800ba32:	4602      	mov	r2, r0
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	1ad3      	subs	r3, r2, r3
 800ba38:	6a3a      	ldr	r2, [r7, #32]
 800ba3a:	429a      	cmp	r2, r3
 800ba3c:	d302      	bcc.n	800ba44 <UART_WaitOnFlagUntilTimeout+0x30>
 800ba3e:	6a3b      	ldr	r3, [r7, #32]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d101      	bne.n	800ba48 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ba44:	2303      	movs	r3, #3
 800ba46:	e03a      	b.n	800babe <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	68db      	ldr	r3, [r3, #12]
 800ba4e:	f003 0304 	and.w	r3, r3, #4
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d023      	beq.n	800ba9e <UART_WaitOnFlagUntilTimeout+0x8a>
 800ba56:	68bb      	ldr	r3, [r7, #8]
 800ba58:	2b80      	cmp	r3, #128	@ 0x80
 800ba5a:	d020      	beq.n	800ba9e <UART_WaitOnFlagUntilTimeout+0x8a>
 800ba5c:	68bb      	ldr	r3, [r7, #8]
 800ba5e:	2b40      	cmp	r3, #64	@ 0x40
 800ba60:	d01d      	beq.n	800ba9e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	f003 0308 	and.w	r3, r3, #8
 800ba6c:	2b08      	cmp	r3, #8
 800ba6e:	d116      	bne.n	800ba9e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800ba70:	2300      	movs	r3, #0
 800ba72:	617b      	str	r3, [r7, #20]
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	617b      	str	r3, [r7, #20]
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	685b      	ldr	r3, [r3, #4]
 800ba82:	617b      	str	r3, [r7, #20]
 800ba84:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ba86:	68f8      	ldr	r0, [r7, #12]
 800ba88:	f000 f857 	bl	800bb3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	2208      	movs	r2, #8
 800ba90:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	2200      	movs	r2, #0
 800ba96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	e00f      	b.n	800babe <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	681a      	ldr	r2, [r3, #0]
 800baa4:	68bb      	ldr	r3, [r7, #8]
 800baa6:	4013      	ands	r3, r2
 800baa8:	68ba      	ldr	r2, [r7, #8]
 800baaa:	429a      	cmp	r2, r3
 800baac:	bf0c      	ite	eq
 800baae:	2301      	moveq	r3, #1
 800bab0:	2300      	movne	r3, #0
 800bab2:	b2db      	uxtb	r3, r3
 800bab4:	461a      	mov	r2, r3
 800bab6:	79fb      	ldrb	r3, [r7, #7]
 800bab8:	429a      	cmp	r2, r3
 800baba:	d0b4      	beq.n	800ba26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800babc:	2300      	movs	r3, #0
}
 800babe:	4618      	mov	r0, r3
 800bac0:	3718      	adds	r7, #24
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bd80      	pop	{r7, pc}

0800bac6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bac6:	b480      	push	{r7}
 800bac8:	b085      	sub	sp, #20
 800baca:	af00      	add	r7, sp, #0
 800bacc:	60f8      	str	r0, [r7, #12]
 800bace:	60b9      	str	r1, [r7, #8]
 800bad0:	4613      	mov	r3, r2
 800bad2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	68ba      	ldr	r2, [r7, #8]
 800bad8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	88fa      	ldrh	r2, [r7, #6]
 800bade:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	88fa      	ldrh	r2, [r7, #6]
 800bae4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	2200      	movs	r2, #0
 800baea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	2222      	movs	r2, #34	@ 0x22
 800baf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	691b      	ldr	r3, [r3, #16]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d007      	beq.n	800bb0c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	68da      	ldr	r2, [r3, #12]
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bb0a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	695a      	ldr	r2, [r3, #20]
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	f042 0201 	orr.w	r2, r2, #1
 800bb1a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	68da      	ldr	r2, [r3, #12]
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	f042 0220 	orr.w	r2, r2, #32
 800bb2a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bb2c:	2300      	movs	r3, #0
}
 800bb2e:	4618      	mov	r0, r3
 800bb30:	3714      	adds	r7, #20
 800bb32:	46bd      	mov	sp, r7
 800bb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb38:	4770      	bx	lr

0800bb3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bb3a:	b480      	push	{r7}
 800bb3c:	b095      	sub	sp, #84	@ 0x54
 800bb3e:	af00      	add	r7, sp, #0
 800bb40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	330c      	adds	r3, #12
 800bb48:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb4c:	e853 3f00 	ldrex	r3, [r3]
 800bb50:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bb52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bb58:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	330c      	adds	r3, #12
 800bb60:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bb62:	643a      	str	r2, [r7, #64]	@ 0x40
 800bb64:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb66:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bb68:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bb6a:	e841 2300 	strex	r3, r2, [r1]
 800bb6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bb70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d1e5      	bne.n	800bb42 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	3314      	adds	r3, #20
 800bb7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb7e:	6a3b      	ldr	r3, [r7, #32]
 800bb80:	e853 3f00 	ldrex	r3, [r3]
 800bb84:	61fb      	str	r3, [r7, #28]
   return(result);
 800bb86:	69fb      	ldr	r3, [r7, #28]
 800bb88:	f023 0301 	bic.w	r3, r3, #1
 800bb8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	3314      	adds	r3, #20
 800bb94:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bb96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bb98:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb9a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bb9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bb9e:	e841 2300 	strex	r3, r2, [r1]
 800bba2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d1e5      	bne.n	800bb76 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbae:	2b01      	cmp	r3, #1
 800bbb0:	d119      	bne.n	800bbe6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	330c      	adds	r3, #12
 800bbb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	e853 3f00 	ldrex	r3, [r3]
 800bbc0:	60bb      	str	r3, [r7, #8]
   return(result);
 800bbc2:	68bb      	ldr	r3, [r7, #8]
 800bbc4:	f023 0310 	bic.w	r3, r3, #16
 800bbc8:	647b      	str	r3, [r7, #68]	@ 0x44
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	330c      	adds	r3, #12
 800bbd0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bbd2:	61ba      	str	r2, [r7, #24]
 800bbd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbd6:	6979      	ldr	r1, [r7, #20]
 800bbd8:	69ba      	ldr	r2, [r7, #24]
 800bbda:	e841 2300 	strex	r3, r2, [r1]
 800bbde:	613b      	str	r3, [r7, #16]
   return(result);
 800bbe0:	693b      	ldr	r3, [r7, #16]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d1e5      	bne.n	800bbb2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2220      	movs	r2, #32
 800bbea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800bbf4:	bf00      	nop
 800bbf6:	3754      	adds	r7, #84	@ 0x54
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfe:	4770      	bx	lr

0800bc00 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b084      	sub	sp, #16
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc0c:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	2200      	movs	r2, #0
 800bc12:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	2220      	movs	r2, #32
 800bc18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	2200      	movs	r2, #0
 800bc20:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800bc22:	68f8      	ldr	r0, [r7, #12]
 800bc24:	f7ff feec 	bl	800ba00 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc28:	bf00      	nop
 800bc2a:	3710      	adds	r7, #16
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}

0800bc30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bc30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bc34:	b0c0      	sub	sp, #256	@ 0x100
 800bc36:	af00      	add	r7, sp, #0
 800bc38:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bc3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	691b      	ldr	r3, [r3, #16]
 800bc44:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800bc48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc4c:	68d9      	ldr	r1, [r3, #12]
 800bc4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc52:	681a      	ldr	r2, [r3, #0]
 800bc54:	ea40 0301 	orr.w	r3, r0, r1
 800bc58:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bc5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc5e:	689a      	ldr	r2, [r3, #8]
 800bc60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc64:	691b      	ldr	r3, [r3, #16]
 800bc66:	431a      	orrs	r2, r3
 800bc68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc6c:	695b      	ldr	r3, [r3, #20]
 800bc6e:	431a      	orrs	r2, r3
 800bc70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc74:	69db      	ldr	r3, [r3, #28]
 800bc76:	4313      	orrs	r3, r2
 800bc78:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800bc7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	68db      	ldr	r3, [r3, #12]
 800bc84:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800bc88:	f021 010c 	bic.w	r1, r1, #12
 800bc8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc90:	681a      	ldr	r2, [r3, #0]
 800bc92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800bc96:	430b      	orrs	r3, r1
 800bc98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bc9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	695b      	ldr	r3, [r3, #20]
 800bca2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800bca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bcaa:	6999      	ldr	r1, [r3, #24]
 800bcac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bcb0:	681a      	ldr	r2, [r3, #0]
 800bcb2:	ea40 0301 	orr.w	r3, r0, r1
 800bcb6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bcb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bcbc:	681a      	ldr	r2, [r3, #0]
 800bcbe:	4b8f      	ldr	r3, [pc, #572]	@ (800befc <UART_SetConfig+0x2cc>)
 800bcc0:	429a      	cmp	r2, r3
 800bcc2:	d005      	beq.n	800bcd0 <UART_SetConfig+0xa0>
 800bcc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bcc8:	681a      	ldr	r2, [r3, #0]
 800bcca:	4b8d      	ldr	r3, [pc, #564]	@ (800bf00 <UART_SetConfig+0x2d0>)
 800bccc:	429a      	cmp	r2, r3
 800bcce:	d104      	bne.n	800bcda <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bcd0:	f7fe fc6c 	bl	800a5ac <HAL_RCC_GetPCLK2Freq>
 800bcd4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800bcd8:	e003      	b.n	800bce2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bcda:	f7fe fc53 	bl	800a584 <HAL_RCC_GetPCLK1Freq>
 800bcde:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bce6:	69db      	ldr	r3, [r3, #28]
 800bce8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bcec:	f040 810c 	bne.w	800bf08 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bcf0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800bcfa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800bcfe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800bd02:	4622      	mov	r2, r4
 800bd04:	462b      	mov	r3, r5
 800bd06:	1891      	adds	r1, r2, r2
 800bd08:	65b9      	str	r1, [r7, #88]	@ 0x58
 800bd0a:	415b      	adcs	r3, r3
 800bd0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bd0e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800bd12:	4621      	mov	r1, r4
 800bd14:	eb12 0801 	adds.w	r8, r2, r1
 800bd18:	4629      	mov	r1, r5
 800bd1a:	eb43 0901 	adc.w	r9, r3, r1
 800bd1e:	f04f 0200 	mov.w	r2, #0
 800bd22:	f04f 0300 	mov.w	r3, #0
 800bd26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bd2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bd2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bd32:	4690      	mov	r8, r2
 800bd34:	4699      	mov	r9, r3
 800bd36:	4623      	mov	r3, r4
 800bd38:	eb18 0303 	adds.w	r3, r8, r3
 800bd3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bd40:	462b      	mov	r3, r5
 800bd42:	eb49 0303 	adc.w	r3, r9, r3
 800bd46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800bd4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bd4e:	685b      	ldr	r3, [r3, #4]
 800bd50:	2200      	movs	r2, #0
 800bd52:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800bd56:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800bd5a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800bd5e:	460b      	mov	r3, r1
 800bd60:	18db      	adds	r3, r3, r3
 800bd62:	653b      	str	r3, [r7, #80]	@ 0x50
 800bd64:	4613      	mov	r3, r2
 800bd66:	eb42 0303 	adc.w	r3, r2, r3
 800bd6a:	657b      	str	r3, [r7, #84]	@ 0x54
 800bd6c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800bd70:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800bd74:	f7f4 ff88 	bl	8000c88 <__aeabi_uldivmod>
 800bd78:	4602      	mov	r2, r0
 800bd7a:	460b      	mov	r3, r1
 800bd7c:	4b61      	ldr	r3, [pc, #388]	@ (800bf04 <UART_SetConfig+0x2d4>)
 800bd7e:	fba3 2302 	umull	r2, r3, r3, r2
 800bd82:	095b      	lsrs	r3, r3, #5
 800bd84:	011c      	lsls	r4, r3, #4
 800bd86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bd90:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800bd94:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800bd98:	4642      	mov	r2, r8
 800bd9a:	464b      	mov	r3, r9
 800bd9c:	1891      	adds	r1, r2, r2
 800bd9e:	64b9      	str	r1, [r7, #72]	@ 0x48
 800bda0:	415b      	adcs	r3, r3
 800bda2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bda4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800bda8:	4641      	mov	r1, r8
 800bdaa:	eb12 0a01 	adds.w	sl, r2, r1
 800bdae:	4649      	mov	r1, r9
 800bdb0:	eb43 0b01 	adc.w	fp, r3, r1
 800bdb4:	f04f 0200 	mov.w	r2, #0
 800bdb8:	f04f 0300 	mov.w	r3, #0
 800bdbc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800bdc0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800bdc4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bdc8:	4692      	mov	sl, r2
 800bdca:	469b      	mov	fp, r3
 800bdcc:	4643      	mov	r3, r8
 800bdce:	eb1a 0303 	adds.w	r3, sl, r3
 800bdd2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800bdd6:	464b      	mov	r3, r9
 800bdd8:	eb4b 0303 	adc.w	r3, fp, r3
 800bddc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800bde0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bde4:	685b      	ldr	r3, [r3, #4]
 800bde6:	2200      	movs	r2, #0
 800bde8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800bdec:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800bdf0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800bdf4:	460b      	mov	r3, r1
 800bdf6:	18db      	adds	r3, r3, r3
 800bdf8:	643b      	str	r3, [r7, #64]	@ 0x40
 800bdfa:	4613      	mov	r3, r2
 800bdfc:	eb42 0303 	adc.w	r3, r2, r3
 800be00:	647b      	str	r3, [r7, #68]	@ 0x44
 800be02:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800be06:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800be0a:	f7f4 ff3d 	bl	8000c88 <__aeabi_uldivmod>
 800be0e:	4602      	mov	r2, r0
 800be10:	460b      	mov	r3, r1
 800be12:	4611      	mov	r1, r2
 800be14:	4b3b      	ldr	r3, [pc, #236]	@ (800bf04 <UART_SetConfig+0x2d4>)
 800be16:	fba3 2301 	umull	r2, r3, r3, r1
 800be1a:	095b      	lsrs	r3, r3, #5
 800be1c:	2264      	movs	r2, #100	@ 0x64
 800be1e:	fb02 f303 	mul.w	r3, r2, r3
 800be22:	1acb      	subs	r3, r1, r3
 800be24:	00db      	lsls	r3, r3, #3
 800be26:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800be2a:	4b36      	ldr	r3, [pc, #216]	@ (800bf04 <UART_SetConfig+0x2d4>)
 800be2c:	fba3 2302 	umull	r2, r3, r3, r2
 800be30:	095b      	lsrs	r3, r3, #5
 800be32:	005b      	lsls	r3, r3, #1
 800be34:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800be38:	441c      	add	r4, r3
 800be3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800be3e:	2200      	movs	r2, #0
 800be40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800be44:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800be48:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800be4c:	4642      	mov	r2, r8
 800be4e:	464b      	mov	r3, r9
 800be50:	1891      	adds	r1, r2, r2
 800be52:	63b9      	str	r1, [r7, #56]	@ 0x38
 800be54:	415b      	adcs	r3, r3
 800be56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800be58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800be5c:	4641      	mov	r1, r8
 800be5e:	1851      	adds	r1, r2, r1
 800be60:	6339      	str	r1, [r7, #48]	@ 0x30
 800be62:	4649      	mov	r1, r9
 800be64:	414b      	adcs	r3, r1
 800be66:	637b      	str	r3, [r7, #52]	@ 0x34
 800be68:	f04f 0200 	mov.w	r2, #0
 800be6c:	f04f 0300 	mov.w	r3, #0
 800be70:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800be74:	4659      	mov	r1, fp
 800be76:	00cb      	lsls	r3, r1, #3
 800be78:	4651      	mov	r1, sl
 800be7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800be7e:	4651      	mov	r1, sl
 800be80:	00ca      	lsls	r2, r1, #3
 800be82:	4610      	mov	r0, r2
 800be84:	4619      	mov	r1, r3
 800be86:	4603      	mov	r3, r0
 800be88:	4642      	mov	r2, r8
 800be8a:	189b      	adds	r3, r3, r2
 800be8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800be90:	464b      	mov	r3, r9
 800be92:	460a      	mov	r2, r1
 800be94:	eb42 0303 	adc.w	r3, r2, r3
 800be98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800be9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bea0:	685b      	ldr	r3, [r3, #4]
 800bea2:	2200      	movs	r2, #0
 800bea4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800bea8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800beac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800beb0:	460b      	mov	r3, r1
 800beb2:	18db      	adds	r3, r3, r3
 800beb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800beb6:	4613      	mov	r3, r2
 800beb8:	eb42 0303 	adc.w	r3, r2, r3
 800bebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bebe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800bec2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800bec6:	f7f4 fedf 	bl	8000c88 <__aeabi_uldivmod>
 800beca:	4602      	mov	r2, r0
 800becc:	460b      	mov	r3, r1
 800bece:	4b0d      	ldr	r3, [pc, #52]	@ (800bf04 <UART_SetConfig+0x2d4>)
 800bed0:	fba3 1302 	umull	r1, r3, r3, r2
 800bed4:	095b      	lsrs	r3, r3, #5
 800bed6:	2164      	movs	r1, #100	@ 0x64
 800bed8:	fb01 f303 	mul.w	r3, r1, r3
 800bedc:	1ad3      	subs	r3, r2, r3
 800bede:	00db      	lsls	r3, r3, #3
 800bee0:	3332      	adds	r3, #50	@ 0x32
 800bee2:	4a08      	ldr	r2, [pc, #32]	@ (800bf04 <UART_SetConfig+0x2d4>)
 800bee4:	fba2 2303 	umull	r2, r3, r2, r3
 800bee8:	095b      	lsrs	r3, r3, #5
 800beea:	f003 0207 	and.w	r2, r3, #7
 800beee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	4422      	add	r2, r4
 800bef6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bef8:	e106      	b.n	800c108 <UART_SetConfig+0x4d8>
 800befa:	bf00      	nop
 800befc:	40011000 	.word	0x40011000
 800bf00:	40011400 	.word	0x40011400
 800bf04:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bf08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800bf12:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800bf16:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800bf1a:	4642      	mov	r2, r8
 800bf1c:	464b      	mov	r3, r9
 800bf1e:	1891      	adds	r1, r2, r2
 800bf20:	6239      	str	r1, [r7, #32]
 800bf22:	415b      	adcs	r3, r3
 800bf24:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bf2a:	4641      	mov	r1, r8
 800bf2c:	1854      	adds	r4, r2, r1
 800bf2e:	4649      	mov	r1, r9
 800bf30:	eb43 0501 	adc.w	r5, r3, r1
 800bf34:	f04f 0200 	mov.w	r2, #0
 800bf38:	f04f 0300 	mov.w	r3, #0
 800bf3c:	00eb      	lsls	r3, r5, #3
 800bf3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bf42:	00e2      	lsls	r2, r4, #3
 800bf44:	4614      	mov	r4, r2
 800bf46:	461d      	mov	r5, r3
 800bf48:	4643      	mov	r3, r8
 800bf4a:	18e3      	adds	r3, r4, r3
 800bf4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bf50:	464b      	mov	r3, r9
 800bf52:	eb45 0303 	adc.w	r3, r5, r3
 800bf56:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800bf5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bf5e:	685b      	ldr	r3, [r3, #4]
 800bf60:	2200      	movs	r2, #0
 800bf62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bf66:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800bf6a:	f04f 0200 	mov.w	r2, #0
 800bf6e:	f04f 0300 	mov.w	r3, #0
 800bf72:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800bf76:	4629      	mov	r1, r5
 800bf78:	008b      	lsls	r3, r1, #2
 800bf7a:	4621      	mov	r1, r4
 800bf7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bf80:	4621      	mov	r1, r4
 800bf82:	008a      	lsls	r2, r1, #2
 800bf84:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800bf88:	f7f4 fe7e 	bl	8000c88 <__aeabi_uldivmod>
 800bf8c:	4602      	mov	r2, r0
 800bf8e:	460b      	mov	r3, r1
 800bf90:	4b60      	ldr	r3, [pc, #384]	@ (800c114 <UART_SetConfig+0x4e4>)
 800bf92:	fba3 2302 	umull	r2, r3, r3, r2
 800bf96:	095b      	lsrs	r3, r3, #5
 800bf98:	011c      	lsls	r4, r3, #4
 800bf9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800bfa4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800bfa8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800bfac:	4642      	mov	r2, r8
 800bfae:	464b      	mov	r3, r9
 800bfb0:	1891      	adds	r1, r2, r2
 800bfb2:	61b9      	str	r1, [r7, #24]
 800bfb4:	415b      	adcs	r3, r3
 800bfb6:	61fb      	str	r3, [r7, #28]
 800bfb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bfbc:	4641      	mov	r1, r8
 800bfbe:	1851      	adds	r1, r2, r1
 800bfc0:	6139      	str	r1, [r7, #16]
 800bfc2:	4649      	mov	r1, r9
 800bfc4:	414b      	adcs	r3, r1
 800bfc6:	617b      	str	r3, [r7, #20]
 800bfc8:	f04f 0200 	mov.w	r2, #0
 800bfcc:	f04f 0300 	mov.w	r3, #0
 800bfd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800bfd4:	4659      	mov	r1, fp
 800bfd6:	00cb      	lsls	r3, r1, #3
 800bfd8:	4651      	mov	r1, sl
 800bfda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bfde:	4651      	mov	r1, sl
 800bfe0:	00ca      	lsls	r2, r1, #3
 800bfe2:	4610      	mov	r0, r2
 800bfe4:	4619      	mov	r1, r3
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	4642      	mov	r2, r8
 800bfea:	189b      	adds	r3, r3, r2
 800bfec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800bff0:	464b      	mov	r3, r9
 800bff2:	460a      	mov	r2, r1
 800bff4:	eb42 0303 	adc.w	r3, r2, r3
 800bff8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800bffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c000:	685b      	ldr	r3, [r3, #4]
 800c002:	2200      	movs	r2, #0
 800c004:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c006:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800c008:	f04f 0200 	mov.w	r2, #0
 800c00c:	f04f 0300 	mov.w	r3, #0
 800c010:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800c014:	4649      	mov	r1, r9
 800c016:	008b      	lsls	r3, r1, #2
 800c018:	4641      	mov	r1, r8
 800c01a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c01e:	4641      	mov	r1, r8
 800c020:	008a      	lsls	r2, r1, #2
 800c022:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800c026:	f7f4 fe2f 	bl	8000c88 <__aeabi_uldivmod>
 800c02a:	4602      	mov	r2, r0
 800c02c:	460b      	mov	r3, r1
 800c02e:	4611      	mov	r1, r2
 800c030:	4b38      	ldr	r3, [pc, #224]	@ (800c114 <UART_SetConfig+0x4e4>)
 800c032:	fba3 2301 	umull	r2, r3, r3, r1
 800c036:	095b      	lsrs	r3, r3, #5
 800c038:	2264      	movs	r2, #100	@ 0x64
 800c03a:	fb02 f303 	mul.w	r3, r2, r3
 800c03e:	1acb      	subs	r3, r1, r3
 800c040:	011b      	lsls	r3, r3, #4
 800c042:	3332      	adds	r3, #50	@ 0x32
 800c044:	4a33      	ldr	r2, [pc, #204]	@ (800c114 <UART_SetConfig+0x4e4>)
 800c046:	fba2 2303 	umull	r2, r3, r2, r3
 800c04a:	095b      	lsrs	r3, r3, #5
 800c04c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c050:	441c      	add	r4, r3
 800c052:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c056:	2200      	movs	r2, #0
 800c058:	673b      	str	r3, [r7, #112]	@ 0x70
 800c05a:	677a      	str	r2, [r7, #116]	@ 0x74
 800c05c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800c060:	4642      	mov	r2, r8
 800c062:	464b      	mov	r3, r9
 800c064:	1891      	adds	r1, r2, r2
 800c066:	60b9      	str	r1, [r7, #8]
 800c068:	415b      	adcs	r3, r3
 800c06a:	60fb      	str	r3, [r7, #12]
 800c06c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c070:	4641      	mov	r1, r8
 800c072:	1851      	adds	r1, r2, r1
 800c074:	6039      	str	r1, [r7, #0]
 800c076:	4649      	mov	r1, r9
 800c078:	414b      	adcs	r3, r1
 800c07a:	607b      	str	r3, [r7, #4]
 800c07c:	f04f 0200 	mov.w	r2, #0
 800c080:	f04f 0300 	mov.w	r3, #0
 800c084:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c088:	4659      	mov	r1, fp
 800c08a:	00cb      	lsls	r3, r1, #3
 800c08c:	4651      	mov	r1, sl
 800c08e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c092:	4651      	mov	r1, sl
 800c094:	00ca      	lsls	r2, r1, #3
 800c096:	4610      	mov	r0, r2
 800c098:	4619      	mov	r1, r3
 800c09a:	4603      	mov	r3, r0
 800c09c:	4642      	mov	r2, r8
 800c09e:	189b      	adds	r3, r3, r2
 800c0a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c0a2:	464b      	mov	r3, r9
 800c0a4:	460a      	mov	r2, r1
 800c0a6:	eb42 0303 	adc.w	r3, r2, r3
 800c0aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c0ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c0b0:	685b      	ldr	r3, [r3, #4]
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	663b      	str	r3, [r7, #96]	@ 0x60
 800c0b6:	667a      	str	r2, [r7, #100]	@ 0x64
 800c0b8:	f04f 0200 	mov.w	r2, #0
 800c0bc:	f04f 0300 	mov.w	r3, #0
 800c0c0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800c0c4:	4649      	mov	r1, r9
 800c0c6:	008b      	lsls	r3, r1, #2
 800c0c8:	4641      	mov	r1, r8
 800c0ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c0ce:	4641      	mov	r1, r8
 800c0d0:	008a      	lsls	r2, r1, #2
 800c0d2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800c0d6:	f7f4 fdd7 	bl	8000c88 <__aeabi_uldivmod>
 800c0da:	4602      	mov	r2, r0
 800c0dc:	460b      	mov	r3, r1
 800c0de:	4b0d      	ldr	r3, [pc, #52]	@ (800c114 <UART_SetConfig+0x4e4>)
 800c0e0:	fba3 1302 	umull	r1, r3, r3, r2
 800c0e4:	095b      	lsrs	r3, r3, #5
 800c0e6:	2164      	movs	r1, #100	@ 0x64
 800c0e8:	fb01 f303 	mul.w	r3, r1, r3
 800c0ec:	1ad3      	subs	r3, r2, r3
 800c0ee:	011b      	lsls	r3, r3, #4
 800c0f0:	3332      	adds	r3, #50	@ 0x32
 800c0f2:	4a08      	ldr	r2, [pc, #32]	@ (800c114 <UART_SetConfig+0x4e4>)
 800c0f4:	fba2 2303 	umull	r2, r3, r2, r3
 800c0f8:	095b      	lsrs	r3, r3, #5
 800c0fa:	f003 020f 	and.w	r2, r3, #15
 800c0fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	4422      	add	r2, r4
 800c106:	609a      	str	r2, [r3, #8]
}
 800c108:	bf00      	nop
 800c10a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800c10e:	46bd      	mov	sp, r7
 800c110:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c114:	51eb851f 	.word	0x51eb851f

0800c118 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c118:	b580      	push	{r7, lr}
 800c11a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c11c:	4b05      	ldr	r3, [pc, #20]	@ (800c134 <SysTick_Handler+0x1c>)
 800c11e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c120:	f001 fc44 	bl	800d9ac <xTaskGetSchedulerState>
 800c124:	4603      	mov	r3, r0
 800c126:	2b01      	cmp	r3, #1
 800c128:	d001      	beq.n	800c12e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c12a:	f002 fa3d 	bl	800e5a8 <xPortSysTickHandler>
  }
}
 800c12e:	bf00      	nop
 800c130:	bd80      	pop	{r7, pc}
 800c132:	bf00      	nop
 800c134:	e000e010 	.word	0xe000e010

0800c138 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c138:	b480      	push	{r7}
 800c13a:	b085      	sub	sp, #20
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	60f8      	str	r0, [r7, #12]
 800c140:	60b9      	str	r1, [r7, #8]
 800c142:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	4a07      	ldr	r2, [pc, #28]	@ (800c164 <vApplicationGetIdleTaskMemory+0x2c>)
 800c148:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c14a:	68bb      	ldr	r3, [r7, #8]
 800c14c:	4a06      	ldr	r2, [pc, #24]	@ (800c168 <vApplicationGetIdleTaskMemory+0x30>)
 800c14e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2280      	movs	r2, #128	@ 0x80
 800c154:	601a      	str	r2, [r3, #0]
}
 800c156:	bf00      	nop
 800c158:	3714      	adds	r7, #20
 800c15a:	46bd      	mov	sp, r7
 800c15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c160:	4770      	bx	lr
 800c162:	bf00      	nop
 800c164:	20003834 	.word	0x20003834
 800c168:	200038dc 	.word	0x200038dc

0800c16c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c16c:	b480      	push	{r7}
 800c16e:	b085      	sub	sp, #20
 800c170:	af00      	add	r7, sp, #0
 800c172:	60f8      	str	r0, [r7, #12]
 800c174:	60b9      	str	r1, [r7, #8]
 800c176:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	4a07      	ldr	r2, [pc, #28]	@ (800c198 <vApplicationGetTimerTaskMemory+0x2c>)
 800c17c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c17e:	68bb      	ldr	r3, [r7, #8]
 800c180:	4a06      	ldr	r2, [pc, #24]	@ (800c19c <vApplicationGetTimerTaskMemory+0x30>)
 800c182:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c18a:	601a      	str	r2, [r3, #0]
}
 800c18c:	bf00      	nop
 800c18e:	3714      	adds	r7, #20
 800c190:	46bd      	mov	sp, r7
 800c192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c196:	4770      	bx	lr
 800c198:	20003adc 	.word	0x20003adc
 800c19c:	20003b84 	.word	0x20003b84

0800c1a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c1a0:	b480      	push	{r7}
 800c1a2:	b083      	sub	sp, #12
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	f103 0208 	add.w	r2, r3, #8
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	f04f 32ff 	mov.w	r2, #4294967295
 800c1b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	f103 0208 	add.w	r2, r3, #8
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	f103 0208 	add.w	r2, r3, #8
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c1d4:	bf00      	nop
 800c1d6:	370c      	adds	r7, #12
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1de:	4770      	bx	lr

0800c1e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c1e0:	b480      	push	{r7}
 800c1e2:	b083      	sub	sp, #12
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c1ee:	bf00      	nop
 800c1f0:	370c      	adds	r7, #12
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f8:	4770      	bx	lr

0800c1fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c1fa:	b480      	push	{r7}
 800c1fc:	b085      	sub	sp, #20
 800c1fe:	af00      	add	r7, sp, #0
 800c200:	6078      	str	r0, [r7, #4]
 800c202:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	685b      	ldr	r3, [r3, #4]
 800c208:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	68fa      	ldr	r2, [r7, #12]
 800c20e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	689a      	ldr	r2, [r3, #8]
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	689b      	ldr	r3, [r3, #8]
 800c21c:	683a      	ldr	r2, [r7, #0]
 800c21e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	683a      	ldr	r2, [r7, #0]
 800c224:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c226:	683b      	ldr	r3, [r7, #0]
 800c228:	687a      	ldr	r2, [r7, #4]
 800c22a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	1c5a      	adds	r2, r3, #1
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	601a      	str	r2, [r3, #0]
}
 800c236:	bf00      	nop
 800c238:	3714      	adds	r7, #20
 800c23a:	46bd      	mov	sp, r7
 800c23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c240:	4770      	bx	lr

0800c242 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c242:	b480      	push	{r7}
 800c244:	b085      	sub	sp, #20
 800c246:	af00      	add	r7, sp, #0
 800c248:	6078      	str	r0, [r7, #4]
 800c24a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c24c:	683b      	ldr	r3, [r7, #0]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c252:	68bb      	ldr	r3, [r7, #8]
 800c254:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c258:	d103      	bne.n	800c262 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	691b      	ldr	r3, [r3, #16]
 800c25e:	60fb      	str	r3, [r7, #12]
 800c260:	e00c      	b.n	800c27c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	3308      	adds	r3, #8
 800c266:	60fb      	str	r3, [r7, #12]
 800c268:	e002      	b.n	800c270 <vListInsert+0x2e>
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	685b      	ldr	r3, [r3, #4]
 800c26e:	60fb      	str	r3, [r7, #12]
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	685b      	ldr	r3, [r3, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	68ba      	ldr	r2, [r7, #8]
 800c278:	429a      	cmp	r2, r3
 800c27a:	d2f6      	bcs.n	800c26a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	685a      	ldr	r2, [r3, #4]
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	685b      	ldr	r3, [r3, #4]
 800c288:	683a      	ldr	r2, [r7, #0]
 800c28a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	68fa      	ldr	r2, [r7, #12]
 800c290:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	683a      	ldr	r2, [r7, #0]
 800c296:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	687a      	ldr	r2, [r7, #4]
 800c29c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	1c5a      	adds	r2, r3, #1
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	601a      	str	r2, [r3, #0]
}
 800c2a8:	bf00      	nop
 800c2aa:	3714      	adds	r7, #20
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b2:	4770      	bx	lr

0800c2b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c2b4:	b480      	push	{r7}
 800c2b6:	b085      	sub	sp, #20
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	691b      	ldr	r3, [r3, #16]
 800c2c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	685b      	ldr	r3, [r3, #4]
 800c2c6:	687a      	ldr	r2, [r7, #4]
 800c2c8:	6892      	ldr	r2, [r2, #8]
 800c2ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	689b      	ldr	r3, [r3, #8]
 800c2d0:	687a      	ldr	r2, [r7, #4]
 800c2d2:	6852      	ldr	r2, [r2, #4]
 800c2d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	685b      	ldr	r3, [r3, #4]
 800c2da:	687a      	ldr	r2, [r7, #4]
 800c2dc:	429a      	cmp	r2, r3
 800c2de:	d103      	bne.n	800c2e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	689a      	ldr	r2, [r3, #8]
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	1e5a      	subs	r2, r3, #1
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	681b      	ldr	r3, [r3, #0]
}
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	3714      	adds	r7, #20
 800c300:	46bd      	mov	sp, r7
 800c302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c306:	4770      	bx	lr

0800c308 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b084      	sub	sp, #16
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
 800c310:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d10b      	bne.n	800c334 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c31c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c320:	f383 8811 	msr	BASEPRI, r3
 800c324:	f3bf 8f6f 	isb	sy
 800c328:	f3bf 8f4f 	dsb	sy
 800c32c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c32e:	bf00      	nop
 800c330:	bf00      	nop
 800c332:	e7fd      	b.n	800c330 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c334:	f002 f8a8 	bl	800e488 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	681a      	ldr	r2, [r3, #0]
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c340:	68f9      	ldr	r1, [r7, #12]
 800c342:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c344:	fb01 f303 	mul.w	r3, r1, r3
 800c348:	441a      	add	r2, r3
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	2200      	movs	r2, #0
 800c352:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	681a      	ldr	r2, [r3, #0]
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	681a      	ldr	r2, [r3, #0]
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c364:	3b01      	subs	r3, #1
 800c366:	68f9      	ldr	r1, [r7, #12]
 800c368:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c36a:	fb01 f303 	mul.w	r3, r1, r3
 800c36e:	441a      	add	r2, r3
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	22ff      	movs	r2, #255	@ 0xff
 800c378:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	22ff      	movs	r2, #255	@ 0xff
 800c380:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d114      	bne.n	800c3b4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	691b      	ldr	r3, [r3, #16]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d01a      	beq.n	800c3c8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	3310      	adds	r3, #16
 800c396:	4618      	mov	r0, r3
 800c398:	f001 f942 	bl	800d620 <xTaskRemoveFromEventList>
 800c39c:	4603      	mov	r3, r0
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d012      	beq.n	800c3c8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c3a2:	4b0d      	ldr	r3, [pc, #52]	@ (800c3d8 <xQueueGenericReset+0xd0>)
 800c3a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c3a8:	601a      	str	r2, [r3, #0]
 800c3aa:	f3bf 8f4f 	dsb	sy
 800c3ae:	f3bf 8f6f 	isb	sy
 800c3b2:	e009      	b.n	800c3c8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	3310      	adds	r3, #16
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	f7ff fef1 	bl	800c1a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	3324      	adds	r3, #36	@ 0x24
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	f7ff feec 	bl	800c1a0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c3c8:	f002 f890 	bl	800e4ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c3cc:	2301      	movs	r3, #1
}
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	3710      	adds	r7, #16
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	bd80      	pop	{r7, pc}
 800c3d6:	bf00      	nop
 800c3d8:	e000ed04 	.word	0xe000ed04

0800c3dc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b08e      	sub	sp, #56	@ 0x38
 800c3e0:	af02      	add	r7, sp, #8
 800c3e2:	60f8      	str	r0, [r7, #12]
 800c3e4:	60b9      	str	r1, [r7, #8]
 800c3e6:	607a      	str	r2, [r7, #4]
 800c3e8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d10b      	bne.n	800c408 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800c3f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3f4:	f383 8811 	msr	BASEPRI, r3
 800c3f8:	f3bf 8f6f 	isb	sy
 800c3fc:	f3bf 8f4f 	dsb	sy
 800c400:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c402:	bf00      	nop
 800c404:	bf00      	nop
 800c406:	e7fd      	b.n	800c404 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d10b      	bne.n	800c426 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800c40e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c412:	f383 8811 	msr	BASEPRI, r3
 800c416:	f3bf 8f6f 	isb	sy
 800c41a:	f3bf 8f4f 	dsb	sy
 800c41e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c420:	bf00      	nop
 800c422:	bf00      	nop
 800c424:	e7fd      	b.n	800c422 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d002      	beq.n	800c432 <xQueueGenericCreateStatic+0x56>
 800c42c:	68bb      	ldr	r3, [r7, #8]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d001      	beq.n	800c436 <xQueueGenericCreateStatic+0x5a>
 800c432:	2301      	movs	r3, #1
 800c434:	e000      	b.n	800c438 <xQueueGenericCreateStatic+0x5c>
 800c436:	2300      	movs	r3, #0
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d10b      	bne.n	800c454 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800c43c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c440:	f383 8811 	msr	BASEPRI, r3
 800c444:	f3bf 8f6f 	isb	sy
 800c448:	f3bf 8f4f 	dsb	sy
 800c44c:	623b      	str	r3, [r7, #32]
}
 800c44e:	bf00      	nop
 800c450:	bf00      	nop
 800c452:	e7fd      	b.n	800c450 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d102      	bne.n	800c460 <xQueueGenericCreateStatic+0x84>
 800c45a:	68bb      	ldr	r3, [r7, #8]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d101      	bne.n	800c464 <xQueueGenericCreateStatic+0x88>
 800c460:	2301      	movs	r3, #1
 800c462:	e000      	b.n	800c466 <xQueueGenericCreateStatic+0x8a>
 800c464:	2300      	movs	r3, #0
 800c466:	2b00      	cmp	r3, #0
 800c468:	d10b      	bne.n	800c482 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800c46a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c46e:	f383 8811 	msr	BASEPRI, r3
 800c472:	f3bf 8f6f 	isb	sy
 800c476:	f3bf 8f4f 	dsb	sy
 800c47a:	61fb      	str	r3, [r7, #28]
}
 800c47c:	bf00      	nop
 800c47e:	bf00      	nop
 800c480:	e7fd      	b.n	800c47e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c482:	2350      	movs	r3, #80	@ 0x50
 800c484:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c486:	697b      	ldr	r3, [r7, #20]
 800c488:	2b50      	cmp	r3, #80	@ 0x50
 800c48a:	d00b      	beq.n	800c4a4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800c48c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c490:	f383 8811 	msr	BASEPRI, r3
 800c494:	f3bf 8f6f 	isb	sy
 800c498:	f3bf 8f4f 	dsb	sy
 800c49c:	61bb      	str	r3, [r7, #24]
}
 800c49e:	bf00      	nop
 800c4a0:	bf00      	nop
 800c4a2:	e7fd      	b.n	800c4a0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c4a4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800c4aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d00d      	beq.n	800c4cc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c4b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4b2:	2201      	movs	r2, #1
 800c4b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c4b8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800c4bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4be:	9300      	str	r3, [sp, #0]
 800c4c0:	4613      	mov	r3, r2
 800c4c2:	687a      	ldr	r2, [r7, #4]
 800c4c4:	68b9      	ldr	r1, [r7, #8]
 800c4c6:	68f8      	ldr	r0, [r7, #12]
 800c4c8:	f000 f805 	bl	800c4d6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c4cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	3730      	adds	r7, #48	@ 0x30
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bd80      	pop	{r7, pc}

0800c4d6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c4d6:	b580      	push	{r7, lr}
 800c4d8:	b084      	sub	sp, #16
 800c4da:	af00      	add	r7, sp, #0
 800c4dc:	60f8      	str	r0, [r7, #12]
 800c4de:	60b9      	str	r1, [r7, #8]
 800c4e0:	607a      	str	r2, [r7, #4]
 800c4e2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c4e4:	68bb      	ldr	r3, [r7, #8]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d103      	bne.n	800c4f2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c4ea:	69bb      	ldr	r3, [r7, #24]
 800c4ec:	69ba      	ldr	r2, [r7, #24]
 800c4ee:	601a      	str	r2, [r3, #0]
 800c4f0:	e002      	b.n	800c4f8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c4f2:	69bb      	ldr	r3, [r7, #24]
 800c4f4:	687a      	ldr	r2, [r7, #4]
 800c4f6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c4f8:	69bb      	ldr	r3, [r7, #24]
 800c4fa:	68fa      	ldr	r2, [r7, #12]
 800c4fc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c4fe:	69bb      	ldr	r3, [r7, #24]
 800c500:	68ba      	ldr	r2, [r7, #8]
 800c502:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c504:	2101      	movs	r1, #1
 800c506:	69b8      	ldr	r0, [r7, #24]
 800c508:	f7ff fefe 	bl	800c308 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c50c:	69bb      	ldr	r3, [r7, #24]
 800c50e:	78fa      	ldrb	r2, [r7, #3]
 800c510:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c514:	bf00      	nop
 800c516:	3710      	adds	r7, #16
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd80      	pop	{r7, pc}

0800c51c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b08e      	sub	sp, #56	@ 0x38
 800c520:	af00      	add	r7, sp, #0
 800c522:	60f8      	str	r0, [r7, #12]
 800c524:	60b9      	str	r1, [r7, #8]
 800c526:	607a      	str	r2, [r7, #4]
 800c528:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c52a:	2300      	movs	r3, #0
 800c52c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c534:	2b00      	cmp	r3, #0
 800c536:	d10b      	bne.n	800c550 <xQueueGenericSend+0x34>
	__asm volatile
 800c538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c53c:	f383 8811 	msr	BASEPRI, r3
 800c540:	f3bf 8f6f 	isb	sy
 800c544:	f3bf 8f4f 	dsb	sy
 800c548:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c54a:	bf00      	nop
 800c54c:	bf00      	nop
 800c54e:	e7fd      	b.n	800c54c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c550:	68bb      	ldr	r3, [r7, #8]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d103      	bne.n	800c55e <xQueueGenericSend+0x42>
 800c556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d101      	bne.n	800c562 <xQueueGenericSend+0x46>
 800c55e:	2301      	movs	r3, #1
 800c560:	e000      	b.n	800c564 <xQueueGenericSend+0x48>
 800c562:	2300      	movs	r3, #0
 800c564:	2b00      	cmp	r3, #0
 800c566:	d10b      	bne.n	800c580 <xQueueGenericSend+0x64>
	__asm volatile
 800c568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c56c:	f383 8811 	msr	BASEPRI, r3
 800c570:	f3bf 8f6f 	isb	sy
 800c574:	f3bf 8f4f 	dsb	sy
 800c578:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c57a:	bf00      	nop
 800c57c:	bf00      	nop
 800c57e:	e7fd      	b.n	800c57c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	2b02      	cmp	r3, #2
 800c584:	d103      	bne.n	800c58e <xQueueGenericSend+0x72>
 800c586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c588:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c58a:	2b01      	cmp	r3, #1
 800c58c:	d101      	bne.n	800c592 <xQueueGenericSend+0x76>
 800c58e:	2301      	movs	r3, #1
 800c590:	e000      	b.n	800c594 <xQueueGenericSend+0x78>
 800c592:	2300      	movs	r3, #0
 800c594:	2b00      	cmp	r3, #0
 800c596:	d10b      	bne.n	800c5b0 <xQueueGenericSend+0x94>
	__asm volatile
 800c598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c59c:	f383 8811 	msr	BASEPRI, r3
 800c5a0:	f3bf 8f6f 	isb	sy
 800c5a4:	f3bf 8f4f 	dsb	sy
 800c5a8:	623b      	str	r3, [r7, #32]
}
 800c5aa:	bf00      	nop
 800c5ac:	bf00      	nop
 800c5ae:	e7fd      	b.n	800c5ac <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c5b0:	f001 f9fc 	bl	800d9ac <xTaskGetSchedulerState>
 800c5b4:	4603      	mov	r3, r0
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d102      	bne.n	800c5c0 <xQueueGenericSend+0xa4>
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d101      	bne.n	800c5c4 <xQueueGenericSend+0xa8>
 800c5c0:	2301      	movs	r3, #1
 800c5c2:	e000      	b.n	800c5c6 <xQueueGenericSend+0xaa>
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d10b      	bne.n	800c5e2 <xQueueGenericSend+0xc6>
	__asm volatile
 800c5ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5ce:	f383 8811 	msr	BASEPRI, r3
 800c5d2:	f3bf 8f6f 	isb	sy
 800c5d6:	f3bf 8f4f 	dsb	sy
 800c5da:	61fb      	str	r3, [r7, #28]
}
 800c5dc:	bf00      	nop
 800c5de:	bf00      	nop
 800c5e0:	e7fd      	b.n	800c5de <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c5e2:	f001 ff51 	bl	800e488 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c5e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c5ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c5ee:	429a      	cmp	r2, r3
 800c5f0:	d302      	bcc.n	800c5f8 <xQueueGenericSend+0xdc>
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	2b02      	cmp	r3, #2
 800c5f6:	d129      	bne.n	800c64c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c5f8:	683a      	ldr	r2, [r7, #0]
 800c5fa:	68b9      	ldr	r1, [r7, #8]
 800c5fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c5fe:	f000 fa0f 	bl	800ca20 <prvCopyDataToQueue>
 800c602:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d010      	beq.n	800c62e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c60c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c60e:	3324      	adds	r3, #36	@ 0x24
 800c610:	4618      	mov	r0, r3
 800c612:	f001 f805 	bl	800d620 <xTaskRemoveFromEventList>
 800c616:	4603      	mov	r3, r0
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d013      	beq.n	800c644 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c61c:	4b3f      	ldr	r3, [pc, #252]	@ (800c71c <xQueueGenericSend+0x200>)
 800c61e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c622:	601a      	str	r2, [r3, #0]
 800c624:	f3bf 8f4f 	dsb	sy
 800c628:	f3bf 8f6f 	isb	sy
 800c62c:	e00a      	b.n	800c644 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c62e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c630:	2b00      	cmp	r3, #0
 800c632:	d007      	beq.n	800c644 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c634:	4b39      	ldr	r3, [pc, #228]	@ (800c71c <xQueueGenericSend+0x200>)
 800c636:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c63a:	601a      	str	r2, [r3, #0]
 800c63c:	f3bf 8f4f 	dsb	sy
 800c640:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c644:	f001 ff52 	bl	800e4ec <vPortExitCritical>
				return pdPASS;
 800c648:	2301      	movs	r3, #1
 800c64a:	e063      	b.n	800c714 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d103      	bne.n	800c65a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c652:	f001 ff4b 	bl	800e4ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c656:	2300      	movs	r3, #0
 800c658:	e05c      	b.n	800c714 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c65a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d106      	bne.n	800c66e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c660:	f107 0314 	add.w	r3, r7, #20
 800c664:	4618      	mov	r0, r3
 800c666:	f001 f83f 	bl	800d6e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c66a:	2301      	movs	r3, #1
 800c66c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c66e:	f001 ff3d 	bl	800e4ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c672:	f000 fda7 	bl	800d1c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c676:	f001 ff07 	bl	800e488 <vPortEnterCritical>
 800c67a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c67c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c680:	b25b      	sxtb	r3, r3
 800c682:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c686:	d103      	bne.n	800c690 <xQueueGenericSend+0x174>
 800c688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c68a:	2200      	movs	r2, #0
 800c68c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c692:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c696:	b25b      	sxtb	r3, r3
 800c698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c69c:	d103      	bne.n	800c6a6 <xQueueGenericSend+0x18a>
 800c69e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c6a6:	f001 ff21 	bl	800e4ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c6aa:	1d3a      	adds	r2, r7, #4
 800c6ac:	f107 0314 	add.w	r3, r7, #20
 800c6b0:	4611      	mov	r1, r2
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	f001 f82e 	bl	800d714 <xTaskCheckForTimeOut>
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d124      	bne.n	800c708 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c6be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c6c0:	f000 faa6 	bl	800cc10 <prvIsQueueFull>
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d018      	beq.n	800c6fc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c6ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6cc:	3310      	adds	r3, #16
 800c6ce:	687a      	ldr	r2, [r7, #4]
 800c6d0:	4611      	mov	r1, r2
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	f000 ff52 	bl	800d57c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c6d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c6da:	f000 fa31 	bl	800cb40 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c6de:	f000 fd7f 	bl	800d1e0 <xTaskResumeAll>
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	f47f af7c 	bne.w	800c5e2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c6ea:	4b0c      	ldr	r3, [pc, #48]	@ (800c71c <xQueueGenericSend+0x200>)
 800c6ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c6f0:	601a      	str	r2, [r3, #0]
 800c6f2:	f3bf 8f4f 	dsb	sy
 800c6f6:	f3bf 8f6f 	isb	sy
 800c6fa:	e772      	b.n	800c5e2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c6fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c6fe:	f000 fa1f 	bl	800cb40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c702:	f000 fd6d 	bl	800d1e0 <xTaskResumeAll>
 800c706:	e76c      	b.n	800c5e2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c708:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c70a:	f000 fa19 	bl	800cb40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c70e:	f000 fd67 	bl	800d1e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c712:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c714:	4618      	mov	r0, r3
 800c716:	3738      	adds	r7, #56	@ 0x38
 800c718:	46bd      	mov	sp, r7
 800c71a:	bd80      	pop	{r7, pc}
 800c71c:	e000ed04 	.word	0xe000ed04

0800c720 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b090      	sub	sp, #64	@ 0x40
 800c724:	af00      	add	r7, sp, #0
 800c726:	60f8      	str	r0, [r7, #12]
 800c728:	60b9      	str	r1, [r7, #8]
 800c72a:	607a      	str	r2, [r7, #4]
 800c72c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800c732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c734:	2b00      	cmp	r3, #0
 800c736:	d10b      	bne.n	800c750 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800c738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c73c:	f383 8811 	msr	BASEPRI, r3
 800c740:	f3bf 8f6f 	isb	sy
 800c744:	f3bf 8f4f 	dsb	sy
 800c748:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c74a:	bf00      	nop
 800c74c:	bf00      	nop
 800c74e:	e7fd      	b.n	800c74c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c750:	68bb      	ldr	r3, [r7, #8]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d103      	bne.n	800c75e <xQueueGenericSendFromISR+0x3e>
 800c756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d101      	bne.n	800c762 <xQueueGenericSendFromISR+0x42>
 800c75e:	2301      	movs	r3, #1
 800c760:	e000      	b.n	800c764 <xQueueGenericSendFromISR+0x44>
 800c762:	2300      	movs	r3, #0
 800c764:	2b00      	cmp	r3, #0
 800c766:	d10b      	bne.n	800c780 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800c768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c76c:	f383 8811 	msr	BASEPRI, r3
 800c770:	f3bf 8f6f 	isb	sy
 800c774:	f3bf 8f4f 	dsb	sy
 800c778:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c77a:	bf00      	nop
 800c77c:	bf00      	nop
 800c77e:	e7fd      	b.n	800c77c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c780:	683b      	ldr	r3, [r7, #0]
 800c782:	2b02      	cmp	r3, #2
 800c784:	d103      	bne.n	800c78e <xQueueGenericSendFromISR+0x6e>
 800c786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c788:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c78a:	2b01      	cmp	r3, #1
 800c78c:	d101      	bne.n	800c792 <xQueueGenericSendFromISR+0x72>
 800c78e:	2301      	movs	r3, #1
 800c790:	e000      	b.n	800c794 <xQueueGenericSendFromISR+0x74>
 800c792:	2300      	movs	r3, #0
 800c794:	2b00      	cmp	r3, #0
 800c796:	d10b      	bne.n	800c7b0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800c798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c79c:	f383 8811 	msr	BASEPRI, r3
 800c7a0:	f3bf 8f6f 	isb	sy
 800c7a4:	f3bf 8f4f 	dsb	sy
 800c7a8:	623b      	str	r3, [r7, #32]
}
 800c7aa:	bf00      	nop
 800c7ac:	bf00      	nop
 800c7ae:	e7fd      	b.n	800c7ac <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c7b0:	f001 ff4a 	bl	800e648 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c7b4:	f3ef 8211 	mrs	r2, BASEPRI
 800c7b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7bc:	f383 8811 	msr	BASEPRI, r3
 800c7c0:	f3bf 8f6f 	isb	sy
 800c7c4:	f3bf 8f4f 	dsb	sy
 800c7c8:	61fa      	str	r2, [r7, #28]
 800c7ca:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c7cc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c7ce:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c7d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c7d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c7d8:	429a      	cmp	r2, r3
 800c7da:	d302      	bcc.n	800c7e2 <xQueueGenericSendFromISR+0xc2>
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	2b02      	cmp	r3, #2
 800c7e0:	d12f      	bne.n	800c842 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c7e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c7e8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c7ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c7f2:	683a      	ldr	r2, [r7, #0]
 800c7f4:	68b9      	ldr	r1, [r7, #8]
 800c7f6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c7f8:	f000 f912 	bl	800ca20 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c7fc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800c800:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c804:	d112      	bne.n	800c82c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d016      	beq.n	800c83c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c80e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c810:	3324      	adds	r3, #36	@ 0x24
 800c812:	4618      	mov	r0, r3
 800c814:	f000 ff04 	bl	800d620 <xTaskRemoveFromEventList>
 800c818:	4603      	mov	r3, r0
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d00e      	beq.n	800c83c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d00b      	beq.n	800c83c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2201      	movs	r2, #1
 800c828:	601a      	str	r2, [r3, #0]
 800c82a:	e007      	b.n	800c83c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c82c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c830:	3301      	adds	r3, #1
 800c832:	b2db      	uxtb	r3, r3
 800c834:	b25a      	sxtb	r2, r3
 800c836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c838:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c83c:	2301      	movs	r3, #1
 800c83e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800c840:	e001      	b.n	800c846 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c842:	2300      	movs	r3, #0
 800c844:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c848:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c84a:	697b      	ldr	r3, [r7, #20]
 800c84c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c850:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c852:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c854:	4618      	mov	r0, r3
 800c856:	3740      	adds	r7, #64	@ 0x40
 800c858:	46bd      	mov	sp, r7
 800c85a:	bd80      	pop	{r7, pc}

0800c85c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b08c      	sub	sp, #48	@ 0x30
 800c860:	af00      	add	r7, sp, #0
 800c862:	60f8      	str	r0, [r7, #12]
 800c864:	60b9      	str	r1, [r7, #8]
 800c866:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c868:	2300      	movs	r3, #0
 800c86a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c872:	2b00      	cmp	r3, #0
 800c874:	d10b      	bne.n	800c88e <xQueueReceive+0x32>
	__asm volatile
 800c876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c87a:	f383 8811 	msr	BASEPRI, r3
 800c87e:	f3bf 8f6f 	isb	sy
 800c882:	f3bf 8f4f 	dsb	sy
 800c886:	623b      	str	r3, [r7, #32]
}
 800c888:	bf00      	nop
 800c88a:	bf00      	nop
 800c88c:	e7fd      	b.n	800c88a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c88e:	68bb      	ldr	r3, [r7, #8]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d103      	bne.n	800c89c <xQueueReceive+0x40>
 800c894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d101      	bne.n	800c8a0 <xQueueReceive+0x44>
 800c89c:	2301      	movs	r3, #1
 800c89e:	e000      	b.n	800c8a2 <xQueueReceive+0x46>
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d10b      	bne.n	800c8be <xQueueReceive+0x62>
	__asm volatile
 800c8a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8aa:	f383 8811 	msr	BASEPRI, r3
 800c8ae:	f3bf 8f6f 	isb	sy
 800c8b2:	f3bf 8f4f 	dsb	sy
 800c8b6:	61fb      	str	r3, [r7, #28]
}
 800c8b8:	bf00      	nop
 800c8ba:	bf00      	nop
 800c8bc:	e7fd      	b.n	800c8ba <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c8be:	f001 f875 	bl	800d9ac <xTaskGetSchedulerState>
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d102      	bne.n	800c8ce <xQueueReceive+0x72>
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d101      	bne.n	800c8d2 <xQueueReceive+0x76>
 800c8ce:	2301      	movs	r3, #1
 800c8d0:	e000      	b.n	800c8d4 <xQueueReceive+0x78>
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d10b      	bne.n	800c8f0 <xQueueReceive+0x94>
	__asm volatile
 800c8d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8dc:	f383 8811 	msr	BASEPRI, r3
 800c8e0:	f3bf 8f6f 	isb	sy
 800c8e4:	f3bf 8f4f 	dsb	sy
 800c8e8:	61bb      	str	r3, [r7, #24]
}
 800c8ea:	bf00      	nop
 800c8ec:	bf00      	nop
 800c8ee:	e7fd      	b.n	800c8ec <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c8f0:	f001 fdca 	bl	800e488 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c8f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8f8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c8fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d01f      	beq.n	800c940 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c900:	68b9      	ldr	r1, [r7, #8]
 800c902:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c904:	f000 f8f6 	bl	800caf4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c90a:	1e5a      	subs	r2, r3, #1
 800c90c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c90e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c912:	691b      	ldr	r3, [r3, #16]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d00f      	beq.n	800c938 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c91a:	3310      	adds	r3, #16
 800c91c:	4618      	mov	r0, r3
 800c91e:	f000 fe7f 	bl	800d620 <xTaskRemoveFromEventList>
 800c922:	4603      	mov	r3, r0
 800c924:	2b00      	cmp	r3, #0
 800c926:	d007      	beq.n	800c938 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c928:	4b3c      	ldr	r3, [pc, #240]	@ (800ca1c <xQueueReceive+0x1c0>)
 800c92a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c92e:	601a      	str	r2, [r3, #0]
 800c930:	f3bf 8f4f 	dsb	sy
 800c934:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c938:	f001 fdd8 	bl	800e4ec <vPortExitCritical>
				return pdPASS;
 800c93c:	2301      	movs	r3, #1
 800c93e:	e069      	b.n	800ca14 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d103      	bne.n	800c94e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c946:	f001 fdd1 	bl	800e4ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c94a:	2300      	movs	r3, #0
 800c94c:	e062      	b.n	800ca14 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c94e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c950:	2b00      	cmp	r3, #0
 800c952:	d106      	bne.n	800c962 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c954:	f107 0310 	add.w	r3, r7, #16
 800c958:	4618      	mov	r0, r3
 800c95a:	f000 fec5 	bl	800d6e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c95e:	2301      	movs	r3, #1
 800c960:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c962:	f001 fdc3 	bl	800e4ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c966:	f000 fc2d 	bl	800d1c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c96a:	f001 fd8d 	bl	800e488 <vPortEnterCritical>
 800c96e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c970:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c974:	b25b      	sxtb	r3, r3
 800c976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c97a:	d103      	bne.n	800c984 <xQueueReceive+0x128>
 800c97c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c97e:	2200      	movs	r2, #0
 800c980:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c986:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c98a:	b25b      	sxtb	r3, r3
 800c98c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c990:	d103      	bne.n	800c99a <xQueueReceive+0x13e>
 800c992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c994:	2200      	movs	r2, #0
 800c996:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c99a:	f001 fda7 	bl	800e4ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c99e:	1d3a      	adds	r2, r7, #4
 800c9a0:	f107 0310 	add.w	r3, r7, #16
 800c9a4:	4611      	mov	r1, r2
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	f000 feb4 	bl	800d714 <xTaskCheckForTimeOut>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d123      	bne.n	800c9fa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c9b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c9b4:	f000 f916 	bl	800cbe4 <prvIsQueueEmpty>
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d017      	beq.n	800c9ee <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c9be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9c0:	3324      	adds	r3, #36	@ 0x24
 800c9c2:	687a      	ldr	r2, [r7, #4]
 800c9c4:	4611      	mov	r1, r2
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	f000 fdd8 	bl	800d57c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c9cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c9ce:	f000 f8b7 	bl	800cb40 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c9d2:	f000 fc05 	bl	800d1e0 <xTaskResumeAll>
 800c9d6:	4603      	mov	r3, r0
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d189      	bne.n	800c8f0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800c9dc:	4b0f      	ldr	r3, [pc, #60]	@ (800ca1c <xQueueReceive+0x1c0>)
 800c9de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c9e2:	601a      	str	r2, [r3, #0]
 800c9e4:	f3bf 8f4f 	dsb	sy
 800c9e8:	f3bf 8f6f 	isb	sy
 800c9ec:	e780      	b.n	800c8f0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c9ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c9f0:	f000 f8a6 	bl	800cb40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c9f4:	f000 fbf4 	bl	800d1e0 <xTaskResumeAll>
 800c9f8:	e77a      	b.n	800c8f0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c9fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c9fc:	f000 f8a0 	bl	800cb40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ca00:	f000 fbee 	bl	800d1e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ca04:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ca06:	f000 f8ed 	bl	800cbe4 <prvIsQueueEmpty>
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	f43f af6f 	beq.w	800c8f0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ca12:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ca14:	4618      	mov	r0, r3
 800ca16:	3730      	adds	r7, #48	@ 0x30
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	bd80      	pop	{r7, pc}
 800ca1c:	e000ed04 	.word	0xe000ed04

0800ca20 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b086      	sub	sp, #24
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	60f8      	str	r0, [r7, #12]
 800ca28:	60b9      	str	r1, [r7, #8]
 800ca2a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca34:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d10d      	bne.n	800ca5a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d14d      	bne.n	800cae2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	689b      	ldr	r3, [r3, #8]
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	f000 ffcc 	bl	800d9e8 <xTaskPriorityDisinherit>
 800ca50:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	2200      	movs	r2, #0
 800ca56:	609a      	str	r2, [r3, #8]
 800ca58:	e043      	b.n	800cae2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d119      	bne.n	800ca94 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	6858      	ldr	r0, [r3, #4]
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca68:	461a      	mov	r2, r3
 800ca6a:	68b9      	ldr	r1, [r7, #8]
 800ca6c:	f003 f83b 	bl	800fae6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	685a      	ldr	r2, [r3, #4]
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca78:	441a      	add	r2, r3
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	685a      	ldr	r2, [r3, #4]
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	689b      	ldr	r3, [r3, #8]
 800ca86:	429a      	cmp	r2, r3
 800ca88:	d32b      	bcc.n	800cae2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	681a      	ldr	r2, [r3, #0]
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	605a      	str	r2, [r3, #4]
 800ca92:	e026      	b.n	800cae2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	68d8      	ldr	r0, [r3, #12]
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca9c:	461a      	mov	r2, r3
 800ca9e:	68b9      	ldr	r1, [r7, #8]
 800caa0:	f003 f821 	bl	800fae6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	68da      	ldr	r2, [r3, #12]
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800caac:	425b      	negs	r3, r3
 800caae:	441a      	add	r2, r3
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	68da      	ldr	r2, [r3, #12]
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	429a      	cmp	r2, r3
 800cabe:	d207      	bcs.n	800cad0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	689a      	ldr	r2, [r3, #8]
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cac8:	425b      	negs	r3, r3
 800caca:	441a      	add	r2, r3
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	2b02      	cmp	r3, #2
 800cad4:	d105      	bne.n	800cae2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cad6:	693b      	ldr	r3, [r7, #16]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d002      	beq.n	800cae2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cadc:	693b      	ldr	r3, [r7, #16]
 800cade:	3b01      	subs	r3, #1
 800cae0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cae2:	693b      	ldr	r3, [r7, #16]
 800cae4:	1c5a      	adds	r2, r3, #1
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800caea:	697b      	ldr	r3, [r7, #20]
}
 800caec:	4618      	mov	r0, r3
 800caee:	3718      	adds	r7, #24
 800caf0:	46bd      	mov	sp, r7
 800caf2:	bd80      	pop	{r7, pc}

0800caf4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b082      	sub	sp, #8
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
 800cafc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d018      	beq.n	800cb38 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	68da      	ldr	r2, [r3, #12]
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb0e:	441a      	add	r2, r3
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	68da      	ldr	r2, [r3, #12]
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	689b      	ldr	r3, [r3, #8]
 800cb1c:	429a      	cmp	r2, r3
 800cb1e:	d303      	bcc.n	800cb28 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681a      	ldr	r2, [r3, #0]
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	68d9      	ldr	r1, [r3, #12]
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb30:	461a      	mov	r2, r3
 800cb32:	6838      	ldr	r0, [r7, #0]
 800cb34:	f002 ffd7 	bl	800fae6 <memcpy>
	}
}
 800cb38:	bf00      	nop
 800cb3a:	3708      	adds	r7, #8
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	bd80      	pop	{r7, pc}

0800cb40 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b084      	sub	sp, #16
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cb48:	f001 fc9e 	bl	800e488 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cb52:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cb54:	e011      	b.n	800cb7a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d012      	beq.n	800cb84 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	3324      	adds	r3, #36	@ 0x24
 800cb62:	4618      	mov	r0, r3
 800cb64:	f000 fd5c 	bl	800d620 <xTaskRemoveFromEventList>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d001      	beq.n	800cb72 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cb6e:	f000 fe35 	bl	800d7dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cb72:	7bfb      	ldrb	r3, [r7, #15]
 800cb74:	3b01      	subs	r3, #1
 800cb76:	b2db      	uxtb	r3, r3
 800cb78:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cb7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	dce9      	bgt.n	800cb56 <prvUnlockQueue+0x16>
 800cb82:	e000      	b.n	800cb86 <prvUnlockQueue+0x46>
					break;
 800cb84:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	22ff      	movs	r2, #255	@ 0xff
 800cb8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800cb8e:	f001 fcad 	bl	800e4ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cb92:	f001 fc79 	bl	800e488 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cb9c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cb9e:	e011      	b.n	800cbc4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	691b      	ldr	r3, [r3, #16]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d012      	beq.n	800cbce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	3310      	adds	r3, #16
 800cbac:	4618      	mov	r0, r3
 800cbae:	f000 fd37 	bl	800d620 <xTaskRemoveFromEventList>
 800cbb2:	4603      	mov	r3, r0
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d001      	beq.n	800cbbc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cbb8:	f000 fe10 	bl	800d7dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cbbc:	7bbb      	ldrb	r3, [r7, #14]
 800cbbe:	3b01      	subs	r3, #1
 800cbc0:	b2db      	uxtb	r3, r3
 800cbc2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cbc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	dce9      	bgt.n	800cba0 <prvUnlockQueue+0x60>
 800cbcc:	e000      	b.n	800cbd0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cbce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	22ff      	movs	r2, #255	@ 0xff
 800cbd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800cbd8:	f001 fc88 	bl	800e4ec <vPortExitCritical>
}
 800cbdc:	bf00      	nop
 800cbde:	3710      	adds	r7, #16
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	bd80      	pop	{r7, pc}

0800cbe4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b084      	sub	sp, #16
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cbec:	f001 fc4c 	bl	800e488 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d102      	bne.n	800cbfe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cbf8:	2301      	movs	r3, #1
 800cbfa:	60fb      	str	r3, [r7, #12]
 800cbfc:	e001      	b.n	800cc02 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cbfe:	2300      	movs	r3, #0
 800cc00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cc02:	f001 fc73 	bl	800e4ec <vPortExitCritical>

	return xReturn;
 800cc06:	68fb      	ldr	r3, [r7, #12]
}
 800cc08:	4618      	mov	r0, r3
 800cc0a:	3710      	adds	r7, #16
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	bd80      	pop	{r7, pc}

0800cc10 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b084      	sub	sp, #16
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cc18:	f001 fc36 	bl	800e488 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cc24:	429a      	cmp	r2, r3
 800cc26:	d102      	bne.n	800cc2e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cc28:	2301      	movs	r3, #1
 800cc2a:	60fb      	str	r3, [r7, #12]
 800cc2c:	e001      	b.n	800cc32 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cc2e:	2300      	movs	r3, #0
 800cc30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cc32:	f001 fc5b 	bl	800e4ec <vPortExitCritical>

	return xReturn;
 800cc36:	68fb      	ldr	r3, [r7, #12]
}
 800cc38:	4618      	mov	r0, r3
 800cc3a:	3710      	adds	r7, #16
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	bd80      	pop	{r7, pc}

0800cc40 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800cc40:	b480      	push	{r7}
 800cc42:	b085      	sub	sp, #20
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
 800cc48:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	60fb      	str	r3, [r7, #12]
 800cc4e:	e014      	b.n	800cc7a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cc50:	4a0f      	ldr	r2, [pc, #60]	@ (800cc90 <vQueueAddToRegistry+0x50>)
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d10b      	bne.n	800cc74 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cc5c:	490c      	ldr	r1, [pc, #48]	@ (800cc90 <vQueueAddToRegistry+0x50>)
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	683a      	ldr	r2, [r7, #0]
 800cc62:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800cc66:	4a0a      	ldr	r2, [pc, #40]	@ (800cc90 <vQueueAddToRegistry+0x50>)
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	00db      	lsls	r3, r3, #3
 800cc6c:	4413      	add	r3, r2
 800cc6e:	687a      	ldr	r2, [r7, #4]
 800cc70:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cc72:	e006      	b.n	800cc82 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	3301      	adds	r3, #1
 800cc78:	60fb      	str	r3, [r7, #12]
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	2b07      	cmp	r3, #7
 800cc7e:	d9e7      	bls.n	800cc50 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cc80:	bf00      	nop
 800cc82:	bf00      	nop
 800cc84:	3714      	adds	r7, #20
 800cc86:	46bd      	mov	sp, r7
 800cc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8c:	4770      	bx	lr
 800cc8e:	bf00      	nop
 800cc90:	20003f84 	.word	0x20003f84

0800cc94 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b086      	sub	sp, #24
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	60f8      	str	r0, [r7, #12]
 800cc9c:	60b9      	str	r1, [r7, #8]
 800cc9e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800cca4:	f001 fbf0 	bl	800e488 <vPortEnterCritical>
 800cca8:	697b      	ldr	r3, [r7, #20]
 800ccaa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ccae:	b25b      	sxtb	r3, r3
 800ccb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccb4:	d103      	bne.n	800ccbe <vQueueWaitForMessageRestricted+0x2a>
 800ccb6:	697b      	ldr	r3, [r7, #20]
 800ccb8:	2200      	movs	r2, #0
 800ccba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ccbe:	697b      	ldr	r3, [r7, #20]
 800ccc0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ccc4:	b25b      	sxtb	r3, r3
 800ccc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccca:	d103      	bne.n	800ccd4 <vQueueWaitForMessageRestricted+0x40>
 800cccc:	697b      	ldr	r3, [r7, #20]
 800ccce:	2200      	movs	r2, #0
 800ccd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ccd4:	f001 fc0a 	bl	800e4ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ccd8:	697b      	ldr	r3, [r7, #20]
 800ccda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d106      	bne.n	800ccee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800cce0:	697b      	ldr	r3, [r7, #20]
 800cce2:	3324      	adds	r3, #36	@ 0x24
 800cce4:	687a      	ldr	r2, [r7, #4]
 800cce6:	68b9      	ldr	r1, [r7, #8]
 800cce8:	4618      	mov	r0, r3
 800ccea:	f000 fc6d 	bl	800d5c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ccee:	6978      	ldr	r0, [r7, #20]
 800ccf0:	f7ff ff26 	bl	800cb40 <prvUnlockQueue>
	}
 800ccf4:	bf00      	nop
 800ccf6:	3718      	adds	r7, #24
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	bd80      	pop	{r7, pc}

0800ccfc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b08e      	sub	sp, #56	@ 0x38
 800cd00:	af04      	add	r7, sp, #16
 800cd02:	60f8      	str	r0, [r7, #12]
 800cd04:	60b9      	str	r1, [r7, #8]
 800cd06:	607a      	str	r2, [r7, #4]
 800cd08:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cd0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d10b      	bne.n	800cd28 <xTaskCreateStatic+0x2c>
	__asm volatile
 800cd10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd14:	f383 8811 	msr	BASEPRI, r3
 800cd18:	f3bf 8f6f 	isb	sy
 800cd1c:	f3bf 8f4f 	dsb	sy
 800cd20:	623b      	str	r3, [r7, #32]
}
 800cd22:	bf00      	nop
 800cd24:	bf00      	nop
 800cd26:	e7fd      	b.n	800cd24 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cd28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d10b      	bne.n	800cd46 <xTaskCreateStatic+0x4a>
	__asm volatile
 800cd2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd32:	f383 8811 	msr	BASEPRI, r3
 800cd36:	f3bf 8f6f 	isb	sy
 800cd3a:	f3bf 8f4f 	dsb	sy
 800cd3e:	61fb      	str	r3, [r7, #28]
}
 800cd40:	bf00      	nop
 800cd42:	bf00      	nop
 800cd44:	e7fd      	b.n	800cd42 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cd46:	23a8      	movs	r3, #168	@ 0xa8
 800cd48:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cd4a:	693b      	ldr	r3, [r7, #16]
 800cd4c:	2ba8      	cmp	r3, #168	@ 0xa8
 800cd4e:	d00b      	beq.n	800cd68 <xTaskCreateStatic+0x6c>
	__asm volatile
 800cd50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd54:	f383 8811 	msr	BASEPRI, r3
 800cd58:	f3bf 8f6f 	isb	sy
 800cd5c:	f3bf 8f4f 	dsb	sy
 800cd60:	61bb      	str	r3, [r7, #24]
}
 800cd62:	bf00      	nop
 800cd64:	bf00      	nop
 800cd66:	e7fd      	b.n	800cd64 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cd68:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cd6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d01e      	beq.n	800cdae <xTaskCreateStatic+0xb2>
 800cd70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d01b      	beq.n	800cdae <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cd76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd78:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cd7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd7c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cd7e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cd80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd82:	2202      	movs	r2, #2
 800cd84:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cd88:	2300      	movs	r3, #0
 800cd8a:	9303      	str	r3, [sp, #12]
 800cd8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd8e:	9302      	str	r3, [sp, #8]
 800cd90:	f107 0314 	add.w	r3, r7, #20
 800cd94:	9301      	str	r3, [sp, #4]
 800cd96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd98:	9300      	str	r3, [sp, #0]
 800cd9a:	683b      	ldr	r3, [r7, #0]
 800cd9c:	687a      	ldr	r2, [r7, #4]
 800cd9e:	68b9      	ldr	r1, [r7, #8]
 800cda0:	68f8      	ldr	r0, [r7, #12]
 800cda2:	f000 f851 	bl	800ce48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cda6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cda8:	f000 f8f6 	bl	800cf98 <prvAddNewTaskToReadyList>
 800cdac:	e001      	b.n	800cdb2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800cdae:	2300      	movs	r3, #0
 800cdb0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cdb2:	697b      	ldr	r3, [r7, #20]
	}
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	3728      	adds	r7, #40	@ 0x28
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	bd80      	pop	{r7, pc}

0800cdbc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b08c      	sub	sp, #48	@ 0x30
 800cdc0:	af04      	add	r7, sp, #16
 800cdc2:	60f8      	str	r0, [r7, #12]
 800cdc4:	60b9      	str	r1, [r7, #8]
 800cdc6:	603b      	str	r3, [r7, #0]
 800cdc8:	4613      	mov	r3, r2
 800cdca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cdcc:	88fb      	ldrh	r3, [r7, #6]
 800cdce:	009b      	lsls	r3, r3, #2
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	f001 fc7b 	bl	800e6cc <pvPortMalloc>
 800cdd6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cdd8:	697b      	ldr	r3, [r7, #20]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d00e      	beq.n	800cdfc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cdde:	20a8      	movs	r0, #168	@ 0xa8
 800cde0:	f001 fc74 	bl	800e6cc <pvPortMalloc>
 800cde4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cde6:	69fb      	ldr	r3, [r7, #28]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d003      	beq.n	800cdf4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cdec:	69fb      	ldr	r3, [r7, #28]
 800cdee:	697a      	ldr	r2, [r7, #20]
 800cdf0:	631a      	str	r2, [r3, #48]	@ 0x30
 800cdf2:	e005      	b.n	800ce00 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cdf4:	6978      	ldr	r0, [r7, #20]
 800cdf6:	f001 fd37 	bl	800e868 <vPortFree>
 800cdfa:	e001      	b.n	800ce00 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ce00:	69fb      	ldr	r3, [r7, #28]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d017      	beq.n	800ce36 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ce06:	69fb      	ldr	r3, [r7, #28]
 800ce08:	2200      	movs	r2, #0
 800ce0a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ce0e:	88fa      	ldrh	r2, [r7, #6]
 800ce10:	2300      	movs	r3, #0
 800ce12:	9303      	str	r3, [sp, #12]
 800ce14:	69fb      	ldr	r3, [r7, #28]
 800ce16:	9302      	str	r3, [sp, #8]
 800ce18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce1a:	9301      	str	r3, [sp, #4]
 800ce1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce1e:	9300      	str	r3, [sp, #0]
 800ce20:	683b      	ldr	r3, [r7, #0]
 800ce22:	68b9      	ldr	r1, [r7, #8]
 800ce24:	68f8      	ldr	r0, [r7, #12]
 800ce26:	f000 f80f 	bl	800ce48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ce2a:	69f8      	ldr	r0, [r7, #28]
 800ce2c:	f000 f8b4 	bl	800cf98 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ce30:	2301      	movs	r3, #1
 800ce32:	61bb      	str	r3, [r7, #24]
 800ce34:	e002      	b.n	800ce3c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ce36:	f04f 33ff 	mov.w	r3, #4294967295
 800ce3a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ce3c:	69bb      	ldr	r3, [r7, #24]
	}
 800ce3e:	4618      	mov	r0, r3
 800ce40:	3720      	adds	r7, #32
 800ce42:	46bd      	mov	sp, r7
 800ce44:	bd80      	pop	{r7, pc}
	...

0800ce48 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b088      	sub	sp, #32
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	60f8      	str	r0, [r7, #12]
 800ce50:	60b9      	str	r1, [r7, #8]
 800ce52:	607a      	str	r2, [r7, #4]
 800ce54:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ce56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce58:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	009b      	lsls	r3, r3, #2
 800ce5e:	461a      	mov	r2, r3
 800ce60:	21a5      	movs	r1, #165	@ 0xa5
 800ce62:	f002 fd2c 	bl	800f8be <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ce66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce70:	3b01      	subs	r3, #1
 800ce72:	009b      	lsls	r3, r3, #2
 800ce74:	4413      	add	r3, r2
 800ce76:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ce78:	69bb      	ldr	r3, [r7, #24]
 800ce7a:	f023 0307 	bic.w	r3, r3, #7
 800ce7e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ce80:	69bb      	ldr	r3, [r7, #24]
 800ce82:	f003 0307 	and.w	r3, r3, #7
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d00b      	beq.n	800cea2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800ce8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce8e:	f383 8811 	msr	BASEPRI, r3
 800ce92:	f3bf 8f6f 	isb	sy
 800ce96:	f3bf 8f4f 	dsb	sy
 800ce9a:	617b      	str	r3, [r7, #20]
}
 800ce9c:	bf00      	nop
 800ce9e:	bf00      	nop
 800cea0:	e7fd      	b.n	800ce9e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cea2:	68bb      	ldr	r3, [r7, #8]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d01f      	beq.n	800cee8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cea8:	2300      	movs	r3, #0
 800ceaa:	61fb      	str	r3, [r7, #28]
 800ceac:	e012      	b.n	800ced4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ceae:	68ba      	ldr	r2, [r7, #8]
 800ceb0:	69fb      	ldr	r3, [r7, #28]
 800ceb2:	4413      	add	r3, r2
 800ceb4:	7819      	ldrb	r1, [r3, #0]
 800ceb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ceb8:	69fb      	ldr	r3, [r7, #28]
 800ceba:	4413      	add	r3, r2
 800cebc:	3334      	adds	r3, #52	@ 0x34
 800cebe:	460a      	mov	r2, r1
 800cec0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cec2:	68ba      	ldr	r2, [r7, #8]
 800cec4:	69fb      	ldr	r3, [r7, #28]
 800cec6:	4413      	add	r3, r2
 800cec8:	781b      	ldrb	r3, [r3, #0]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d006      	beq.n	800cedc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cece:	69fb      	ldr	r3, [r7, #28]
 800ced0:	3301      	adds	r3, #1
 800ced2:	61fb      	str	r3, [r7, #28]
 800ced4:	69fb      	ldr	r3, [r7, #28]
 800ced6:	2b0f      	cmp	r3, #15
 800ced8:	d9e9      	bls.n	800ceae <prvInitialiseNewTask+0x66>
 800ceda:	e000      	b.n	800cede <prvInitialiseNewTask+0x96>
			{
				break;
 800cedc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cee0:	2200      	movs	r2, #0
 800cee2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800cee6:	e003      	b.n	800cef0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceea:	2200      	movs	r2, #0
 800ceec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cef2:	2b37      	cmp	r3, #55	@ 0x37
 800cef4:	d901      	bls.n	800cefa <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cef6:	2337      	movs	r3, #55	@ 0x37
 800cef8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cefa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cefc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cefe:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cf00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cf04:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800cf06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf08:	2200      	movs	r2, #0
 800cf0a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cf0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf0e:	3304      	adds	r3, #4
 800cf10:	4618      	mov	r0, r3
 800cf12:	f7ff f965 	bl	800c1e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cf16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf18:	3318      	adds	r3, #24
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	f7ff f960 	bl	800c1e0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cf20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf24:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf28:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800cf2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf2e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cf30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf34:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cf36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf38:	2200      	movs	r2, #0
 800cf3a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cf3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf40:	2200      	movs	r2, #0
 800cf42:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800cf46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf48:	3354      	adds	r3, #84	@ 0x54
 800cf4a:	224c      	movs	r2, #76	@ 0x4c
 800cf4c:	2100      	movs	r1, #0
 800cf4e:	4618      	mov	r0, r3
 800cf50:	f002 fcb5 	bl	800f8be <memset>
 800cf54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf56:	4a0d      	ldr	r2, [pc, #52]	@ (800cf8c <prvInitialiseNewTask+0x144>)
 800cf58:	659a      	str	r2, [r3, #88]	@ 0x58
 800cf5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf5c:	4a0c      	ldr	r2, [pc, #48]	@ (800cf90 <prvInitialiseNewTask+0x148>)
 800cf5e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800cf60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf62:	4a0c      	ldr	r2, [pc, #48]	@ (800cf94 <prvInitialiseNewTask+0x14c>)
 800cf64:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cf66:	683a      	ldr	r2, [r7, #0]
 800cf68:	68f9      	ldr	r1, [r7, #12]
 800cf6a:	69b8      	ldr	r0, [r7, #24]
 800cf6c:	f001 f95a 	bl	800e224 <pxPortInitialiseStack>
 800cf70:	4602      	mov	r2, r0
 800cf72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf74:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cf76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d002      	beq.n	800cf82 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cf7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cf82:	bf00      	nop
 800cf84:	3720      	adds	r7, #32
 800cf86:	46bd      	mov	sp, r7
 800cf88:	bd80      	pop	{r7, pc}
 800cf8a:	bf00      	nop
 800cf8c:	2000e258 	.word	0x2000e258
 800cf90:	2000e2c0 	.word	0x2000e2c0
 800cf94:	2000e328 	.word	0x2000e328

0800cf98 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b082      	sub	sp, #8
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cfa0:	f001 fa72 	bl	800e488 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cfa4:	4b2d      	ldr	r3, [pc, #180]	@ (800d05c <prvAddNewTaskToReadyList+0xc4>)
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	3301      	adds	r3, #1
 800cfaa:	4a2c      	ldr	r2, [pc, #176]	@ (800d05c <prvAddNewTaskToReadyList+0xc4>)
 800cfac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cfae:	4b2c      	ldr	r3, [pc, #176]	@ (800d060 <prvAddNewTaskToReadyList+0xc8>)
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d109      	bne.n	800cfca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cfb6:	4a2a      	ldr	r2, [pc, #168]	@ (800d060 <prvAddNewTaskToReadyList+0xc8>)
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cfbc:	4b27      	ldr	r3, [pc, #156]	@ (800d05c <prvAddNewTaskToReadyList+0xc4>)
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	2b01      	cmp	r3, #1
 800cfc2:	d110      	bne.n	800cfe6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cfc4:	f000 fc2e 	bl	800d824 <prvInitialiseTaskLists>
 800cfc8:	e00d      	b.n	800cfe6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cfca:	4b26      	ldr	r3, [pc, #152]	@ (800d064 <prvAddNewTaskToReadyList+0xcc>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d109      	bne.n	800cfe6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cfd2:	4b23      	ldr	r3, [pc, #140]	@ (800d060 <prvAddNewTaskToReadyList+0xc8>)
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfdc:	429a      	cmp	r2, r3
 800cfde:	d802      	bhi.n	800cfe6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cfe0:	4a1f      	ldr	r2, [pc, #124]	@ (800d060 <prvAddNewTaskToReadyList+0xc8>)
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cfe6:	4b20      	ldr	r3, [pc, #128]	@ (800d068 <prvAddNewTaskToReadyList+0xd0>)
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	3301      	adds	r3, #1
 800cfec:	4a1e      	ldr	r2, [pc, #120]	@ (800d068 <prvAddNewTaskToReadyList+0xd0>)
 800cfee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cff0:	4b1d      	ldr	r3, [pc, #116]	@ (800d068 <prvAddNewTaskToReadyList+0xd0>)
 800cff2:	681a      	ldr	r2, [r3, #0]
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cffc:	4b1b      	ldr	r3, [pc, #108]	@ (800d06c <prvAddNewTaskToReadyList+0xd4>)
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	429a      	cmp	r2, r3
 800d002:	d903      	bls.n	800d00c <prvAddNewTaskToReadyList+0x74>
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d008:	4a18      	ldr	r2, [pc, #96]	@ (800d06c <prvAddNewTaskToReadyList+0xd4>)
 800d00a:	6013      	str	r3, [r2, #0]
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d010:	4613      	mov	r3, r2
 800d012:	009b      	lsls	r3, r3, #2
 800d014:	4413      	add	r3, r2
 800d016:	009b      	lsls	r3, r3, #2
 800d018:	4a15      	ldr	r2, [pc, #84]	@ (800d070 <prvAddNewTaskToReadyList+0xd8>)
 800d01a:	441a      	add	r2, r3
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	3304      	adds	r3, #4
 800d020:	4619      	mov	r1, r3
 800d022:	4610      	mov	r0, r2
 800d024:	f7ff f8e9 	bl	800c1fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d028:	f001 fa60 	bl	800e4ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d02c:	4b0d      	ldr	r3, [pc, #52]	@ (800d064 <prvAddNewTaskToReadyList+0xcc>)
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d00e      	beq.n	800d052 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d034:	4b0a      	ldr	r3, [pc, #40]	@ (800d060 <prvAddNewTaskToReadyList+0xc8>)
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d03e:	429a      	cmp	r2, r3
 800d040:	d207      	bcs.n	800d052 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d042:	4b0c      	ldr	r3, [pc, #48]	@ (800d074 <prvAddNewTaskToReadyList+0xdc>)
 800d044:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d048:	601a      	str	r2, [r3, #0]
 800d04a:	f3bf 8f4f 	dsb	sy
 800d04e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d052:	bf00      	nop
 800d054:	3708      	adds	r7, #8
 800d056:	46bd      	mov	sp, r7
 800d058:	bd80      	pop	{r7, pc}
 800d05a:	bf00      	nop
 800d05c:	20004498 	.word	0x20004498
 800d060:	20003fc4 	.word	0x20003fc4
 800d064:	200044a4 	.word	0x200044a4
 800d068:	200044b4 	.word	0x200044b4
 800d06c:	200044a0 	.word	0x200044a0
 800d070:	20003fc8 	.word	0x20003fc8
 800d074:	e000ed04 	.word	0xe000ed04

0800d078 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b084      	sub	sp, #16
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d080:	2300      	movs	r3, #0
 800d082:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d018      	beq.n	800d0bc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d08a:	4b14      	ldr	r3, [pc, #80]	@ (800d0dc <vTaskDelay+0x64>)
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d00b      	beq.n	800d0aa <vTaskDelay+0x32>
	__asm volatile
 800d092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d096:	f383 8811 	msr	BASEPRI, r3
 800d09a:	f3bf 8f6f 	isb	sy
 800d09e:	f3bf 8f4f 	dsb	sy
 800d0a2:	60bb      	str	r3, [r7, #8]
}
 800d0a4:	bf00      	nop
 800d0a6:	bf00      	nop
 800d0a8:	e7fd      	b.n	800d0a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d0aa:	f000 f88b 	bl	800d1c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d0ae:	2100      	movs	r1, #0
 800d0b0:	6878      	ldr	r0, [r7, #4]
 800d0b2:	f000 fd09 	bl	800dac8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d0b6:	f000 f893 	bl	800d1e0 <xTaskResumeAll>
 800d0ba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d107      	bne.n	800d0d2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800d0c2:	4b07      	ldr	r3, [pc, #28]	@ (800d0e0 <vTaskDelay+0x68>)
 800d0c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d0c8:	601a      	str	r2, [r3, #0]
 800d0ca:	f3bf 8f4f 	dsb	sy
 800d0ce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d0d2:	bf00      	nop
 800d0d4:	3710      	adds	r7, #16
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	bd80      	pop	{r7, pc}
 800d0da:	bf00      	nop
 800d0dc:	200044c0 	.word	0x200044c0
 800d0e0:	e000ed04 	.word	0xe000ed04

0800d0e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d0e4:	b580      	push	{r7, lr}
 800d0e6:	b08a      	sub	sp, #40	@ 0x28
 800d0e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d0f2:	463a      	mov	r2, r7
 800d0f4:	1d39      	adds	r1, r7, #4
 800d0f6:	f107 0308 	add.w	r3, r7, #8
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f7ff f81c 	bl	800c138 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d100:	6839      	ldr	r1, [r7, #0]
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	68ba      	ldr	r2, [r7, #8]
 800d106:	9202      	str	r2, [sp, #8]
 800d108:	9301      	str	r3, [sp, #4]
 800d10a:	2300      	movs	r3, #0
 800d10c:	9300      	str	r3, [sp, #0]
 800d10e:	2300      	movs	r3, #0
 800d110:	460a      	mov	r2, r1
 800d112:	4924      	ldr	r1, [pc, #144]	@ (800d1a4 <vTaskStartScheduler+0xc0>)
 800d114:	4824      	ldr	r0, [pc, #144]	@ (800d1a8 <vTaskStartScheduler+0xc4>)
 800d116:	f7ff fdf1 	bl	800ccfc <xTaskCreateStatic>
 800d11a:	4603      	mov	r3, r0
 800d11c:	4a23      	ldr	r2, [pc, #140]	@ (800d1ac <vTaskStartScheduler+0xc8>)
 800d11e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d120:	4b22      	ldr	r3, [pc, #136]	@ (800d1ac <vTaskStartScheduler+0xc8>)
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d002      	beq.n	800d12e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d128:	2301      	movs	r3, #1
 800d12a:	617b      	str	r3, [r7, #20]
 800d12c:	e001      	b.n	800d132 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d12e:	2300      	movs	r3, #0
 800d130:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d132:	697b      	ldr	r3, [r7, #20]
 800d134:	2b01      	cmp	r3, #1
 800d136:	d102      	bne.n	800d13e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d138:	f000 fd1a 	bl	800db70 <xTimerCreateTimerTask>
 800d13c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d13e:	697b      	ldr	r3, [r7, #20]
 800d140:	2b01      	cmp	r3, #1
 800d142:	d11b      	bne.n	800d17c <vTaskStartScheduler+0x98>
	__asm volatile
 800d144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d148:	f383 8811 	msr	BASEPRI, r3
 800d14c:	f3bf 8f6f 	isb	sy
 800d150:	f3bf 8f4f 	dsb	sy
 800d154:	613b      	str	r3, [r7, #16]
}
 800d156:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d158:	4b15      	ldr	r3, [pc, #84]	@ (800d1b0 <vTaskStartScheduler+0xcc>)
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	3354      	adds	r3, #84	@ 0x54
 800d15e:	4a15      	ldr	r2, [pc, #84]	@ (800d1b4 <vTaskStartScheduler+0xd0>)
 800d160:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d162:	4b15      	ldr	r3, [pc, #84]	@ (800d1b8 <vTaskStartScheduler+0xd4>)
 800d164:	f04f 32ff 	mov.w	r2, #4294967295
 800d168:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d16a:	4b14      	ldr	r3, [pc, #80]	@ (800d1bc <vTaskStartScheduler+0xd8>)
 800d16c:	2201      	movs	r2, #1
 800d16e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d170:	4b13      	ldr	r3, [pc, #76]	@ (800d1c0 <vTaskStartScheduler+0xdc>)
 800d172:	2200      	movs	r2, #0
 800d174:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d176:	f001 f8e3 	bl	800e340 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d17a:	e00f      	b.n	800d19c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d17c:	697b      	ldr	r3, [r7, #20]
 800d17e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d182:	d10b      	bne.n	800d19c <vTaskStartScheduler+0xb8>
	__asm volatile
 800d184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d188:	f383 8811 	msr	BASEPRI, r3
 800d18c:	f3bf 8f6f 	isb	sy
 800d190:	f3bf 8f4f 	dsb	sy
 800d194:	60fb      	str	r3, [r7, #12]
}
 800d196:	bf00      	nop
 800d198:	bf00      	nop
 800d19a:	e7fd      	b.n	800d198 <vTaskStartScheduler+0xb4>
}
 800d19c:	bf00      	nop
 800d19e:	3718      	adds	r7, #24
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	bd80      	pop	{r7, pc}
 800d1a4:	08012274 	.word	0x08012274
 800d1a8:	0800d7f5 	.word	0x0800d7f5
 800d1ac:	200044bc 	.word	0x200044bc
 800d1b0:	20003fc4 	.word	0x20003fc4
 800d1b4:	20000074 	.word	0x20000074
 800d1b8:	200044b8 	.word	0x200044b8
 800d1bc:	200044a4 	.word	0x200044a4
 800d1c0:	2000449c 	.word	0x2000449c

0800d1c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d1c4:	b480      	push	{r7}
 800d1c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d1c8:	4b04      	ldr	r3, [pc, #16]	@ (800d1dc <vTaskSuspendAll+0x18>)
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	3301      	adds	r3, #1
 800d1ce:	4a03      	ldr	r2, [pc, #12]	@ (800d1dc <vTaskSuspendAll+0x18>)
 800d1d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d1d2:	bf00      	nop
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1da:	4770      	bx	lr
 800d1dc:	200044c0 	.word	0x200044c0

0800d1e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b084      	sub	sp, #16
 800d1e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d1ee:	4b42      	ldr	r3, [pc, #264]	@ (800d2f8 <xTaskResumeAll+0x118>)
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d10b      	bne.n	800d20e <xTaskResumeAll+0x2e>
	__asm volatile
 800d1f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1fa:	f383 8811 	msr	BASEPRI, r3
 800d1fe:	f3bf 8f6f 	isb	sy
 800d202:	f3bf 8f4f 	dsb	sy
 800d206:	603b      	str	r3, [r7, #0]
}
 800d208:	bf00      	nop
 800d20a:	bf00      	nop
 800d20c:	e7fd      	b.n	800d20a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d20e:	f001 f93b 	bl	800e488 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d212:	4b39      	ldr	r3, [pc, #228]	@ (800d2f8 <xTaskResumeAll+0x118>)
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	3b01      	subs	r3, #1
 800d218:	4a37      	ldr	r2, [pc, #220]	@ (800d2f8 <xTaskResumeAll+0x118>)
 800d21a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d21c:	4b36      	ldr	r3, [pc, #216]	@ (800d2f8 <xTaskResumeAll+0x118>)
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d162      	bne.n	800d2ea <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d224:	4b35      	ldr	r3, [pc, #212]	@ (800d2fc <xTaskResumeAll+0x11c>)
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d05e      	beq.n	800d2ea <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d22c:	e02f      	b.n	800d28e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d22e:	4b34      	ldr	r3, [pc, #208]	@ (800d300 <xTaskResumeAll+0x120>)
 800d230:	68db      	ldr	r3, [r3, #12]
 800d232:	68db      	ldr	r3, [r3, #12]
 800d234:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	3318      	adds	r3, #24
 800d23a:	4618      	mov	r0, r3
 800d23c:	f7ff f83a 	bl	800c2b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	3304      	adds	r3, #4
 800d244:	4618      	mov	r0, r3
 800d246:	f7ff f835 	bl	800c2b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d24e:	4b2d      	ldr	r3, [pc, #180]	@ (800d304 <xTaskResumeAll+0x124>)
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	429a      	cmp	r2, r3
 800d254:	d903      	bls.n	800d25e <xTaskResumeAll+0x7e>
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d25a:	4a2a      	ldr	r2, [pc, #168]	@ (800d304 <xTaskResumeAll+0x124>)
 800d25c:	6013      	str	r3, [r2, #0]
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d262:	4613      	mov	r3, r2
 800d264:	009b      	lsls	r3, r3, #2
 800d266:	4413      	add	r3, r2
 800d268:	009b      	lsls	r3, r3, #2
 800d26a:	4a27      	ldr	r2, [pc, #156]	@ (800d308 <xTaskResumeAll+0x128>)
 800d26c:	441a      	add	r2, r3
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	3304      	adds	r3, #4
 800d272:	4619      	mov	r1, r3
 800d274:	4610      	mov	r0, r2
 800d276:	f7fe ffc0 	bl	800c1fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d27e:	4b23      	ldr	r3, [pc, #140]	@ (800d30c <xTaskResumeAll+0x12c>)
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d284:	429a      	cmp	r2, r3
 800d286:	d302      	bcc.n	800d28e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800d288:	4b21      	ldr	r3, [pc, #132]	@ (800d310 <xTaskResumeAll+0x130>)
 800d28a:	2201      	movs	r2, #1
 800d28c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d28e:	4b1c      	ldr	r3, [pc, #112]	@ (800d300 <xTaskResumeAll+0x120>)
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d1cb      	bne.n	800d22e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d001      	beq.n	800d2a0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d29c:	f000 fb66 	bl	800d96c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d2a0:	4b1c      	ldr	r3, [pc, #112]	@ (800d314 <xTaskResumeAll+0x134>)
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d010      	beq.n	800d2ce <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d2ac:	f000 f846 	bl	800d33c <xTaskIncrementTick>
 800d2b0:	4603      	mov	r3, r0
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d002      	beq.n	800d2bc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800d2b6:	4b16      	ldr	r3, [pc, #88]	@ (800d310 <xTaskResumeAll+0x130>)
 800d2b8:	2201      	movs	r2, #1
 800d2ba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	3b01      	subs	r3, #1
 800d2c0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d1f1      	bne.n	800d2ac <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800d2c8:	4b12      	ldr	r3, [pc, #72]	@ (800d314 <xTaskResumeAll+0x134>)
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d2ce:	4b10      	ldr	r3, [pc, #64]	@ (800d310 <xTaskResumeAll+0x130>)
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d009      	beq.n	800d2ea <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d2d6:	2301      	movs	r3, #1
 800d2d8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d2da:	4b0f      	ldr	r3, [pc, #60]	@ (800d318 <xTaskResumeAll+0x138>)
 800d2dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d2e0:	601a      	str	r2, [r3, #0]
 800d2e2:	f3bf 8f4f 	dsb	sy
 800d2e6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d2ea:	f001 f8ff 	bl	800e4ec <vPortExitCritical>

	return xAlreadyYielded;
 800d2ee:	68bb      	ldr	r3, [r7, #8]
}
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	3710      	adds	r7, #16
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	bd80      	pop	{r7, pc}
 800d2f8:	200044c0 	.word	0x200044c0
 800d2fc:	20004498 	.word	0x20004498
 800d300:	20004458 	.word	0x20004458
 800d304:	200044a0 	.word	0x200044a0
 800d308:	20003fc8 	.word	0x20003fc8
 800d30c:	20003fc4 	.word	0x20003fc4
 800d310:	200044ac 	.word	0x200044ac
 800d314:	200044a8 	.word	0x200044a8
 800d318:	e000ed04 	.word	0xe000ed04

0800d31c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d31c:	b480      	push	{r7}
 800d31e:	b083      	sub	sp, #12
 800d320:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d322:	4b05      	ldr	r3, [pc, #20]	@ (800d338 <xTaskGetTickCount+0x1c>)
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d328:	687b      	ldr	r3, [r7, #4]
}
 800d32a:	4618      	mov	r0, r3
 800d32c:	370c      	adds	r7, #12
 800d32e:	46bd      	mov	sp, r7
 800d330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d334:	4770      	bx	lr
 800d336:	bf00      	nop
 800d338:	2000449c 	.word	0x2000449c

0800d33c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b086      	sub	sp, #24
 800d340:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d342:	2300      	movs	r3, #0
 800d344:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d346:	4b4f      	ldr	r3, [pc, #316]	@ (800d484 <xTaskIncrementTick+0x148>)
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	f040 8090 	bne.w	800d470 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d350:	4b4d      	ldr	r3, [pc, #308]	@ (800d488 <xTaskIncrementTick+0x14c>)
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	3301      	adds	r3, #1
 800d356:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d358:	4a4b      	ldr	r2, [pc, #300]	@ (800d488 <xTaskIncrementTick+0x14c>)
 800d35a:	693b      	ldr	r3, [r7, #16]
 800d35c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d35e:	693b      	ldr	r3, [r7, #16]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d121      	bne.n	800d3a8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800d364:	4b49      	ldr	r3, [pc, #292]	@ (800d48c <xTaskIncrementTick+0x150>)
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d00b      	beq.n	800d386 <xTaskIncrementTick+0x4a>
	__asm volatile
 800d36e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d372:	f383 8811 	msr	BASEPRI, r3
 800d376:	f3bf 8f6f 	isb	sy
 800d37a:	f3bf 8f4f 	dsb	sy
 800d37e:	603b      	str	r3, [r7, #0]
}
 800d380:	bf00      	nop
 800d382:	bf00      	nop
 800d384:	e7fd      	b.n	800d382 <xTaskIncrementTick+0x46>
 800d386:	4b41      	ldr	r3, [pc, #260]	@ (800d48c <xTaskIncrementTick+0x150>)
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	60fb      	str	r3, [r7, #12]
 800d38c:	4b40      	ldr	r3, [pc, #256]	@ (800d490 <xTaskIncrementTick+0x154>)
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	4a3e      	ldr	r2, [pc, #248]	@ (800d48c <xTaskIncrementTick+0x150>)
 800d392:	6013      	str	r3, [r2, #0]
 800d394:	4a3e      	ldr	r2, [pc, #248]	@ (800d490 <xTaskIncrementTick+0x154>)
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	6013      	str	r3, [r2, #0]
 800d39a:	4b3e      	ldr	r3, [pc, #248]	@ (800d494 <xTaskIncrementTick+0x158>)
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	3301      	adds	r3, #1
 800d3a0:	4a3c      	ldr	r2, [pc, #240]	@ (800d494 <xTaskIncrementTick+0x158>)
 800d3a2:	6013      	str	r3, [r2, #0]
 800d3a4:	f000 fae2 	bl	800d96c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d3a8:	4b3b      	ldr	r3, [pc, #236]	@ (800d498 <xTaskIncrementTick+0x15c>)
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	693a      	ldr	r2, [r7, #16]
 800d3ae:	429a      	cmp	r2, r3
 800d3b0:	d349      	bcc.n	800d446 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d3b2:	4b36      	ldr	r3, [pc, #216]	@ (800d48c <xTaskIncrementTick+0x150>)
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d104      	bne.n	800d3c6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d3bc:	4b36      	ldr	r3, [pc, #216]	@ (800d498 <xTaskIncrementTick+0x15c>)
 800d3be:	f04f 32ff 	mov.w	r2, #4294967295
 800d3c2:	601a      	str	r2, [r3, #0]
					break;
 800d3c4:	e03f      	b.n	800d446 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3c6:	4b31      	ldr	r3, [pc, #196]	@ (800d48c <xTaskIncrementTick+0x150>)
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	68db      	ldr	r3, [r3, #12]
 800d3cc:	68db      	ldr	r3, [r3, #12]
 800d3ce:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d3d0:	68bb      	ldr	r3, [r7, #8]
 800d3d2:	685b      	ldr	r3, [r3, #4]
 800d3d4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d3d6:	693a      	ldr	r2, [r7, #16]
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	429a      	cmp	r2, r3
 800d3dc:	d203      	bcs.n	800d3e6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d3de:	4a2e      	ldr	r2, [pc, #184]	@ (800d498 <xTaskIncrementTick+0x15c>)
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d3e4:	e02f      	b.n	800d446 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d3e6:	68bb      	ldr	r3, [r7, #8]
 800d3e8:	3304      	adds	r3, #4
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	f7fe ff62 	bl	800c2b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d3f0:	68bb      	ldr	r3, [r7, #8]
 800d3f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d004      	beq.n	800d402 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d3f8:	68bb      	ldr	r3, [r7, #8]
 800d3fa:	3318      	adds	r3, #24
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	f7fe ff59 	bl	800c2b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d402:	68bb      	ldr	r3, [r7, #8]
 800d404:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d406:	4b25      	ldr	r3, [pc, #148]	@ (800d49c <xTaskIncrementTick+0x160>)
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	429a      	cmp	r2, r3
 800d40c:	d903      	bls.n	800d416 <xTaskIncrementTick+0xda>
 800d40e:	68bb      	ldr	r3, [r7, #8]
 800d410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d412:	4a22      	ldr	r2, [pc, #136]	@ (800d49c <xTaskIncrementTick+0x160>)
 800d414:	6013      	str	r3, [r2, #0]
 800d416:	68bb      	ldr	r3, [r7, #8]
 800d418:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d41a:	4613      	mov	r3, r2
 800d41c:	009b      	lsls	r3, r3, #2
 800d41e:	4413      	add	r3, r2
 800d420:	009b      	lsls	r3, r3, #2
 800d422:	4a1f      	ldr	r2, [pc, #124]	@ (800d4a0 <xTaskIncrementTick+0x164>)
 800d424:	441a      	add	r2, r3
 800d426:	68bb      	ldr	r3, [r7, #8]
 800d428:	3304      	adds	r3, #4
 800d42a:	4619      	mov	r1, r3
 800d42c:	4610      	mov	r0, r2
 800d42e:	f7fe fee4 	bl	800c1fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d432:	68bb      	ldr	r3, [r7, #8]
 800d434:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d436:	4b1b      	ldr	r3, [pc, #108]	@ (800d4a4 <xTaskIncrementTick+0x168>)
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d43c:	429a      	cmp	r2, r3
 800d43e:	d3b8      	bcc.n	800d3b2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800d440:	2301      	movs	r3, #1
 800d442:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d444:	e7b5      	b.n	800d3b2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d446:	4b17      	ldr	r3, [pc, #92]	@ (800d4a4 <xTaskIncrementTick+0x168>)
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d44c:	4914      	ldr	r1, [pc, #80]	@ (800d4a0 <xTaskIncrementTick+0x164>)
 800d44e:	4613      	mov	r3, r2
 800d450:	009b      	lsls	r3, r3, #2
 800d452:	4413      	add	r3, r2
 800d454:	009b      	lsls	r3, r3, #2
 800d456:	440b      	add	r3, r1
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	2b01      	cmp	r3, #1
 800d45c:	d901      	bls.n	800d462 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800d45e:	2301      	movs	r3, #1
 800d460:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d462:	4b11      	ldr	r3, [pc, #68]	@ (800d4a8 <xTaskIncrementTick+0x16c>)
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d007      	beq.n	800d47a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800d46a:	2301      	movs	r3, #1
 800d46c:	617b      	str	r3, [r7, #20]
 800d46e:	e004      	b.n	800d47a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d470:	4b0e      	ldr	r3, [pc, #56]	@ (800d4ac <xTaskIncrementTick+0x170>)
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	3301      	adds	r3, #1
 800d476:	4a0d      	ldr	r2, [pc, #52]	@ (800d4ac <xTaskIncrementTick+0x170>)
 800d478:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d47a:	697b      	ldr	r3, [r7, #20]
}
 800d47c:	4618      	mov	r0, r3
 800d47e:	3718      	adds	r7, #24
 800d480:	46bd      	mov	sp, r7
 800d482:	bd80      	pop	{r7, pc}
 800d484:	200044c0 	.word	0x200044c0
 800d488:	2000449c 	.word	0x2000449c
 800d48c:	20004450 	.word	0x20004450
 800d490:	20004454 	.word	0x20004454
 800d494:	200044b0 	.word	0x200044b0
 800d498:	200044b8 	.word	0x200044b8
 800d49c:	200044a0 	.word	0x200044a0
 800d4a0:	20003fc8 	.word	0x20003fc8
 800d4a4:	20003fc4 	.word	0x20003fc4
 800d4a8:	200044ac 	.word	0x200044ac
 800d4ac:	200044a8 	.word	0x200044a8

0800d4b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d4b0:	b480      	push	{r7}
 800d4b2:	b085      	sub	sp, #20
 800d4b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d4b6:	4b2b      	ldr	r3, [pc, #172]	@ (800d564 <vTaskSwitchContext+0xb4>)
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d003      	beq.n	800d4c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d4be:	4b2a      	ldr	r3, [pc, #168]	@ (800d568 <vTaskSwitchContext+0xb8>)
 800d4c0:	2201      	movs	r2, #1
 800d4c2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d4c4:	e047      	b.n	800d556 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800d4c6:	4b28      	ldr	r3, [pc, #160]	@ (800d568 <vTaskSwitchContext+0xb8>)
 800d4c8:	2200      	movs	r2, #0
 800d4ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d4cc:	4b27      	ldr	r3, [pc, #156]	@ (800d56c <vTaskSwitchContext+0xbc>)
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	60fb      	str	r3, [r7, #12]
 800d4d2:	e011      	b.n	800d4f8 <vTaskSwitchContext+0x48>
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d10b      	bne.n	800d4f2 <vTaskSwitchContext+0x42>
	__asm volatile
 800d4da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4de:	f383 8811 	msr	BASEPRI, r3
 800d4e2:	f3bf 8f6f 	isb	sy
 800d4e6:	f3bf 8f4f 	dsb	sy
 800d4ea:	607b      	str	r3, [r7, #4]
}
 800d4ec:	bf00      	nop
 800d4ee:	bf00      	nop
 800d4f0:	e7fd      	b.n	800d4ee <vTaskSwitchContext+0x3e>
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	3b01      	subs	r3, #1
 800d4f6:	60fb      	str	r3, [r7, #12]
 800d4f8:	491d      	ldr	r1, [pc, #116]	@ (800d570 <vTaskSwitchContext+0xc0>)
 800d4fa:	68fa      	ldr	r2, [r7, #12]
 800d4fc:	4613      	mov	r3, r2
 800d4fe:	009b      	lsls	r3, r3, #2
 800d500:	4413      	add	r3, r2
 800d502:	009b      	lsls	r3, r3, #2
 800d504:	440b      	add	r3, r1
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d0e3      	beq.n	800d4d4 <vTaskSwitchContext+0x24>
 800d50c:	68fa      	ldr	r2, [r7, #12]
 800d50e:	4613      	mov	r3, r2
 800d510:	009b      	lsls	r3, r3, #2
 800d512:	4413      	add	r3, r2
 800d514:	009b      	lsls	r3, r3, #2
 800d516:	4a16      	ldr	r2, [pc, #88]	@ (800d570 <vTaskSwitchContext+0xc0>)
 800d518:	4413      	add	r3, r2
 800d51a:	60bb      	str	r3, [r7, #8]
 800d51c:	68bb      	ldr	r3, [r7, #8]
 800d51e:	685b      	ldr	r3, [r3, #4]
 800d520:	685a      	ldr	r2, [r3, #4]
 800d522:	68bb      	ldr	r3, [r7, #8]
 800d524:	605a      	str	r2, [r3, #4]
 800d526:	68bb      	ldr	r3, [r7, #8]
 800d528:	685a      	ldr	r2, [r3, #4]
 800d52a:	68bb      	ldr	r3, [r7, #8]
 800d52c:	3308      	adds	r3, #8
 800d52e:	429a      	cmp	r2, r3
 800d530:	d104      	bne.n	800d53c <vTaskSwitchContext+0x8c>
 800d532:	68bb      	ldr	r3, [r7, #8]
 800d534:	685b      	ldr	r3, [r3, #4]
 800d536:	685a      	ldr	r2, [r3, #4]
 800d538:	68bb      	ldr	r3, [r7, #8]
 800d53a:	605a      	str	r2, [r3, #4]
 800d53c:	68bb      	ldr	r3, [r7, #8]
 800d53e:	685b      	ldr	r3, [r3, #4]
 800d540:	68db      	ldr	r3, [r3, #12]
 800d542:	4a0c      	ldr	r2, [pc, #48]	@ (800d574 <vTaskSwitchContext+0xc4>)
 800d544:	6013      	str	r3, [r2, #0]
 800d546:	4a09      	ldr	r2, [pc, #36]	@ (800d56c <vTaskSwitchContext+0xbc>)
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d54c:	4b09      	ldr	r3, [pc, #36]	@ (800d574 <vTaskSwitchContext+0xc4>)
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	3354      	adds	r3, #84	@ 0x54
 800d552:	4a09      	ldr	r2, [pc, #36]	@ (800d578 <vTaskSwitchContext+0xc8>)
 800d554:	6013      	str	r3, [r2, #0]
}
 800d556:	bf00      	nop
 800d558:	3714      	adds	r7, #20
 800d55a:	46bd      	mov	sp, r7
 800d55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d560:	4770      	bx	lr
 800d562:	bf00      	nop
 800d564:	200044c0 	.word	0x200044c0
 800d568:	200044ac 	.word	0x200044ac
 800d56c:	200044a0 	.word	0x200044a0
 800d570:	20003fc8 	.word	0x20003fc8
 800d574:	20003fc4 	.word	0x20003fc4
 800d578:	20000074 	.word	0x20000074

0800d57c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b084      	sub	sp, #16
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
 800d584:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d10b      	bne.n	800d5a4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800d58c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d590:	f383 8811 	msr	BASEPRI, r3
 800d594:	f3bf 8f6f 	isb	sy
 800d598:	f3bf 8f4f 	dsb	sy
 800d59c:	60fb      	str	r3, [r7, #12]
}
 800d59e:	bf00      	nop
 800d5a0:	bf00      	nop
 800d5a2:	e7fd      	b.n	800d5a0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d5a4:	4b07      	ldr	r3, [pc, #28]	@ (800d5c4 <vTaskPlaceOnEventList+0x48>)
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	3318      	adds	r3, #24
 800d5aa:	4619      	mov	r1, r3
 800d5ac:	6878      	ldr	r0, [r7, #4]
 800d5ae:	f7fe fe48 	bl	800c242 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d5b2:	2101      	movs	r1, #1
 800d5b4:	6838      	ldr	r0, [r7, #0]
 800d5b6:	f000 fa87 	bl	800dac8 <prvAddCurrentTaskToDelayedList>
}
 800d5ba:	bf00      	nop
 800d5bc:	3710      	adds	r7, #16
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	bd80      	pop	{r7, pc}
 800d5c2:	bf00      	nop
 800d5c4:	20003fc4 	.word	0x20003fc4

0800d5c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b086      	sub	sp, #24
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	60f8      	str	r0, [r7, #12]
 800d5d0:	60b9      	str	r1, [r7, #8]
 800d5d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d10b      	bne.n	800d5f2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800d5da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5de:	f383 8811 	msr	BASEPRI, r3
 800d5e2:	f3bf 8f6f 	isb	sy
 800d5e6:	f3bf 8f4f 	dsb	sy
 800d5ea:	617b      	str	r3, [r7, #20]
}
 800d5ec:	bf00      	nop
 800d5ee:	bf00      	nop
 800d5f0:	e7fd      	b.n	800d5ee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d5f2:	4b0a      	ldr	r3, [pc, #40]	@ (800d61c <vTaskPlaceOnEventListRestricted+0x54>)
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	3318      	adds	r3, #24
 800d5f8:	4619      	mov	r1, r3
 800d5fa:	68f8      	ldr	r0, [r7, #12]
 800d5fc:	f7fe fdfd 	bl	800c1fa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d002      	beq.n	800d60c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800d606:	f04f 33ff 	mov.w	r3, #4294967295
 800d60a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d60c:	6879      	ldr	r1, [r7, #4]
 800d60e:	68b8      	ldr	r0, [r7, #8]
 800d610:	f000 fa5a 	bl	800dac8 <prvAddCurrentTaskToDelayedList>
	}
 800d614:	bf00      	nop
 800d616:	3718      	adds	r7, #24
 800d618:	46bd      	mov	sp, r7
 800d61a:	bd80      	pop	{r7, pc}
 800d61c:	20003fc4 	.word	0x20003fc4

0800d620 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b086      	sub	sp, #24
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	68db      	ldr	r3, [r3, #12]
 800d62c:	68db      	ldr	r3, [r3, #12]
 800d62e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d630:	693b      	ldr	r3, [r7, #16]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d10b      	bne.n	800d64e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800d636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d63a:	f383 8811 	msr	BASEPRI, r3
 800d63e:	f3bf 8f6f 	isb	sy
 800d642:	f3bf 8f4f 	dsb	sy
 800d646:	60fb      	str	r3, [r7, #12]
}
 800d648:	bf00      	nop
 800d64a:	bf00      	nop
 800d64c:	e7fd      	b.n	800d64a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d64e:	693b      	ldr	r3, [r7, #16]
 800d650:	3318      	adds	r3, #24
 800d652:	4618      	mov	r0, r3
 800d654:	f7fe fe2e 	bl	800c2b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d658:	4b1d      	ldr	r3, [pc, #116]	@ (800d6d0 <xTaskRemoveFromEventList+0xb0>)
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d11d      	bne.n	800d69c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d660:	693b      	ldr	r3, [r7, #16]
 800d662:	3304      	adds	r3, #4
 800d664:	4618      	mov	r0, r3
 800d666:	f7fe fe25 	bl	800c2b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d66a:	693b      	ldr	r3, [r7, #16]
 800d66c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d66e:	4b19      	ldr	r3, [pc, #100]	@ (800d6d4 <xTaskRemoveFromEventList+0xb4>)
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	429a      	cmp	r2, r3
 800d674:	d903      	bls.n	800d67e <xTaskRemoveFromEventList+0x5e>
 800d676:	693b      	ldr	r3, [r7, #16]
 800d678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d67a:	4a16      	ldr	r2, [pc, #88]	@ (800d6d4 <xTaskRemoveFromEventList+0xb4>)
 800d67c:	6013      	str	r3, [r2, #0]
 800d67e:	693b      	ldr	r3, [r7, #16]
 800d680:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d682:	4613      	mov	r3, r2
 800d684:	009b      	lsls	r3, r3, #2
 800d686:	4413      	add	r3, r2
 800d688:	009b      	lsls	r3, r3, #2
 800d68a:	4a13      	ldr	r2, [pc, #76]	@ (800d6d8 <xTaskRemoveFromEventList+0xb8>)
 800d68c:	441a      	add	r2, r3
 800d68e:	693b      	ldr	r3, [r7, #16]
 800d690:	3304      	adds	r3, #4
 800d692:	4619      	mov	r1, r3
 800d694:	4610      	mov	r0, r2
 800d696:	f7fe fdb0 	bl	800c1fa <vListInsertEnd>
 800d69a:	e005      	b.n	800d6a8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d69c:	693b      	ldr	r3, [r7, #16]
 800d69e:	3318      	adds	r3, #24
 800d6a0:	4619      	mov	r1, r3
 800d6a2:	480e      	ldr	r0, [pc, #56]	@ (800d6dc <xTaskRemoveFromEventList+0xbc>)
 800d6a4:	f7fe fda9 	bl	800c1fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d6a8:	693b      	ldr	r3, [r7, #16]
 800d6aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d6ac:	4b0c      	ldr	r3, [pc, #48]	@ (800d6e0 <xTaskRemoveFromEventList+0xc0>)
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6b2:	429a      	cmp	r2, r3
 800d6b4:	d905      	bls.n	800d6c2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d6b6:	2301      	movs	r3, #1
 800d6b8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d6ba:	4b0a      	ldr	r3, [pc, #40]	@ (800d6e4 <xTaskRemoveFromEventList+0xc4>)
 800d6bc:	2201      	movs	r2, #1
 800d6be:	601a      	str	r2, [r3, #0]
 800d6c0:	e001      	b.n	800d6c6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d6c6:	697b      	ldr	r3, [r7, #20]
}
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	3718      	adds	r7, #24
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	bd80      	pop	{r7, pc}
 800d6d0:	200044c0 	.word	0x200044c0
 800d6d4:	200044a0 	.word	0x200044a0
 800d6d8:	20003fc8 	.word	0x20003fc8
 800d6dc:	20004458 	.word	0x20004458
 800d6e0:	20003fc4 	.word	0x20003fc4
 800d6e4:	200044ac 	.word	0x200044ac

0800d6e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d6e8:	b480      	push	{r7}
 800d6ea:	b083      	sub	sp, #12
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d6f0:	4b06      	ldr	r3, [pc, #24]	@ (800d70c <vTaskInternalSetTimeOutState+0x24>)
 800d6f2:	681a      	ldr	r2, [r3, #0]
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d6f8:	4b05      	ldr	r3, [pc, #20]	@ (800d710 <vTaskInternalSetTimeOutState+0x28>)
 800d6fa:	681a      	ldr	r2, [r3, #0]
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	605a      	str	r2, [r3, #4]
}
 800d700:	bf00      	nop
 800d702:	370c      	adds	r7, #12
 800d704:	46bd      	mov	sp, r7
 800d706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70a:	4770      	bx	lr
 800d70c:	200044b0 	.word	0x200044b0
 800d710:	2000449c 	.word	0x2000449c

0800d714 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d714:	b580      	push	{r7, lr}
 800d716:	b088      	sub	sp, #32
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
 800d71c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d10b      	bne.n	800d73c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800d724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d728:	f383 8811 	msr	BASEPRI, r3
 800d72c:	f3bf 8f6f 	isb	sy
 800d730:	f3bf 8f4f 	dsb	sy
 800d734:	613b      	str	r3, [r7, #16]
}
 800d736:	bf00      	nop
 800d738:	bf00      	nop
 800d73a:	e7fd      	b.n	800d738 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d73c:	683b      	ldr	r3, [r7, #0]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d10b      	bne.n	800d75a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800d742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d746:	f383 8811 	msr	BASEPRI, r3
 800d74a:	f3bf 8f6f 	isb	sy
 800d74e:	f3bf 8f4f 	dsb	sy
 800d752:	60fb      	str	r3, [r7, #12]
}
 800d754:	bf00      	nop
 800d756:	bf00      	nop
 800d758:	e7fd      	b.n	800d756 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800d75a:	f000 fe95 	bl	800e488 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d75e:	4b1d      	ldr	r3, [pc, #116]	@ (800d7d4 <xTaskCheckForTimeOut+0xc0>)
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	685b      	ldr	r3, [r3, #4]
 800d768:	69ba      	ldr	r2, [r7, #24]
 800d76a:	1ad3      	subs	r3, r2, r3
 800d76c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d76e:	683b      	ldr	r3, [r7, #0]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d776:	d102      	bne.n	800d77e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d778:	2300      	movs	r3, #0
 800d77a:	61fb      	str	r3, [r7, #28]
 800d77c:	e023      	b.n	800d7c6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	681a      	ldr	r2, [r3, #0]
 800d782:	4b15      	ldr	r3, [pc, #84]	@ (800d7d8 <xTaskCheckForTimeOut+0xc4>)
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	429a      	cmp	r2, r3
 800d788:	d007      	beq.n	800d79a <xTaskCheckForTimeOut+0x86>
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	685b      	ldr	r3, [r3, #4]
 800d78e:	69ba      	ldr	r2, [r7, #24]
 800d790:	429a      	cmp	r2, r3
 800d792:	d302      	bcc.n	800d79a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d794:	2301      	movs	r3, #1
 800d796:	61fb      	str	r3, [r7, #28]
 800d798:	e015      	b.n	800d7c6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d79a:	683b      	ldr	r3, [r7, #0]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	697a      	ldr	r2, [r7, #20]
 800d7a0:	429a      	cmp	r2, r3
 800d7a2:	d20b      	bcs.n	800d7bc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d7a4:	683b      	ldr	r3, [r7, #0]
 800d7a6:	681a      	ldr	r2, [r3, #0]
 800d7a8:	697b      	ldr	r3, [r7, #20]
 800d7aa:	1ad2      	subs	r2, r2, r3
 800d7ac:	683b      	ldr	r3, [r7, #0]
 800d7ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d7b0:	6878      	ldr	r0, [r7, #4]
 800d7b2:	f7ff ff99 	bl	800d6e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d7b6:	2300      	movs	r3, #0
 800d7b8:	61fb      	str	r3, [r7, #28]
 800d7ba:	e004      	b.n	800d7c6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800d7bc:	683b      	ldr	r3, [r7, #0]
 800d7be:	2200      	movs	r2, #0
 800d7c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d7c2:	2301      	movs	r3, #1
 800d7c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d7c6:	f000 fe91 	bl	800e4ec <vPortExitCritical>

	return xReturn;
 800d7ca:	69fb      	ldr	r3, [r7, #28]
}
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	3720      	adds	r7, #32
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	bd80      	pop	{r7, pc}
 800d7d4:	2000449c 	.word	0x2000449c
 800d7d8:	200044b0 	.word	0x200044b0

0800d7dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d7dc:	b480      	push	{r7}
 800d7de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d7e0:	4b03      	ldr	r3, [pc, #12]	@ (800d7f0 <vTaskMissedYield+0x14>)
 800d7e2:	2201      	movs	r2, #1
 800d7e4:	601a      	str	r2, [r3, #0]
}
 800d7e6:	bf00      	nop
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ee:	4770      	bx	lr
 800d7f0:	200044ac 	.word	0x200044ac

0800d7f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d7f4:	b580      	push	{r7, lr}
 800d7f6:	b082      	sub	sp, #8
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d7fc:	f000 f852 	bl	800d8a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d800:	4b06      	ldr	r3, [pc, #24]	@ (800d81c <prvIdleTask+0x28>)
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	2b01      	cmp	r3, #1
 800d806:	d9f9      	bls.n	800d7fc <prvIdleTask+0x8>
			{
				taskYIELD();
 800d808:	4b05      	ldr	r3, [pc, #20]	@ (800d820 <prvIdleTask+0x2c>)
 800d80a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d80e:	601a      	str	r2, [r3, #0]
 800d810:	f3bf 8f4f 	dsb	sy
 800d814:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d818:	e7f0      	b.n	800d7fc <prvIdleTask+0x8>
 800d81a:	bf00      	nop
 800d81c:	20003fc8 	.word	0x20003fc8
 800d820:	e000ed04 	.word	0xe000ed04

0800d824 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b082      	sub	sp, #8
 800d828:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d82a:	2300      	movs	r3, #0
 800d82c:	607b      	str	r3, [r7, #4]
 800d82e:	e00c      	b.n	800d84a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d830:	687a      	ldr	r2, [r7, #4]
 800d832:	4613      	mov	r3, r2
 800d834:	009b      	lsls	r3, r3, #2
 800d836:	4413      	add	r3, r2
 800d838:	009b      	lsls	r3, r3, #2
 800d83a:	4a12      	ldr	r2, [pc, #72]	@ (800d884 <prvInitialiseTaskLists+0x60>)
 800d83c:	4413      	add	r3, r2
 800d83e:	4618      	mov	r0, r3
 800d840:	f7fe fcae 	bl	800c1a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	3301      	adds	r3, #1
 800d848:	607b      	str	r3, [r7, #4]
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	2b37      	cmp	r3, #55	@ 0x37
 800d84e:	d9ef      	bls.n	800d830 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d850:	480d      	ldr	r0, [pc, #52]	@ (800d888 <prvInitialiseTaskLists+0x64>)
 800d852:	f7fe fca5 	bl	800c1a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d856:	480d      	ldr	r0, [pc, #52]	@ (800d88c <prvInitialiseTaskLists+0x68>)
 800d858:	f7fe fca2 	bl	800c1a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d85c:	480c      	ldr	r0, [pc, #48]	@ (800d890 <prvInitialiseTaskLists+0x6c>)
 800d85e:	f7fe fc9f 	bl	800c1a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d862:	480c      	ldr	r0, [pc, #48]	@ (800d894 <prvInitialiseTaskLists+0x70>)
 800d864:	f7fe fc9c 	bl	800c1a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d868:	480b      	ldr	r0, [pc, #44]	@ (800d898 <prvInitialiseTaskLists+0x74>)
 800d86a:	f7fe fc99 	bl	800c1a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d86e:	4b0b      	ldr	r3, [pc, #44]	@ (800d89c <prvInitialiseTaskLists+0x78>)
 800d870:	4a05      	ldr	r2, [pc, #20]	@ (800d888 <prvInitialiseTaskLists+0x64>)
 800d872:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d874:	4b0a      	ldr	r3, [pc, #40]	@ (800d8a0 <prvInitialiseTaskLists+0x7c>)
 800d876:	4a05      	ldr	r2, [pc, #20]	@ (800d88c <prvInitialiseTaskLists+0x68>)
 800d878:	601a      	str	r2, [r3, #0]
}
 800d87a:	bf00      	nop
 800d87c:	3708      	adds	r7, #8
 800d87e:	46bd      	mov	sp, r7
 800d880:	bd80      	pop	{r7, pc}
 800d882:	bf00      	nop
 800d884:	20003fc8 	.word	0x20003fc8
 800d888:	20004428 	.word	0x20004428
 800d88c:	2000443c 	.word	0x2000443c
 800d890:	20004458 	.word	0x20004458
 800d894:	2000446c 	.word	0x2000446c
 800d898:	20004484 	.word	0x20004484
 800d89c:	20004450 	.word	0x20004450
 800d8a0:	20004454 	.word	0x20004454

0800d8a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b082      	sub	sp, #8
 800d8a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d8aa:	e019      	b.n	800d8e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d8ac:	f000 fdec 	bl	800e488 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d8b0:	4b10      	ldr	r3, [pc, #64]	@ (800d8f4 <prvCheckTasksWaitingTermination+0x50>)
 800d8b2:	68db      	ldr	r3, [r3, #12]
 800d8b4:	68db      	ldr	r3, [r3, #12]
 800d8b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	3304      	adds	r3, #4
 800d8bc:	4618      	mov	r0, r3
 800d8be:	f7fe fcf9 	bl	800c2b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d8c2:	4b0d      	ldr	r3, [pc, #52]	@ (800d8f8 <prvCheckTasksWaitingTermination+0x54>)
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	3b01      	subs	r3, #1
 800d8c8:	4a0b      	ldr	r2, [pc, #44]	@ (800d8f8 <prvCheckTasksWaitingTermination+0x54>)
 800d8ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d8cc:	4b0b      	ldr	r3, [pc, #44]	@ (800d8fc <prvCheckTasksWaitingTermination+0x58>)
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	3b01      	subs	r3, #1
 800d8d2:	4a0a      	ldr	r2, [pc, #40]	@ (800d8fc <prvCheckTasksWaitingTermination+0x58>)
 800d8d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d8d6:	f000 fe09 	bl	800e4ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d8da:	6878      	ldr	r0, [r7, #4]
 800d8dc:	f000 f810 	bl	800d900 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d8e0:	4b06      	ldr	r3, [pc, #24]	@ (800d8fc <prvCheckTasksWaitingTermination+0x58>)
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d1e1      	bne.n	800d8ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d8e8:	bf00      	nop
 800d8ea:	bf00      	nop
 800d8ec:	3708      	adds	r7, #8
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	bd80      	pop	{r7, pc}
 800d8f2:	bf00      	nop
 800d8f4:	2000446c 	.word	0x2000446c
 800d8f8:	20004498 	.word	0x20004498
 800d8fc:	20004480 	.word	0x20004480

0800d900 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d900:	b580      	push	{r7, lr}
 800d902:	b084      	sub	sp, #16
 800d904:	af00      	add	r7, sp, #0
 800d906:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	3354      	adds	r3, #84	@ 0x54
 800d90c:	4618      	mov	r0, r3
 800d90e:	f002 f829 	bl	800f964 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d108      	bne.n	800d92e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d920:	4618      	mov	r0, r3
 800d922:	f000 ffa1 	bl	800e868 <vPortFree>
				vPortFree( pxTCB );
 800d926:	6878      	ldr	r0, [r7, #4]
 800d928:	f000 ff9e 	bl	800e868 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d92c:	e019      	b.n	800d962 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d934:	2b01      	cmp	r3, #1
 800d936:	d103      	bne.n	800d940 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d938:	6878      	ldr	r0, [r7, #4]
 800d93a:	f000 ff95 	bl	800e868 <vPortFree>
	}
 800d93e:	e010      	b.n	800d962 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d946:	2b02      	cmp	r3, #2
 800d948:	d00b      	beq.n	800d962 <prvDeleteTCB+0x62>
	__asm volatile
 800d94a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d94e:	f383 8811 	msr	BASEPRI, r3
 800d952:	f3bf 8f6f 	isb	sy
 800d956:	f3bf 8f4f 	dsb	sy
 800d95a:	60fb      	str	r3, [r7, #12]
}
 800d95c:	bf00      	nop
 800d95e:	bf00      	nop
 800d960:	e7fd      	b.n	800d95e <prvDeleteTCB+0x5e>
	}
 800d962:	bf00      	nop
 800d964:	3710      	adds	r7, #16
 800d966:	46bd      	mov	sp, r7
 800d968:	bd80      	pop	{r7, pc}
	...

0800d96c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d96c:	b480      	push	{r7}
 800d96e:	b083      	sub	sp, #12
 800d970:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d972:	4b0c      	ldr	r3, [pc, #48]	@ (800d9a4 <prvResetNextTaskUnblockTime+0x38>)
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d104      	bne.n	800d986 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d97c:	4b0a      	ldr	r3, [pc, #40]	@ (800d9a8 <prvResetNextTaskUnblockTime+0x3c>)
 800d97e:	f04f 32ff 	mov.w	r2, #4294967295
 800d982:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d984:	e008      	b.n	800d998 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d986:	4b07      	ldr	r3, [pc, #28]	@ (800d9a4 <prvResetNextTaskUnblockTime+0x38>)
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	68db      	ldr	r3, [r3, #12]
 800d98c:	68db      	ldr	r3, [r3, #12]
 800d98e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	685b      	ldr	r3, [r3, #4]
 800d994:	4a04      	ldr	r2, [pc, #16]	@ (800d9a8 <prvResetNextTaskUnblockTime+0x3c>)
 800d996:	6013      	str	r3, [r2, #0]
}
 800d998:	bf00      	nop
 800d99a:	370c      	adds	r7, #12
 800d99c:	46bd      	mov	sp, r7
 800d99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a2:	4770      	bx	lr
 800d9a4:	20004450 	.word	0x20004450
 800d9a8:	200044b8 	.word	0x200044b8

0800d9ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d9ac:	b480      	push	{r7}
 800d9ae:	b083      	sub	sp, #12
 800d9b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d9b2:	4b0b      	ldr	r3, [pc, #44]	@ (800d9e0 <xTaskGetSchedulerState+0x34>)
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d102      	bne.n	800d9c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d9ba:	2301      	movs	r3, #1
 800d9bc:	607b      	str	r3, [r7, #4]
 800d9be:	e008      	b.n	800d9d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d9c0:	4b08      	ldr	r3, [pc, #32]	@ (800d9e4 <xTaskGetSchedulerState+0x38>)
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d102      	bne.n	800d9ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d9c8:	2302      	movs	r3, #2
 800d9ca:	607b      	str	r3, [r7, #4]
 800d9cc:	e001      	b.n	800d9d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d9d2:	687b      	ldr	r3, [r7, #4]
	}
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	370c      	adds	r7, #12
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9de:	4770      	bx	lr
 800d9e0:	200044a4 	.word	0x200044a4
 800d9e4:	200044c0 	.word	0x200044c0

0800d9e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b086      	sub	sp, #24
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d058      	beq.n	800dab0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d9fe:	4b2f      	ldr	r3, [pc, #188]	@ (800dabc <xTaskPriorityDisinherit+0xd4>)
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	693a      	ldr	r2, [r7, #16]
 800da04:	429a      	cmp	r2, r3
 800da06:	d00b      	beq.n	800da20 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800da08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da0c:	f383 8811 	msr	BASEPRI, r3
 800da10:	f3bf 8f6f 	isb	sy
 800da14:	f3bf 8f4f 	dsb	sy
 800da18:	60fb      	str	r3, [r7, #12]
}
 800da1a:	bf00      	nop
 800da1c:	bf00      	nop
 800da1e:	e7fd      	b.n	800da1c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800da20:	693b      	ldr	r3, [r7, #16]
 800da22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800da24:	2b00      	cmp	r3, #0
 800da26:	d10b      	bne.n	800da40 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800da28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da2c:	f383 8811 	msr	BASEPRI, r3
 800da30:	f3bf 8f6f 	isb	sy
 800da34:	f3bf 8f4f 	dsb	sy
 800da38:	60bb      	str	r3, [r7, #8]
}
 800da3a:	bf00      	nop
 800da3c:	bf00      	nop
 800da3e:	e7fd      	b.n	800da3c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800da40:	693b      	ldr	r3, [r7, #16]
 800da42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800da44:	1e5a      	subs	r2, r3, #1
 800da46:	693b      	ldr	r3, [r7, #16]
 800da48:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800da4a:	693b      	ldr	r3, [r7, #16]
 800da4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da4e:	693b      	ldr	r3, [r7, #16]
 800da50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800da52:	429a      	cmp	r2, r3
 800da54:	d02c      	beq.n	800dab0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800da56:	693b      	ldr	r3, [r7, #16]
 800da58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d128      	bne.n	800dab0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800da5e:	693b      	ldr	r3, [r7, #16]
 800da60:	3304      	adds	r3, #4
 800da62:	4618      	mov	r0, r3
 800da64:	f7fe fc26 	bl	800c2b4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800da68:	693b      	ldr	r3, [r7, #16]
 800da6a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800da6c:	693b      	ldr	r3, [r7, #16]
 800da6e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da70:	693b      	ldr	r3, [r7, #16]
 800da72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da74:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800da78:	693b      	ldr	r3, [r7, #16]
 800da7a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800da7c:	693b      	ldr	r3, [r7, #16]
 800da7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da80:	4b0f      	ldr	r3, [pc, #60]	@ (800dac0 <xTaskPriorityDisinherit+0xd8>)
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	429a      	cmp	r2, r3
 800da86:	d903      	bls.n	800da90 <xTaskPriorityDisinherit+0xa8>
 800da88:	693b      	ldr	r3, [r7, #16]
 800da8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da8c:	4a0c      	ldr	r2, [pc, #48]	@ (800dac0 <xTaskPriorityDisinherit+0xd8>)
 800da8e:	6013      	str	r3, [r2, #0]
 800da90:	693b      	ldr	r3, [r7, #16]
 800da92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da94:	4613      	mov	r3, r2
 800da96:	009b      	lsls	r3, r3, #2
 800da98:	4413      	add	r3, r2
 800da9a:	009b      	lsls	r3, r3, #2
 800da9c:	4a09      	ldr	r2, [pc, #36]	@ (800dac4 <xTaskPriorityDisinherit+0xdc>)
 800da9e:	441a      	add	r2, r3
 800daa0:	693b      	ldr	r3, [r7, #16]
 800daa2:	3304      	adds	r3, #4
 800daa4:	4619      	mov	r1, r3
 800daa6:	4610      	mov	r0, r2
 800daa8:	f7fe fba7 	bl	800c1fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800daac:	2301      	movs	r3, #1
 800daae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dab0:	697b      	ldr	r3, [r7, #20]
	}
 800dab2:	4618      	mov	r0, r3
 800dab4:	3718      	adds	r7, #24
 800dab6:	46bd      	mov	sp, r7
 800dab8:	bd80      	pop	{r7, pc}
 800daba:	bf00      	nop
 800dabc:	20003fc4 	.word	0x20003fc4
 800dac0:	200044a0 	.word	0x200044a0
 800dac4:	20003fc8 	.word	0x20003fc8

0800dac8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	b084      	sub	sp, #16
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
 800dad0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dad2:	4b21      	ldr	r3, [pc, #132]	@ (800db58 <prvAddCurrentTaskToDelayedList+0x90>)
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dad8:	4b20      	ldr	r3, [pc, #128]	@ (800db5c <prvAddCurrentTaskToDelayedList+0x94>)
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	3304      	adds	r3, #4
 800dade:	4618      	mov	r0, r3
 800dae0:	f7fe fbe8 	bl	800c2b4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daea:	d10a      	bne.n	800db02 <prvAddCurrentTaskToDelayedList+0x3a>
 800daec:	683b      	ldr	r3, [r7, #0]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d007      	beq.n	800db02 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800daf2:	4b1a      	ldr	r3, [pc, #104]	@ (800db5c <prvAddCurrentTaskToDelayedList+0x94>)
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	3304      	adds	r3, #4
 800daf8:	4619      	mov	r1, r3
 800dafa:	4819      	ldr	r0, [pc, #100]	@ (800db60 <prvAddCurrentTaskToDelayedList+0x98>)
 800dafc:	f7fe fb7d 	bl	800c1fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800db00:	e026      	b.n	800db50 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800db02:	68fa      	ldr	r2, [r7, #12]
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	4413      	add	r3, r2
 800db08:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800db0a:	4b14      	ldr	r3, [pc, #80]	@ (800db5c <prvAddCurrentTaskToDelayedList+0x94>)
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	68ba      	ldr	r2, [r7, #8]
 800db10:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800db12:	68ba      	ldr	r2, [r7, #8]
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	429a      	cmp	r2, r3
 800db18:	d209      	bcs.n	800db2e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800db1a:	4b12      	ldr	r3, [pc, #72]	@ (800db64 <prvAddCurrentTaskToDelayedList+0x9c>)
 800db1c:	681a      	ldr	r2, [r3, #0]
 800db1e:	4b0f      	ldr	r3, [pc, #60]	@ (800db5c <prvAddCurrentTaskToDelayedList+0x94>)
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	3304      	adds	r3, #4
 800db24:	4619      	mov	r1, r3
 800db26:	4610      	mov	r0, r2
 800db28:	f7fe fb8b 	bl	800c242 <vListInsert>
}
 800db2c:	e010      	b.n	800db50 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800db2e:	4b0e      	ldr	r3, [pc, #56]	@ (800db68 <prvAddCurrentTaskToDelayedList+0xa0>)
 800db30:	681a      	ldr	r2, [r3, #0]
 800db32:	4b0a      	ldr	r3, [pc, #40]	@ (800db5c <prvAddCurrentTaskToDelayedList+0x94>)
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	3304      	adds	r3, #4
 800db38:	4619      	mov	r1, r3
 800db3a:	4610      	mov	r0, r2
 800db3c:	f7fe fb81 	bl	800c242 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800db40:	4b0a      	ldr	r3, [pc, #40]	@ (800db6c <prvAddCurrentTaskToDelayedList+0xa4>)
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	68ba      	ldr	r2, [r7, #8]
 800db46:	429a      	cmp	r2, r3
 800db48:	d202      	bcs.n	800db50 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800db4a:	4a08      	ldr	r2, [pc, #32]	@ (800db6c <prvAddCurrentTaskToDelayedList+0xa4>)
 800db4c:	68bb      	ldr	r3, [r7, #8]
 800db4e:	6013      	str	r3, [r2, #0]
}
 800db50:	bf00      	nop
 800db52:	3710      	adds	r7, #16
 800db54:	46bd      	mov	sp, r7
 800db56:	bd80      	pop	{r7, pc}
 800db58:	2000449c 	.word	0x2000449c
 800db5c:	20003fc4 	.word	0x20003fc4
 800db60:	20004484 	.word	0x20004484
 800db64:	20004454 	.word	0x20004454
 800db68:	20004450 	.word	0x20004450
 800db6c:	200044b8 	.word	0x200044b8

0800db70 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b08a      	sub	sp, #40	@ 0x28
 800db74:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800db76:	2300      	movs	r3, #0
 800db78:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800db7a:	f000 fb13 	bl	800e1a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800db7e:	4b1d      	ldr	r3, [pc, #116]	@ (800dbf4 <xTimerCreateTimerTask+0x84>)
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d021      	beq.n	800dbca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800db86:	2300      	movs	r3, #0
 800db88:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800db8a:	2300      	movs	r3, #0
 800db8c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800db8e:	1d3a      	adds	r2, r7, #4
 800db90:	f107 0108 	add.w	r1, r7, #8
 800db94:	f107 030c 	add.w	r3, r7, #12
 800db98:	4618      	mov	r0, r3
 800db9a:	f7fe fae7 	bl	800c16c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800db9e:	6879      	ldr	r1, [r7, #4]
 800dba0:	68bb      	ldr	r3, [r7, #8]
 800dba2:	68fa      	ldr	r2, [r7, #12]
 800dba4:	9202      	str	r2, [sp, #8]
 800dba6:	9301      	str	r3, [sp, #4]
 800dba8:	2337      	movs	r3, #55	@ 0x37
 800dbaa:	9300      	str	r3, [sp, #0]
 800dbac:	2300      	movs	r3, #0
 800dbae:	460a      	mov	r2, r1
 800dbb0:	4911      	ldr	r1, [pc, #68]	@ (800dbf8 <xTimerCreateTimerTask+0x88>)
 800dbb2:	4812      	ldr	r0, [pc, #72]	@ (800dbfc <xTimerCreateTimerTask+0x8c>)
 800dbb4:	f7ff f8a2 	bl	800ccfc <xTaskCreateStatic>
 800dbb8:	4603      	mov	r3, r0
 800dbba:	4a11      	ldr	r2, [pc, #68]	@ (800dc00 <xTimerCreateTimerTask+0x90>)
 800dbbc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800dbbe:	4b10      	ldr	r3, [pc, #64]	@ (800dc00 <xTimerCreateTimerTask+0x90>)
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d001      	beq.n	800dbca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800dbc6:	2301      	movs	r3, #1
 800dbc8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800dbca:	697b      	ldr	r3, [r7, #20]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d10b      	bne.n	800dbe8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800dbd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbd4:	f383 8811 	msr	BASEPRI, r3
 800dbd8:	f3bf 8f6f 	isb	sy
 800dbdc:	f3bf 8f4f 	dsb	sy
 800dbe0:	613b      	str	r3, [r7, #16]
}
 800dbe2:	bf00      	nop
 800dbe4:	bf00      	nop
 800dbe6:	e7fd      	b.n	800dbe4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800dbe8:	697b      	ldr	r3, [r7, #20]
}
 800dbea:	4618      	mov	r0, r3
 800dbec:	3718      	adds	r7, #24
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	bd80      	pop	{r7, pc}
 800dbf2:	bf00      	nop
 800dbf4:	200044f4 	.word	0x200044f4
 800dbf8:	0801227c 	.word	0x0801227c
 800dbfc:	0800dd3d 	.word	0x0800dd3d
 800dc00:	200044f8 	.word	0x200044f8

0800dc04 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b08a      	sub	sp, #40	@ 0x28
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	60f8      	str	r0, [r7, #12]
 800dc0c:	60b9      	str	r1, [r7, #8]
 800dc0e:	607a      	str	r2, [r7, #4]
 800dc10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800dc12:	2300      	movs	r3, #0
 800dc14:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d10b      	bne.n	800dc34 <xTimerGenericCommand+0x30>
	__asm volatile
 800dc1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc20:	f383 8811 	msr	BASEPRI, r3
 800dc24:	f3bf 8f6f 	isb	sy
 800dc28:	f3bf 8f4f 	dsb	sy
 800dc2c:	623b      	str	r3, [r7, #32]
}
 800dc2e:	bf00      	nop
 800dc30:	bf00      	nop
 800dc32:	e7fd      	b.n	800dc30 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800dc34:	4b19      	ldr	r3, [pc, #100]	@ (800dc9c <xTimerGenericCommand+0x98>)
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d02a      	beq.n	800dc92 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800dc3c:	68bb      	ldr	r3, [r7, #8]
 800dc3e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800dc48:	68bb      	ldr	r3, [r7, #8]
 800dc4a:	2b05      	cmp	r3, #5
 800dc4c:	dc18      	bgt.n	800dc80 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800dc4e:	f7ff fead 	bl	800d9ac <xTaskGetSchedulerState>
 800dc52:	4603      	mov	r3, r0
 800dc54:	2b02      	cmp	r3, #2
 800dc56:	d109      	bne.n	800dc6c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800dc58:	4b10      	ldr	r3, [pc, #64]	@ (800dc9c <xTimerGenericCommand+0x98>)
 800dc5a:	6818      	ldr	r0, [r3, #0]
 800dc5c:	f107 0110 	add.w	r1, r7, #16
 800dc60:	2300      	movs	r3, #0
 800dc62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dc64:	f7fe fc5a 	bl	800c51c <xQueueGenericSend>
 800dc68:	6278      	str	r0, [r7, #36]	@ 0x24
 800dc6a:	e012      	b.n	800dc92 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800dc6c:	4b0b      	ldr	r3, [pc, #44]	@ (800dc9c <xTimerGenericCommand+0x98>)
 800dc6e:	6818      	ldr	r0, [r3, #0]
 800dc70:	f107 0110 	add.w	r1, r7, #16
 800dc74:	2300      	movs	r3, #0
 800dc76:	2200      	movs	r2, #0
 800dc78:	f7fe fc50 	bl	800c51c <xQueueGenericSend>
 800dc7c:	6278      	str	r0, [r7, #36]	@ 0x24
 800dc7e:	e008      	b.n	800dc92 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800dc80:	4b06      	ldr	r3, [pc, #24]	@ (800dc9c <xTimerGenericCommand+0x98>)
 800dc82:	6818      	ldr	r0, [r3, #0]
 800dc84:	f107 0110 	add.w	r1, r7, #16
 800dc88:	2300      	movs	r3, #0
 800dc8a:	683a      	ldr	r2, [r7, #0]
 800dc8c:	f7fe fd48 	bl	800c720 <xQueueGenericSendFromISR>
 800dc90:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800dc92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800dc94:	4618      	mov	r0, r3
 800dc96:	3728      	adds	r7, #40	@ 0x28
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	bd80      	pop	{r7, pc}
 800dc9c:	200044f4 	.word	0x200044f4

0800dca0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b088      	sub	sp, #32
 800dca4:	af02      	add	r7, sp, #8
 800dca6:	6078      	str	r0, [r7, #4]
 800dca8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dcaa:	4b23      	ldr	r3, [pc, #140]	@ (800dd38 <prvProcessExpiredTimer+0x98>)
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	68db      	ldr	r3, [r3, #12]
 800dcb0:	68db      	ldr	r3, [r3, #12]
 800dcb2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dcb4:	697b      	ldr	r3, [r7, #20]
 800dcb6:	3304      	adds	r3, #4
 800dcb8:	4618      	mov	r0, r3
 800dcba:	f7fe fafb 	bl	800c2b4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dcbe:	697b      	ldr	r3, [r7, #20]
 800dcc0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dcc4:	f003 0304 	and.w	r3, r3, #4
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d023      	beq.n	800dd14 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800dccc:	697b      	ldr	r3, [r7, #20]
 800dcce:	699a      	ldr	r2, [r3, #24]
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	18d1      	adds	r1, r2, r3
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	683a      	ldr	r2, [r7, #0]
 800dcd8:	6978      	ldr	r0, [r7, #20]
 800dcda:	f000 f8d5 	bl	800de88 <prvInsertTimerInActiveList>
 800dcde:	4603      	mov	r3, r0
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d020      	beq.n	800dd26 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dce4:	2300      	movs	r3, #0
 800dce6:	9300      	str	r3, [sp, #0]
 800dce8:	2300      	movs	r3, #0
 800dcea:	687a      	ldr	r2, [r7, #4]
 800dcec:	2100      	movs	r1, #0
 800dcee:	6978      	ldr	r0, [r7, #20]
 800dcf0:	f7ff ff88 	bl	800dc04 <xTimerGenericCommand>
 800dcf4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800dcf6:	693b      	ldr	r3, [r7, #16]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d114      	bne.n	800dd26 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800dcfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd00:	f383 8811 	msr	BASEPRI, r3
 800dd04:	f3bf 8f6f 	isb	sy
 800dd08:	f3bf 8f4f 	dsb	sy
 800dd0c:	60fb      	str	r3, [r7, #12]
}
 800dd0e:	bf00      	nop
 800dd10:	bf00      	nop
 800dd12:	e7fd      	b.n	800dd10 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dd14:	697b      	ldr	r3, [r7, #20]
 800dd16:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dd1a:	f023 0301 	bic.w	r3, r3, #1
 800dd1e:	b2da      	uxtb	r2, r3
 800dd20:	697b      	ldr	r3, [r7, #20]
 800dd22:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dd26:	697b      	ldr	r3, [r7, #20]
 800dd28:	6a1b      	ldr	r3, [r3, #32]
 800dd2a:	6978      	ldr	r0, [r7, #20]
 800dd2c:	4798      	blx	r3
}
 800dd2e:	bf00      	nop
 800dd30:	3718      	adds	r7, #24
 800dd32:	46bd      	mov	sp, r7
 800dd34:	bd80      	pop	{r7, pc}
 800dd36:	bf00      	nop
 800dd38:	200044ec 	.word	0x200044ec

0800dd3c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b084      	sub	sp, #16
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dd44:	f107 0308 	add.w	r3, r7, #8
 800dd48:	4618      	mov	r0, r3
 800dd4a:	f000 f859 	bl	800de00 <prvGetNextExpireTime>
 800dd4e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800dd50:	68bb      	ldr	r3, [r7, #8]
 800dd52:	4619      	mov	r1, r3
 800dd54:	68f8      	ldr	r0, [r7, #12]
 800dd56:	f000 f805 	bl	800dd64 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800dd5a:	f000 f8d7 	bl	800df0c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dd5e:	bf00      	nop
 800dd60:	e7f0      	b.n	800dd44 <prvTimerTask+0x8>
	...

0800dd64 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b084      	sub	sp, #16
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	6078      	str	r0, [r7, #4]
 800dd6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800dd6e:	f7ff fa29 	bl	800d1c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dd72:	f107 0308 	add.w	r3, r7, #8
 800dd76:	4618      	mov	r0, r3
 800dd78:	f000 f866 	bl	800de48 <prvSampleTimeNow>
 800dd7c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800dd7e:	68bb      	ldr	r3, [r7, #8]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d130      	bne.n	800dde6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800dd84:	683b      	ldr	r3, [r7, #0]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d10a      	bne.n	800dda0 <prvProcessTimerOrBlockTask+0x3c>
 800dd8a:	687a      	ldr	r2, [r7, #4]
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	429a      	cmp	r2, r3
 800dd90:	d806      	bhi.n	800dda0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800dd92:	f7ff fa25 	bl	800d1e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800dd96:	68f9      	ldr	r1, [r7, #12]
 800dd98:	6878      	ldr	r0, [r7, #4]
 800dd9a:	f7ff ff81 	bl	800dca0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800dd9e:	e024      	b.n	800ddea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800dda0:	683b      	ldr	r3, [r7, #0]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d008      	beq.n	800ddb8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800dda6:	4b13      	ldr	r3, [pc, #76]	@ (800ddf4 <prvProcessTimerOrBlockTask+0x90>)
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d101      	bne.n	800ddb4 <prvProcessTimerOrBlockTask+0x50>
 800ddb0:	2301      	movs	r3, #1
 800ddb2:	e000      	b.n	800ddb6 <prvProcessTimerOrBlockTask+0x52>
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ddb8:	4b0f      	ldr	r3, [pc, #60]	@ (800ddf8 <prvProcessTimerOrBlockTask+0x94>)
 800ddba:	6818      	ldr	r0, [r3, #0]
 800ddbc:	687a      	ldr	r2, [r7, #4]
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	1ad3      	subs	r3, r2, r3
 800ddc2:	683a      	ldr	r2, [r7, #0]
 800ddc4:	4619      	mov	r1, r3
 800ddc6:	f7fe ff65 	bl	800cc94 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ddca:	f7ff fa09 	bl	800d1e0 <xTaskResumeAll>
 800ddce:	4603      	mov	r3, r0
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d10a      	bne.n	800ddea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ddd4:	4b09      	ldr	r3, [pc, #36]	@ (800ddfc <prvProcessTimerOrBlockTask+0x98>)
 800ddd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ddda:	601a      	str	r2, [r3, #0]
 800dddc:	f3bf 8f4f 	dsb	sy
 800dde0:	f3bf 8f6f 	isb	sy
}
 800dde4:	e001      	b.n	800ddea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800dde6:	f7ff f9fb 	bl	800d1e0 <xTaskResumeAll>
}
 800ddea:	bf00      	nop
 800ddec:	3710      	adds	r7, #16
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	bd80      	pop	{r7, pc}
 800ddf2:	bf00      	nop
 800ddf4:	200044f0 	.word	0x200044f0
 800ddf8:	200044f4 	.word	0x200044f4
 800ddfc:	e000ed04 	.word	0xe000ed04

0800de00 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800de00:	b480      	push	{r7}
 800de02:	b085      	sub	sp, #20
 800de04:	af00      	add	r7, sp, #0
 800de06:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800de08:	4b0e      	ldr	r3, [pc, #56]	@ (800de44 <prvGetNextExpireTime+0x44>)
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d101      	bne.n	800de16 <prvGetNextExpireTime+0x16>
 800de12:	2201      	movs	r2, #1
 800de14:	e000      	b.n	800de18 <prvGetNextExpireTime+0x18>
 800de16:	2200      	movs	r2, #0
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d105      	bne.n	800de30 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800de24:	4b07      	ldr	r3, [pc, #28]	@ (800de44 <prvGetNextExpireTime+0x44>)
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	68db      	ldr	r3, [r3, #12]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	60fb      	str	r3, [r7, #12]
 800de2e:	e001      	b.n	800de34 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800de30:	2300      	movs	r3, #0
 800de32:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800de34:	68fb      	ldr	r3, [r7, #12]
}
 800de36:	4618      	mov	r0, r3
 800de38:	3714      	adds	r7, #20
 800de3a:	46bd      	mov	sp, r7
 800de3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de40:	4770      	bx	lr
 800de42:	bf00      	nop
 800de44:	200044ec 	.word	0x200044ec

0800de48 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800de48:	b580      	push	{r7, lr}
 800de4a:	b084      	sub	sp, #16
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800de50:	f7ff fa64 	bl	800d31c <xTaskGetTickCount>
 800de54:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800de56:	4b0b      	ldr	r3, [pc, #44]	@ (800de84 <prvSampleTimeNow+0x3c>)
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	68fa      	ldr	r2, [r7, #12]
 800de5c:	429a      	cmp	r2, r3
 800de5e:	d205      	bcs.n	800de6c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800de60:	f000 f93a 	bl	800e0d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	2201      	movs	r2, #1
 800de68:	601a      	str	r2, [r3, #0]
 800de6a:	e002      	b.n	800de72 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	2200      	movs	r2, #0
 800de70:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800de72:	4a04      	ldr	r2, [pc, #16]	@ (800de84 <prvSampleTimeNow+0x3c>)
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800de78:	68fb      	ldr	r3, [r7, #12]
}
 800de7a:	4618      	mov	r0, r3
 800de7c:	3710      	adds	r7, #16
 800de7e:	46bd      	mov	sp, r7
 800de80:	bd80      	pop	{r7, pc}
 800de82:	bf00      	nop
 800de84:	200044fc 	.word	0x200044fc

0800de88 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b086      	sub	sp, #24
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	60f8      	str	r0, [r7, #12]
 800de90:	60b9      	str	r1, [r7, #8]
 800de92:	607a      	str	r2, [r7, #4]
 800de94:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800de96:	2300      	movs	r3, #0
 800de98:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	68ba      	ldr	r2, [r7, #8]
 800de9e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	68fa      	ldr	r2, [r7, #12]
 800dea4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800dea6:	68ba      	ldr	r2, [r7, #8]
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	429a      	cmp	r2, r3
 800deac:	d812      	bhi.n	800ded4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800deae:	687a      	ldr	r2, [r7, #4]
 800deb0:	683b      	ldr	r3, [r7, #0]
 800deb2:	1ad2      	subs	r2, r2, r3
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	699b      	ldr	r3, [r3, #24]
 800deb8:	429a      	cmp	r2, r3
 800deba:	d302      	bcc.n	800dec2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800debc:	2301      	movs	r3, #1
 800debe:	617b      	str	r3, [r7, #20]
 800dec0:	e01b      	b.n	800defa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800dec2:	4b10      	ldr	r3, [pc, #64]	@ (800df04 <prvInsertTimerInActiveList+0x7c>)
 800dec4:	681a      	ldr	r2, [r3, #0]
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	3304      	adds	r3, #4
 800deca:	4619      	mov	r1, r3
 800decc:	4610      	mov	r0, r2
 800dece:	f7fe f9b8 	bl	800c242 <vListInsert>
 800ded2:	e012      	b.n	800defa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ded4:	687a      	ldr	r2, [r7, #4]
 800ded6:	683b      	ldr	r3, [r7, #0]
 800ded8:	429a      	cmp	r2, r3
 800deda:	d206      	bcs.n	800deea <prvInsertTimerInActiveList+0x62>
 800dedc:	68ba      	ldr	r2, [r7, #8]
 800dede:	683b      	ldr	r3, [r7, #0]
 800dee0:	429a      	cmp	r2, r3
 800dee2:	d302      	bcc.n	800deea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800dee4:	2301      	movs	r3, #1
 800dee6:	617b      	str	r3, [r7, #20]
 800dee8:	e007      	b.n	800defa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800deea:	4b07      	ldr	r3, [pc, #28]	@ (800df08 <prvInsertTimerInActiveList+0x80>)
 800deec:	681a      	ldr	r2, [r3, #0]
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	3304      	adds	r3, #4
 800def2:	4619      	mov	r1, r3
 800def4:	4610      	mov	r0, r2
 800def6:	f7fe f9a4 	bl	800c242 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800defa:	697b      	ldr	r3, [r7, #20]
}
 800defc:	4618      	mov	r0, r3
 800defe:	3718      	adds	r7, #24
 800df00:	46bd      	mov	sp, r7
 800df02:	bd80      	pop	{r7, pc}
 800df04:	200044f0 	.word	0x200044f0
 800df08:	200044ec 	.word	0x200044ec

0800df0c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800df0c:	b580      	push	{r7, lr}
 800df0e:	b08e      	sub	sp, #56	@ 0x38
 800df10:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800df12:	e0ce      	b.n	800e0b2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	2b00      	cmp	r3, #0
 800df18:	da19      	bge.n	800df4e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800df1a:	1d3b      	adds	r3, r7, #4
 800df1c:	3304      	adds	r3, #4
 800df1e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800df20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df22:	2b00      	cmp	r3, #0
 800df24:	d10b      	bne.n	800df3e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800df26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df2a:	f383 8811 	msr	BASEPRI, r3
 800df2e:	f3bf 8f6f 	isb	sy
 800df32:	f3bf 8f4f 	dsb	sy
 800df36:	61fb      	str	r3, [r7, #28]
}
 800df38:	bf00      	nop
 800df3a:	bf00      	nop
 800df3c:	e7fd      	b.n	800df3a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800df3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800df44:	6850      	ldr	r0, [r2, #4]
 800df46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800df48:	6892      	ldr	r2, [r2, #8]
 800df4a:	4611      	mov	r1, r2
 800df4c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	2b00      	cmp	r3, #0
 800df52:	f2c0 80ae 	blt.w	800e0b2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800df5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df5c:	695b      	ldr	r3, [r3, #20]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d004      	beq.n	800df6c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800df62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df64:	3304      	adds	r3, #4
 800df66:	4618      	mov	r0, r3
 800df68:	f7fe f9a4 	bl	800c2b4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800df6c:	463b      	mov	r3, r7
 800df6e:	4618      	mov	r0, r3
 800df70:	f7ff ff6a 	bl	800de48 <prvSampleTimeNow>
 800df74:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	2b09      	cmp	r3, #9
 800df7a:	f200 8097 	bhi.w	800e0ac <prvProcessReceivedCommands+0x1a0>
 800df7e:	a201      	add	r2, pc, #4	@ (adr r2, 800df84 <prvProcessReceivedCommands+0x78>)
 800df80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df84:	0800dfad 	.word	0x0800dfad
 800df88:	0800dfad 	.word	0x0800dfad
 800df8c:	0800dfad 	.word	0x0800dfad
 800df90:	0800e023 	.word	0x0800e023
 800df94:	0800e037 	.word	0x0800e037
 800df98:	0800e083 	.word	0x0800e083
 800df9c:	0800dfad 	.word	0x0800dfad
 800dfa0:	0800dfad 	.word	0x0800dfad
 800dfa4:	0800e023 	.word	0x0800e023
 800dfa8:	0800e037 	.word	0x0800e037
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dfac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dfb2:	f043 0301 	orr.w	r3, r3, #1
 800dfb6:	b2da      	uxtb	r2, r3
 800dfb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800dfbe:	68ba      	ldr	r2, [r7, #8]
 800dfc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfc2:	699b      	ldr	r3, [r3, #24]
 800dfc4:	18d1      	adds	r1, r2, r3
 800dfc6:	68bb      	ldr	r3, [r7, #8]
 800dfc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dfca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dfcc:	f7ff ff5c 	bl	800de88 <prvInsertTimerInActiveList>
 800dfd0:	4603      	mov	r3, r0
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d06c      	beq.n	800e0b0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dfd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfd8:	6a1b      	ldr	r3, [r3, #32]
 800dfda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dfdc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dfde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfe0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dfe4:	f003 0304 	and.w	r3, r3, #4
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d061      	beq.n	800e0b0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800dfec:	68ba      	ldr	r2, [r7, #8]
 800dfee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dff0:	699b      	ldr	r3, [r3, #24]
 800dff2:	441a      	add	r2, r3
 800dff4:	2300      	movs	r3, #0
 800dff6:	9300      	str	r3, [sp, #0]
 800dff8:	2300      	movs	r3, #0
 800dffa:	2100      	movs	r1, #0
 800dffc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dffe:	f7ff fe01 	bl	800dc04 <xTimerGenericCommand>
 800e002:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e004:	6a3b      	ldr	r3, [r7, #32]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d152      	bne.n	800e0b0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800e00a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e00e:	f383 8811 	msr	BASEPRI, r3
 800e012:	f3bf 8f6f 	isb	sy
 800e016:	f3bf 8f4f 	dsb	sy
 800e01a:	61bb      	str	r3, [r7, #24]
}
 800e01c:	bf00      	nop
 800e01e:	bf00      	nop
 800e020:	e7fd      	b.n	800e01e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e024:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e028:	f023 0301 	bic.w	r3, r3, #1
 800e02c:	b2da      	uxtb	r2, r3
 800e02e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e030:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e034:	e03d      	b.n	800e0b2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e038:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e03c:	f043 0301 	orr.w	r3, r3, #1
 800e040:	b2da      	uxtb	r2, r3
 800e042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e044:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e048:	68ba      	ldr	r2, [r7, #8]
 800e04a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e04c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e04e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e050:	699b      	ldr	r3, [r3, #24]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d10b      	bne.n	800e06e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800e056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e05a:	f383 8811 	msr	BASEPRI, r3
 800e05e:	f3bf 8f6f 	isb	sy
 800e062:	f3bf 8f4f 	dsb	sy
 800e066:	617b      	str	r3, [r7, #20]
}
 800e068:	bf00      	nop
 800e06a:	bf00      	nop
 800e06c:	e7fd      	b.n	800e06a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e06e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e070:	699a      	ldr	r2, [r3, #24]
 800e072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e074:	18d1      	adds	r1, r2, r3
 800e076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e078:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e07a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e07c:	f7ff ff04 	bl	800de88 <prvInsertTimerInActiveList>
					break;
 800e080:	e017      	b.n	800e0b2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e084:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e088:	f003 0302 	and.w	r3, r3, #2
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d103      	bne.n	800e098 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800e090:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e092:	f000 fbe9 	bl	800e868 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e096:	e00c      	b.n	800e0b2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e09a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e09e:	f023 0301 	bic.w	r3, r3, #1
 800e0a2:	b2da      	uxtb	r2, r3
 800e0a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e0aa:	e002      	b.n	800e0b2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800e0ac:	bf00      	nop
 800e0ae:	e000      	b.n	800e0b2 <prvProcessReceivedCommands+0x1a6>
					break;
 800e0b0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e0b2:	4b08      	ldr	r3, [pc, #32]	@ (800e0d4 <prvProcessReceivedCommands+0x1c8>)
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	1d39      	adds	r1, r7, #4
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	f7fe fbce 	bl	800c85c <xQueueReceive>
 800e0c0:	4603      	mov	r3, r0
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	f47f af26 	bne.w	800df14 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800e0c8:	bf00      	nop
 800e0ca:	bf00      	nop
 800e0cc:	3730      	adds	r7, #48	@ 0x30
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	bd80      	pop	{r7, pc}
 800e0d2:	bf00      	nop
 800e0d4:	200044f4 	.word	0x200044f4

0800e0d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b088      	sub	sp, #32
 800e0dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e0de:	e049      	b.n	800e174 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e0e0:	4b2e      	ldr	r3, [pc, #184]	@ (800e19c <prvSwitchTimerLists+0xc4>)
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	68db      	ldr	r3, [r3, #12]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0ea:	4b2c      	ldr	r3, [pc, #176]	@ (800e19c <prvSwitchTimerLists+0xc4>)
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	68db      	ldr	r3, [r3, #12]
 800e0f0:	68db      	ldr	r3, [r3, #12]
 800e0f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	3304      	adds	r3, #4
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	f7fe f8db 	bl	800c2b4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	6a1b      	ldr	r3, [r3, #32]
 800e102:	68f8      	ldr	r0, [r7, #12]
 800e104:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e10c:	f003 0304 	and.w	r3, r3, #4
 800e110:	2b00      	cmp	r3, #0
 800e112:	d02f      	beq.n	800e174 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	699b      	ldr	r3, [r3, #24]
 800e118:	693a      	ldr	r2, [r7, #16]
 800e11a:	4413      	add	r3, r2
 800e11c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e11e:	68ba      	ldr	r2, [r7, #8]
 800e120:	693b      	ldr	r3, [r7, #16]
 800e122:	429a      	cmp	r2, r3
 800e124:	d90e      	bls.n	800e144 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	68ba      	ldr	r2, [r7, #8]
 800e12a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	68fa      	ldr	r2, [r7, #12]
 800e130:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e132:	4b1a      	ldr	r3, [pc, #104]	@ (800e19c <prvSwitchTimerLists+0xc4>)
 800e134:	681a      	ldr	r2, [r3, #0]
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	3304      	adds	r3, #4
 800e13a:	4619      	mov	r1, r3
 800e13c:	4610      	mov	r0, r2
 800e13e:	f7fe f880 	bl	800c242 <vListInsert>
 800e142:	e017      	b.n	800e174 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e144:	2300      	movs	r3, #0
 800e146:	9300      	str	r3, [sp, #0]
 800e148:	2300      	movs	r3, #0
 800e14a:	693a      	ldr	r2, [r7, #16]
 800e14c:	2100      	movs	r1, #0
 800e14e:	68f8      	ldr	r0, [r7, #12]
 800e150:	f7ff fd58 	bl	800dc04 <xTimerGenericCommand>
 800e154:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d10b      	bne.n	800e174 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800e15c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e160:	f383 8811 	msr	BASEPRI, r3
 800e164:	f3bf 8f6f 	isb	sy
 800e168:	f3bf 8f4f 	dsb	sy
 800e16c:	603b      	str	r3, [r7, #0]
}
 800e16e:	bf00      	nop
 800e170:	bf00      	nop
 800e172:	e7fd      	b.n	800e170 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e174:	4b09      	ldr	r3, [pc, #36]	@ (800e19c <prvSwitchTimerLists+0xc4>)
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d1b0      	bne.n	800e0e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e17e:	4b07      	ldr	r3, [pc, #28]	@ (800e19c <prvSwitchTimerLists+0xc4>)
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e184:	4b06      	ldr	r3, [pc, #24]	@ (800e1a0 <prvSwitchTimerLists+0xc8>)
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	4a04      	ldr	r2, [pc, #16]	@ (800e19c <prvSwitchTimerLists+0xc4>)
 800e18a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e18c:	4a04      	ldr	r2, [pc, #16]	@ (800e1a0 <prvSwitchTimerLists+0xc8>)
 800e18e:	697b      	ldr	r3, [r7, #20]
 800e190:	6013      	str	r3, [r2, #0]
}
 800e192:	bf00      	nop
 800e194:	3718      	adds	r7, #24
 800e196:	46bd      	mov	sp, r7
 800e198:	bd80      	pop	{r7, pc}
 800e19a:	bf00      	nop
 800e19c:	200044ec 	.word	0x200044ec
 800e1a0:	200044f0 	.word	0x200044f0

0800e1a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b082      	sub	sp, #8
 800e1a8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e1aa:	f000 f96d 	bl	800e488 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e1ae:	4b15      	ldr	r3, [pc, #84]	@ (800e204 <prvCheckForValidListAndQueue+0x60>)
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d120      	bne.n	800e1f8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e1b6:	4814      	ldr	r0, [pc, #80]	@ (800e208 <prvCheckForValidListAndQueue+0x64>)
 800e1b8:	f7fd fff2 	bl	800c1a0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e1bc:	4813      	ldr	r0, [pc, #76]	@ (800e20c <prvCheckForValidListAndQueue+0x68>)
 800e1be:	f7fd ffef 	bl	800c1a0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e1c2:	4b13      	ldr	r3, [pc, #76]	@ (800e210 <prvCheckForValidListAndQueue+0x6c>)
 800e1c4:	4a10      	ldr	r2, [pc, #64]	@ (800e208 <prvCheckForValidListAndQueue+0x64>)
 800e1c6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e1c8:	4b12      	ldr	r3, [pc, #72]	@ (800e214 <prvCheckForValidListAndQueue+0x70>)
 800e1ca:	4a10      	ldr	r2, [pc, #64]	@ (800e20c <prvCheckForValidListAndQueue+0x68>)
 800e1cc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	9300      	str	r3, [sp, #0]
 800e1d2:	4b11      	ldr	r3, [pc, #68]	@ (800e218 <prvCheckForValidListAndQueue+0x74>)
 800e1d4:	4a11      	ldr	r2, [pc, #68]	@ (800e21c <prvCheckForValidListAndQueue+0x78>)
 800e1d6:	2110      	movs	r1, #16
 800e1d8:	200a      	movs	r0, #10
 800e1da:	f7fe f8ff 	bl	800c3dc <xQueueGenericCreateStatic>
 800e1de:	4603      	mov	r3, r0
 800e1e0:	4a08      	ldr	r2, [pc, #32]	@ (800e204 <prvCheckForValidListAndQueue+0x60>)
 800e1e2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e1e4:	4b07      	ldr	r3, [pc, #28]	@ (800e204 <prvCheckForValidListAndQueue+0x60>)
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d005      	beq.n	800e1f8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e1ec:	4b05      	ldr	r3, [pc, #20]	@ (800e204 <prvCheckForValidListAndQueue+0x60>)
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	490b      	ldr	r1, [pc, #44]	@ (800e220 <prvCheckForValidListAndQueue+0x7c>)
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	f7fe fd24 	bl	800cc40 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e1f8:	f000 f978 	bl	800e4ec <vPortExitCritical>
}
 800e1fc:	bf00      	nop
 800e1fe:	46bd      	mov	sp, r7
 800e200:	bd80      	pop	{r7, pc}
 800e202:	bf00      	nop
 800e204:	200044f4 	.word	0x200044f4
 800e208:	200044c4 	.word	0x200044c4
 800e20c:	200044d8 	.word	0x200044d8
 800e210:	200044ec 	.word	0x200044ec
 800e214:	200044f0 	.word	0x200044f0
 800e218:	200045a0 	.word	0x200045a0
 800e21c:	20004500 	.word	0x20004500
 800e220:	08012284 	.word	0x08012284

0800e224 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e224:	b480      	push	{r7}
 800e226:	b085      	sub	sp, #20
 800e228:	af00      	add	r7, sp, #0
 800e22a:	60f8      	str	r0, [r7, #12]
 800e22c:	60b9      	str	r1, [r7, #8]
 800e22e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	3b04      	subs	r3, #4
 800e234:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800e23c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	3b04      	subs	r3, #4
 800e242:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e244:	68bb      	ldr	r3, [r7, #8]
 800e246:	f023 0201 	bic.w	r2, r3, #1
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	3b04      	subs	r3, #4
 800e252:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e254:	4a0c      	ldr	r2, [pc, #48]	@ (800e288 <pxPortInitialiseStack+0x64>)
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	3b14      	subs	r3, #20
 800e25e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e260:	687a      	ldr	r2, [r7, #4]
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	3b04      	subs	r3, #4
 800e26a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	f06f 0202 	mvn.w	r2, #2
 800e272:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	3b20      	subs	r3, #32
 800e278:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e27a:	68fb      	ldr	r3, [r7, #12]
}
 800e27c:	4618      	mov	r0, r3
 800e27e:	3714      	adds	r7, #20
 800e280:	46bd      	mov	sp, r7
 800e282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e286:	4770      	bx	lr
 800e288:	0800e28d 	.word	0x0800e28d

0800e28c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e28c:	b480      	push	{r7}
 800e28e:	b085      	sub	sp, #20
 800e290:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e292:	2300      	movs	r3, #0
 800e294:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e296:	4b13      	ldr	r3, [pc, #76]	@ (800e2e4 <prvTaskExitError+0x58>)
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e29e:	d00b      	beq.n	800e2b8 <prvTaskExitError+0x2c>
	__asm volatile
 800e2a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2a4:	f383 8811 	msr	BASEPRI, r3
 800e2a8:	f3bf 8f6f 	isb	sy
 800e2ac:	f3bf 8f4f 	dsb	sy
 800e2b0:	60fb      	str	r3, [r7, #12]
}
 800e2b2:	bf00      	nop
 800e2b4:	bf00      	nop
 800e2b6:	e7fd      	b.n	800e2b4 <prvTaskExitError+0x28>
	__asm volatile
 800e2b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2bc:	f383 8811 	msr	BASEPRI, r3
 800e2c0:	f3bf 8f6f 	isb	sy
 800e2c4:	f3bf 8f4f 	dsb	sy
 800e2c8:	60bb      	str	r3, [r7, #8]
}
 800e2ca:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e2cc:	bf00      	nop
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d0fc      	beq.n	800e2ce <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e2d4:	bf00      	nop
 800e2d6:	bf00      	nop
 800e2d8:	3714      	adds	r7, #20
 800e2da:	46bd      	mov	sp, r7
 800e2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e0:	4770      	bx	lr
 800e2e2:	bf00      	nop
 800e2e4:	20000054 	.word	0x20000054
	...

0800e2f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e2f0:	4b07      	ldr	r3, [pc, #28]	@ (800e310 <pxCurrentTCBConst2>)
 800e2f2:	6819      	ldr	r1, [r3, #0]
 800e2f4:	6808      	ldr	r0, [r1, #0]
 800e2f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2fa:	f380 8809 	msr	PSP, r0
 800e2fe:	f3bf 8f6f 	isb	sy
 800e302:	f04f 0000 	mov.w	r0, #0
 800e306:	f380 8811 	msr	BASEPRI, r0
 800e30a:	4770      	bx	lr
 800e30c:	f3af 8000 	nop.w

0800e310 <pxCurrentTCBConst2>:
 800e310:	20003fc4 	.word	0x20003fc4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e314:	bf00      	nop
 800e316:	bf00      	nop

0800e318 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e318:	4808      	ldr	r0, [pc, #32]	@ (800e33c <prvPortStartFirstTask+0x24>)
 800e31a:	6800      	ldr	r0, [r0, #0]
 800e31c:	6800      	ldr	r0, [r0, #0]
 800e31e:	f380 8808 	msr	MSP, r0
 800e322:	f04f 0000 	mov.w	r0, #0
 800e326:	f380 8814 	msr	CONTROL, r0
 800e32a:	b662      	cpsie	i
 800e32c:	b661      	cpsie	f
 800e32e:	f3bf 8f4f 	dsb	sy
 800e332:	f3bf 8f6f 	isb	sy
 800e336:	df00      	svc	0
 800e338:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e33a:	bf00      	nop
 800e33c:	e000ed08 	.word	0xe000ed08

0800e340 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b086      	sub	sp, #24
 800e344:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e346:	4b47      	ldr	r3, [pc, #284]	@ (800e464 <xPortStartScheduler+0x124>)
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	4a47      	ldr	r2, [pc, #284]	@ (800e468 <xPortStartScheduler+0x128>)
 800e34c:	4293      	cmp	r3, r2
 800e34e:	d10b      	bne.n	800e368 <xPortStartScheduler+0x28>
	__asm volatile
 800e350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e354:	f383 8811 	msr	BASEPRI, r3
 800e358:	f3bf 8f6f 	isb	sy
 800e35c:	f3bf 8f4f 	dsb	sy
 800e360:	613b      	str	r3, [r7, #16]
}
 800e362:	bf00      	nop
 800e364:	bf00      	nop
 800e366:	e7fd      	b.n	800e364 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e368:	4b3e      	ldr	r3, [pc, #248]	@ (800e464 <xPortStartScheduler+0x124>)
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	4a3f      	ldr	r2, [pc, #252]	@ (800e46c <xPortStartScheduler+0x12c>)
 800e36e:	4293      	cmp	r3, r2
 800e370:	d10b      	bne.n	800e38a <xPortStartScheduler+0x4a>
	__asm volatile
 800e372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e376:	f383 8811 	msr	BASEPRI, r3
 800e37a:	f3bf 8f6f 	isb	sy
 800e37e:	f3bf 8f4f 	dsb	sy
 800e382:	60fb      	str	r3, [r7, #12]
}
 800e384:	bf00      	nop
 800e386:	bf00      	nop
 800e388:	e7fd      	b.n	800e386 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e38a:	4b39      	ldr	r3, [pc, #228]	@ (800e470 <xPortStartScheduler+0x130>)
 800e38c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e38e:	697b      	ldr	r3, [r7, #20]
 800e390:	781b      	ldrb	r3, [r3, #0]
 800e392:	b2db      	uxtb	r3, r3
 800e394:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e396:	697b      	ldr	r3, [r7, #20]
 800e398:	22ff      	movs	r2, #255	@ 0xff
 800e39a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e39c:	697b      	ldr	r3, [r7, #20]
 800e39e:	781b      	ldrb	r3, [r3, #0]
 800e3a0:	b2db      	uxtb	r3, r3
 800e3a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e3a4:	78fb      	ldrb	r3, [r7, #3]
 800e3a6:	b2db      	uxtb	r3, r3
 800e3a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e3ac:	b2da      	uxtb	r2, r3
 800e3ae:	4b31      	ldr	r3, [pc, #196]	@ (800e474 <xPortStartScheduler+0x134>)
 800e3b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e3b2:	4b31      	ldr	r3, [pc, #196]	@ (800e478 <xPortStartScheduler+0x138>)
 800e3b4:	2207      	movs	r2, #7
 800e3b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e3b8:	e009      	b.n	800e3ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800e3ba:	4b2f      	ldr	r3, [pc, #188]	@ (800e478 <xPortStartScheduler+0x138>)
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	3b01      	subs	r3, #1
 800e3c0:	4a2d      	ldr	r2, [pc, #180]	@ (800e478 <xPortStartScheduler+0x138>)
 800e3c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e3c4:	78fb      	ldrb	r3, [r7, #3]
 800e3c6:	b2db      	uxtb	r3, r3
 800e3c8:	005b      	lsls	r3, r3, #1
 800e3ca:	b2db      	uxtb	r3, r3
 800e3cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e3ce:	78fb      	ldrb	r3, [r7, #3]
 800e3d0:	b2db      	uxtb	r3, r3
 800e3d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e3d6:	2b80      	cmp	r3, #128	@ 0x80
 800e3d8:	d0ef      	beq.n	800e3ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e3da:	4b27      	ldr	r3, [pc, #156]	@ (800e478 <xPortStartScheduler+0x138>)
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	f1c3 0307 	rsb	r3, r3, #7
 800e3e2:	2b04      	cmp	r3, #4
 800e3e4:	d00b      	beq.n	800e3fe <xPortStartScheduler+0xbe>
	__asm volatile
 800e3e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3ea:	f383 8811 	msr	BASEPRI, r3
 800e3ee:	f3bf 8f6f 	isb	sy
 800e3f2:	f3bf 8f4f 	dsb	sy
 800e3f6:	60bb      	str	r3, [r7, #8]
}
 800e3f8:	bf00      	nop
 800e3fa:	bf00      	nop
 800e3fc:	e7fd      	b.n	800e3fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e3fe:	4b1e      	ldr	r3, [pc, #120]	@ (800e478 <xPortStartScheduler+0x138>)
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	021b      	lsls	r3, r3, #8
 800e404:	4a1c      	ldr	r2, [pc, #112]	@ (800e478 <xPortStartScheduler+0x138>)
 800e406:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e408:	4b1b      	ldr	r3, [pc, #108]	@ (800e478 <xPortStartScheduler+0x138>)
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e410:	4a19      	ldr	r2, [pc, #100]	@ (800e478 <xPortStartScheduler+0x138>)
 800e412:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	b2da      	uxtb	r2, r3
 800e418:	697b      	ldr	r3, [r7, #20]
 800e41a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e41c:	4b17      	ldr	r3, [pc, #92]	@ (800e47c <xPortStartScheduler+0x13c>)
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	4a16      	ldr	r2, [pc, #88]	@ (800e47c <xPortStartScheduler+0x13c>)
 800e422:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e426:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e428:	4b14      	ldr	r3, [pc, #80]	@ (800e47c <xPortStartScheduler+0x13c>)
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	4a13      	ldr	r2, [pc, #76]	@ (800e47c <xPortStartScheduler+0x13c>)
 800e42e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e432:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e434:	f000 f8da 	bl	800e5ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e438:	4b11      	ldr	r3, [pc, #68]	@ (800e480 <xPortStartScheduler+0x140>)
 800e43a:	2200      	movs	r2, #0
 800e43c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e43e:	f000 f8f9 	bl	800e634 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e442:	4b10      	ldr	r3, [pc, #64]	@ (800e484 <xPortStartScheduler+0x144>)
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	4a0f      	ldr	r2, [pc, #60]	@ (800e484 <xPortStartScheduler+0x144>)
 800e448:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e44c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e44e:	f7ff ff63 	bl	800e318 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e452:	f7ff f82d 	bl	800d4b0 <vTaskSwitchContext>
	prvTaskExitError();
 800e456:	f7ff ff19 	bl	800e28c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e45a:	2300      	movs	r3, #0
}
 800e45c:	4618      	mov	r0, r3
 800e45e:	3718      	adds	r7, #24
 800e460:	46bd      	mov	sp, r7
 800e462:	bd80      	pop	{r7, pc}
 800e464:	e000ed00 	.word	0xe000ed00
 800e468:	410fc271 	.word	0x410fc271
 800e46c:	410fc270 	.word	0x410fc270
 800e470:	e000e400 	.word	0xe000e400
 800e474:	200045f0 	.word	0x200045f0
 800e478:	200045f4 	.word	0x200045f4
 800e47c:	e000ed20 	.word	0xe000ed20
 800e480:	20000054 	.word	0x20000054
 800e484:	e000ef34 	.word	0xe000ef34

0800e488 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e488:	b480      	push	{r7}
 800e48a:	b083      	sub	sp, #12
 800e48c:	af00      	add	r7, sp, #0
	__asm volatile
 800e48e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e492:	f383 8811 	msr	BASEPRI, r3
 800e496:	f3bf 8f6f 	isb	sy
 800e49a:	f3bf 8f4f 	dsb	sy
 800e49e:	607b      	str	r3, [r7, #4]
}
 800e4a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e4a2:	4b10      	ldr	r3, [pc, #64]	@ (800e4e4 <vPortEnterCritical+0x5c>)
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	3301      	adds	r3, #1
 800e4a8:	4a0e      	ldr	r2, [pc, #56]	@ (800e4e4 <vPortEnterCritical+0x5c>)
 800e4aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e4ac:	4b0d      	ldr	r3, [pc, #52]	@ (800e4e4 <vPortEnterCritical+0x5c>)
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	2b01      	cmp	r3, #1
 800e4b2:	d110      	bne.n	800e4d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e4b4:	4b0c      	ldr	r3, [pc, #48]	@ (800e4e8 <vPortEnterCritical+0x60>)
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	b2db      	uxtb	r3, r3
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d00b      	beq.n	800e4d6 <vPortEnterCritical+0x4e>
	__asm volatile
 800e4be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4c2:	f383 8811 	msr	BASEPRI, r3
 800e4c6:	f3bf 8f6f 	isb	sy
 800e4ca:	f3bf 8f4f 	dsb	sy
 800e4ce:	603b      	str	r3, [r7, #0]
}
 800e4d0:	bf00      	nop
 800e4d2:	bf00      	nop
 800e4d4:	e7fd      	b.n	800e4d2 <vPortEnterCritical+0x4a>
	}
}
 800e4d6:	bf00      	nop
 800e4d8:	370c      	adds	r7, #12
 800e4da:	46bd      	mov	sp, r7
 800e4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e0:	4770      	bx	lr
 800e4e2:	bf00      	nop
 800e4e4:	20000054 	.word	0x20000054
 800e4e8:	e000ed04 	.word	0xe000ed04

0800e4ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e4ec:	b480      	push	{r7}
 800e4ee:	b083      	sub	sp, #12
 800e4f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e4f2:	4b12      	ldr	r3, [pc, #72]	@ (800e53c <vPortExitCritical+0x50>)
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d10b      	bne.n	800e512 <vPortExitCritical+0x26>
	__asm volatile
 800e4fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4fe:	f383 8811 	msr	BASEPRI, r3
 800e502:	f3bf 8f6f 	isb	sy
 800e506:	f3bf 8f4f 	dsb	sy
 800e50a:	607b      	str	r3, [r7, #4]
}
 800e50c:	bf00      	nop
 800e50e:	bf00      	nop
 800e510:	e7fd      	b.n	800e50e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e512:	4b0a      	ldr	r3, [pc, #40]	@ (800e53c <vPortExitCritical+0x50>)
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	3b01      	subs	r3, #1
 800e518:	4a08      	ldr	r2, [pc, #32]	@ (800e53c <vPortExitCritical+0x50>)
 800e51a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e51c:	4b07      	ldr	r3, [pc, #28]	@ (800e53c <vPortExitCritical+0x50>)
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d105      	bne.n	800e530 <vPortExitCritical+0x44>
 800e524:	2300      	movs	r3, #0
 800e526:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e528:	683b      	ldr	r3, [r7, #0]
 800e52a:	f383 8811 	msr	BASEPRI, r3
}
 800e52e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e530:	bf00      	nop
 800e532:	370c      	adds	r7, #12
 800e534:	46bd      	mov	sp, r7
 800e536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e53a:	4770      	bx	lr
 800e53c:	20000054 	.word	0x20000054

0800e540 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e540:	f3ef 8009 	mrs	r0, PSP
 800e544:	f3bf 8f6f 	isb	sy
 800e548:	4b15      	ldr	r3, [pc, #84]	@ (800e5a0 <pxCurrentTCBConst>)
 800e54a:	681a      	ldr	r2, [r3, #0]
 800e54c:	f01e 0f10 	tst.w	lr, #16
 800e550:	bf08      	it	eq
 800e552:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e556:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e55a:	6010      	str	r0, [r2, #0]
 800e55c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e560:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e564:	f380 8811 	msr	BASEPRI, r0
 800e568:	f3bf 8f4f 	dsb	sy
 800e56c:	f3bf 8f6f 	isb	sy
 800e570:	f7fe ff9e 	bl	800d4b0 <vTaskSwitchContext>
 800e574:	f04f 0000 	mov.w	r0, #0
 800e578:	f380 8811 	msr	BASEPRI, r0
 800e57c:	bc09      	pop	{r0, r3}
 800e57e:	6819      	ldr	r1, [r3, #0]
 800e580:	6808      	ldr	r0, [r1, #0]
 800e582:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e586:	f01e 0f10 	tst.w	lr, #16
 800e58a:	bf08      	it	eq
 800e58c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e590:	f380 8809 	msr	PSP, r0
 800e594:	f3bf 8f6f 	isb	sy
 800e598:	4770      	bx	lr
 800e59a:	bf00      	nop
 800e59c:	f3af 8000 	nop.w

0800e5a0 <pxCurrentTCBConst>:
 800e5a0:	20003fc4 	.word	0x20003fc4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e5a4:	bf00      	nop
 800e5a6:	bf00      	nop

0800e5a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b082      	sub	sp, #8
 800e5ac:	af00      	add	r7, sp, #0
	__asm volatile
 800e5ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5b2:	f383 8811 	msr	BASEPRI, r3
 800e5b6:	f3bf 8f6f 	isb	sy
 800e5ba:	f3bf 8f4f 	dsb	sy
 800e5be:	607b      	str	r3, [r7, #4]
}
 800e5c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e5c2:	f7fe febb 	bl	800d33c <xTaskIncrementTick>
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d003      	beq.n	800e5d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e5cc:	4b06      	ldr	r3, [pc, #24]	@ (800e5e8 <xPortSysTickHandler+0x40>)
 800e5ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e5d2:	601a      	str	r2, [r3, #0]
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e5d8:	683b      	ldr	r3, [r7, #0]
 800e5da:	f383 8811 	msr	BASEPRI, r3
}
 800e5de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e5e0:	bf00      	nop
 800e5e2:	3708      	adds	r7, #8
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	bd80      	pop	{r7, pc}
 800e5e8:	e000ed04 	.word	0xe000ed04

0800e5ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e5ec:	b480      	push	{r7}
 800e5ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e5f0:	4b0b      	ldr	r3, [pc, #44]	@ (800e620 <vPortSetupTimerInterrupt+0x34>)
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e5f6:	4b0b      	ldr	r3, [pc, #44]	@ (800e624 <vPortSetupTimerInterrupt+0x38>)
 800e5f8:	2200      	movs	r2, #0
 800e5fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e5fc:	4b0a      	ldr	r3, [pc, #40]	@ (800e628 <vPortSetupTimerInterrupt+0x3c>)
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	4a0a      	ldr	r2, [pc, #40]	@ (800e62c <vPortSetupTimerInterrupt+0x40>)
 800e602:	fba2 2303 	umull	r2, r3, r2, r3
 800e606:	099b      	lsrs	r3, r3, #6
 800e608:	4a09      	ldr	r2, [pc, #36]	@ (800e630 <vPortSetupTimerInterrupt+0x44>)
 800e60a:	3b01      	subs	r3, #1
 800e60c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e60e:	4b04      	ldr	r3, [pc, #16]	@ (800e620 <vPortSetupTimerInterrupt+0x34>)
 800e610:	2207      	movs	r2, #7
 800e612:	601a      	str	r2, [r3, #0]
}
 800e614:	bf00      	nop
 800e616:	46bd      	mov	sp, r7
 800e618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e61c:	4770      	bx	lr
 800e61e:	bf00      	nop
 800e620:	e000e010 	.word	0xe000e010
 800e624:	e000e018 	.word	0xe000e018
 800e628:	20000048 	.word	0x20000048
 800e62c:	10624dd3 	.word	0x10624dd3
 800e630:	e000e014 	.word	0xe000e014

0800e634 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e634:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e644 <vPortEnableVFP+0x10>
 800e638:	6801      	ldr	r1, [r0, #0]
 800e63a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e63e:	6001      	str	r1, [r0, #0]
 800e640:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e642:	bf00      	nop
 800e644:	e000ed88 	.word	0xe000ed88

0800e648 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e648:	b480      	push	{r7}
 800e64a:	b085      	sub	sp, #20
 800e64c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e64e:	f3ef 8305 	mrs	r3, IPSR
 800e652:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	2b0f      	cmp	r3, #15
 800e658:	d915      	bls.n	800e686 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e65a:	4a18      	ldr	r2, [pc, #96]	@ (800e6bc <vPortValidateInterruptPriority+0x74>)
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	4413      	add	r3, r2
 800e660:	781b      	ldrb	r3, [r3, #0]
 800e662:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e664:	4b16      	ldr	r3, [pc, #88]	@ (800e6c0 <vPortValidateInterruptPriority+0x78>)
 800e666:	781b      	ldrb	r3, [r3, #0]
 800e668:	7afa      	ldrb	r2, [r7, #11]
 800e66a:	429a      	cmp	r2, r3
 800e66c:	d20b      	bcs.n	800e686 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e66e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e672:	f383 8811 	msr	BASEPRI, r3
 800e676:	f3bf 8f6f 	isb	sy
 800e67a:	f3bf 8f4f 	dsb	sy
 800e67e:	607b      	str	r3, [r7, #4]
}
 800e680:	bf00      	nop
 800e682:	bf00      	nop
 800e684:	e7fd      	b.n	800e682 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e686:	4b0f      	ldr	r3, [pc, #60]	@ (800e6c4 <vPortValidateInterruptPriority+0x7c>)
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800e68e:	4b0e      	ldr	r3, [pc, #56]	@ (800e6c8 <vPortValidateInterruptPriority+0x80>)
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	429a      	cmp	r2, r3
 800e694:	d90b      	bls.n	800e6ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800e696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e69a:	f383 8811 	msr	BASEPRI, r3
 800e69e:	f3bf 8f6f 	isb	sy
 800e6a2:	f3bf 8f4f 	dsb	sy
 800e6a6:	603b      	str	r3, [r7, #0]
}
 800e6a8:	bf00      	nop
 800e6aa:	bf00      	nop
 800e6ac:	e7fd      	b.n	800e6aa <vPortValidateInterruptPriority+0x62>
	}
 800e6ae:	bf00      	nop
 800e6b0:	3714      	adds	r7, #20
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b8:	4770      	bx	lr
 800e6ba:	bf00      	nop
 800e6bc:	e000e3f0 	.word	0xe000e3f0
 800e6c0:	200045f0 	.word	0x200045f0
 800e6c4:	e000ed0c 	.word	0xe000ed0c
 800e6c8:	200045f4 	.word	0x200045f4

0800e6cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e6cc:	b580      	push	{r7, lr}
 800e6ce:	b08a      	sub	sp, #40	@ 0x28
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e6d8:	f7fe fd74 	bl	800d1c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e6dc:	4b5c      	ldr	r3, [pc, #368]	@ (800e850 <pvPortMalloc+0x184>)
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d101      	bne.n	800e6e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e6e4:	f000 f924 	bl	800e930 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e6e8:	4b5a      	ldr	r3, [pc, #360]	@ (800e854 <pvPortMalloc+0x188>)
 800e6ea:	681a      	ldr	r2, [r3, #0]
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	4013      	ands	r3, r2
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	f040 8095 	bne.w	800e820 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d01e      	beq.n	800e73a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e6fc:	2208      	movs	r2, #8
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	4413      	add	r3, r2
 800e702:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	f003 0307 	and.w	r3, r3, #7
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d015      	beq.n	800e73a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	f023 0307 	bic.w	r3, r3, #7
 800e714:	3308      	adds	r3, #8
 800e716:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	f003 0307 	and.w	r3, r3, #7
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d00b      	beq.n	800e73a <pvPortMalloc+0x6e>
	__asm volatile
 800e722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e726:	f383 8811 	msr	BASEPRI, r3
 800e72a:	f3bf 8f6f 	isb	sy
 800e72e:	f3bf 8f4f 	dsb	sy
 800e732:	617b      	str	r3, [r7, #20]
}
 800e734:	bf00      	nop
 800e736:	bf00      	nop
 800e738:	e7fd      	b.n	800e736 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d06f      	beq.n	800e820 <pvPortMalloc+0x154>
 800e740:	4b45      	ldr	r3, [pc, #276]	@ (800e858 <pvPortMalloc+0x18c>)
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	687a      	ldr	r2, [r7, #4]
 800e746:	429a      	cmp	r2, r3
 800e748:	d86a      	bhi.n	800e820 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e74a:	4b44      	ldr	r3, [pc, #272]	@ (800e85c <pvPortMalloc+0x190>)
 800e74c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e74e:	4b43      	ldr	r3, [pc, #268]	@ (800e85c <pvPortMalloc+0x190>)
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e754:	e004      	b.n	800e760 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800e756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e758:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e75a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e762:	685b      	ldr	r3, [r3, #4]
 800e764:	687a      	ldr	r2, [r7, #4]
 800e766:	429a      	cmp	r2, r3
 800e768:	d903      	bls.n	800e772 <pvPortMalloc+0xa6>
 800e76a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d1f1      	bne.n	800e756 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e772:	4b37      	ldr	r3, [pc, #220]	@ (800e850 <pvPortMalloc+0x184>)
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e778:	429a      	cmp	r2, r3
 800e77a:	d051      	beq.n	800e820 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e77c:	6a3b      	ldr	r3, [r7, #32]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	2208      	movs	r2, #8
 800e782:	4413      	add	r3, r2
 800e784:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e788:	681a      	ldr	r2, [r3, #0]
 800e78a:	6a3b      	ldr	r3, [r7, #32]
 800e78c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e78e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e790:	685a      	ldr	r2, [r3, #4]
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	1ad2      	subs	r2, r2, r3
 800e796:	2308      	movs	r3, #8
 800e798:	005b      	lsls	r3, r3, #1
 800e79a:	429a      	cmp	r2, r3
 800e79c:	d920      	bls.n	800e7e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e79e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	4413      	add	r3, r2
 800e7a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e7a6:	69bb      	ldr	r3, [r7, #24]
 800e7a8:	f003 0307 	and.w	r3, r3, #7
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d00b      	beq.n	800e7c8 <pvPortMalloc+0xfc>
	__asm volatile
 800e7b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7b4:	f383 8811 	msr	BASEPRI, r3
 800e7b8:	f3bf 8f6f 	isb	sy
 800e7bc:	f3bf 8f4f 	dsb	sy
 800e7c0:	613b      	str	r3, [r7, #16]
}
 800e7c2:	bf00      	nop
 800e7c4:	bf00      	nop
 800e7c6:	e7fd      	b.n	800e7c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e7c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7ca:	685a      	ldr	r2, [r3, #4]
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	1ad2      	subs	r2, r2, r3
 800e7d0:	69bb      	ldr	r3, [r7, #24]
 800e7d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e7d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7d6:	687a      	ldr	r2, [r7, #4]
 800e7d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e7da:	69b8      	ldr	r0, [r7, #24]
 800e7dc:	f000 f90a 	bl	800e9f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e7e0:	4b1d      	ldr	r3, [pc, #116]	@ (800e858 <pvPortMalloc+0x18c>)
 800e7e2:	681a      	ldr	r2, [r3, #0]
 800e7e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7e6:	685b      	ldr	r3, [r3, #4]
 800e7e8:	1ad3      	subs	r3, r2, r3
 800e7ea:	4a1b      	ldr	r2, [pc, #108]	@ (800e858 <pvPortMalloc+0x18c>)
 800e7ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e7ee:	4b1a      	ldr	r3, [pc, #104]	@ (800e858 <pvPortMalloc+0x18c>)
 800e7f0:	681a      	ldr	r2, [r3, #0]
 800e7f2:	4b1b      	ldr	r3, [pc, #108]	@ (800e860 <pvPortMalloc+0x194>)
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	429a      	cmp	r2, r3
 800e7f8:	d203      	bcs.n	800e802 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e7fa:	4b17      	ldr	r3, [pc, #92]	@ (800e858 <pvPortMalloc+0x18c>)
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	4a18      	ldr	r2, [pc, #96]	@ (800e860 <pvPortMalloc+0x194>)
 800e800:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e804:	685a      	ldr	r2, [r3, #4]
 800e806:	4b13      	ldr	r3, [pc, #76]	@ (800e854 <pvPortMalloc+0x188>)
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	431a      	orrs	r2, r3
 800e80c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e80e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e812:	2200      	movs	r2, #0
 800e814:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e816:	4b13      	ldr	r3, [pc, #76]	@ (800e864 <pvPortMalloc+0x198>)
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	3301      	adds	r3, #1
 800e81c:	4a11      	ldr	r2, [pc, #68]	@ (800e864 <pvPortMalloc+0x198>)
 800e81e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e820:	f7fe fcde 	bl	800d1e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e824:	69fb      	ldr	r3, [r7, #28]
 800e826:	f003 0307 	and.w	r3, r3, #7
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d00b      	beq.n	800e846 <pvPortMalloc+0x17a>
	__asm volatile
 800e82e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e832:	f383 8811 	msr	BASEPRI, r3
 800e836:	f3bf 8f6f 	isb	sy
 800e83a:	f3bf 8f4f 	dsb	sy
 800e83e:	60fb      	str	r3, [r7, #12]
}
 800e840:	bf00      	nop
 800e842:	bf00      	nop
 800e844:	e7fd      	b.n	800e842 <pvPortMalloc+0x176>
	return pvReturn;
 800e846:	69fb      	ldr	r3, [r7, #28]
}
 800e848:	4618      	mov	r0, r3
 800e84a:	3728      	adds	r7, #40	@ 0x28
 800e84c:	46bd      	mov	sp, r7
 800e84e:	bd80      	pop	{r7, pc}
 800e850:	2000e240 	.word	0x2000e240
 800e854:	2000e254 	.word	0x2000e254
 800e858:	2000e244 	.word	0x2000e244
 800e85c:	2000e238 	.word	0x2000e238
 800e860:	2000e248 	.word	0x2000e248
 800e864:	2000e24c 	.word	0x2000e24c

0800e868 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e868:	b580      	push	{r7, lr}
 800e86a:	b086      	sub	sp, #24
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d04f      	beq.n	800e91a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e87a:	2308      	movs	r3, #8
 800e87c:	425b      	negs	r3, r3
 800e87e:	697a      	ldr	r2, [r7, #20]
 800e880:	4413      	add	r3, r2
 800e882:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e884:	697b      	ldr	r3, [r7, #20]
 800e886:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e888:	693b      	ldr	r3, [r7, #16]
 800e88a:	685a      	ldr	r2, [r3, #4]
 800e88c:	4b25      	ldr	r3, [pc, #148]	@ (800e924 <vPortFree+0xbc>)
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	4013      	ands	r3, r2
 800e892:	2b00      	cmp	r3, #0
 800e894:	d10b      	bne.n	800e8ae <vPortFree+0x46>
	__asm volatile
 800e896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e89a:	f383 8811 	msr	BASEPRI, r3
 800e89e:	f3bf 8f6f 	isb	sy
 800e8a2:	f3bf 8f4f 	dsb	sy
 800e8a6:	60fb      	str	r3, [r7, #12]
}
 800e8a8:	bf00      	nop
 800e8aa:	bf00      	nop
 800e8ac:	e7fd      	b.n	800e8aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e8ae:	693b      	ldr	r3, [r7, #16]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d00b      	beq.n	800e8ce <vPortFree+0x66>
	__asm volatile
 800e8b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8ba:	f383 8811 	msr	BASEPRI, r3
 800e8be:	f3bf 8f6f 	isb	sy
 800e8c2:	f3bf 8f4f 	dsb	sy
 800e8c6:	60bb      	str	r3, [r7, #8]
}
 800e8c8:	bf00      	nop
 800e8ca:	bf00      	nop
 800e8cc:	e7fd      	b.n	800e8ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e8ce:	693b      	ldr	r3, [r7, #16]
 800e8d0:	685a      	ldr	r2, [r3, #4]
 800e8d2:	4b14      	ldr	r3, [pc, #80]	@ (800e924 <vPortFree+0xbc>)
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	4013      	ands	r3, r2
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d01e      	beq.n	800e91a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e8dc:	693b      	ldr	r3, [r7, #16]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d11a      	bne.n	800e91a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e8e4:	693b      	ldr	r3, [r7, #16]
 800e8e6:	685a      	ldr	r2, [r3, #4]
 800e8e8:	4b0e      	ldr	r3, [pc, #56]	@ (800e924 <vPortFree+0xbc>)
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	43db      	mvns	r3, r3
 800e8ee:	401a      	ands	r2, r3
 800e8f0:	693b      	ldr	r3, [r7, #16]
 800e8f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e8f4:	f7fe fc66 	bl	800d1c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e8f8:	693b      	ldr	r3, [r7, #16]
 800e8fa:	685a      	ldr	r2, [r3, #4]
 800e8fc:	4b0a      	ldr	r3, [pc, #40]	@ (800e928 <vPortFree+0xc0>)
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	4413      	add	r3, r2
 800e902:	4a09      	ldr	r2, [pc, #36]	@ (800e928 <vPortFree+0xc0>)
 800e904:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e906:	6938      	ldr	r0, [r7, #16]
 800e908:	f000 f874 	bl	800e9f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e90c:	4b07      	ldr	r3, [pc, #28]	@ (800e92c <vPortFree+0xc4>)
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	3301      	adds	r3, #1
 800e912:	4a06      	ldr	r2, [pc, #24]	@ (800e92c <vPortFree+0xc4>)
 800e914:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e916:	f7fe fc63 	bl	800d1e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e91a:	bf00      	nop
 800e91c:	3718      	adds	r7, #24
 800e91e:	46bd      	mov	sp, r7
 800e920:	bd80      	pop	{r7, pc}
 800e922:	bf00      	nop
 800e924:	2000e254 	.word	0x2000e254
 800e928:	2000e244 	.word	0x2000e244
 800e92c:	2000e250 	.word	0x2000e250

0800e930 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e930:	b480      	push	{r7}
 800e932:	b085      	sub	sp, #20
 800e934:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e936:	f649 4340 	movw	r3, #40000	@ 0x9c40
 800e93a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e93c:	4b27      	ldr	r3, [pc, #156]	@ (800e9dc <prvHeapInit+0xac>)
 800e93e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	f003 0307 	and.w	r3, r3, #7
 800e946:	2b00      	cmp	r3, #0
 800e948:	d00c      	beq.n	800e964 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	3307      	adds	r3, #7
 800e94e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	f023 0307 	bic.w	r3, r3, #7
 800e956:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e958:	68ba      	ldr	r2, [r7, #8]
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	1ad3      	subs	r3, r2, r3
 800e95e:	4a1f      	ldr	r2, [pc, #124]	@ (800e9dc <prvHeapInit+0xac>)
 800e960:	4413      	add	r3, r2
 800e962:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e968:	4a1d      	ldr	r2, [pc, #116]	@ (800e9e0 <prvHeapInit+0xb0>)
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e96e:	4b1c      	ldr	r3, [pc, #112]	@ (800e9e0 <prvHeapInit+0xb0>)
 800e970:	2200      	movs	r2, #0
 800e972:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	68ba      	ldr	r2, [r7, #8]
 800e978:	4413      	add	r3, r2
 800e97a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e97c:	2208      	movs	r2, #8
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	1a9b      	subs	r3, r3, r2
 800e982:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	f023 0307 	bic.w	r3, r3, #7
 800e98a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	4a15      	ldr	r2, [pc, #84]	@ (800e9e4 <prvHeapInit+0xb4>)
 800e990:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e992:	4b14      	ldr	r3, [pc, #80]	@ (800e9e4 <prvHeapInit+0xb4>)
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	2200      	movs	r2, #0
 800e998:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e99a:	4b12      	ldr	r3, [pc, #72]	@ (800e9e4 <prvHeapInit+0xb4>)
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	2200      	movs	r2, #0
 800e9a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e9a6:	683b      	ldr	r3, [r7, #0]
 800e9a8:	68fa      	ldr	r2, [r7, #12]
 800e9aa:	1ad2      	subs	r2, r2, r3
 800e9ac:	683b      	ldr	r3, [r7, #0]
 800e9ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e9b0:	4b0c      	ldr	r3, [pc, #48]	@ (800e9e4 <prvHeapInit+0xb4>)
 800e9b2:	681a      	ldr	r2, [r3, #0]
 800e9b4:	683b      	ldr	r3, [r7, #0]
 800e9b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e9b8:	683b      	ldr	r3, [r7, #0]
 800e9ba:	685b      	ldr	r3, [r3, #4]
 800e9bc:	4a0a      	ldr	r2, [pc, #40]	@ (800e9e8 <prvHeapInit+0xb8>)
 800e9be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e9c0:	683b      	ldr	r3, [r7, #0]
 800e9c2:	685b      	ldr	r3, [r3, #4]
 800e9c4:	4a09      	ldr	r2, [pc, #36]	@ (800e9ec <prvHeapInit+0xbc>)
 800e9c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e9c8:	4b09      	ldr	r3, [pc, #36]	@ (800e9f0 <prvHeapInit+0xc0>)
 800e9ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e9ce:	601a      	str	r2, [r3, #0]
}
 800e9d0:	bf00      	nop
 800e9d2:	3714      	adds	r7, #20
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9da:	4770      	bx	lr
 800e9dc:	200045f8 	.word	0x200045f8
 800e9e0:	2000e238 	.word	0x2000e238
 800e9e4:	2000e240 	.word	0x2000e240
 800e9e8:	2000e248 	.word	0x2000e248
 800e9ec:	2000e244 	.word	0x2000e244
 800e9f0:	2000e254 	.word	0x2000e254

0800e9f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e9f4:	b480      	push	{r7}
 800e9f6:	b085      	sub	sp, #20
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e9fc:	4b28      	ldr	r3, [pc, #160]	@ (800eaa0 <prvInsertBlockIntoFreeList+0xac>)
 800e9fe:	60fb      	str	r3, [r7, #12]
 800ea00:	e002      	b.n	800ea08 <prvInsertBlockIntoFreeList+0x14>
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	60fb      	str	r3, [r7, #12]
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	687a      	ldr	r2, [r7, #4]
 800ea0e:	429a      	cmp	r2, r3
 800ea10:	d8f7      	bhi.n	800ea02 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	685b      	ldr	r3, [r3, #4]
 800ea1a:	68ba      	ldr	r2, [r7, #8]
 800ea1c:	4413      	add	r3, r2
 800ea1e:	687a      	ldr	r2, [r7, #4]
 800ea20:	429a      	cmp	r2, r3
 800ea22:	d108      	bne.n	800ea36 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	685a      	ldr	r2, [r3, #4]
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	685b      	ldr	r3, [r3, #4]
 800ea2c:	441a      	add	r2, r3
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	685b      	ldr	r3, [r3, #4]
 800ea3e:	68ba      	ldr	r2, [r7, #8]
 800ea40:	441a      	add	r2, r3
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	429a      	cmp	r2, r3
 800ea48:	d118      	bne.n	800ea7c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	681a      	ldr	r2, [r3, #0]
 800ea4e:	4b15      	ldr	r3, [pc, #84]	@ (800eaa4 <prvInsertBlockIntoFreeList+0xb0>)
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	429a      	cmp	r2, r3
 800ea54:	d00d      	beq.n	800ea72 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	685a      	ldr	r2, [r3, #4]
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	685b      	ldr	r3, [r3, #4]
 800ea60:	441a      	add	r2, r3
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	681a      	ldr	r2, [r3, #0]
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	601a      	str	r2, [r3, #0]
 800ea70:	e008      	b.n	800ea84 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ea72:	4b0c      	ldr	r3, [pc, #48]	@ (800eaa4 <prvInsertBlockIntoFreeList+0xb0>)
 800ea74:	681a      	ldr	r2, [r3, #0]
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	601a      	str	r2, [r3, #0]
 800ea7a:	e003      	b.n	800ea84 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	681a      	ldr	r2, [r3, #0]
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ea84:	68fa      	ldr	r2, [r7, #12]
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	429a      	cmp	r2, r3
 800ea8a:	d002      	beq.n	800ea92 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	687a      	ldr	r2, [r7, #4]
 800ea90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ea92:	bf00      	nop
 800ea94:	3714      	adds	r7, #20
 800ea96:	46bd      	mov	sp, r7
 800ea98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9c:	4770      	bx	lr
 800ea9e:	bf00      	nop
 800eaa0:	2000e238 	.word	0x2000e238
 800eaa4:	2000e240 	.word	0x2000e240

0800eaa8 <sqrt>:
 800eaa8:	b538      	push	{r3, r4, r5, lr}
 800eaaa:	ed2d 8b02 	vpush	{d8}
 800eaae:	ec55 4b10 	vmov	r4, r5, d0
 800eab2:	f000 f825 	bl	800eb00 <__ieee754_sqrt>
 800eab6:	4622      	mov	r2, r4
 800eab8:	462b      	mov	r3, r5
 800eaba:	4620      	mov	r0, r4
 800eabc:	4629      	mov	r1, r5
 800eabe:	eeb0 8a40 	vmov.f32	s16, s0
 800eac2:	eef0 8a60 	vmov.f32	s17, s1
 800eac6:	f7f2 f831 	bl	8000b2c <__aeabi_dcmpun>
 800eaca:	b990      	cbnz	r0, 800eaf2 <sqrt+0x4a>
 800eacc:	2200      	movs	r2, #0
 800eace:	2300      	movs	r3, #0
 800ead0:	4620      	mov	r0, r4
 800ead2:	4629      	mov	r1, r5
 800ead4:	f7f2 f802 	bl	8000adc <__aeabi_dcmplt>
 800ead8:	b158      	cbz	r0, 800eaf2 <sqrt+0x4a>
 800eada:	f000 ffcf 	bl	800fa7c <__errno>
 800eade:	2321      	movs	r3, #33	@ 0x21
 800eae0:	6003      	str	r3, [r0, #0]
 800eae2:	2200      	movs	r2, #0
 800eae4:	2300      	movs	r3, #0
 800eae6:	4610      	mov	r0, r2
 800eae8:	4619      	mov	r1, r3
 800eaea:	f7f1 feaf 	bl	800084c <__aeabi_ddiv>
 800eaee:	ec41 0b18 	vmov	d8, r0, r1
 800eaf2:	eeb0 0a48 	vmov.f32	s0, s16
 800eaf6:	eef0 0a68 	vmov.f32	s1, s17
 800eafa:	ecbd 8b02 	vpop	{d8}
 800eafe:	bd38      	pop	{r3, r4, r5, pc}

0800eb00 <__ieee754_sqrt>:
 800eb00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb04:	4a68      	ldr	r2, [pc, #416]	@ (800eca8 <__ieee754_sqrt+0x1a8>)
 800eb06:	ec55 4b10 	vmov	r4, r5, d0
 800eb0a:	43aa      	bics	r2, r5
 800eb0c:	462b      	mov	r3, r5
 800eb0e:	4621      	mov	r1, r4
 800eb10:	d110      	bne.n	800eb34 <__ieee754_sqrt+0x34>
 800eb12:	4622      	mov	r2, r4
 800eb14:	4620      	mov	r0, r4
 800eb16:	4629      	mov	r1, r5
 800eb18:	f7f1 fd6e 	bl	80005f8 <__aeabi_dmul>
 800eb1c:	4602      	mov	r2, r0
 800eb1e:	460b      	mov	r3, r1
 800eb20:	4620      	mov	r0, r4
 800eb22:	4629      	mov	r1, r5
 800eb24:	f7f1 fbb2 	bl	800028c <__adddf3>
 800eb28:	4604      	mov	r4, r0
 800eb2a:	460d      	mov	r5, r1
 800eb2c:	ec45 4b10 	vmov	d0, r4, r5
 800eb30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb34:	2d00      	cmp	r5, #0
 800eb36:	dc0e      	bgt.n	800eb56 <__ieee754_sqrt+0x56>
 800eb38:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800eb3c:	4322      	orrs	r2, r4
 800eb3e:	d0f5      	beq.n	800eb2c <__ieee754_sqrt+0x2c>
 800eb40:	b19d      	cbz	r5, 800eb6a <__ieee754_sqrt+0x6a>
 800eb42:	4622      	mov	r2, r4
 800eb44:	4620      	mov	r0, r4
 800eb46:	4629      	mov	r1, r5
 800eb48:	f7f1 fb9e 	bl	8000288 <__aeabi_dsub>
 800eb4c:	4602      	mov	r2, r0
 800eb4e:	460b      	mov	r3, r1
 800eb50:	f7f1 fe7c 	bl	800084c <__aeabi_ddiv>
 800eb54:	e7e8      	b.n	800eb28 <__ieee754_sqrt+0x28>
 800eb56:	152a      	asrs	r2, r5, #20
 800eb58:	d115      	bne.n	800eb86 <__ieee754_sqrt+0x86>
 800eb5a:	2000      	movs	r0, #0
 800eb5c:	e009      	b.n	800eb72 <__ieee754_sqrt+0x72>
 800eb5e:	0acb      	lsrs	r3, r1, #11
 800eb60:	3a15      	subs	r2, #21
 800eb62:	0549      	lsls	r1, r1, #21
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d0fa      	beq.n	800eb5e <__ieee754_sqrt+0x5e>
 800eb68:	e7f7      	b.n	800eb5a <__ieee754_sqrt+0x5a>
 800eb6a:	462a      	mov	r2, r5
 800eb6c:	e7fa      	b.n	800eb64 <__ieee754_sqrt+0x64>
 800eb6e:	005b      	lsls	r3, r3, #1
 800eb70:	3001      	adds	r0, #1
 800eb72:	02dc      	lsls	r4, r3, #11
 800eb74:	d5fb      	bpl.n	800eb6e <__ieee754_sqrt+0x6e>
 800eb76:	1e44      	subs	r4, r0, #1
 800eb78:	1b12      	subs	r2, r2, r4
 800eb7a:	f1c0 0420 	rsb	r4, r0, #32
 800eb7e:	fa21 f404 	lsr.w	r4, r1, r4
 800eb82:	4323      	orrs	r3, r4
 800eb84:	4081      	lsls	r1, r0
 800eb86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eb8a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800eb8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800eb92:	07d2      	lsls	r2, r2, #31
 800eb94:	bf5c      	itt	pl
 800eb96:	005b      	lslpl	r3, r3, #1
 800eb98:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800eb9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800eba0:	bf58      	it	pl
 800eba2:	0049      	lslpl	r1, r1, #1
 800eba4:	2600      	movs	r6, #0
 800eba6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800ebaa:	106d      	asrs	r5, r5, #1
 800ebac:	0049      	lsls	r1, r1, #1
 800ebae:	2016      	movs	r0, #22
 800ebb0:	4632      	mov	r2, r6
 800ebb2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800ebb6:	1917      	adds	r7, r2, r4
 800ebb8:	429f      	cmp	r7, r3
 800ebba:	bfde      	ittt	le
 800ebbc:	193a      	addle	r2, r7, r4
 800ebbe:	1bdb      	suble	r3, r3, r7
 800ebc0:	1936      	addle	r6, r6, r4
 800ebc2:	0fcf      	lsrs	r7, r1, #31
 800ebc4:	3801      	subs	r0, #1
 800ebc6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800ebca:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ebce:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ebd2:	d1f0      	bne.n	800ebb6 <__ieee754_sqrt+0xb6>
 800ebd4:	4604      	mov	r4, r0
 800ebd6:	2720      	movs	r7, #32
 800ebd8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800ebdc:	429a      	cmp	r2, r3
 800ebde:	eb00 0e0c 	add.w	lr, r0, ip
 800ebe2:	db02      	blt.n	800ebea <__ieee754_sqrt+0xea>
 800ebe4:	d113      	bne.n	800ec0e <__ieee754_sqrt+0x10e>
 800ebe6:	458e      	cmp	lr, r1
 800ebe8:	d811      	bhi.n	800ec0e <__ieee754_sqrt+0x10e>
 800ebea:	f1be 0f00 	cmp.w	lr, #0
 800ebee:	eb0e 000c 	add.w	r0, lr, ip
 800ebf2:	da42      	bge.n	800ec7a <__ieee754_sqrt+0x17a>
 800ebf4:	2800      	cmp	r0, #0
 800ebf6:	db40      	blt.n	800ec7a <__ieee754_sqrt+0x17a>
 800ebf8:	f102 0801 	add.w	r8, r2, #1
 800ebfc:	1a9b      	subs	r3, r3, r2
 800ebfe:	458e      	cmp	lr, r1
 800ec00:	bf88      	it	hi
 800ec02:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800ec06:	eba1 010e 	sub.w	r1, r1, lr
 800ec0a:	4464      	add	r4, ip
 800ec0c:	4642      	mov	r2, r8
 800ec0e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800ec12:	3f01      	subs	r7, #1
 800ec14:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800ec18:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ec1c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800ec20:	d1dc      	bne.n	800ebdc <__ieee754_sqrt+0xdc>
 800ec22:	4319      	orrs	r1, r3
 800ec24:	d01b      	beq.n	800ec5e <__ieee754_sqrt+0x15e>
 800ec26:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800ecac <__ieee754_sqrt+0x1ac>
 800ec2a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800ecb0 <__ieee754_sqrt+0x1b0>
 800ec2e:	e9da 0100 	ldrd	r0, r1, [sl]
 800ec32:	e9db 2300 	ldrd	r2, r3, [fp]
 800ec36:	f7f1 fb27 	bl	8000288 <__aeabi_dsub>
 800ec3a:	e9da 8900 	ldrd	r8, r9, [sl]
 800ec3e:	4602      	mov	r2, r0
 800ec40:	460b      	mov	r3, r1
 800ec42:	4640      	mov	r0, r8
 800ec44:	4649      	mov	r1, r9
 800ec46:	f7f1 ff53 	bl	8000af0 <__aeabi_dcmple>
 800ec4a:	b140      	cbz	r0, 800ec5e <__ieee754_sqrt+0x15e>
 800ec4c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800ec50:	e9da 0100 	ldrd	r0, r1, [sl]
 800ec54:	e9db 2300 	ldrd	r2, r3, [fp]
 800ec58:	d111      	bne.n	800ec7e <__ieee754_sqrt+0x17e>
 800ec5a:	3601      	adds	r6, #1
 800ec5c:	463c      	mov	r4, r7
 800ec5e:	1072      	asrs	r2, r6, #1
 800ec60:	0863      	lsrs	r3, r4, #1
 800ec62:	07f1      	lsls	r1, r6, #31
 800ec64:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800ec68:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800ec6c:	bf48      	it	mi
 800ec6e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800ec72:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800ec76:	4618      	mov	r0, r3
 800ec78:	e756      	b.n	800eb28 <__ieee754_sqrt+0x28>
 800ec7a:	4690      	mov	r8, r2
 800ec7c:	e7be      	b.n	800ebfc <__ieee754_sqrt+0xfc>
 800ec7e:	f7f1 fb05 	bl	800028c <__adddf3>
 800ec82:	e9da 8900 	ldrd	r8, r9, [sl]
 800ec86:	4602      	mov	r2, r0
 800ec88:	460b      	mov	r3, r1
 800ec8a:	4640      	mov	r0, r8
 800ec8c:	4649      	mov	r1, r9
 800ec8e:	f7f1 ff25 	bl	8000adc <__aeabi_dcmplt>
 800ec92:	b120      	cbz	r0, 800ec9e <__ieee754_sqrt+0x19e>
 800ec94:	1ca0      	adds	r0, r4, #2
 800ec96:	bf08      	it	eq
 800ec98:	3601      	addeq	r6, #1
 800ec9a:	3402      	adds	r4, #2
 800ec9c:	e7df      	b.n	800ec5e <__ieee754_sqrt+0x15e>
 800ec9e:	1c63      	adds	r3, r4, #1
 800eca0:	f023 0401 	bic.w	r4, r3, #1
 800eca4:	e7db      	b.n	800ec5e <__ieee754_sqrt+0x15e>
 800eca6:	bf00      	nop
 800eca8:	7ff00000 	.word	0x7ff00000
 800ecac:	20000060 	.word	0x20000060
 800ecb0:	20000058 	.word	0x20000058

0800ecb4 <atoi>:
 800ecb4:	220a      	movs	r2, #10
 800ecb6:	2100      	movs	r1, #0
 800ecb8:	f000 b87a 	b.w	800edb0 <strtol>

0800ecbc <_strtol_l.constprop.0>:
 800ecbc:	2b24      	cmp	r3, #36	@ 0x24
 800ecbe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ecc2:	4686      	mov	lr, r0
 800ecc4:	4690      	mov	r8, r2
 800ecc6:	d801      	bhi.n	800eccc <_strtol_l.constprop.0+0x10>
 800ecc8:	2b01      	cmp	r3, #1
 800ecca:	d106      	bne.n	800ecda <_strtol_l.constprop.0+0x1e>
 800eccc:	f000 fed6 	bl	800fa7c <__errno>
 800ecd0:	2316      	movs	r3, #22
 800ecd2:	6003      	str	r3, [r0, #0]
 800ecd4:	2000      	movs	r0, #0
 800ecd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecda:	4834      	ldr	r0, [pc, #208]	@ (800edac <_strtol_l.constprop.0+0xf0>)
 800ecdc:	460d      	mov	r5, r1
 800ecde:	462a      	mov	r2, r5
 800ece0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ece4:	5d06      	ldrb	r6, [r0, r4]
 800ece6:	f016 0608 	ands.w	r6, r6, #8
 800ecea:	d1f8      	bne.n	800ecde <_strtol_l.constprop.0+0x22>
 800ecec:	2c2d      	cmp	r4, #45	@ 0x2d
 800ecee:	d12d      	bne.n	800ed4c <_strtol_l.constprop.0+0x90>
 800ecf0:	782c      	ldrb	r4, [r5, #0]
 800ecf2:	2601      	movs	r6, #1
 800ecf4:	1c95      	adds	r5, r2, #2
 800ecf6:	f033 0210 	bics.w	r2, r3, #16
 800ecfa:	d109      	bne.n	800ed10 <_strtol_l.constprop.0+0x54>
 800ecfc:	2c30      	cmp	r4, #48	@ 0x30
 800ecfe:	d12a      	bne.n	800ed56 <_strtol_l.constprop.0+0x9a>
 800ed00:	782a      	ldrb	r2, [r5, #0]
 800ed02:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ed06:	2a58      	cmp	r2, #88	@ 0x58
 800ed08:	d125      	bne.n	800ed56 <_strtol_l.constprop.0+0x9a>
 800ed0a:	786c      	ldrb	r4, [r5, #1]
 800ed0c:	2310      	movs	r3, #16
 800ed0e:	3502      	adds	r5, #2
 800ed10:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ed14:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ed18:	2200      	movs	r2, #0
 800ed1a:	fbbc f9f3 	udiv	r9, ip, r3
 800ed1e:	4610      	mov	r0, r2
 800ed20:	fb03 ca19 	mls	sl, r3, r9, ip
 800ed24:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ed28:	2f09      	cmp	r7, #9
 800ed2a:	d81b      	bhi.n	800ed64 <_strtol_l.constprop.0+0xa8>
 800ed2c:	463c      	mov	r4, r7
 800ed2e:	42a3      	cmp	r3, r4
 800ed30:	dd27      	ble.n	800ed82 <_strtol_l.constprop.0+0xc6>
 800ed32:	1c57      	adds	r7, r2, #1
 800ed34:	d007      	beq.n	800ed46 <_strtol_l.constprop.0+0x8a>
 800ed36:	4581      	cmp	r9, r0
 800ed38:	d320      	bcc.n	800ed7c <_strtol_l.constprop.0+0xc0>
 800ed3a:	d101      	bne.n	800ed40 <_strtol_l.constprop.0+0x84>
 800ed3c:	45a2      	cmp	sl, r4
 800ed3e:	db1d      	blt.n	800ed7c <_strtol_l.constprop.0+0xc0>
 800ed40:	fb00 4003 	mla	r0, r0, r3, r4
 800ed44:	2201      	movs	r2, #1
 800ed46:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ed4a:	e7eb      	b.n	800ed24 <_strtol_l.constprop.0+0x68>
 800ed4c:	2c2b      	cmp	r4, #43	@ 0x2b
 800ed4e:	bf04      	itt	eq
 800ed50:	782c      	ldrbeq	r4, [r5, #0]
 800ed52:	1c95      	addeq	r5, r2, #2
 800ed54:	e7cf      	b.n	800ecf6 <_strtol_l.constprop.0+0x3a>
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d1da      	bne.n	800ed10 <_strtol_l.constprop.0+0x54>
 800ed5a:	2c30      	cmp	r4, #48	@ 0x30
 800ed5c:	bf0c      	ite	eq
 800ed5e:	2308      	moveq	r3, #8
 800ed60:	230a      	movne	r3, #10
 800ed62:	e7d5      	b.n	800ed10 <_strtol_l.constprop.0+0x54>
 800ed64:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ed68:	2f19      	cmp	r7, #25
 800ed6a:	d801      	bhi.n	800ed70 <_strtol_l.constprop.0+0xb4>
 800ed6c:	3c37      	subs	r4, #55	@ 0x37
 800ed6e:	e7de      	b.n	800ed2e <_strtol_l.constprop.0+0x72>
 800ed70:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ed74:	2f19      	cmp	r7, #25
 800ed76:	d804      	bhi.n	800ed82 <_strtol_l.constprop.0+0xc6>
 800ed78:	3c57      	subs	r4, #87	@ 0x57
 800ed7a:	e7d8      	b.n	800ed2e <_strtol_l.constprop.0+0x72>
 800ed7c:	f04f 32ff 	mov.w	r2, #4294967295
 800ed80:	e7e1      	b.n	800ed46 <_strtol_l.constprop.0+0x8a>
 800ed82:	1c53      	adds	r3, r2, #1
 800ed84:	d108      	bne.n	800ed98 <_strtol_l.constprop.0+0xdc>
 800ed86:	2322      	movs	r3, #34	@ 0x22
 800ed88:	f8ce 3000 	str.w	r3, [lr]
 800ed8c:	4660      	mov	r0, ip
 800ed8e:	f1b8 0f00 	cmp.w	r8, #0
 800ed92:	d0a0      	beq.n	800ecd6 <_strtol_l.constprop.0+0x1a>
 800ed94:	1e69      	subs	r1, r5, #1
 800ed96:	e006      	b.n	800eda6 <_strtol_l.constprop.0+0xea>
 800ed98:	b106      	cbz	r6, 800ed9c <_strtol_l.constprop.0+0xe0>
 800ed9a:	4240      	negs	r0, r0
 800ed9c:	f1b8 0f00 	cmp.w	r8, #0
 800eda0:	d099      	beq.n	800ecd6 <_strtol_l.constprop.0+0x1a>
 800eda2:	2a00      	cmp	r2, #0
 800eda4:	d1f6      	bne.n	800ed94 <_strtol_l.constprop.0+0xd8>
 800eda6:	f8c8 1000 	str.w	r1, [r8]
 800edaa:	e794      	b.n	800ecd6 <_strtol_l.constprop.0+0x1a>
 800edac:	080124d5 	.word	0x080124d5

0800edb0 <strtol>:
 800edb0:	4613      	mov	r3, r2
 800edb2:	460a      	mov	r2, r1
 800edb4:	4601      	mov	r1, r0
 800edb6:	4802      	ldr	r0, [pc, #8]	@ (800edc0 <strtol+0x10>)
 800edb8:	6800      	ldr	r0, [r0, #0]
 800edba:	f7ff bf7f 	b.w	800ecbc <_strtol_l.constprop.0>
 800edbe:	bf00      	nop
 800edc0:	20000074 	.word	0x20000074

0800edc4 <__cvt>:
 800edc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800edc8:	ec57 6b10 	vmov	r6, r7, d0
 800edcc:	2f00      	cmp	r7, #0
 800edce:	460c      	mov	r4, r1
 800edd0:	4619      	mov	r1, r3
 800edd2:	463b      	mov	r3, r7
 800edd4:	bfbb      	ittet	lt
 800edd6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800edda:	461f      	movlt	r7, r3
 800eddc:	2300      	movge	r3, #0
 800edde:	232d      	movlt	r3, #45	@ 0x2d
 800ede0:	700b      	strb	r3, [r1, #0]
 800ede2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ede4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ede8:	4691      	mov	r9, r2
 800edea:	f023 0820 	bic.w	r8, r3, #32
 800edee:	bfbc      	itt	lt
 800edf0:	4632      	movlt	r2, r6
 800edf2:	4616      	movlt	r6, r2
 800edf4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800edf8:	d005      	beq.n	800ee06 <__cvt+0x42>
 800edfa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800edfe:	d100      	bne.n	800ee02 <__cvt+0x3e>
 800ee00:	3401      	adds	r4, #1
 800ee02:	2102      	movs	r1, #2
 800ee04:	e000      	b.n	800ee08 <__cvt+0x44>
 800ee06:	2103      	movs	r1, #3
 800ee08:	ab03      	add	r3, sp, #12
 800ee0a:	9301      	str	r3, [sp, #4]
 800ee0c:	ab02      	add	r3, sp, #8
 800ee0e:	9300      	str	r3, [sp, #0]
 800ee10:	ec47 6b10 	vmov	d0, r6, r7
 800ee14:	4653      	mov	r3, sl
 800ee16:	4622      	mov	r2, r4
 800ee18:	f000 ff1a 	bl	800fc50 <_dtoa_r>
 800ee1c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ee20:	4605      	mov	r5, r0
 800ee22:	d119      	bne.n	800ee58 <__cvt+0x94>
 800ee24:	f019 0f01 	tst.w	r9, #1
 800ee28:	d00e      	beq.n	800ee48 <__cvt+0x84>
 800ee2a:	eb00 0904 	add.w	r9, r0, r4
 800ee2e:	2200      	movs	r2, #0
 800ee30:	2300      	movs	r3, #0
 800ee32:	4630      	mov	r0, r6
 800ee34:	4639      	mov	r1, r7
 800ee36:	f7f1 fe47 	bl	8000ac8 <__aeabi_dcmpeq>
 800ee3a:	b108      	cbz	r0, 800ee40 <__cvt+0x7c>
 800ee3c:	f8cd 900c 	str.w	r9, [sp, #12]
 800ee40:	2230      	movs	r2, #48	@ 0x30
 800ee42:	9b03      	ldr	r3, [sp, #12]
 800ee44:	454b      	cmp	r3, r9
 800ee46:	d31e      	bcc.n	800ee86 <__cvt+0xc2>
 800ee48:	9b03      	ldr	r3, [sp, #12]
 800ee4a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ee4c:	1b5b      	subs	r3, r3, r5
 800ee4e:	4628      	mov	r0, r5
 800ee50:	6013      	str	r3, [r2, #0]
 800ee52:	b004      	add	sp, #16
 800ee54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee58:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ee5c:	eb00 0904 	add.w	r9, r0, r4
 800ee60:	d1e5      	bne.n	800ee2e <__cvt+0x6a>
 800ee62:	7803      	ldrb	r3, [r0, #0]
 800ee64:	2b30      	cmp	r3, #48	@ 0x30
 800ee66:	d10a      	bne.n	800ee7e <__cvt+0xba>
 800ee68:	2200      	movs	r2, #0
 800ee6a:	2300      	movs	r3, #0
 800ee6c:	4630      	mov	r0, r6
 800ee6e:	4639      	mov	r1, r7
 800ee70:	f7f1 fe2a 	bl	8000ac8 <__aeabi_dcmpeq>
 800ee74:	b918      	cbnz	r0, 800ee7e <__cvt+0xba>
 800ee76:	f1c4 0401 	rsb	r4, r4, #1
 800ee7a:	f8ca 4000 	str.w	r4, [sl]
 800ee7e:	f8da 3000 	ldr.w	r3, [sl]
 800ee82:	4499      	add	r9, r3
 800ee84:	e7d3      	b.n	800ee2e <__cvt+0x6a>
 800ee86:	1c59      	adds	r1, r3, #1
 800ee88:	9103      	str	r1, [sp, #12]
 800ee8a:	701a      	strb	r2, [r3, #0]
 800ee8c:	e7d9      	b.n	800ee42 <__cvt+0x7e>

0800ee8e <__exponent>:
 800ee8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ee90:	2900      	cmp	r1, #0
 800ee92:	bfba      	itte	lt
 800ee94:	4249      	neglt	r1, r1
 800ee96:	232d      	movlt	r3, #45	@ 0x2d
 800ee98:	232b      	movge	r3, #43	@ 0x2b
 800ee9a:	2909      	cmp	r1, #9
 800ee9c:	7002      	strb	r2, [r0, #0]
 800ee9e:	7043      	strb	r3, [r0, #1]
 800eea0:	dd29      	ble.n	800eef6 <__exponent+0x68>
 800eea2:	f10d 0307 	add.w	r3, sp, #7
 800eea6:	461d      	mov	r5, r3
 800eea8:	270a      	movs	r7, #10
 800eeaa:	461a      	mov	r2, r3
 800eeac:	fbb1 f6f7 	udiv	r6, r1, r7
 800eeb0:	fb07 1416 	mls	r4, r7, r6, r1
 800eeb4:	3430      	adds	r4, #48	@ 0x30
 800eeb6:	f802 4c01 	strb.w	r4, [r2, #-1]
 800eeba:	460c      	mov	r4, r1
 800eebc:	2c63      	cmp	r4, #99	@ 0x63
 800eebe:	f103 33ff 	add.w	r3, r3, #4294967295
 800eec2:	4631      	mov	r1, r6
 800eec4:	dcf1      	bgt.n	800eeaa <__exponent+0x1c>
 800eec6:	3130      	adds	r1, #48	@ 0x30
 800eec8:	1e94      	subs	r4, r2, #2
 800eeca:	f803 1c01 	strb.w	r1, [r3, #-1]
 800eece:	1c41      	adds	r1, r0, #1
 800eed0:	4623      	mov	r3, r4
 800eed2:	42ab      	cmp	r3, r5
 800eed4:	d30a      	bcc.n	800eeec <__exponent+0x5e>
 800eed6:	f10d 0309 	add.w	r3, sp, #9
 800eeda:	1a9b      	subs	r3, r3, r2
 800eedc:	42ac      	cmp	r4, r5
 800eede:	bf88      	it	hi
 800eee0:	2300      	movhi	r3, #0
 800eee2:	3302      	adds	r3, #2
 800eee4:	4403      	add	r3, r0
 800eee6:	1a18      	subs	r0, r3, r0
 800eee8:	b003      	add	sp, #12
 800eeea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eeec:	f813 6b01 	ldrb.w	r6, [r3], #1
 800eef0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800eef4:	e7ed      	b.n	800eed2 <__exponent+0x44>
 800eef6:	2330      	movs	r3, #48	@ 0x30
 800eef8:	3130      	adds	r1, #48	@ 0x30
 800eefa:	7083      	strb	r3, [r0, #2]
 800eefc:	70c1      	strb	r1, [r0, #3]
 800eefe:	1d03      	adds	r3, r0, #4
 800ef00:	e7f1      	b.n	800eee6 <__exponent+0x58>
	...

0800ef04 <_printf_float>:
 800ef04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef08:	b08d      	sub	sp, #52	@ 0x34
 800ef0a:	460c      	mov	r4, r1
 800ef0c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ef10:	4616      	mov	r6, r2
 800ef12:	461f      	mov	r7, r3
 800ef14:	4605      	mov	r5, r0
 800ef16:	f000 fd11 	bl	800f93c <_localeconv_r>
 800ef1a:	6803      	ldr	r3, [r0, #0]
 800ef1c:	9304      	str	r3, [sp, #16]
 800ef1e:	4618      	mov	r0, r3
 800ef20:	f7f1 f9a6 	bl	8000270 <strlen>
 800ef24:	2300      	movs	r3, #0
 800ef26:	930a      	str	r3, [sp, #40]	@ 0x28
 800ef28:	f8d8 3000 	ldr.w	r3, [r8]
 800ef2c:	9005      	str	r0, [sp, #20]
 800ef2e:	3307      	adds	r3, #7
 800ef30:	f023 0307 	bic.w	r3, r3, #7
 800ef34:	f103 0208 	add.w	r2, r3, #8
 800ef38:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ef3c:	f8d4 b000 	ldr.w	fp, [r4]
 800ef40:	f8c8 2000 	str.w	r2, [r8]
 800ef44:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ef48:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ef4c:	9307      	str	r3, [sp, #28]
 800ef4e:	f8cd 8018 	str.w	r8, [sp, #24]
 800ef52:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ef56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ef5a:	4b9c      	ldr	r3, [pc, #624]	@ (800f1cc <_printf_float+0x2c8>)
 800ef5c:	f04f 32ff 	mov.w	r2, #4294967295
 800ef60:	f7f1 fde4 	bl	8000b2c <__aeabi_dcmpun>
 800ef64:	bb70      	cbnz	r0, 800efc4 <_printf_float+0xc0>
 800ef66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ef6a:	4b98      	ldr	r3, [pc, #608]	@ (800f1cc <_printf_float+0x2c8>)
 800ef6c:	f04f 32ff 	mov.w	r2, #4294967295
 800ef70:	f7f1 fdbe 	bl	8000af0 <__aeabi_dcmple>
 800ef74:	bb30      	cbnz	r0, 800efc4 <_printf_float+0xc0>
 800ef76:	2200      	movs	r2, #0
 800ef78:	2300      	movs	r3, #0
 800ef7a:	4640      	mov	r0, r8
 800ef7c:	4649      	mov	r1, r9
 800ef7e:	f7f1 fdad 	bl	8000adc <__aeabi_dcmplt>
 800ef82:	b110      	cbz	r0, 800ef8a <_printf_float+0x86>
 800ef84:	232d      	movs	r3, #45	@ 0x2d
 800ef86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ef8a:	4a91      	ldr	r2, [pc, #580]	@ (800f1d0 <_printf_float+0x2cc>)
 800ef8c:	4b91      	ldr	r3, [pc, #580]	@ (800f1d4 <_printf_float+0x2d0>)
 800ef8e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ef92:	bf94      	ite	ls
 800ef94:	4690      	movls	r8, r2
 800ef96:	4698      	movhi	r8, r3
 800ef98:	2303      	movs	r3, #3
 800ef9a:	6123      	str	r3, [r4, #16]
 800ef9c:	f02b 0304 	bic.w	r3, fp, #4
 800efa0:	6023      	str	r3, [r4, #0]
 800efa2:	f04f 0900 	mov.w	r9, #0
 800efa6:	9700      	str	r7, [sp, #0]
 800efa8:	4633      	mov	r3, r6
 800efaa:	aa0b      	add	r2, sp, #44	@ 0x2c
 800efac:	4621      	mov	r1, r4
 800efae:	4628      	mov	r0, r5
 800efb0:	f000 f9d2 	bl	800f358 <_printf_common>
 800efb4:	3001      	adds	r0, #1
 800efb6:	f040 808d 	bne.w	800f0d4 <_printf_float+0x1d0>
 800efba:	f04f 30ff 	mov.w	r0, #4294967295
 800efbe:	b00d      	add	sp, #52	@ 0x34
 800efc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efc4:	4642      	mov	r2, r8
 800efc6:	464b      	mov	r3, r9
 800efc8:	4640      	mov	r0, r8
 800efca:	4649      	mov	r1, r9
 800efcc:	f7f1 fdae 	bl	8000b2c <__aeabi_dcmpun>
 800efd0:	b140      	cbz	r0, 800efe4 <_printf_float+0xe0>
 800efd2:	464b      	mov	r3, r9
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	bfbc      	itt	lt
 800efd8:	232d      	movlt	r3, #45	@ 0x2d
 800efda:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800efde:	4a7e      	ldr	r2, [pc, #504]	@ (800f1d8 <_printf_float+0x2d4>)
 800efe0:	4b7e      	ldr	r3, [pc, #504]	@ (800f1dc <_printf_float+0x2d8>)
 800efe2:	e7d4      	b.n	800ef8e <_printf_float+0x8a>
 800efe4:	6863      	ldr	r3, [r4, #4]
 800efe6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800efea:	9206      	str	r2, [sp, #24]
 800efec:	1c5a      	adds	r2, r3, #1
 800efee:	d13b      	bne.n	800f068 <_printf_float+0x164>
 800eff0:	2306      	movs	r3, #6
 800eff2:	6063      	str	r3, [r4, #4]
 800eff4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800eff8:	2300      	movs	r3, #0
 800effa:	6022      	str	r2, [r4, #0]
 800effc:	9303      	str	r3, [sp, #12]
 800effe:	ab0a      	add	r3, sp, #40	@ 0x28
 800f000:	e9cd a301 	strd	sl, r3, [sp, #4]
 800f004:	ab09      	add	r3, sp, #36	@ 0x24
 800f006:	9300      	str	r3, [sp, #0]
 800f008:	6861      	ldr	r1, [r4, #4]
 800f00a:	ec49 8b10 	vmov	d0, r8, r9
 800f00e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f012:	4628      	mov	r0, r5
 800f014:	f7ff fed6 	bl	800edc4 <__cvt>
 800f018:	9b06      	ldr	r3, [sp, #24]
 800f01a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f01c:	2b47      	cmp	r3, #71	@ 0x47
 800f01e:	4680      	mov	r8, r0
 800f020:	d129      	bne.n	800f076 <_printf_float+0x172>
 800f022:	1cc8      	adds	r0, r1, #3
 800f024:	db02      	blt.n	800f02c <_printf_float+0x128>
 800f026:	6863      	ldr	r3, [r4, #4]
 800f028:	4299      	cmp	r1, r3
 800f02a:	dd41      	ble.n	800f0b0 <_printf_float+0x1ac>
 800f02c:	f1aa 0a02 	sub.w	sl, sl, #2
 800f030:	fa5f fa8a 	uxtb.w	sl, sl
 800f034:	3901      	subs	r1, #1
 800f036:	4652      	mov	r2, sl
 800f038:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f03c:	9109      	str	r1, [sp, #36]	@ 0x24
 800f03e:	f7ff ff26 	bl	800ee8e <__exponent>
 800f042:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f044:	1813      	adds	r3, r2, r0
 800f046:	2a01      	cmp	r2, #1
 800f048:	4681      	mov	r9, r0
 800f04a:	6123      	str	r3, [r4, #16]
 800f04c:	dc02      	bgt.n	800f054 <_printf_float+0x150>
 800f04e:	6822      	ldr	r2, [r4, #0]
 800f050:	07d2      	lsls	r2, r2, #31
 800f052:	d501      	bpl.n	800f058 <_printf_float+0x154>
 800f054:	3301      	adds	r3, #1
 800f056:	6123      	str	r3, [r4, #16]
 800f058:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d0a2      	beq.n	800efa6 <_printf_float+0xa2>
 800f060:	232d      	movs	r3, #45	@ 0x2d
 800f062:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f066:	e79e      	b.n	800efa6 <_printf_float+0xa2>
 800f068:	9a06      	ldr	r2, [sp, #24]
 800f06a:	2a47      	cmp	r2, #71	@ 0x47
 800f06c:	d1c2      	bne.n	800eff4 <_printf_float+0xf0>
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d1c0      	bne.n	800eff4 <_printf_float+0xf0>
 800f072:	2301      	movs	r3, #1
 800f074:	e7bd      	b.n	800eff2 <_printf_float+0xee>
 800f076:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f07a:	d9db      	bls.n	800f034 <_printf_float+0x130>
 800f07c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800f080:	d118      	bne.n	800f0b4 <_printf_float+0x1b0>
 800f082:	2900      	cmp	r1, #0
 800f084:	6863      	ldr	r3, [r4, #4]
 800f086:	dd0b      	ble.n	800f0a0 <_printf_float+0x19c>
 800f088:	6121      	str	r1, [r4, #16]
 800f08a:	b913      	cbnz	r3, 800f092 <_printf_float+0x18e>
 800f08c:	6822      	ldr	r2, [r4, #0]
 800f08e:	07d0      	lsls	r0, r2, #31
 800f090:	d502      	bpl.n	800f098 <_printf_float+0x194>
 800f092:	3301      	adds	r3, #1
 800f094:	440b      	add	r3, r1
 800f096:	6123      	str	r3, [r4, #16]
 800f098:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f09a:	f04f 0900 	mov.w	r9, #0
 800f09e:	e7db      	b.n	800f058 <_printf_float+0x154>
 800f0a0:	b913      	cbnz	r3, 800f0a8 <_printf_float+0x1a4>
 800f0a2:	6822      	ldr	r2, [r4, #0]
 800f0a4:	07d2      	lsls	r2, r2, #31
 800f0a6:	d501      	bpl.n	800f0ac <_printf_float+0x1a8>
 800f0a8:	3302      	adds	r3, #2
 800f0aa:	e7f4      	b.n	800f096 <_printf_float+0x192>
 800f0ac:	2301      	movs	r3, #1
 800f0ae:	e7f2      	b.n	800f096 <_printf_float+0x192>
 800f0b0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800f0b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f0b6:	4299      	cmp	r1, r3
 800f0b8:	db05      	blt.n	800f0c6 <_printf_float+0x1c2>
 800f0ba:	6823      	ldr	r3, [r4, #0]
 800f0bc:	6121      	str	r1, [r4, #16]
 800f0be:	07d8      	lsls	r0, r3, #31
 800f0c0:	d5ea      	bpl.n	800f098 <_printf_float+0x194>
 800f0c2:	1c4b      	adds	r3, r1, #1
 800f0c4:	e7e7      	b.n	800f096 <_printf_float+0x192>
 800f0c6:	2900      	cmp	r1, #0
 800f0c8:	bfd4      	ite	le
 800f0ca:	f1c1 0202 	rsble	r2, r1, #2
 800f0ce:	2201      	movgt	r2, #1
 800f0d0:	4413      	add	r3, r2
 800f0d2:	e7e0      	b.n	800f096 <_printf_float+0x192>
 800f0d4:	6823      	ldr	r3, [r4, #0]
 800f0d6:	055a      	lsls	r2, r3, #21
 800f0d8:	d407      	bmi.n	800f0ea <_printf_float+0x1e6>
 800f0da:	6923      	ldr	r3, [r4, #16]
 800f0dc:	4642      	mov	r2, r8
 800f0de:	4631      	mov	r1, r6
 800f0e0:	4628      	mov	r0, r5
 800f0e2:	47b8      	blx	r7
 800f0e4:	3001      	adds	r0, #1
 800f0e6:	d12b      	bne.n	800f140 <_printf_float+0x23c>
 800f0e8:	e767      	b.n	800efba <_printf_float+0xb6>
 800f0ea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f0ee:	f240 80dd 	bls.w	800f2ac <_printf_float+0x3a8>
 800f0f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f0f6:	2200      	movs	r2, #0
 800f0f8:	2300      	movs	r3, #0
 800f0fa:	f7f1 fce5 	bl	8000ac8 <__aeabi_dcmpeq>
 800f0fe:	2800      	cmp	r0, #0
 800f100:	d033      	beq.n	800f16a <_printf_float+0x266>
 800f102:	4a37      	ldr	r2, [pc, #220]	@ (800f1e0 <_printf_float+0x2dc>)
 800f104:	2301      	movs	r3, #1
 800f106:	4631      	mov	r1, r6
 800f108:	4628      	mov	r0, r5
 800f10a:	47b8      	blx	r7
 800f10c:	3001      	adds	r0, #1
 800f10e:	f43f af54 	beq.w	800efba <_printf_float+0xb6>
 800f112:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f116:	4543      	cmp	r3, r8
 800f118:	db02      	blt.n	800f120 <_printf_float+0x21c>
 800f11a:	6823      	ldr	r3, [r4, #0]
 800f11c:	07d8      	lsls	r0, r3, #31
 800f11e:	d50f      	bpl.n	800f140 <_printf_float+0x23c>
 800f120:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f124:	4631      	mov	r1, r6
 800f126:	4628      	mov	r0, r5
 800f128:	47b8      	blx	r7
 800f12a:	3001      	adds	r0, #1
 800f12c:	f43f af45 	beq.w	800efba <_printf_float+0xb6>
 800f130:	f04f 0900 	mov.w	r9, #0
 800f134:	f108 38ff 	add.w	r8, r8, #4294967295
 800f138:	f104 0a1a 	add.w	sl, r4, #26
 800f13c:	45c8      	cmp	r8, r9
 800f13e:	dc09      	bgt.n	800f154 <_printf_float+0x250>
 800f140:	6823      	ldr	r3, [r4, #0]
 800f142:	079b      	lsls	r3, r3, #30
 800f144:	f100 8103 	bmi.w	800f34e <_printf_float+0x44a>
 800f148:	68e0      	ldr	r0, [r4, #12]
 800f14a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f14c:	4298      	cmp	r0, r3
 800f14e:	bfb8      	it	lt
 800f150:	4618      	movlt	r0, r3
 800f152:	e734      	b.n	800efbe <_printf_float+0xba>
 800f154:	2301      	movs	r3, #1
 800f156:	4652      	mov	r2, sl
 800f158:	4631      	mov	r1, r6
 800f15a:	4628      	mov	r0, r5
 800f15c:	47b8      	blx	r7
 800f15e:	3001      	adds	r0, #1
 800f160:	f43f af2b 	beq.w	800efba <_printf_float+0xb6>
 800f164:	f109 0901 	add.w	r9, r9, #1
 800f168:	e7e8      	b.n	800f13c <_printf_float+0x238>
 800f16a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	dc39      	bgt.n	800f1e4 <_printf_float+0x2e0>
 800f170:	4a1b      	ldr	r2, [pc, #108]	@ (800f1e0 <_printf_float+0x2dc>)
 800f172:	2301      	movs	r3, #1
 800f174:	4631      	mov	r1, r6
 800f176:	4628      	mov	r0, r5
 800f178:	47b8      	blx	r7
 800f17a:	3001      	adds	r0, #1
 800f17c:	f43f af1d 	beq.w	800efba <_printf_float+0xb6>
 800f180:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f184:	ea59 0303 	orrs.w	r3, r9, r3
 800f188:	d102      	bne.n	800f190 <_printf_float+0x28c>
 800f18a:	6823      	ldr	r3, [r4, #0]
 800f18c:	07d9      	lsls	r1, r3, #31
 800f18e:	d5d7      	bpl.n	800f140 <_printf_float+0x23c>
 800f190:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f194:	4631      	mov	r1, r6
 800f196:	4628      	mov	r0, r5
 800f198:	47b8      	blx	r7
 800f19a:	3001      	adds	r0, #1
 800f19c:	f43f af0d 	beq.w	800efba <_printf_float+0xb6>
 800f1a0:	f04f 0a00 	mov.w	sl, #0
 800f1a4:	f104 0b1a 	add.w	fp, r4, #26
 800f1a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1aa:	425b      	negs	r3, r3
 800f1ac:	4553      	cmp	r3, sl
 800f1ae:	dc01      	bgt.n	800f1b4 <_printf_float+0x2b0>
 800f1b0:	464b      	mov	r3, r9
 800f1b2:	e793      	b.n	800f0dc <_printf_float+0x1d8>
 800f1b4:	2301      	movs	r3, #1
 800f1b6:	465a      	mov	r2, fp
 800f1b8:	4631      	mov	r1, r6
 800f1ba:	4628      	mov	r0, r5
 800f1bc:	47b8      	blx	r7
 800f1be:	3001      	adds	r0, #1
 800f1c0:	f43f aefb 	beq.w	800efba <_printf_float+0xb6>
 800f1c4:	f10a 0a01 	add.w	sl, sl, #1
 800f1c8:	e7ee      	b.n	800f1a8 <_printf_float+0x2a4>
 800f1ca:	bf00      	nop
 800f1cc:	7fefffff 	.word	0x7fefffff
 800f1d0:	080125d5 	.word	0x080125d5
 800f1d4:	080125d9 	.word	0x080125d9
 800f1d8:	080125dd 	.word	0x080125dd
 800f1dc:	080125e1 	.word	0x080125e1
 800f1e0:	080125e5 	.word	0x080125e5
 800f1e4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f1e6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f1ea:	4553      	cmp	r3, sl
 800f1ec:	bfa8      	it	ge
 800f1ee:	4653      	movge	r3, sl
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	4699      	mov	r9, r3
 800f1f4:	dc36      	bgt.n	800f264 <_printf_float+0x360>
 800f1f6:	f04f 0b00 	mov.w	fp, #0
 800f1fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f1fe:	f104 021a 	add.w	r2, r4, #26
 800f202:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f204:	9306      	str	r3, [sp, #24]
 800f206:	eba3 0309 	sub.w	r3, r3, r9
 800f20a:	455b      	cmp	r3, fp
 800f20c:	dc31      	bgt.n	800f272 <_printf_float+0x36e>
 800f20e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f210:	459a      	cmp	sl, r3
 800f212:	dc3a      	bgt.n	800f28a <_printf_float+0x386>
 800f214:	6823      	ldr	r3, [r4, #0]
 800f216:	07da      	lsls	r2, r3, #31
 800f218:	d437      	bmi.n	800f28a <_printf_float+0x386>
 800f21a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f21c:	ebaa 0903 	sub.w	r9, sl, r3
 800f220:	9b06      	ldr	r3, [sp, #24]
 800f222:	ebaa 0303 	sub.w	r3, sl, r3
 800f226:	4599      	cmp	r9, r3
 800f228:	bfa8      	it	ge
 800f22a:	4699      	movge	r9, r3
 800f22c:	f1b9 0f00 	cmp.w	r9, #0
 800f230:	dc33      	bgt.n	800f29a <_printf_float+0x396>
 800f232:	f04f 0800 	mov.w	r8, #0
 800f236:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f23a:	f104 0b1a 	add.w	fp, r4, #26
 800f23e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f240:	ebaa 0303 	sub.w	r3, sl, r3
 800f244:	eba3 0309 	sub.w	r3, r3, r9
 800f248:	4543      	cmp	r3, r8
 800f24a:	f77f af79 	ble.w	800f140 <_printf_float+0x23c>
 800f24e:	2301      	movs	r3, #1
 800f250:	465a      	mov	r2, fp
 800f252:	4631      	mov	r1, r6
 800f254:	4628      	mov	r0, r5
 800f256:	47b8      	blx	r7
 800f258:	3001      	adds	r0, #1
 800f25a:	f43f aeae 	beq.w	800efba <_printf_float+0xb6>
 800f25e:	f108 0801 	add.w	r8, r8, #1
 800f262:	e7ec      	b.n	800f23e <_printf_float+0x33a>
 800f264:	4642      	mov	r2, r8
 800f266:	4631      	mov	r1, r6
 800f268:	4628      	mov	r0, r5
 800f26a:	47b8      	blx	r7
 800f26c:	3001      	adds	r0, #1
 800f26e:	d1c2      	bne.n	800f1f6 <_printf_float+0x2f2>
 800f270:	e6a3      	b.n	800efba <_printf_float+0xb6>
 800f272:	2301      	movs	r3, #1
 800f274:	4631      	mov	r1, r6
 800f276:	4628      	mov	r0, r5
 800f278:	9206      	str	r2, [sp, #24]
 800f27a:	47b8      	blx	r7
 800f27c:	3001      	adds	r0, #1
 800f27e:	f43f ae9c 	beq.w	800efba <_printf_float+0xb6>
 800f282:	9a06      	ldr	r2, [sp, #24]
 800f284:	f10b 0b01 	add.w	fp, fp, #1
 800f288:	e7bb      	b.n	800f202 <_printf_float+0x2fe>
 800f28a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f28e:	4631      	mov	r1, r6
 800f290:	4628      	mov	r0, r5
 800f292:	47b8      	blx	r7
 800f294:	3001      	adds	r0, #1
 800f296:	d1c0      	bne.n	800f21a <_printf_float+0x316>
 800f298:	e68f      	b.n	800efba <_printf_float+0xb6>
 800f29a:	9a06      	ldr	r2, [sp, #24]
 800f29c:	464b      	mov	r3, r9
 800f29e:	4442      	add	r2, r8
 800f2a0:	4631      	mov	r1, r6
 800f2a2:	4628      	mov	r0, r5
 800f2a4:	47b8      	blx	r7
 800f2a6:	3001      	adds	r0, #1
 800f2a8:	d1c3      	bne.n	800f232 <_printf_float+0x32e>
 800f2aa:	e686      	b.n	800efba <_printf_float+0xb6>
 800f2ac:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f2b0:	f1ba 0f01 	cmp.w	sl, #1
 800f2b4:	dc01      	bgt.n	800f2ba <_printf_float+0x3b6>
 800f2b6:	07db      	lsls	r3, r3, #31
 800f2b8:	d536      	bpl.n	800f328 <_printf_float+0x424>
 800f2ba:	2301      	movs	r3, #1
 800f2bc:	4642      	mov	r2, r8
 800f2be:	4631      	mov	r1, r6
 800f2c0:	4628      	mov	r0, r5
 800f2c2:	47b8      	blx	r7
 800f2c4:	3001      	adds	r0, #1
 800f2c6:	f43f ae78 	beq.w	800efba <_printf_float+0xb6>
 800f2ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f2ce:	4631      	mov	r1, r6
 800f2d0:	4628      	mov	r0, r5
 800f2d2:	47b8      	blx	r7
 800f2d4:	3001      	adds	r0, #1
 800f2d6:	f43f ae70 	beq.w	800efba <_printf_float+0xb6>
 800f2da:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f2de:	2200      	movs	r2, #0
 800f2e0:	2300      	movs	r3, #0
 800f2e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f2e6:	f7f1 fbef 	bl	8000ac8 <__aeabi_dcmpeq>
 800f2ea:	b9c0      	cbnz	r0, 800f31e <_printf_float+0x41a>
 800f2ec:	4653      	mov	r3, sl
 800f2ee:	f108 0201 	add.w	r2, r8, #1
 800f2f2:	4631      	mov	r1, r6
 800f2f4:	4628      	mov	r0, r5
 800f2f6:	47b8      	blx	r7
 800f2f8:	3001      	adds	r0, #1
 800f2fa:	d10c      	bne.n	800f316 <_printf_float+0x412>
 800f2fc:	e65d      	b.n	800efba <_printf_float+0xb6>
 800f2fe:	2301      	movs	r3, #1
 800f300:	465a      	mov	r2, fp
 800f302:	4631      	mov	r1, r6
 800f304:	4628      	mov	r0, r5
 800f306:	47b8      	blx	r7
 800f308:	3001      	adds	r0, #1
 800f30a:	f43f ae56 	beq.w	800efba <_printf_float+0xb6>
 800f30e:	f108 0801 	add.w	r8, r8, #1
 800f312:	45d0      	cmp	r8, sl
 800f314:	dbf3      	blt.n	800f2fe <_printf_float+0x3fa>
 800f316:	464b      	mov	r3, r9
 800f318:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f31c:	e6df      	b.n	800f0de <_printf_float+0x1da>
 800f31e:	f04f 0800 	mov.w	r8, #0
 800f322:	f104 0b1a 	add.w	fp, r4, #26
 800f326:	e7f4      	b.n	800f312 <_printf_float+0x40e>
 800f328:	2301      	movs	r3, #1
 800f32a:	4642      	mov	r2, r8
 800f32c:	e7e1      	b.n	800f2f2 <_printf_float+0x3ee>
 800f32e:	2301      	movs	r3, #1
 800f330:	464a      	mov	r2, r9
 800f332:	4631      	mov	r1, r6
 800f334:	4628      	mov	r0, r5
 800f336:	47b8      	blx	r7
 800f338:	3001      	adds	r0, #1
 800f33a:	f43f ae3e 	beq.w	800efba <_printf_float+0xb6>
 800f33e:	f108 0801 	add.w	r8, r8, #1
 800f342:	68e3      	ldr	r3, [r4, #12]
 800f344:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f346:	1a5b      	subs	r3, r3, r1
 800f348:	4543      	cmp	r3, r8
 800f34a:	dcf0      	bgt.n	800f32e <_printf_float+0x42a>
 800f34c:	e6fc      	b.n	800f148 <_printf_float+0x244>
 800f34e:	f04f 0800 	mov.w	r8, #0
 800f352:	f104 0919 	add.w	r9, r4, #25
 800f356:	e7f4      	b.n	800f342 <_printf_float+0x43e>

0800f358 <_printf_common>:
 800f358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f35c:	4616      	mov	r6, r2
 800f35e:	4698      	mov	r8, r3
 800f360:	688a      	ldr	r2, [r1, #8]
 800f362:	690b      	ldr	r3, [r1, #16]
 800f364:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f368:	4293      	cmp	r3, r2
 800f36a:	bfb8      	it	lt
 800f36c:	4613      	movlt	r3, r2
 800f36e:	6033      	str	r3, [r6, #0]
 800f370:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f374:	4607      	mov	r7, r0
 800f376:	460c      	mov	r4, r1
 800f378:	b10a      	cbz	r2, 800f37e <_printf_common+0x26>
 800f37a:	3301      	adds	r3, #1
 800f37c:	6033      	str	r3, [r6, #0]
 800f37e:	6823      	ldr	r3, [r4, #0]
 800f380:	0699      	lsls	r1, r3, #26
 800f382:	bf42      	ittt	mi
 800f384:	6833      	ldrmi	r3, [r6, #0]
 800f386:	3302      	addmi	r3, #2
 800f388:	6033      	strmi	r3, [r6, #0]
 800f38a:	6825      	ldr	r5, [r4, #0]
 800f38c:	f015 0506 	ands.w	r5, r5, #6
 800f390:	d106      	bne.n	800f3a0 <_printf_common+0x48>
 800f392:	f104 0a19 	add.w	sl, r4, #25
 800f396:	68e3      	ldr	r3, [r4, #12]
 800f398:	6832      	ldr	r2, [r6, #0]
 800f39a:	1a9b      	subs	r3, r3, r2
 800f39c:	42ab      	cmp	r3, r5
 800f39e:	dc26      	bgt.n	800f3ee <_printf_common+0x96>
 800f3a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f3a4:	6822      	ldr	r2, [r4, #0]
 800f3a6:	3b00      	subs	r3, #0
 800f3a8:	bf18      	it	ne
 800f3aa:	2301      	movne	r3, #1
 800f3ac:	0692      	lsls	r2, r2, #26
 800f3ae:	d42b      	bmi.n	800f408 <_printf_common+0xb0>
 800f3b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f3b4:	4641      	mov	r1, r8
 800f3b6:	4638      	mov	r0, r7
 800f3b8:	47c8      	blx	r9
 800f3ba:	3001      	adds	r0, #1
 800f3bc:	d01e      	beq.n	800f3fc <_printf_common+0xa4>
 800f3be:	6823      	ldr	r3, [r4, #0]
 800f3c0:	6922      	ldr	r2, [r4, #16]
 800f3c2:	f003 0306 	and.w	r3, r3, #6
 800f3c6:	2b04      	cmp	r3, #4
 800f3c8:	bf02      	ittt	eq
 800f3ca:	68e5      	ldreq	r5, [r4, #12]
 800f3cc:	6833      	ldreq	r3, [r6, #0]
 800f3ce:	1aed      	subeq	r5, r5, r3
 800f3d0:	68a3      	ldr	r3, [r4, #8]
 800f3d2:	bf0c      	ite	eq
 800f3d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f3d8:	2500      	movne	r5, #0
 800f3da:	4293      	cmp	r3, r2
 800f3dc:	bfc4      	itt	gt
 800f3de:	1a9b      	subgt	r3, r3, r2
 800f3e0:	18ed      	addgt	r5, r5, r3
 800f3e2:	2600      	movs	r6, #0
 800f3e4:	341a      	adds	r4, #26
 800f3e6:	42b5      	cmp	r5, r6
 800f3e8:	d11a      	bne.n	800f420 <_printf_common+0xc8>
 800f3ea:	2000      	movs	r0, #0
 800f3ec:	e008      	b.n	800f400 <_printf_common+0xa8>
 800f3ee:	2301      	movs	r3, #1
 800f3f0:	4652      	mov	r2, sl
 800f3f2:	4641      	mov	r1, r8
 800f3f4:	4638      	mov	r0, r7
 800f3f6:	47c8      	blx	r9
 800f3f8:	3001      	adds	r0, #1
 800f3fa:	d103      	bne.n	800f404 <_printf_common+0xac>
 800f3fc:	f04f 30ff 	mov.w	r0, #4294967295
 800f400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f404:	3501      	adds	r5, #1
 800f406:	e7c6      	b.n	800f396 <_printf_common+0x3e>
 800f408:	18e1      	adds	r1, r4, r3
 800f40a:	1c5a      	adds	r2, r3, #1
 800f40c:	2030      	movs	r0, #48	@ 0x30
 800f40e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f412:	4422      	add	r2, r4
 800f414:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f418:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f41c:	3302      	adds	r3, #2
 800f41e:	e7c7      	b.n	800f3b0 <_printf_common+0x58>
 800f420:	2301      	movs	r3, #1
 800f422:	4622      	mov	r2, r4
 800f424:	4641      	mov	r1, r8
 800f426:	4638      	mov	r0, r7
 800f428:	47c8      	blx	r9
 800f42a:	3001      	adds	r0, #1
 800f42c:	d0e6      	beq.n	800f3fc <_printf_common+0xa4>
 800f42e:	3601      	adds	r6, #1
 800f430:	e7d9      	b.n	800f3e6 <_printf_common+0x8e>
	...

0800f434 <_printf_i>:
 800f434:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f438:	7e0f      	ldrb	r7, [r1, #24]
 800f43a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f43c:	2f78      	cmp	r7, #120	@ 0x78
 800f43e:	4691      	mov	r9, r2
 800f440:	4680      	mov	r8, r0
 800f442:	460c      	mov	r4, r1
 800f444:	469a      	mov	sl, r3
 800f446:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f44a:	d807      	bhi.n	800f45c <_printf_i+0x28>
 800f44c:	2f62      	cmp	r7, #98	@ 0x62
 800f44e:	d80a      	bhi.n	800f466 <_printf_i+0x32>
 800f450:	2f00      	cmp	r7, #0
 800f452:	f000 80d2 	beq.w	800f5fa <_printf_i+0x1c6>
 800f456:	2f58      	cmp	r7, #88	@ 0x58
 800f458:	f000 80b9 	beq.w	800f5ce <_printf_i+0x19a>
 800f45c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f460:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f464:	e03a      	b.n	800f4dc <_printf_i+0xa8>
 800f466:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f46a:	2b15      	cmp	r3, #21
 800f46c:	d8f6      	bhi.n	800f45c <_printf_i+0x28>
 800f46e:	a101      	add	r1, pc, #4	@ (adr r1, 800f474 <_printf_i+0x40>)
 800f470:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f474:	0800f4cd 	.word	0x0800f4cd
 800f478:	0800f4e1 	.word	0x0800f4e1
 800f47c:	0800f45d 	.word	0x0800f45d
 800f480:	0800f45d 	.word	0x0800f45d
 800f484:	0800f45d 	.word	0x0800f45d
 800f488:	0800f45d 	.word	0x0800f45d
 800f48c:	0800f4e1 	.word	0x0800f4e1
 800f490:	0800f45d 	.word	0x0800f45d
 800f494:	0800f45d 	.word	0x0800f45d
 800f498:	0800f45d 	.word	0x0800f45d
 800f49c:	0800f45d 	.word	0x0800f45d
 800f4a0:	0800f5e1 	.word	0x0800f5e1
 800f4a4:	0800f50b 	.word	0x0800f50b
 800f4a8:	0800f59b 	.word	0x0800f59b
 800f4ac:	0800f45d 	.word	0x0800f45d
 800f4b0:	0800f45d 	.word	0x0800f45d
 800f4b4:	0800f603 	.word	0x0800f603
 800f4b8:	0800f45d 	.word	0x0800f45d
 800f4bc:	0800f50b 	.word	0x0800f50b
 800f4c0:	0800f45d 	.word	0x0800f45d
 800f4c4:	0800f45d 	.word	0x0800f45d
 800f4c8:	0800f5a3 	.word	0x0800f5a3
 800f4cc:	6833      	ldr	r3, [r6, #0]
 800f4ce:	1d1a      	adds	r2, r3, #4
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	6032      	str	r2, [r6, #0]
 800f4d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f4d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f4dc:	2301      	movs	r3, #1
 800f4de:	e09d      	b.n	800f61c <_printf_i+0x1e8>
 800f4e0:	6833      	ldr	r3, [r6, #0]
 800f4e2:	6820      	ldr	r0, [r4, #0]
 800f4e4:	1d19      	adds	r1, r3, #4
 800f4e6:	6031      	str	r1, [r6, #0]
 800f4e8:	0606      	lsls	r6, r0, #24
 800f4ea:	d501      	bpl.n	800f4f0 <_printf_i+0xbc>
 800f4ec:	681d      	ldr	r5, [r3, #0]
 800f4ee:	e003      	b.n	800f4f8 <_printf_i+0xc4>
 800f4f0:	0645      	lsls	r5, r0, #25
 800f4f2:	d5fb      	bpl.n	800f4ec <_printf_i+0xb8>
 800f4f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f4f8:	2d00      	cmp	r5, #0
 800f4fa:	da03      	bge.n	800f504 <_printf_i+0xd0>
 800f4fc:	232d      	movs	r3, #45	@ 0x2d
 800f4fe:	426d      	negs	r5, r5
 800f500:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f504:	4859      	ldr	r0, [pc, #356]	@ (800f66c <_printf_i+0x238>)
 800f506:	230a      	movs	r3, #10
 800f508:	e011      	b.n	800f52e <_printf_i+0xfa>
 800f50a:	6821      	ldr	r1, [r4, #0]
 800f50c:	6833      	ldr	r3, [r6, #0]
 800f50e:	0608      	lsls	r0, r1, #24
 800f510:	f853 5b04 	ldr.w	r5, [r3], #4
 800f514:	d402      	bmi.n	800f51c <_printf_i+0xe8>
 800f516:	0649      	lsls	r1, r1, #25
 800f518:	bf48      	it	mi
 800f51a:	b2ad      	uxthmi	r5, r5
 800f51c:	2f6f      	cmp	r7, #111	@ 0x6f
 800f51e:	4853      	ldr	r0, [pc, #332]	@ (800f66c <_printf_i+0x238>)
 800f520:	6033      	str	r3, [r6, #0]
 800f522:	bf14      	ite	ne
 800f524:	230a      	movne	r3, #10
 800f526:	2308      	moveq	r3, #8
 800f528:	2100      	movs	r1, #0
 800f52a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f52e:	6866      	ldr	r6, [r4, #4]
 800f530:	60a6      	str	r6, [r4, #8]
 800f532:	2e00      	cmp	r6, #0
 800f534:	bfa2      	ittt	ge
 800f536:	6821      	ldrge	r1, [r4, #0]
 800f538:	f021 0104 	bicge.w	r1, r1, #4
 800f53c:	6021      	strge	r1, [r4, #0]
 800f53e:	b90d      	cbnz	r5, 800f544 <_printf_i+0x110>
 800f540:	2e00      	cmp	r6, #0
 800f542:	d04b      	beq.n	800f5dc <_printf_i+0x1a8>
 800f544:	4616      	mov	r6, r2
 800f546:	fbb5 f1f3 	udiv	r1, r5, r3
 800f54a:	fb03 5711 	mls	r7, r3, r1, r5
 800f54e:	5dc7      	ldrb	r7, [r0, r7]
 800f550:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f554:	462f      	mov	r7, r5
 800f556:	42bb      	cmp	r3, r7
 800f558:	460d      	mov	r5, r1
 800f55a:	d9f4      	bls.n	800f546 <_printf_i+0x112>
 800f55c:	2b08      	cmp	r3, #8
 800f55e:	d10b      	bne.n	800f578 <_printf_i+0x144>
 800f560:	6823      	ldr	r3, [r4, #0]
 800f562:	07df      	lsls	r7, r3, #31
 800f564:	d508      	bpl.n	800f578 <_printf_i+0x144>
 800f566:	6923      	ldr	r3, [r4, #16]
 800f568:	6861      	ldr	r1, [r4, #4]
 800f56a:	4299      	cmp	r1, r3
 800f56c:	bfde      	ittt	le
 800f56e:	2330      	movle	r3, #48	@ 0x30
 800f570:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f574:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f578:	1b92      	subs	r2, r2, r6
 800f57a:	6122      	str	r2, [r4, #16]
 800f57c:	f8cd a000 	str.w	sl, [sp]
 800f580:	464b      	mov	r3, r9
 800f582:	aa03      	add	r2, sp, #12
 800f584:	4621      	mov	r1, r4
 800f586:	4640      	mov	r0, r8
 800f588:	f7ff fee6 	bl	800f358 <_printf_common>
 800f58c:	3001      	adds	r0, #1
 800f58e:	d14a      	bne.n	800f626 <_printf_i+0x1f2>
 800f590:	f04f 30ff 	mov.w	r0, #4294967295
 800f594:	b004      	add	sp, #16
 800f596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f59a:	6823      	ldr	r3, [r4, #0]
 800f59c:	f043 0320 	orr.w	r3, r3, #32
 800f5a0:	6023      	str	r3, [r4, #0]
 800f5a2:	4833      	ldr	r0, [pc, #204]	@ (800f670 <_printf_i+0x23c>)
 800f5a4:	2778      	movs	r7, #120	@ 0x78
 800f5a6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f5aa:	6823      	ldr	r3, [r4, #0]
 800f5ac:	6831      	ldr	r1, [r6, #0]
 800f5ae:	061f      	lsls	r7, r3, #24
 800f5b0:	f851 5b04 	ldr.w	r5, [r1], #4
 800f5b4:	d402      	bmi.n	800f5bc <_printf_i+0x188>
 800f5b6:	065f      	lsls	r7, r3, #25
 800f5b8:	bf48      	it	mi
 800f5ba:	b2ad      	uxthmi	r5, r5
 800f5bc:	6031      	str	r1, [r6, #0]
 800f5be:	07d9      	lsls	r1, r3, #31
 800f5c0:	bf44      	itt	mi
 800f5c2:	f043 0320 	orrmi.w	r3, r3, #32
 800f5c6:	6023      	strmi	r3, [r4, #0]
 800f5c8:	b11d      	cbz	r5, 800f5d2 <_printf_i+0x19e>
 800f5ca:	2310      	movs	r3, #16
 800f5cc:	e7ac      	b.n	800f528 <_printf_i+0xf4>
 800f5ce:	4827      	ldr	r0, [pc, #156]	@ (800f66c <_printf_i+0x238>)
 800f5d0:	e7e9      	b.n	800f5a6 <_printf_i+0x172>
 800f5d2:	6823      	ldr	r3, [r4, #0]
 800f5d4:	f023 0320 	bic.w	r3, r3, #32
 800f5d8:	6023      	str	r3, [r4, #0]
 800f5da:	e7f6      	b.n	800f5ca <_printf_i+0x196>
 800f5dc:	4616      	mov	r6, r2
 800f5de:	e7bd      	b.n	800f55c <_printf_i+0x128>
 800f5e0:	6833      	ldr	r3, [r6, #0]
 800f5e2:	6825      	ldr	r5, [r4, #0]
 800f5e4:	6961      	ldr	r1, [r4, #20]
 800f5e6:	1d18      	adds	r0, r3, #4
 800f5e8:	6030      	str	r0, [r6, #0]
 800f5ea:	062e      	lsls	r6, r5, #24
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	d501      	bpl.n	800f5f4 <_printf_i+0x1c0>
 800f5f0:	6019      	str	r1, [r3, #0]
 800f5f2:	e002      	b.n	800f5fa <_printf_i+0x1c6>
 800f5f4:	0668      	lsls	r0, r5, #25
 800f5f6:	d5fb      	bpl.n	800f5f0 <_printf_i+0x1bc>
 800f5f8:	8019      	strh	r1, [r3, #0]
 800f5fa:	2300      	movs	r3, #0
 800f5fc:	6123      	str	r3, [r4, #16]
 800f5fe:	4616      	mov	r6, r2
 800f600:	e7bc      	b.n	800f57c <_printf_i+0x148>
 800f602:	6833      	ldr	r3, [r6, #0]
 800f604:	1d1a      	adds	r2, r3, #4
 800f606:	6032      	str	r2, [r6, #0]
 800f608:	681e      	ldr	r6, [r3, #0]
 800f60a:	6862      	ldr	r2, [r4, #4]
 800f60c:	2100      	movs	r1, #0
 800f60e:	4630      	mov	r0, r6
 800f610:	f7f0 fdde 	bl	80001d0 <memchr>
 800f614:	b108      	cbz	r0, 800f61a <_printf_i+0x1e6>
 800f616:	1b80      	subs	r0, r0, r6
 800f618:	6060      	str	r0, [r4, #4]
 800f61a:	6863      	ldr	r3, [r4, #4]
 800f61c:	6123      	str	r3, [r4, #16]
 800f61e:	2300      	movs	r3, #0
 800f620:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f624:	e7aa      	b.n	800f57c <_printf_i+0x148>
 800f626:	6923      	ldr	r3, [r4, #16]
 800f628:	4632      	mov	r2, r6
 800f62a:	4649      	mov	r1, r9
 800f62c:	4640      	mov	r0, r8
 800f62e:	47d0      	blx	sl
 800f630:	3001      	adds	r0, #1
 800f632:	d0ad      	beq.n	800f590 <_printf_i+0x15c>
 800f634:	6823      	ldr	r3, [r4, #0]
 800f636:	079b      	lsls	r3, r3, #30
 800f638:	d413      	bmi.n	800f662 <_printf_i+0x22e>
 800f63a:	68e0      	ldr	r0, [r4, #12]
 800f63c:	9b03      	ldr	r3, [sp, #12]
 800f63e:	4298      	cmp	r0, r3
 800f640:	bfb8      	it	lt
 800f642:	4618      	movlt	r0, r3
 800f644:	e7a6      	b.n	800f594 <_printf_i+0x160>
 800f646:	2301      	movs	r3, #1
 800f648:	4632      	mov	r2, r6
 800f64a:	4649      	mov	r1, r9
 800f64c:	4640      	mov	r0, r8
 800f64e:	47d0      	blx	sl
 800f650:	3001      	adds	r0, #1
 800f652:	d09d      	beq.n	800f590 <_printf_i+0x15c>
 800f654:	3501      	adds	r5, #1
 800f656:	68e3      	ldr	r3, [r4, #12]
 800f658:	9903      	ldr	r1, [sp, #12]
 800f65a:	1a5b      	subs	r3, r3, r1
 800f65c:	42ab      	cmp	r3, r5
 800f65e:	dcf2      	bgt.n	800f646 <_printf_i+0x212>
 800f660:	e7eb      	b.n	800f63a <_printf_i+0x206>
 800f662:	2500      	movs	r5, #0
 800f664:	f104 0619 	add.w	r6, r4, #25
 800f668:	e7f5      	b.n	800f656 <_printf_i+0x222>
 800f66a:	bf00      	nop
 800f66c:	080125e7 	.word	0x080125e7
 800f670:	080125f8 	.word	0x080125f8

0800f674 <std>:
 800f674:	2300      	movs	r3, #0
 800f676:	b510      	push	{r4, lr}
 800f678:	4604      	mov	r4, r0
 800f67a:	e9c0 3300 	strd	r3, r3, [r0]
 800f67e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f682:	6083      	str	r3, [r0, #8]
 800f684:	8181      	strh	r1, [r0, #12]
 800f686:	6643      	str	r3, [r0, #100]	@ 0x64
 800f688:	81c2      	strh	r2, [r0, #14]
 800f68a:	6183      	str	r3, [r0, #24]
 800f68c:	4619      	mov	r1, r3
 800f68e:	2208      	movs	r2, #8
 800f690:	305c      	adds	r0, #92	@ 0x5c
 800f692:	f000 f914 	bl	800f8be <memset>
 800f696:	4b0d      	ldr	r3, [pc, #52]	@ (800f6cc <std+0x58>)
 800f698:	6263      	str	r3, [r4, #36]	@ 0x24
 800f69a:	4b0d      	ldr	r3, [pc, #52]	@ (800f6d0 <std+0x5c>)
 800f69c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f69e:	4b0d      	ldr	r3, [pc, #52]	@ (800f6d4 <std+0x60>)
 800f6a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f6a2:	4b0d      	ldr	r3, [pc, #52]	@ (800f6d8 <std+0x64>)
 800f6a4:	6323      	str	r3, [r4, #48]	@ 0x30
 800f6a6:	4b0d      	ldr	r3, [pc, #52]	@ (800f6dc <std+0x68>)
 800f6a8:	6224      	str	r4, [r4, #32]
 800f6aa:	429c      	cmp	r4, r3
 800f6ac:	d006      	beq.n	800f6bc <std+0x48>
 800f6ae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f6b2:	4294      	cmp	r4, r2
 800f6b4:	d002      	beq.n	800f6bc <std+0x48>
 800f6b6:	33d0      	adds	r3, #208	@ 0xd0
 800f6b8:	429c      	cmp	r4, r3
 800f6ba:	d105      	bne.n	800f6c8 <std+0x54>
 800f6bc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f6c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f6c4:	f000 ba04 	b.w	800fad0 <__retarget_lock_init_recursive>
 800f6c8:	bd10      	pop	{r4, pc}
 800f6ca:	bf00      	nop
 800f6cc:	0800f839 	.word	0x0800f839
 800f6d0:	0800f85b 	.word	0x0800f85b
 800f6d4:	0800f893 	.word	0x0800f893
 800f6d8:	0800f8b7 	.word	0x0800f8b7
 800f6dc:	2000e258 	.word	0x2000e258

0800f6e0 <stdio_exit_handler>:
 800f6e0:	4a02      	ldr	r2, [pc, #8]	@ (800f6ec <stdio_exit_handler+0xc>)
 800f6e2:	4903      	ldr	r1, [pc, #12]	@ (800f6f0 <stdio_exit_handler+0x10>)
 800f6e4:	4803      	ldr	r0, [pc, #12]	@ (800f6f4 <stdio_exit_handler+0x14>)
 800f6e6:	f000 b869 	b.w	800f7bc <_fwalk_sglue>
 800f6ea:	bf00      	nop
 800f6ec:	20000068 	.word	0x20000068
 800f6f0:	08011495 	.word	0x08011495
 800f6f4:	20000078 	.word	0x20000078

0800f6f8 <cleanup_stdio>:
 800f6f8:	6841      	ldr	r1, [r0, #4]
 800f6fa:	4b0c      	ldr	r3, [pc, #48]	@ (800f72c <cleanup_stdio+0x34>)
 800f6fc:	4299      	cmp	r1, r3
 800f6fe:	b510      	push	{r4, lr}
 800f700:	4604      	mov	r4, r0
 800f702:	d001      	beq.n	800f708 <cleanup_stdio+0x10>
 800f704:	f001 fec6 	bl	8011494 <_fflush_r>
 800f708:	68a1      	ldr	r1, [r4, #8]
 800f70a:	4b09      	ldr	r3, [pc, #36]	@ (800f730 <cleanup_stdio+0x38>)
 800f70c:	4299      	cmp	r1, r3
 800f70e:	d002      	beq.n	800f716 <cleanup_stdio+0x1e>
 800f710:	4620      	mov	r0, r4
 800f712:	f001 febf 	bl	8011494 <_fflush_r>
 800f716:	68e1      	ldr	r1, [r4, #12]
 800f718:	4b06      	ldr	r3, [pc, #24]	@ (800f734 <cleanup_stdio+0x3c>)
 800f71a:	4299      	cmp	r1, r3
 800f71c:	d004      	beq.n	800f728 <cleanup_stdio+0x30>
 800f71e:	4620      	mov	r0, r4
 800f720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f724:	f001 beb6 	b.w	8011494 <_fflush_r>
 800f728:	bd10      	pop	{r4, pc}
 800f72a:	bf00      	nop
 800f72c:	2000e258 	.word	0x2000e258
 800f730:	2000e2c0 	.word	0x2000e2c0
 800f734:	2000e328 	.word	0x2000e328

0800f738 <global_stdio_init.part.0>:
 800f738:	b510      	push	{r4, lr}
 800f73a:	4b0b      	ldr	r3, [pc, #44]	@ (800f768 <global_stdio_init.part.0+0x30>)
 800f73c:	4c0b      	ldr	r4, [pc, #44]	@ (800f76c <global_stdio_init.part.0+0x34>)
 800f73e:	4a0c      	ldr	r2, [pc, #48]	@ (800f770 <global_stdio_init.part.0+0x38>)
 800f740:	601a      	str	r2, [r3, #0]
 800f742:	4620      	mov	r0, r4
 800f744:	2200      	movs	r2, #0
 800f746:	2104      	movs	r1, #4
 800f748:	f7ff ff94 	bl	800f674 <std>
 800f74c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f750:	2201      	movs	r2, #1
 800f752:	2109      	movs	r1, #9
 800f754:	f7ff ff8e 	bl	800f674 <std>
 800f758:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f75c:	2202      	movs	r2, #2
 800f75e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f762:	2112      	movs	r1, #18
 800f764:	f7ff bf86 	b.w	800f674 <std>
 800f768:	2000e390 	.word	0x2000e390
 800f76c:	2000e258 	.word	0x2000e258
 800f770:	0800f6e1 	.word	0x0800f6e1

0800f774 <__sfp_lock_acquire>:
 800f774:	4801      	ldr	r0, [pc, #4]	@ (800f77c <__sfp_lock_acquire+0x8>)
 800f776:	f000 b9ac 	b.w	800fad2 <__retarget_lock_acquire_recursive>
 800f77a:	bf00      	nop
 800f77c:	2000e399 	.word	0x2000e399

0800f780 <__sfp_lock_release>:
 800f780:	4801      	ldr	r0, [pc, #4]	@ (800f788 <__sfp_lock_release+0x8>)
 800f782:	f000 b9a7 	b.w	800fad4 <__retarget_lock_release_recursive>
 800f786:	bf00      	nop
 800f788:	2000e399 	.word	0x2000e399

0800f78c <__sinit>:
 800f78c:	b510      	push	{r4, lr}
 800f78e:	4604      	mov	r4, r0
 800f790:	f7ff fff0 	bl	800f774 <__sfp_lock_acquire>
 800f794:	6a23      	ldr	r3, [r4, #32]
 800f796:	b11b      	cbz	r3, 800f7a0 <__sinit+0x14>
 800f798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f79c:	f7ff bff0 	b.w	800f780 <__sfp_lock_release>
 800f7a0:	4b04      	ldr	r3, [pc, #16]	@ (800f7b4 <__sinit+0x28>)
 800f7a2:	6223      	str	r3, [r4, #32]
 800f7a4:	4b04      	ldr	r3, [pc, #16]	@ (800f7b8 <__sinit+0x2c>)
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d1f5      	bne.n	800f798 <__sinit+0xc>
 800f7ac:	f7ff ffc4 	bl	800f738 <global_stdio_init.part.0>
 800f7b0:	e7f2      	b.n	800f798 <__sinit+0xc>
 800f7b2:	bf00      	nop
 800f7b4:	0800f6f9 	.word	0x0800f6f9
 800f7b8:	2000e390 	.word	0x2000e390

0800f7bc <_fwalk_sglue>:
 800f7bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f7c0:	4607      	mov	r7, r0
 800f7c2:	4688      	mov	r8, r1
 800f7c4:	4614      	mov	r4, r2
 800f7c6:	2600      	movs	r6, #0
 800f7c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f7cc:	f1b9 0901 	subs.w	r9, r9, #1
 800f7d0:	d505      	bpl.n	800f7de <_fwalk_sglue+0x22>
 800f7d2:	6824      	ldr	r4, [r4, #0]
 800f7d4:	2c00      	cmp	r4, #0
 800f7d6:	d1f7      	bne.n	800f7c8 <_fwalk_sglue+0xc>
 800f7d8:	4630      	mov	r0, r6
 800f7da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7de:	89ab      	ldrh	r3, [r5, #12]
 800f7e0:	2b01      	cmp	r3, #1
 800f7e2:	d907      	bls.n	800f7f4 <_fwalk_sglue+0x38>
 800f7e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f7e8:	3301      	adds	r3, #1
 800f7ea:	d003      	beq.n	800f7f4 <_fwalk_sglue+0x38>
 800f7ec:	4629      	mov	r1, r5
 800f7ee:	4638      	mov	r0, r7
 800f7f0:	47c0      	blx	r8
 800f7f2:	4306      	orrs	r6, r0
 800f7f4:	3568      	adds	r5, #104	@ 0x68
 800f7f6:	e7e9      	b.n	800f7cc <_fwalk_sglue+0x10>

0800f7f8 <siprintf>:
 800f7f8:	b40e      	push	{r1, r2, r3}
 800f7fa:	b500      	push	{lr}
 800f7fc:	b09c      	sub	sp, #112	@ 0x70
 800f7fe:	ab1d      	add	r3, sp, #116	@ 0x74
 800f800:	9002      	str	r0, [sp, #8]
 800f802:	9006      	str	r0, [sp, #24]
 800f804:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f808:	4809      	ldr	r0, [pc, #36]	@ (800f830 <siprintf+0x38>)
 800f80a:	9107      	str	r1, [sp, #28]
 800f80c:	9104      	str	r1, [sp, #16]
 800f80e:	4909      	ldr	r1, [pc, #36]	@ (800f834 <siprintf+0x3c>)
 800f810:	f853 2b04 	ldr.w	r2, [r3], #4
 800f814:	9105      	str	r1, [sp, #20]
 800f816:	6800      	ldr	r0, [r0, #0]
 800f818:	9301      	str	r3, [sp, #4]
 800f81a:	a902      	add	r1, sp, #8
 800f81c:	f001 fcba 	bl	8011194 <_svfiprintf_r>
 800f820:	9b02      	ldr	r3, [sp, #8]
 800f822:	2200      	movs	r2, #0
 800f824:	701a      	strb	r2, [r3, #0]
 800f826:	b01c      	add	sp, #112	@ 0x70
 800f828:	f85d eb04 	ldr.w	lr, [sp], #4
 800f82c:	b003      	add	sp, #12
 800f82e:	4770      	bx	lr
 800f830:	20000074 	.word	0x20000074
 800f834:	ffff0208 	.word	0xffff0208

0800f838 <__sread>:
 800f838:	b510      	push	{r4, lr}
 800f83a:	460c      	mov	r4, r1
 800f83c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f840:	f000 f8f8 	bl	800fa34 <_read_r>
 800f844:	2800      	cmp	r0, #0
 800f846:	bfab      	itete	ge
 800f848:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f84a:	89a3      	ldrhlt	r3, [r4, #12]
 800f84c:	181b      	addge	r3, r3, r0
 800f84e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f852:	bfac      	ite	ge
 800f854:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f856:	81a3      	strhlt	r3, [r4, #12]
 800f858:	bd10      	pop	{r4, pc}

0800f85a <__swrite>:
 800f85a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f85e:	461f      	mov	r7, r3
 800f860:	898b      	ldrh	r3, [r1, #12]
 800f862:	05db      	lsls	r3, r3, #23
 800f864:	4605      	mov	r5, r0
 800f866:	460c      	mov	r4, r1
 800f868:	4616      	mov	r6, r2
 800f86a:	d505      	bpl.n	800f878 <__swrite+0x1e>
 800f86c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f870:	2302      	movs	r3, #2
 800f872:	2200      	movs	r2, #0
 800f874:	f000 f8cc 	bl	800fa10 <_lseek_r>
 800f878:	89a3      	ldrh	r3, [r4, #12]
 800f87a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f87e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f882:	81a3      	strh	r3, [r4, #12]
 800f884:	4632      	mov	r2, r6
 800f886:	463b      	mov	r3, r7
 800f888:	4628      	mov	r0, r5
 800f88a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f88e:	f000 b8e3 	b.w	800fa58 <_write_r>

0800f892 <__sseek>:
 800f892:	b510      	push	{r4, lr}
 800f894:	460c      	mov	r4, r1
 800f896:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f89a:	f000 f8b9 	bl	800fa10 <_lseek_r>
 800f89e:	1c43      	adds	r3, r0, #1
 800f8a0:	89a3      	ldrh	r3, [r4, #12]
 800f8a2:	bf15      	itete	ne
 800f8a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f8a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f8aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f8ae:	81a3      	strheq	r3, [r4, #12]
 800f8b0:	bf18      	it	ne
 800f8b2:	81a3      	strhne	r3, [r4, #12]
 800f8b4:	bd10      	pop	{r4, pc}

0800f8b6 <__sclose>:
 800f8b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f8ba:	f000 b843 	b.w	800f944 <_close_r>

0800f8be <memset>:
 800f8be:	4402      	add	r2, r0
 800f8c0:	4603      	mov	r3, r0
 800f8c2:	4293      	cmp	r3, r2
 800f8c4:	d100      	bne.n	800f8c8 <memset+0xa>
 800f8c6:	4770      	bx	lr
 800f8c8:	f803 1b01 	strb.w	r1, [r3], #1
 800f8cc:	e7f9      	b.n	800f8c2 <memset+0x4>

0800f8ce <strchr>:
 800f8ce:	b2c9      	uxtb	r1, r1
 800f8d0:	4603      	mov	r3, r0
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f8d8:	b112      	cbz	r2, 800f8e0 <strchr+0x12>
 800f8da:	428a      	cmp	r2, r1
 800f8dc:	d1f9      	bne.n	800f8d2 <strchr+0x4>
 800f8de:	4770      	bx	lr
 800f8e0:	2900      	cmp	r1, #0
 800f8e2:	bf18      	it	ne
 800f8e4:	2000      	movne	r0, #0
 800f8e6:	4770      	bx	lr

0800f8e8 <strncpy>:
 800f8e8:	b510      	push	{r4, lr}
 800f8ea:	3901      	subs	r1, #1
 800f8ec:	4603      	mov	r3, r0
 800f8ee:	b132      	cbz	r2, 800f8fe <strncpy+0x16>
 800f8f0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f8f4:	f803 4b01 	strb.w	r4, [r3], #1
 800f8f8:	3a01      	subs	r2, #1
 800f8fa:	2c00      	cmp	r4, #0
 800f8fc:	d1f7      	bne.n	800f8ee <strncpy+0x6>
 800f8fe:	441a      	add	r2, r3
 800f900:	2100      	movs	r1, #0
 800f902:	4293      	cmp	r3, r2
 800f904:	d100      	bne.n	800f908 <strncpy+0x20>
 800f906:	bd10      	pop	{r4, pc}
 800f908:	f803 1b01 	strb.w	r1, [r3], #1
 800f90c:	e7f9      	b.n	800f902 <strncpy+0x1a>

0800f90e <strstr>:
 800f90e:	780a      	ldrb	r2, [r1, #0]
 800f910:	b570      	push	{r4, r5, r6, lr}
 800f912:	b96a      	cbnz	r2, 800f930 <strstr+0x22>
 800f914:	bd70      	pop	{r4, r5, r6, pc}
 800f916:	429a      	cmp	r2, r3
 800f918:	d109      	bne.n	800f92e <strstr+0x20>
 800f91a:	460c      	mov	r4, r1
 800f91c:	4605      	mov	r5, r0
 800f91e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800f922:	2b00      	cmp	r3, #0
 800f924:	d0f6      	beq.n	800f914 <strstr+0x6>
 800f926:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800f92a:	429e      	cmp	r6, r3
 800f92c:	d0f7      	beq.n	800f91e <strstr+0x10>
 800f92e:	3001      	adds	r0, #1
 800f930:	7803      	ldrb	r3, [r0, #0]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d1ef      	bne.n	800f916 <strstr+0x8>
 800f936:	4618      	mov	r0, r3
 800f938:	e7ec      	b.n	800f914 <strstr+0x6>
	...

0800f93c <_localeconv_r>:
 800f93c:	4800      	ldr	r0, [pc, #0]	@ (800f940 <_localeconv_r+0x4>)
 800f93e:	4770      	bx	lr
 800f940:	200001b4 	.word	0x200001b4

0800f944 <_close_r>:
 800f944:	b538      	push	{r3, r4, r5, lr}
 800f946:	4d06      	ldr	r5, [pc, #24]	@ (800f960 <_close_r+0x1c>)
 800f948:	2300      	movs	r3, #0
 800f94a:	4604      	mov	r4, r0
 800f94c:	4608      	mov	r0, r1
 800f94e:	602b      	str	r3, [r5, #0]
 800f950:	f7f6 ffb2 	bl	80068b8 <_close>
 800f954:	1c43      	adds	r3, r0, #1
 800f956:	d102      	bne.n	800f95e <_close_r+0x1a>
 800f958:	682b      	ldr	r3, [r5, #0]
 800f95a:	b103      	cbz	r3, 800f95e <_close_r+0x1a>
 800f95c:	6023      	str	r3, [r4, #0]
 800f95e:	bd38      	pop	{r3, r4, r5, pc}
 800f960:	2000e394 	.word	0x2000e394

0800f964 <_reclaim_reent>:
 800f964:	4b29      	ldr	r3, [pc, #164]	@ (800fa0c <_reclaim_reent+0xa8>)
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	4283      	cmp	r3, r0
 800f96a:	b570      	push	{r4, r5, r6, lr}
 800f96c:	4604      	mov	r4, r0
 800f96e:	d04b      	beq.n	800fa08 <_reclaim_reent+0xa4>
 800f970:	69c3      	ldr	r3, [r0, #28]
 800f972:	b1ab      	cbz	r3, 800f9a0 <_reclaim_reent+0x3c>
 800f974:	68db      	ldr	r3, [r3, #12]
 800f976:	b16b      	cbz	r3, 800f994 <_reclaim_reent+0x30>
 800f978:	2500      	movs	r5, #0
 800f97a:	69e3      	ldr	r3, [r4, #28]
 800f97c:	68db      	ldr	r3, [r3, #12]
 800f97e:	5959      	ldr	r1, [r3, r5]
 800f980:	2900      	cmp	r1, #0
 800f982:	d13b      	bne.n	800f9fc <_reclaim_reent+0x98>
 800f984:	3504      	adds	r5, #4
 800f986:	2d80      	cmp	r5, #128	@ 0x80
 800f988:	d1f7      	bne.n	800f97a <_reclaim_reent+0x16>
 800f98a:	69e3      	ldr	r3, [r4, #28]
 800f98c:	4620      	mov	r0, r4
 800f98e:	68d9      	ldr	r1, [r3, #12]
 800f990:	f000 ff22 	bl	80107d8 <_free_r>
 800f994:	69e3      	ldr	r3, [r4, #28]
 800f996:	6819      	ldr	r1, [r3, #0]
 800f998:	b111      	cbz	r1, 800f9a0 <_reclaim_reent+0x3c>
 800f99a:	4620      	mov	r0, r4
 800f99c:	f000 ff1c 	bl	80107d8 <_free_r>
 800f9a0:	6961      	ldr	r1, [r4, #20]
 800f9a2:	b111      	cbz	r1, 800f9aa <_reclaim_reent+0x46>
 800f9a4:	4620      	mov	r0, r4
 800f9a6:	f000 ff17 	bl	80107d8 <_free_r>
 800f9aa:	69e1      	ldr	r1, [r4, #28]
 800f9ac:	b111      	cbz	r1, 800f9b4 <_reclaim_reent+0x50>
 800f9ae:	4620      	mov	r0, r4
 800f9b0:	f000 ff12 	bl	80107d8 <_free_r>
 800f9b4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800f9b6:	b111      	cbz	r1, 800f9be <_reclaim_reent+0x5a>
 800f9b8:	4620      	mov	r0, r4
 800f9ba:	f000 ff0d 	bl	80107d8 <_free_r>
 800f9be:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f9c0:	b111      	cbz	r1, 800f9c8 <_reclaim_reent+0x64>
 800f9c2:	4620      	mov	r0, r4
 800f9c4:	f000 ff08 	bl	80107d8 <_free_r>
 800f9c8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800f9ca:	b111      	cbz	r1, 800f9d2 <_reclaim_reent+0x6e>
 800f9cc:	4620      	mov	r0, r4
 800f9ce:	f000 ff03 	bl	80107d8 <_free_r>
 800f9d2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800f9d4:	b111      	cbz	r1, 800f9dc <_reclaim_reent+0x78>
 800f9d6:	4620      	mov	r0, r4
 800f9d8:	f000 fefe 	bl	80107d8 <_free_r>
 800f9dc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800f9de:	b111      	cbz	r1, 800f9e6 <_reclaim_reent+0x82>
 800f9e0:	4620      	mov	r0, r4
 800f9e2:	f000 fef9 	bl	80107d8 <_free_r>
 800f9e6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800f9e8:	b111      	cbz	r1, 800f9f0 <_reclaim_reent+0x8c>
 800f9ea:	4620      	mov	r0, r4
 800f9ec:	f000 fef4 	bl	80107d8 <_free_r>
 800f9f0:	6a23      	ldr	r3, [r4, #32]
 800f9f2:	b14b      	cbz	r3, 800fa08 <_reclaim_reent+0xa4>
 800f9f4:	4620      	mov	r0, r4
 800f9f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f9fa:	4718      	bx	r3
 800f9fc:	680e      	ldr	r6, [r1, #0]
 800f9fe:	4620      	mov	r0, r4
 800fa00:	f000 feea 	bl	80107d8 <_free_r>
 800fa04:	4631      	mov	r1, r6
 800fa06:	e7bb      	b.n	800f980 <_reclaim_reent+0x1c>
 800fa08:	bd70      	pop	{r4, r5, r6, pc}
 800fa0a:	bf00      	nop
 800fa0c:	20000074 	.word	0x20000074

0800fa10 <_lseek_r>:
 800fa10:	b538      	push	{r3, r4, r5, lr}
 800fa12:	4d07      	ldr	r5, [pc, #28]	@ (800fa30 <_lseek_r+0x20>)
 800fa14:	4604      	mov	r4, r0
 800fa16:	4608      	mov	r0, r1
 800fa18:	4611      	mov	r1, r2
 800fa1a:	2200      	movs	r2, #0
 800fa1c:	602a      	str	r2, [r5, #0]
 800fa1e:	461a      	mov	r2, r3
 800fa20:	f7f6 ff71 	bl	8006906 <_lseek>
 800fa24:	1c43      	adds	r3, r0, #1
 800fa26:	d102      	bne.n	800fa2e <_lseek_r+0x1e>
 800fa28:	682b      	ldr	r3, [r5, #0]
 800fa2a:	b103      	cbz	r3, 800fa2e <_lseek_r+0x1e>
 800fa2c:	6023      	str	r3, [r4, #0]
 800fa2e:	bd38      	pop	{r3, r4, r5, pc}
 800fa30:	2000e394 	.word	0x2000e394

0800fa34 <_read_r>:
 800fa34:	b538      	push	{r3, r4, r5, lr}
 800fa36:	4d07      	ldr	r5, [pc, #28]	@ (800fa54 <_read_r+0x20>)
 800fa38:	4604      	mov	r4, r0
 800fa3a:	4608      	mov	r0, r1
 800fa3c:	4611      	mov	r1, r2
 800fa3e:	2200      	movs	r2, #0
 800fa40:	602a      	str	r2, [r5, #0]
 800fa42:	461a      	mov	r2, r3
 800fa44:	f7f6 feff 	bl	8006846 <_read>
 800fa48:	1c43      	adds	r3, r0, #1
 800fa4a:	d102      	bne.n	800fa52 <_read_r+0x1e>
 800fa4c:	682b      	ldr	r3, [r5, #0]
 800fa4e:	b103      	cbz	r3, 800fa52 <_read_r+0x1e>
 800fa50:	6023      	str	r3, [r4, #0]
 800fa52:	bd38      	pop	{r3, r4, r5, pc}
 800fa54:	2000e394 	.word	0x2000e394

0800fa58 <_write_r>:
 800fa58:	b538      	push	{r3, r4, r5, lr}
 800fa5a:	4d07      	ldr	r5, [pc, #28]	@ (800fa78 <_write_r+0x20>)
 800fa5c:	4604      	mov	r4, r0
 800fa5e:	4608      	mov	r0, r1
 800fa60:	4611      	mov	r1, r2
 800fa62:	2200      	movs	r2, #0
 800fa64:	602a      	str	r2, [r5, #0]
 800fa66:	461a      	mov	r2, r3
 800fa68:	f7f6 ff0a 	bl	8006880 <_write>
 800fa6c:	1c43      	adds	r3, r0, #1
 800fa6e:	d102      	bne.n	800fa76 <_write_r+0x1e>
 800fa70:	682b      	ldr	r3, [r5, #0]
 800fa72:	b103      	cbz	r3, 800fa76 <_write_r+0x1e>
 800fa74:	6023      	str	r3, [r4, #0]
 800fa76:	bd38      	pop	{r3, r4, r5, pc}
 800fa78:	2000e394 	.word	0x2000e394

0800fa7c <__errno>:
 800fa7c:	4b01      	ldr	r3, [pc, #4]	@ (800fa84 <__errno+0x8>)
 800fa7e:	6818      	ldr	r0, [r3, #0]
 800fa80:	4770      	bx	lr
 800fa82:	bf00      	nop
 800fa84:	20000074 	.word	0x20000074

0800fa88 <__libc_init_array>:
 800fa88:	b570      	push	{r4, r5, r6, lr}
 800fa8a:	4d0d      	ldr	r5, [pc, #52]	@ (800fac0 <__libc_init_array+0x38>)
 800fa8c:	4c0d      	ldr	r4, [pc, #52]	@ (800fac4 <__libc_init_array+0x3c>)
 800fa8e:	1b64      	subs	r4, r4, r5
 800fa90:	10a4      	asrs	r4, r4, #2
 800fa92:	2600      	movs	r6, #0
 800fa94:	42a6      	cmp	r6, r4
 800fa96:	d109      	bne.n	800faac <__libc_init_array+0x24>
 800fa98:	4d0b      	ldr	r5, [pc, #44]	@ (800fac8 <__libc_init_array+0x40>)
 800fa9a:	4c0c      	ldr	r4, [pc, #48]	@ (800facc <__libc_init_array+0x44>)
 800fa9c:	f002 f86c 	bl	8011b78 <_init>
 800faa0:	1b64      	subs	r4, r4, r5
 800faa2:	10a4      	asrs	r4, r4, #2
 800faa4:	2600      	movs	r6, #0
 800faa6:	42a6      	cmp	r6, r4
 800faa8:	d105      	bne.n	800fab6 <__libc_init_array+0x2e>
 800faaa:	bd70      	pop	{r4, r5, r6, pc}
 800faac:	f855 3b04 	ldr.w	r3, [r5], #4
 800fab0:	4798      	blx	r3
 800fab2:	3601      	adds	r6, #1
 800fab4:	e7ee      	b.n	800fa94 <__libc_init_array+0xc>
 800fab6:	f855 3b04 	ldr.w	r3, [r5], #4
 800faba:	4798      	blx	r3
 800fabc:	3601      	adds	r6, #1
 800fabe:	e7f2      	b.n	800faa6 <__libc_init_array+0x1e>
 800fac0:	0801284c 	.word	0x0801284c
 800fac4:	0801284c 	.word	0x0801284c
 800fac8:	0801284c 	.word	0x0801284c
 800facc:	08012860 	.word	0x08012860

0800fad0 <__retarget_lock_init_recursive>:
 800fad0:	4770      	bx	lr

0800fad2 <__retarget_lock_acquire_recursive>:
 800fad2:	4770      	bx	lr

0800fad4 <__retarget_lock_release_recursive>:
 800fad4:	4770      	bx	lr

0800fad6 <strcpy>:
 800fad6:	4603      	mov	r3, r0
 800fad8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fadc:	f803 2b01 	strb.w	r2, [r3], #1
 800fae0:	2a00      	cmp	r2, #0
 800fae2:	d1f9      	bne.n	800fad8 <strcpy+0x2>
 800fae4:	4770      	bx	lr

0800fae6 <memcpy>:
 800fae6:	440a      	add	r2, r1
 800fae8:	4291      	cmp	r1, r2
 800faea:	f100 33ff 	add.w	r3, r0, #4294967295
 800faee:	d100      	bne.n	800faf2 <memcpy+0xc>
 800faf0:	4770      	bx	lr
 800faf2:	b510      	push	{r4, lr}
 800faf4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800faf8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fafc:	4291      	cmp	r1, r2
 800fafe:	d1f9      	bne.n	800faf4 <memcpy+0xe>
 800fb00:	bd10      	pop	{r4, pc}
	...

0800fb04 <__assert_func>:
 800fb04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fb06:	4614      	mov	r4, r2
 800fb08:	461a      	mov	r2, r3
 800fb0a:	4b09      	ldr	r3, [pc, #36]	@ (800fb30 <__assert_func+0x2c>)
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	4605      	mov	r5, r0
 800fb10:	68d8      	ldr	r0, [r3, #12]
 800fb12:	b954      	cbnz	r4, 800fb2a <__assert_func+0x26>
 800fb14:	4b07      	ldr	r3, [pc, #28]	@ (800fb34 <__assert_func+0x30>)
 800fb16:	461c      	mov	r4, r3
 800fb18:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fb1c:	9100      	str	r1, [sp, #0]
 800fb1e:	462b      	mov	r3, r5
 800fb20:	4905      	ldr	r1, [pc, #20]	@ (800fb38 <__assert_func+0x34>)
 800fb22:	f001 fcdf 	bl	80114e4 <fiprintf>
 800fb26:	f001 fd19 	bl	801155c <abort>
 800fb2a:	4b04      	ldr	r3, [pc, #16]	@ (800fb3c <__assert_func+0x38>)
 800fb2c:	e7f4      	b.n	800fb18 <__assert_func+0x14>
 800fb2e:	bf00      	nop
 800fb30:	20000074 	.word	0x20000074
 800fb34:	08012644 	.word	0x08012644
 800fb38:	08012616 	.word	0x08012616
 800fb3c:	08012609 	.word	0x08012609

0800fb40 <quorem>:
 800fb40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb44:	6903      	ldr	r3, [r0, #16]
 800fb46:	690c      	ldr	r4, [r1, #16]
 800fb48:	42a3      	cmp	r3, r4
 800fb4a:	4607      	mov	r7, r0
 800fb4c:	db7e      	blt.n	800fc4c <quorem+0x10c>
 800fb4e:	3c01      	subs	r4, #1
 800fb50:	f101 0814 	add.w	r8, r1, #20
 800fb54:	00a3      	lsls	r3, r4, #2
 800fb56:	f100 0514 	add.w	r5, r0, #20
 800fb5a:	9300      	str	r3, [sp, #0]
 800fb5c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fb60:	9301      	str	r3, [sp, #4]
 800fb62:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fb66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fb6a:	3301      	adds	r3, #1
 800fb6c:	429a      	cmp	r2, r3
 800fb6e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fb72:	fbb2 f6f3 	udiv	r6, r2, r3
 800fb76:	d32e      	bcc.n	800fbd6 <quorem+0x96>
 800fb78:	f04f 0a00 	mov.w	sl, #0
 800fb7c:	46c4      	mov	ip, r8
 800fb7e:	46ae      	mov	lr, r5
 800fb80:	46d3      	mov	fp, sl
 800fb82:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fb86:	b298      	uxth	r0, r3
 800fb88:	fb06 a000 	mla	r0, r6, r0, sl
 800fb8c:	0c02      	lsrs	r2, r0, #16
 800fb8e:	0c1b      	lsrs	r3, r3, #16
 800fb90:	fb06 2303 	mla	r3, r6, r3, r2
 800fb94:	f8de 2000 	ldr.w	r2, [lr]
 800fb98:	b280      	uxth	r0, r0
 800fb9a:	b292      	uxth	r2, r2
 800fb9c:	1a12      	subs	r2, r2, r0
 800fb9e:	445a      	add	r2, fp
 800fba0:	f8de 0000 	ldr.w	r0, [lr]
 800fba4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fba8:	b29b      	uxth	r3, r3
 800fbaa:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800fbae:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800fbb2:	b292      	uxth	r2, r2
 800fbb4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800fbb8:	45e1      	cmp	r9, ip
 800fbba:	f84e 2b04 	str.w	r2, [lr], #4
 800fbbe:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800fbc2:	d2de      	bcs.n	800fb82 <quorem+0x42>
 800fbc4:	9b00      	ldr	r3, [sp, #0]
 800fbc6:	58eb      	ldr	r3, [r5, r3]
 800fbc8:	b92b      	cbnz	r3, 800fbd6 <quorem+0x96>
 800fbca:	9b01      	ldr	r3, [sp, #4]
 800fbcc:	3b04      	subs	r3, #4
 800fbce:	429d      	cmp	r5, r3
 800fbd0:	461a      	mov	r2, r3
 800fbd2:	d32f      	bcc.n	800fc34 <quorem+0xf4>
 800fbd4:	613c      	str	r4, [r7, #16]
 800fbd6:	4638      	mov	r0, r7
 800fbd8:	f001 f978 	bl	8010ecc <__mcmp>
 800fbdc:	2800      	cmp	r0, #0
 800fbde:	db25      	blt.n	800fc2c <quorem+0xec>
 800fbe0:	4629      	mov	r1, r5
 800fbe2:	2000      	movs	r0, #0
 800fbe4:	f858 2b04 	ldr.w	r2, [r8], #4
 800fbe8:	f8d1 c000 	ldr.w	ip, [r1]
 800fbec:	fa1f fe82 	uxth.w	lr, r2
 800fbf0:	fa1f f38c 	uxth.w	r3, ip
 800fbf4:	eba3 030e 	sub.w	r3, r3, lr
 800fbf8:	4403      	add	r3, r0
 800fbfa:	0c12      	lsrs	r2, r2, #16
 800fbfc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800fc00:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800fc04:	b29b      	uxth	r3, r3
 800fc06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fc0a:	45c1      	cmp	r9, r8
 800fc0c:	f841 3b04 	str.w	r3, [r1], #4
 800fc10:	ea4f 4022 	mov.w	r0, r2, asr #16
 800fc14:	d2e6      	bcs.n	800fbe4 <quorem+0xa4>
 800fc16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fc1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fc1e:	b922      	cbnz	r2, 800fc2a <quorem+0xea>
 800fc20:	3b04      	subs	r3, #4
 800fc22:	429d      	cmp	r5, r3
 800fc24:	461a      	mov	r2, r3
 800fc26:	d30b      	bcc.n	800fc40 <quorem+0x100>
 800fc28:	613c      	str	r4, [r7, #16]
 800fc2a:	3601      	adds	r6, #1
 800fc2c:	4630      	mov	r0, r6
 800fc2e:	b003      	add	sp, #12
 800fc30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc34:	6812      	ldr	r2, [r2, #0]
 800fc36:	3b04      	subs	r3, #4
 800fc38:	2a00      	cmp	r2, #0
 800fc3a:	d1cb      	bne.n	800fbd4 <quorem+0x94>
 800fc3c:	3c01      	subs	r4, #1
 800fc3e:	e7c6      	b.n	800fbce <quorem+0x8e>
 800fc40:	6812      	ldr	r2, [r2, #0]
 800fc42:	3b04      	subs	r3, #4
 800fc44:	2a00      	cmp	r2, #0
 800fc46:	d1ef      	bne.n	800fc28 <quorem+0xe8>
 800fc48:	3c01      	subs	r4, #1
 800fc4a:	e7ea      	b.n	800fc22 <quorem+0xe2>
 800fc4c:	2000      	movs	r0, #0
 800fc4e:	e7ee      	b.n	800fc2e <quorem+0xee>

0800fc50 <_dtoa_r>:
 800fc50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc54:	69c7      	ldr	r7, [r0, #28]
 800fc56:	b099      	sub	sp, #100	@ 0x64
 800fc58:	ed8d 0b02 	vstr	d0, [sp, #8]
 800fc5c:	ec55 4b10 	vmov	r4, r5, d0
 800fc60:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800fc62:	9109      	str	r1, [sp, #36]	@ 0x24
 800fc64:	4683      	mov	fp, r0
 800fc66:	920e      	str	r2, [sp, #56]	@ 0x38
 800fc68:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fc6a:	b97f      	cbnz	r7, 800fc8c <_dtoa_r+0x3c>
 800fc6c:	2010      	movs	r0, #16
 800fc6e:	f000 fdfd 	bl	801086c <malloc>
 800fc72:	4602      	mov	r2, r0
 800fc74:	f8cb 001c 	str.w	r0, [fp, #28]
 800fc78:	b920      	cbnz	r0, 800fc84 <_dtoa_r+0x34>
 800fc7a:	4ba7      	ldr	r3, [pc, #668]	@ (800ff18 <_dtoa_r+0x2c8>)
 800fc7c:	21ef      	movs	r1, #239	@ 0xef
 800fc7e:	48a7      	ldr	r0, [pc, #668]	@ (800ff1c <_dtoa_r+0x2cc>)
 800fc80:	f7ff ff40 	bl	800fb04 <__assert_func>
 800fc84:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800fc88:	6007      	str	r7, [r0, #0]
 800fc8a:	60c7      	str	r7, [r0, #12]
 800fc8c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fc90:	6819      	ldr	r1, [r3, #0]
 800fc92:	b159      	cbz	r1, 800fcac <_dtoa_r+0x5c>
 800fc94:	685a      	ldr	r2, [r3, #4]
 800fc96:	604a      	str	r2, [r1, #4]
 800fc98:	2301      	movs	r3, #1
 800fc9a:	4093      	lsls	r3, r2
 800fc9c:	608b      	str	r3, [r1, #8]
 800fc9e:	4658      	mov	r0, fp
 800fca0:	f000 feda 	bl	8010a58 <_Bfree>
 800fca4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fca8:	2200      	movs	r2, #0
 800fcaa:	601a      	str	r2, [r3, #0]
 800fcac:	1e2b      	subs	r3, r5, #0
 800fcae:	bfb9      	ittee	lt
 800fcb0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800fcb4:	9303      	strlt	r3, [sp, #12]
 800fcb6:	2300      	movge	r3, #0
 800fcb8:	6033      	strge	r3, [r6, #0]
 800fcba:	9f03      	ldr	r7, [sp, #12]
 800fcbc:	4b98      	ldr	r3, [pc, #608]	@ (800ff20 <_dtoa_r+0x2d0>)
 800fcbe:	bfbc      	itt	lt
 800fcc0:	2201      	movlt	r2, #1
 800fcc2:	6032      	strlt	r2, [r6, #0]
 800fcc4:	43bb      	bics	r3, r7
 800fcc6:	d112      	bne.n	800fcee <_dtoa_r+0x9e>
 800fcc8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800fcca:	f242 730f 	movw	r3, #9999	@ 0x270f
 800fcce:	6013      	str	r3, [r2, #0]
 800fcd0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fcd4:	4323      	orrs	r3, r4
 800fcd6:	f000 854d 	beq.w	8010774 <_dtoa_r+0xb24>
 800fcda:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fcdc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800ff34 <_dtoa_r+0x2e4>
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	f000 854f 	beq.w	8010784 <_dtoa_r+0xb34>
 800fce6:	f10a 0303 	add.w	r3, sl, #3
 800fcea:	f000 bd49 	b.w	8010780 <_dtoa_r+0xb30>
 800fcee:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fcf2:	2200      	movs	r2, #0
 800fcf4:	ec51 0b17 	vmov	r0, r1, d7
 800fcf8:	2300      	movs	r3, #0
 800fcfa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800fcfe:	f7f0 fee3 	bl	8000ac8 <__aeabi_dcmpeq>
 800fd02:	4680      	mov	r8, r0
 800fd04:	b158      	cbz	r0, 800fd1e <_dtoa_r+0xce>
 800fd06:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800fd08:	2301      	movs	r3, #1
 800fd0a:	6013      	str	r3, [r2, #0]
 800fd0c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fd0e:	b113      	cbz	r3, 800fd16 <_dtoa_r+0xc6>
 800fd10:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800fd12:	4b84      	ldr	r3, [pc, #528]	@ (800ff24 <_dtoa_r+0x2d4>)
 800fd14:	6013      	str	r3, [r2, #0]
 800fd16:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800ff38 <_dtoa_r+0x2e8>
 800fd1a:	f000 bd33 	b.w	8010784 <_dtoa_r+0xb34>
 800fd1e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800fd22:	aa16      	add	r2, sp, #88	@ 0x58
 800fd24:	a917      	add	r1, sp, #92	@ 0x5c
 800fd26:	4658      	mov	r0, fp
 800fd28:	f001 f980 	bl	801102c <__d2b>
 800fd2c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800fd30:	4681      	mov	r9, r0
 800fd32:	2e00      	cmp	r6, #0
 800fd34:	d077      	beq.n	800fe26 <_dtoa_r+0x1d6>
 800fd36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fd38:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800fd3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fd40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fd44:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800fd48:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800fd4c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800fd50:	4619      	mov	r1, r3
 800fd52:	2200      	movs	r2, #0
 800fd54:	4b74      	ldr	r3, [pc, #464]	@ (800ff28 <_dtoa_r+0x2d8>)
 800fd56:	f7f0 fa97 	bl	8000288 <__aeabi_dsub>
 800fd5a:	a369      	add	r3, pc, #420	@ (adr r3, 800ff00 <_dtoa_r+0x2b0>)
 800fd5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd60:	f7f0 fc4a 	bl	80005f8 <__aeabi_dmul>
 800fd64:	a368      	add	r3, pc, #416	@ (adr r3, 800ff08 <_dtoa_r+0x2b8>)
 800fd66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd6a:	f7f0 fa8f 	bl	800028c <__adddf3>
 800fd6e:	4604      	mov	r4, r0
 800fd70:	4630      	mov	r0, r6
 800fd72:	460d      	mov	r5, r1
 800fd74:	f7f0 fbd6 	bl	8000524 <__aeabi_i2d>
 800fd78:	a365      	add	r3, pc, #404	@ (adr r3, 800ff10 <_dtoa_r+0x2c0>)
 800fd7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd7e:	f7f0 fc3b 	bl	80005f8 <__aeabi_dmul>
 800fd82:	4602      	mov	r2, r0
 800fd84:	460b      	mov	r3, r1
 800fd86:	4620      	mov	r0, r4
 800fd88:	4629      	mov	r1, r5
 800fd8a:	f7f0 fa7f 	bl	800028c <__adddf3>
 800fd8e:	4604      	mov	r4, r0
 800fd90:	460d      	mov	r5, r1
 800fd92:	f7f0 fee1 	bl	8000b58 <__aeabi_d2iz>
 800fd96:	2200      	movs	r2, #0
 800fd98:	4607      	mov	r7, r0
 800fd9a:	2300      	movs	r3, #0
 800fd9c:	4620      	mov	r0, r4
 800fd9e:	4629      	mov	r1, r5
 800fda0:	f7f0 fe9c 	bl	8000adc <__aeabi_dcmplt>
 800fda4:	b140      	cbz	r0, 800fdb8 <_dtoa_r+0x168>
 800fda6:	4638      	mov	r0, r7
 800fda8:	f7f0 fbbc 	bl	8000524 <__aeabi_i2d>
 800fdac:	4622      	mov	r2, r4
 800fdae:	462b      	mov	r3, r5
 800fdb0:	f7f0 fe8a 	bl	8000ac8 <__aeabi_dcmpeq>
 800fdb4:	b900      	cbnz	r0, 800fdb8 <_dtoa_r+0x168>
 800fdb6:	3f01      	subs	r7, #1
 800fdb8:	2f16      	cmp	r7, #22
 800fdba:	d851      	bhi.n	800fe60 <_dtoa_r+0x210>
 800fdbc:	4b5b      	ldr	r3, [pc, #364]	@ (800ff2c <_dtoa_r+0x2dc>)
 800fdbe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fdc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdc6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fdca:	f7f0 fe87 	bl	8000adc <__aeabi_dcmplt>
 800fdce:	2800      	cmp	r0, #0
 800fdd0:	d048      	beq.n	800fe64 <_dtoa_r+0x214>
 800fdd2:	3f01      	subs	r7, #1
 800fdd4:	2300      	movs	r3, #0
 800fdd6:	9312      	str	r3, [sp, #72]	@ 0x48
 800fdd8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800fdda:	1b9b      	subs	r3, r3, r6
 800fddc:	1e5a      	subs	r2, r3, #1
 800fdde:	bf44      	itt	mi
 800fde0:	f1c3 0801 	rsbmi	r8, r3, #1
 800fde4:	2300      	movmi	r3, #0
 800fde6:	9208      	str	r2, [sp, #32]
 800fde8:	bf54      	ite	pl
 800fdea:	f04f 0800 	movpl.w	r8, #0
 800fdee:	9308      	strmi	r3, [sp, #32]
 800fdf0:	2f00      	cmp	r7, #0
 800fdf2:	db39      	blt.n	800fe68 <_dtoa_r+0x218>
 800fdf4:	9b08      	ldr	r3, [sp, #32]
 800fdf6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800fdf8:	443b      	add	r3, r7
 800fdfa:	9308      	str	r3, [sp, #32]
 800fdfc:	2300      	movs	r3, #0
 800fdfe:	930a      	str	r3, [sp, #40]	@ 0x28
 800fe00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe02:	2b09      	cmp	r3, #9
 800fe04:	d864      	bhi.n	800fed0 <_dtoa_r+0x280>
 800fe06:	2b05      	cmp	r3, #5
 800fe08:	bfc4      	itt	gt
 800fe0a:	3b04      	subgt	r3, #4
 800fe0c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800fe0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe10:	f1a3 0302 	sub.w	r3, r3, #2
 800fe14:	bfcc      	ite	gt
 800fe16:	2400      	movgt	r4, #0
 800fe18:	2401      	movle	r4, #1
 800fe1a:	2b03      	cmp	r3, #3
 800fe1c:	d863      	bhi.n	800fee6 <_dtoa_r+0x296>
 800fe1e:	e8df f003 	tbb	[pc, r3]
 800fe22:	372a      	.short	0x372a
 800fe24:	5535      	.short	0x5535
 800fe26:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800fe2a:	441e      	add	r6, r3
 800fe2c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800fe30:	2b20      	cmp	r3, #32
 800fe32:	bfc1      	itttt	gt
 800fe34:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800fe38:	409f      	lslgt	r7, r3
 800fe3a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800fe3e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800fe42:	bfd6      	itet	le
 800fe44:	f1c3 0320 	rsble	r3, r3, #32
 800fe48:	ea47 0003 	orrgt.w	r0, r7, r3
 800fe4c:	fa04 f003 	lslle.w	r0, r4, r3
 800fe50:	f7f0 fb58 	bl	8000504 <__aeabi_ui2d>
 800fe54:	2201      	movs	r2, #1
 800fe56:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800fe5a:	3e01      	subs	r6, #1
 800fe5c:	9214      	str	r2, [sp, #80]	@ 0x50
 800fe5e:	e777      	b.n	800fd50 <_dtoa_r+0x100>
 800fe60:	2301      	movs	r3, #1
 800fe62:	e7b8      	b.n	800fdd6 <_dtoa_r+0x186>
 800fe64:	9012      	str	r0, [sp, #72]	@ 0x48
 800fe66:	e7b7      	b.n	800fdd8 <_dtoa_r+0x188>
 800fe68:	427b      	negs	r3, r7
 800fe6a:	930a      	str	r3, [sp, #40]	@ 0x28
 800fe6c:	2300      	movs	r3, #0
 800fe6e:	eba8 0807 	sub.w	r8, r8, r7
 800fe72:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fe74:	e7c4      	b.n	800fe00 <_dtoa_r+0x1b0>
 800fe76:	2300      	movs	r3, #0
 800fe78:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fe7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	dc35      	bgt.n	800feec <_dtoa_r+0x29c>
 800fe80:	2301      	movs	r3, #1
 800fe82:	9300      	str	r3, [sp, #0]
 800fe84:	9307      	str	r3, [sp, #28]
 800fe86:	461a      	mov	r2, r3
 800fe88:	920e      	str	r2, [sp, #56]	@ 0x38
 800fe8a:	e00b      	b.n	800fea4 <_dtoa_r+0x254>
 800fe8c:	2301      	movs	r3, #1
 800fe8e:	e7f3      	b.n	800fe78 <_dtoa_r+0x228>
 800fe90:	2300      	movs	r3, #0
 800fe92:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fe94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fe96:	18fb      	adds	r3, r7, r3
 800fe98:	9300      	str	r3, [sp, #0]
 800fe9a:	3301      	adds	r3, #1
 800fe9c:	2b01      	cmp	r3, #1
 800fe9e:	9307      	str	r3, [sp, #28]
 800fea0:	bfb8      	it	lt
 800fea2:	2301      	movlt	r3, #1
 800fea4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800fea8:	2100      	movs	r1, #0
 800feaa:	2204      	movs	r2, #4
 800feac:	f102 0514 	add.w	r5, r2, #20
 800feb0:	429d      	cmp	r5, r3
 800feb2:	d91f      	bls.n	800fef4 <_dtoa_r+0x2a4>
 800feb4:	6041      	str	r1, [r0, #4]
 800feb6:	4658      	mov	r0, fp
 800feb8:	f000 fd8e 	bl	80109d8 <_Balloc>
 800febc:	4682      	mov	sl, r0
 800febe:	2800      	cmp	r0, #0
 800fec0:	d13c      	bne.n	800ff3c <_dtoa_r+0x2ec>
 800fec2:	4b1b      	ldr	r3, [pc, #108]	@ (800ff30 <_dtoa_r+0x2e0>)
 800fec4:	4602      	mov	r2, r0
 800fec6:	f240 11af 	movw	r1, #431	@ 0x1af
 800feca:	e6d8      	b.n	800fc7e <_dtoa_r+0x2e>
 800fecc:	2301      	movs	r3, #1
 800fece:	e7e0      	b.n	800fe92 <_dtoa_r+0x242>
 800fed0:	2401      	movs	r4, #1
 800fed2:	2300      	movs	r3, #0
 800fed4:	9309      	str	r3, [sp, #36]	@ 0x24
 800fed6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800fed8:	f04f 33ff 	mov.w	r3, #4294967295
 800fedc:	9300      	str	r3, [sp, #0]
 800fede:	9307      	str	r3, [sp, #28]
 800fee0:	2200      	movs	r2, #0
 800fee2:	2312      	movs	r3, #18
 800fee4:	e7d0      	b.n	800fe88 <_dtoa_r+0x238>
 800fee6:	2301      	movs	r3, #1
 800fee8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800feea:	e7f5      	b.n	800fed8 <_dtoa_r+0x288>
 800feec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800feee:	9300      	str	r3, [sp, #0]
 800fef0:	9307      	str	r3, [sp, #28]
 800fef2:	e7d7      	b.n	800fea4 <_dtoa_r+0x254>
 800fef4:	3101      	adds	r1, #1
 800fef6:	0052      	lsls	r2, r2, #1
 800fef8:	e7d8      	b.n	800feac <_dtoa_r+0x25c>
 800fefa:	bf00      	nop
 800fefc:	f3af 8000 	nop.w
 800ff00:	636f4361 	.word	0x636f4361
 800ff04:	3fd287a7 	.word	0x3fd287a7
 800ff08:	8b60c8b3 	.word	0x8b60c8b3
 800ff0c:	3fc68a28 	.word	0x3fc68a28
 800ff10:	509f79fb 	.word	0x509f79fb
 800ff14:	3fd34413 	.word	0x3fd34413
 800ff18:	08012652 	.word	0x08012652
 800ff1c:	08012669 	.word	0x08012669
 800ff20:	7ff00000 	.word	0x7ff00000
 800ff24:	080125e6 	.word	0x080125e6
 800ff28:	3ff80000 	.word	0x3ff80000
 800ff2c:	08012760 	.word	0x08012760
 800ff30:	080126c1 	.word	0x080126c1
 800ff34:	0801264e 	.word	0x0801264e
 800ff38:	080125e5 	.word	0x080125e5
 800ff3c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ff40:	6018      	str	r0, [r3, #0]
 800ff42:	9b07      	ldr	r3, [sp, #28]
 800ff44:	2b0e      	cmp	r3, #14
 800ff46:	f200 80a4 	bhi.w	8010092 <_dtoa_r+0x442>
 800ff4a:	2c00      	cmp	r4, #0
 800ff4c:	f000 80a1 	beq.w	8010092 <_dtoa_r+0x442>
 800ff50:	2f00      	cmp	r7, #0
 800ff52:	dd33      	ble.n	800ffbc <_dtoa_r+0x36c>
 800ff54:	4bad      	ldr	r3, [pc, #692]	@ (801020c <_dtoa_r+0x5bc>)
 800ff56:	f007 020f 	and.w	r2, r7, #15
 800ff5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ff5e:	ed93 7b00 	vldr	d7, [r3]
 800ff62:	05f8      	lsls	r0, r7, #23
 800ff64:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ff68:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ff6c:	d516      	bpl.n	800ff9c <_dtoa_r+0x34c>
 800ff6e:	4ba8      	ldr	r3, [pc, #672]	@ (8010210 <_dtoa_r+0x5c0>)
 800ff70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ff74:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ff78:	f7f0 fc68 	bl	800084c <__aeabi_ddiv>
 800ff7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ff80:	f004 040f 	and.w	r4, r4, #15
 800ff84:	2603      	movs	r6, #3
 800ff86:	4da2      	ldr	r5, [pc, #648]	@ (8010210 <_dtoa_r+0x5c0>)
 800ff88:	b954      	cbnz	r4, 800ffa0 <_dtoa_r+0x350>
 800ff8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ff8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff92:	f7f0 fc5b 	bl	800084c <__aeabi_ddiv>
 800ff96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ff9a:	e028      	b.n	800ffee <_dtoa_r+0x39e>
 800ff9c:	2602      	movs	r6, #2
 800ff9e:	e7f2      	b.n	800ff86 <_dtoa_r+0x336>
 800ffa0:	07e1      	lsls	r1, r4, #31
 800ffa2:	d508      	bpl.n	800ffb6 <_dtoa_r+0x366>
 800ffa4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ffa8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ffac:	f7f0 fb24 	bl	80005f8 <__aeabi_dmul>
 800ffb0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ffb4:	3601      	adds	r6, #1
 800ffb6:	1064      	asrs	r4, r4, #1
 800ffb8:	3508      	adds	r5, #8
 800ffba:	e7e5      	b.n	800ff88 <_dtoa_r+0x338>
 800ffbc:	f000 80d2 	beq.w	8010164 <_dtoa_r+0x514>
 800ffc0:	427c      	negs	r4, r7
 800ffc2:	4b92      	ldr	r3, [pc, #584]	@ (801020c <_dtoa_r+0x5bc>)
 800ffc4:	4d92      	ldr	r5, [pc, #584]	@ (8010210 <_dtoa_r+0x5c0>)
 800ffc6:	f004 020f 	and.w	r2, r4, #15
 800ffca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ffce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffd2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ffd6:	f7f0 fb0f 	bl	80005f8 <__aeabi_dmul>
 800ffda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ffde:	1124      	asrs	r4, r4, #4
 800ffe0:	2300      	movs	r3, #0
 800ffe2:	2602      	movs	r6, #2
 800ffe4:	2c00      	cmp	r4, #0
 800ffe6:	f040 80b2 	bne.w	801014e <_dtoa_r+0x4fe>
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d1d3      	bne.n	800ff96 <_dtoa_r+0x346>
 800ffee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fff0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	f000 80b7 	beq.w	8010168 <_dtoa_r+0x518>
 800fffa:	4b86      	ldr	r3, [pc, #536]	@ (8010214 <_dtoa_r+0x5c4>)
 800fffc:	2200      	movs	r2, #0
 800fffe:	4620      	mov	r0, r4
 8010000:	4629      	mov	r1, r5
 8010002:	f7f0 fd6b 	bl	8000adc <__aeabi_dcmplt>
 8010006:	2800      	cmp	r0, #0
 8010008:	f000 80ae 	beq.w	8010168 <_dtoa_r+0x518>
 801000c:	9b07      	ldr	r3, [sp, #28]
 801000e:	2b00      	cmp	r3, #0
 8010010:	f000 80aa 	beq.w	8010168 <_dtoa_r+0x518>
 8010014:	9b00      	ldr	r3, [sp, #0]
 8010016:	2b00      	cmp	r3, #0
 8010018:	dd37      	ble.n	801008a <_dtoa_r+0x43a>
 801001a:	1e7b      	subs	r3, r7, #1
 801001c:	9304      	str	r3, [sp, #16]
 801001e:	4620      	mov	r0, r4
 8010020:	4b7d      	ldr	r3, [pc, #500]	@ (8010218 <_dtoa_r+0x5c8>)
 8010022:	2200      	movs	r2, #0
 8010024:	4629      	mov	r1, r5
 8010026:	f7f0 fae7 	bl	80005f8 <__aeabi_dmul>
 801002a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801002e:	9c00      	ldr	r4, [sp, #0]
 8010030:	3601      	adds	r6, #1
 8010032:	4630      	mov	r0, r6
 8010034:	f7f0 fa76 	bl	8000524 <__aeabi_i2d>
 8010038:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801003c:	f7f0 fadc 	bl	80005f8 <__aeabi_dmul>
 8010040:	4b76      	ldr	r3, [pc, #472]	@ (801021c <_dtoa_r+0x5cc>)
 8010042:	2200      	movs	r2, #0
 8010044:	f7f0 f922 	bl	800028c <__adddf3>
 8010048:	4605      	mov	r5, r0
 801004a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801004e:	2c00      	cmp	r4, #0
 8010050:	f040 808d 	bne.w	801016e <_dtoa_r+0x51e>
 8010054:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010058:	4b71      	ldr	r3, [pc, #452]	@ (8010220 <_dtoa_r+0x5d0>)
 801005a:	2200      	movs	r2, #0
 801005c:	f7f0 f914 	bl	8000288 <__aeabi_dsub>
 8010060:	4602      	mov	r2, r0
 8010062:	460b      	mov	r3, r1
 8010064:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010068:	462a      	mov	r2, r5
 801006a:	4633      	mov	r3, r6
 801006c:	f7f0 fd54 	bl	8000b18 <__aeabi_dcmpgt>
 8010070:	2800      	cmp	r0, #0
 8010072:	f040 828b 	bne.w	801058c <_dtoa_r+0x93c>
 8010076:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801007a:	462a      	mov	r2, r5
 801007c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8010080:	f7f0 fd2c 	bl	8000adc <__aeabi_dcmplt>
 8010084:	2800      	cmp	r0, #0
 8010086:	f040 8128 	bne.w	80102da <_dtoa_r+0x68a>
 801008a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801008e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8010092:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010094:	2b00      	cmp	r3, #0
 8010096:	f2c0 815a 	blt.w	801034e <_dtoa_r+0x6fe>
 801009a:	2f0e      	cmp	r7, #14
 801009c:	f300 8157 	bgt.w	801034e <_dtoa_r+0x6fe>
 80100a0:	4b5a      	ldr	r3, [pc, #360]	@ (801020c <_dtoa_r+0x5bc>)
 80100a2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80100a6:	ed93 7b00 	vldr	d7, [r3]
 80100aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	ed8d 7b00 	vstr	d7, [sp]
 80100b2:	da03      	bge.n	80100bc <_dtoa_r+0x46c>
 80100b4:	9b07      	ldr	r3, [sp, #28]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	f340 8101 	ble.w	80102be <_dtoa_r+0x66e>
 80100bc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80100c0:	4656      	mov	r6, sl
 80100c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80100c6:	4620      	mov	r0, r4
 80100c8:	4629      	mov	r1, r5
 80100ca:	f7f0 fbbf 	bl	800084c <__aeabi_ddiv>
 80100ce:	f7f0 fd43 	bl	8000b58 <__aeabi_d2iz>
 80100d2:	4680      	mov	r8, r0
 80100d4:	f7f0 fa26 	bl	8000524 <__aeabi_i2d>
 80100d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80100dc:	f7f0 fa8c 	bl	80005f8 <__aeabi_dmul>
 80100e0:	4602      	mov	r2, r0
 80100e2:	460b      	mov	r3, r1
 80100e4:	4620      	mov	r0, r4
 80100e6:	4629      	mov	r1, r5
 80100e8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80100ec:	f7f0 f8cc 	bl	8000288 <__aeabi_dsub>
 80100f0:	f806 4b01 	strb.w	r4, [r6], #1
 80100f4:	9d07      	ldr	r5, [sp, #28]
 80100f6:	eba6 040a 	sub.w	r4, r6, sl
 80100fa:	42a5      	cmp	r5, r4
 80100fc:	4602      	mov	r2, r0
 80100fe:	460b      	mov	r3, r1
 8010100:	f040 8117 	bne.w	8010332 <_dtoa_r+0x6e2>
 8010104:	f7f0 f8c2 	bl	800028c <__adddf3>
 8010108:	e9dd 2300 	ldrd	r2, r3, [sp]
 801010c:	4604      	mov	r4, r0
 801010e:	460d      	mov	r5, r1
 8010110:	f7f0 fd02 	bl	8000b18 <__aeabi_dcmpgt>
 8010114:	2800      	cmp	r0, #0
 8010116:	f040 80f9 	bne.w	801030c <_dtoa_r+0x6bc>
 801011a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801011e:	4620      	mov	r0, r4
 8010120:	4629      	mov	r1, r5
 8010122:	f7f0 fcd1 	bl	8000ac8 <__aeabi_dcmpeq>
 8010126:	b118      	cbz	r0, 8010130 <_dtoa_r+0x4e0>
 8010128:	f018 0f01 	tst.w	r8, #1
 801012c:	f040 80ee 	bne.w	801030c <_dtoa_r+0x6bc>
 8010130:	4649      	mov	r1, r9
 8010132:	4658      	mov	r0, fp
 8010134:	f000 fc90 	bl	8010a58 <_Bfree>
 8010138:	2300      	movs	r3, #0
 801013a:	7033      	strb	r3, [r6, #0]
 801013c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801013e:	3701      	adds	r7, #1
 8010140:	601f      	str	r7, [r3, #0]
 8010142:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010144:	2b00      	cmp	r3, #0
 8010146:	f000 831d 	beq.w	8010784 <_dtoa_r+0xb34>
 801014a:	601e      	str	r6, [r3, #0]
 801014c:	e31a      	b.n	8010784 <_dtoa_r+0xb34>
 801014e:	07e2      	lsls	r2, r4, #31
 8010150:	d505      	bpl.n	801015e <_dtoa_r+0x50e>
 8010152:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010156:	f7f0 fa4f 	bl	80005f8 <__aeabi_dmul>
 801015a:	3601      	adds	r6, #1
 801015c:	2301      	movs	r3, #1
 801015e:	1064      	asrs	r4, r4, #1
 8010160:	3508      	adds	r5, #8
 8010162:	e73f      	b.n	800ffe4 <_dtoa_r+0x394>
 8010164:	2602      	movs	r6, #2
 8010166:	e742      	b.n	800ffee <_dtoa_r+0x39e>
 8010168:	9c07      	ldr	r4, [sp, #28]
 801016a:	9704      	str	r7, [sp, #16]
 801016c:	e761      	b.n	8010032 <_dtoa_r+0x3e2>
 801016e:	4b27      	ldr	r3, [pc, #156]	@ (801020c <_dtoa_r+0x5bc>)
 8010170:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010172:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010176:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801017a:	4454      	add	r4, sl
 801017c:	2900      	cmp	r1, #0
 801017e:	d053      	beq.n	8010228 <_dtoa_r+0x5d8>
 8010180:	4928      	ldr	r1, [pc, #160]	@ (8010224 <_dtoa_r+0x5d4>)
 8010182:	2000      	movs	r0, #0
 8010184:	f7f0 fb62 	bl	800084c <__aeabi_ddiv>
 8010188:	4633      	mov	r3, r6
 801018a:	462a      	mov	r2, r5
 801018c:	f7f0 f87c 	bl	8000288 <__aeabi_dsub>
 8010190:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010194:	4656      	mov	r6, sl
 8010196:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801019a:	f7f0 fcdd 	bl	8000b58 <__aeabi_d2iz>
 801019e:	4605      	mov	r5, r0
 80101a0:	f7f0 f9c0 	bl	8000524 <__aeabi_i2d>
 80101a4:	4602      	mov	r2, r0
 80101a6:	460b      	mov	r3, r1
 80101a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80101ac:	f7f0 f86c 	bl	8000288 <__aeabi_dsub>
 80101b0:	3530      	adds	r5, #48	@ 0x30
 80101b2:	4602      	mov	r2, r0
 80101b4:	460b      	mov	r3, r1
 80101b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80101ba:	f806 5b01 	strb.w	r5, [r6], #1
 80101be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80101c2:	f7f0 fc8b 	bl	8000adc <__aeabi_dcmplt>
 80101c6:	2800      	cmp	r0, #0
 80101c8:	d171      	bne.n	80102ae <_dtoa_r+0x65e>
 80101ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80101ce:	4911      	ldr	r1, [pc, #68]	@ (8010214 <_dtoa_r+0x5c4>)
 80101d0:	2000      	movs	r0, #0
 80101d2:	f7f0 f859 	bl	8000288 <__aeabi_dsub>
 80101d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80101da:	f7f0 fc7f 	bl	8000adc <__aeabi_dcmplt>
 80101de:	2800      	cmp	r0, #0
 80101e0:	f040 8095 	bne.w	801030e <_dtoa_r+0x6be>
 80101e4:	42a6      	cmp	r6, r4
 80101e6:	f43f af50 	beq.w	801008a <_dtoa_r+0x43a>
 80101ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80101ee:	4b0a      	ldr	r3, [pc, #40]	@ (8010218 <_dtoa_r+0x5c8>)
 80101f0:	2200      	movs	r2, #0
 80101f2:	f7f0 fa01 	bl	80005f8 <__aeabi_dmul>
 80101f6:	4b08      	ldr	r3, [pc, #32]	@ (8010218 <_dtoa_r+0x5c8>)
 80101f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80101fc:	2200      	movs	r2, #0
 80101fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010202:	f7f0 f9f9 	bl	80005f8 <__aeabi_dmul>
 8010206:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801020a:	e7c4      	b.n	8010196 <_dtoa_r+0x546>
 801020c:	08012760 	.word	0x08012760
 8010210:	08012738 	.word	0x08012738
 8010214:	3ff00000 	.word	0x3ff00000
 8010218:	40240000 	.word	0x40240000
 801021c:	401c0000 	.word	0x401c0000
 8010220:	40140000 	.word	0x40140000
 8010224:	3fe00000 	.word	0x3fe00000
 8010228:	4631      	mov	r1, r6
 801022a:	4628      	mov	r0, r5
 801022c:	f7f0 f9e4 	bl	80005f8 <__aeabi_dmul>
 8010230:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010234:	9415      	str	r4, [sp, #84]	@ 0x54
 8010236:	4656      	mov	r6, sl
 8010238:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801023c:	f7f0 fc8c 	bl	8000b58 <__aeabi_d2iz>
 8010240:	4605      	mov	r5, r0
 8010242:	f7f0 f96f 	bl	8000524 <__aeabi_i2d>
 8010246:	4602      	mov	r2, r0
 8010248:	460b      	mov	r3, r1
 801024a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801024e:	f7f0 f81b 	bl	8000288 <__aeabi_dsub>
 8010252:	3530      	adds	r5, #48	@ 0x30
 8010254:	f806 5b01 	strb.w	r5, [r6], #1
 8010258:	4602      	mov	r2, r0
 801025a:	460b      	mov	r3, r1
 801025c:	42a6      	cmp	r6, r4
 801025e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010262:	f04f 0200 	mov.w	r2, #0
 8010266:	d124      	bne.n	80102b2 <_dtoa_r+0x662>
 8010268:	4bac      	ldr	r3, [pc, #688]	@ (801051c <_dtoa_r+0x8cc>)
 801026a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801026e:	f7f0 f80d 	bl	800028c <__adddf3>
 8010272:	4602      	mov	r2, r0
 8010274:	460b      	mov	r3, r1
 8010276:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801027a:	f7f0 fc4d 	bl	8000b18 <__aeabi_dcmpgt>
 801027e:	2800      	cmp	r0, #0
 8010280:	d145      	bne.n	801030e <_dtoa_r+0x6be>
 8010282:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010286:	49a5      	ldr	r1, [pc, #660]	@ (801051c <_dtoa_r+0x8cc>)
 8010288:	2000      	movs	r0, #0
 801028a:	f7ef fffd 	bl	8000288 <__aeabi_dsub>
 801028e:	4602      	mov	r2, r0
 8010290:	460b      	mov	r3, r1
 8010292:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010296:	f7f0 fc21 	bl	8000adc <__aeabi_dcmplt>
 801029a:	2800      	cmp	r0, #0
 801029c:	f43f aef5 	beq.w	801008a <_dtoa_r+0x43a>
 80102a0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80102a2:	1e73      	subs	r3, r6, #1
 80102a4:	9315      	str	r3, [sp, #84]	@ 0x54
 80102a6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80102aa:	2b30      	cmp	r3, #48	@ 0x30
 80102ac:	d0f8      	beq.n	80102a0 <_dtoa_r+0x650>
 80102ae:	9f04      	ldr	r7, [sp, #16]
 80102b0:	e73e      	b.n	8010130 <_dtoa_r+0x4e0>
 80102b2:	4b9b      	ldr	r3, [pc, #620]	@ (8010520 <_dtoa_r+0x8d0>)
 80102b4:	f7f0 f9a0 	bl	80005f8 <__aeabi_dmul>
 80102b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80102bc:	e7bc      	b.n	8010238 <_dtoa_r+0x5e8>
 80102be:	d10c      	bne.n	80102da <_dtoa_r+0x68a>
 80102c0:	4b98      	ldr	r3, [pc, #608]	@ (8010524 <_dtoa_r+0x8d4>)
 80102c2:	2200      	movs	r2, #0
 80102c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80102c8:	f7f0 f996 	bl	80005f8 <__aeabi_dmul>
 80102cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80102d0:	f7f0 fc18 	bl	8000b04 <__aeabi_dcmpge>
 80102d4:	2800      	cmp	r0, #0
 80102d6:	f000 8157 	beq.w	8010588 <_dtoa_r+0x938>
 80102da:	2400      	movs	r4, #0
 80102dc:	4625      	mov	r5, r4
 80102de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80102e0:	43db      	mvns	r3, r3
 80102e2:	9304      	str	r3, [sp, #16]
 80102e4:	4656      	mov	r6, sl
 80102e6:	2700      	movs	r7, #0
 80102e8:	4621      	mov	r1, r4
 80102ea:	4658      	mov	r0, fp
 80102ec:	f000 fbb4 	bl	8010a58 <_Bfree>
 80102f0:	2d00      	cmp	r5, #0
 80102f2:	d0dc      	beq.n	80102ae <_dtoa_r+0x65e>
 80102f4:	b12f      	cbz	r7, 8010302 <_dtoa_r+0x6b2>
 80102f6:	42af      	cmp	r7, r5
 80102f8:	d003      	beq.n	8010302 <_dtoa_r+0x6b2>
 80102fa:	4639      	mov	r1, r7
 80102fc:	4658      	mov	r0, fp
 80102fe:	f000 fbab 	bl	8010a58 <_Bfree>
 8010302:	4629      	mov	r1, r5
 8010304:	4658      	mov	r0, fp
 8010306:	f000 fba7 	bl	8010a58 <_Bfree>
 801030a:	e7d0      	b.n	80102ae <_dtoa_r+0x65e>
 801030c:	9704      	str	r7, [sp, #16]
 801030e:	4633      	mov	r3, r6
 8010310:	461e      	mov	r6, r3
 8010312:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010316:	2a39      	cmp	r2, #57	@ 0x39
 8010318:	d107      	bne.n	801032a <_dtoa_r+0x6da>
 801031a:	459a      	cmp	sl, r3
 801031c:	d1f8      	bne.n	8010310 <_dtoa_r+0x6c0>
 801031e:	9a04      	ldr	r2, [sp, #16]
 8010320:	3201      	adds	r2, #1
 8010322:	9204      	str	r2, [sp, #16]
 8010324:	2230      	movs	r2, #48	@ 0x30
 8010326:	f88a 2000 	strb.w	r2, [sl]
 801032a:	781a      	ldrb	r2, [r3, #0]
 801032c:	3201      	adds	r2, #1
 801032e:	701a      	strb	r2, [r3, #0]
 8010330:	e7bd      	b.n	80102ae <_dtoa_r+0x65e>
 8010332:	4b7b      	ldr	r3, [pc, #492]	@ (8010520 <_dtoa_r+0x8d0>)
 8010334:	2200      	movs	r2, #0
 8010336:	f7f0 f95f 	bl	80005f8 <__aeabi_dmul>
 801033a:	2200      	movs	r2, #0
 801033c:	2300      	movs	r3, #0
 801033e:	4604      	mov	r4, r0
 8010340:	460d      	mov	r5, r1
 8010342:	f7f0 fbc1 	bl	8000ac8 <__aeabi_dcmpeq>
 8010346:	2800      	cmp	r0, #0
 8010348:	f43f aebb 	beq.w	80100c2 <_dtoa_r+0x472>
 801034c:	e6f0      	b.n	8010130 <_dtoa_r+0x4e0>
 801034e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010350:	2a00      	cmp	r2, #0
 8010352:	f000 80db 	beq.w	801050c <_dtoa_r+0x8bc>
 8010356:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010358:	2a01      	cmp	r2, #1
 801035a:	f300 80bf 	bgt.w	80104dc <_dtoa_r+0x88c>
 801035e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010360:	2a00      	cmp	r2, #0
 8010362:	f000 80b7 	beq.w	80104d4 <_dtoa_r+0x884>
 8010366:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801036a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801036c:	4646      	mov	r6, r8
 801036e:	9a08      	ldr	r2, [sp, #32]
 8010370:	2101      	movs	r1, #1
 8010372:	441a      	add	r2, r3
 8010374:	4658      	mov	r0, fp
 8010376:	4498      	add	r8, r3
 8010378:	9208      	str	r2, [sp, #32]
 801037a:	f000 fc21 	bl	8010bc0 <__i2b>
 801037e:	4605      	mov	r5, r0
 8010380:	b15e      	cbz	r6, 801039a <_dtoa_r+0x74a>
 8010382:	9b08      	ldr	r3, [sp, #32]
 8010384:	2b00      	cmp	r3, #0
 8010386:	dd08      	ble.n	801039a <_dtoa_r+0x74a>
 8010388:	42b3      	cmp	r3, r6
 801038a:	9a08      	ldr	r2, [sp, #32]
 801038c:	bfa8      	it	ge
 801038e:	4633      	movge	r3, r6
 8010390:	eba8 0803 	sub.w	r8, r8, r3
 8010394:	1af6      	subs	r6, r6, r3
 8010396:	1ad3      	subs	r3, r2, r3
 8010398:	9308      	str	r3, [sp, #32]
 801039a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801039c:	b1f3      	cbz	r3, 80103dc <_dtoa_r+0x78c>
 801039e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	f000 80b7 	beq.w	8010514 <_dtoa_r+0x8c4>
 80103a6:	b18c      	cbz	r4, 80103cc <_dtoa_r+0x77c>
 80103a8:	4629      	mov	r1, r5
 80103aa:	4622      	mov	r2, r4
 80103ac:	4658      	mov	r0, fp
 80103ae:	f000 fcc7 	bl	8010d40 <__pow5mult>
 80103b2:	464a      	mov	r2, r9
 80103b4:	4601      	mov	r1, r0
 80103b6:	4605      	mov	r5, r0
 80103b8:	4658      	mov	r0, fp
 80103ba:	f000 fc17 	bl	8010bec <__multiply>
 80103be:	4649      	mov	r1, r9
 80103c0:	9004      	str	r0, [sp, #16]
 80103c2:	4658      	mov	r0, fp
 80103c4:	f000 fb48 	bl	8010a58 <_Bfree>
 80103c8:	9b04      	ldr	r3, [sp, #16]
 80103ca:	4699      	mov	r9, r3
 80103cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80103ce:	1b1a      	subs	r2, r3, r4
 80103d0:	d004      	beq.n	80103dc <_dtoa_r+0x78c>
 80103d2:	4649      	mov	r1, r9
 80103d4:	4658      	mov	r0, fp
 80103d6:	f000 fcb3 	bl	8010d40 <__pow5mult>
 80103da:	4681      	mov	r9, r0
 80103dc:	2101      	movs	r1, #1
 80103de:	4658      	mov	r0, fp
 80103e0:	f000 fbee 	bl	8010bc0 <__i2b>
 80103e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80103e6:	4604      	mov	r4, r0
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	f000 81cf 	beq.w	801078c <_dtoa_r+0xb3c>
 80103ee:	461a      	mov	r2, r3
 80103f0:	4601      	mov	r1, r0
 80103f2:	4658      	mov	r0, fp
 80103f4:	f000 fca4 	bl	8010d40 <__pow5mult>
 80103f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80103fa:	2b01      	cmp	r3, #1
 80103fc:	4604      	mov	r4, r0
 80103fe:	f300 8095 	bgt.w	801052c <_dtoa_r+0x8dc>
 8010402:	9b02      	ldr	r3, [sp, #8]
 8010404:	2b00      	cmp	r3, #0
 8010406:	f040 8087 	bne.w	8010518 <_dtoa_r+0x8c8>
 801040a:	9b03      	ldr	r3, [sp, #12]
 801040c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010410:	2b00      	cmp	r3, #0
 8010412:	f040 8089 	bne.w	8010528 <_dtoa_r+0x8d8>
 8010416:	9b03      	ldr	r3, [sp, #12]
 8010418:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801041c:	0d1b      	lsrs	r3, r3, #20
 801041e:	051b      	lsls	r3, r3, #20
 8010420:	b12b      	cbz	r3, 801042e <_dtoa_r+0x7de>
 8010422:	9b08      	ldr	r3, [sp, #32]
 8010424:	3301      	adds	r3, #1
 8010426:	9308      	str	r3, [sp, #32]
 8010428:	f108 0801 	add.w	r8, r8, #1
 801042c:	2301      	movs	r3, #1
 801042e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010430:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010432:	2b00      	cmp	r3, #0
 8010434:	f000 81b0 	beq.w	8010798 <_dtoa_r+0xb48>
 8010438:	6923      	ldr	r3, [r4, #16]
 801043a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801043e:	6918      	ldr	r0, [r3, #16]
 8010440:	f000 fb72 	bl	8010b28 <__hi0bits>
 8010444:	f1c0 0020 	rsb	r0, r0, #32
 8010448:	9b08      	ldr	r3, [sp, #32]
 801044a:	4418      	add	r0, r3
 801044c:	f010 001f 	ands.w	r0, r0, #31
 8010450:	d077      	beq.n	8010542 <_dtoa_r+0x8f2>
 8010452:	f1c0 0320 	rsb	r3, r0, #32
 8010456:	2b04      	cmp	r3, #4
 8010458:	dd6b      	ble.n	8010532 <_dtoa_r+0x8e2>
 801045a:	9b08      	ldr	r3, [sp, #32]
 801045c:	f1c0 001c 	rsb	r0, r0, #28
 8010460:	4403      	add	r3, r0
 8010462:	4480      	add	r8, r0
 8010464:	4406      	add	r6, r0
 8010466:	9308      	str	r3, [sp, #32]
 8010468:	f1b8 0f00 	cmp.w	r8, #0
 801046c:	dd05      	ble.n	801047a <_dtoa_r+0x82a>
 801046e:	4649      	mov	r1, r9
 8010470:	4642      	mov	r2, r8
 8010472:	4658      	mov	r0, fp
 8010474:	f000 fcbe 	bl	8010df4 <__lshift>
 8010478:	4681      	mov	r9, r0
 801047a:	9b08      	ldr	r3, [sp, #32]
 801047c:	2b00      	cmp	r3, #0
 801047e:	dd05      	ble.n	801048c <_dtoa_r+0x83c>
 8010480:	4621      	mov	r1, r4
 8010482:	461a      	mov	r2, r3
 8010484:	4658      	mov	r0, fp
 8010486:	f000 fcb5 	bl	8010df4 <__lshift>
 801048a:	4604      	mov	r4, r0
 801048c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801048e:	2b00      	cmp	r3, #0
 8010490:	d059      	beq.n	8010546 <_dtoa_r+0x8f6>
 8010492:	4621      	mov	r1, r4
 8010494:	4648      	mov	r0, r9
 8010496:	f000 fd19 	bl	8010ecc <__mcmp>
 801049a:	2800      	cmp	r0, #0
 801049c:	da53      	bge.n	8010546 <_dtoa_r+0x8f6>
 801049e:	1e7b      	subs	r3, r7, #1
 80104a0:	9304      	str	r3, [sp, #16]
 80104a2:	4649      	mov	r1, r9
 80104a4:	2300      	movs	r3, #0
 80104a6:	220a      	movs	r2, #10
 80104a8:	4658      	mov	r0, fp
 80104aa:	f000 faf7 	bl	8010a9c <__multadd>
 80104ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80104b0:	4681      	mov	r9, r0
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	f000 8172 	beq.w	801079c <_dtoa_r+0xb4c>
 80104b8:	2300      	movs	r3, #0
 80104ba:	4629      	mov	r1, r5
 80104bc:	220a      	movs	r2, #10
 80104be:	4658      	mov	r0, fp
 80104c0:	f000 faec 	bl	8010a9c <__multadd>
 80104c4:	9b00      	ldr	r3, [sp, #0]
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	4605      	mov	r5, r0
 80104ca:	dc67      	bgt.n	801059c <_dtoa_r+0x94c>
 80104cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80104ce:	2b02      	cmp	r3, #2
 80104d0:	dc41      	bgt.n	8010556 <_dtoa_r+0x906>
 80104d2:	e063      	b.n	801059c <_dtoa_r+0x94c>
 80104d4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80104d6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80104da:	e746      	b.n	801036a <_dtoa_r+0x71a>
 80104dc:	9b07      	ldr	r3, [sp, #28]
 80104de:	1e5c      	subs	r4, r3, #1
 80104e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80104e2:	42a3      	cmp	r3, r4
 80104e4:	bfbf      	itttt	lt
 80104e6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80104e8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80104ea:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80104ec:	1ae3      	sublt	r3, r4, r3
 80104ee:	bfb4      	ite	lt
 80104f0:	18d2      	addlt	r2, r2, r3
 80104f2:	1b1c      	subge	r4, r3, r4
 80104f4:	9b07      	ldr	r3, [sp, #28]
 80104f6:	bfbc      	itt	lt
 80104f8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80104fa:	2400      	movlt	r4, #0
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	bfb5      	itete	lt
 8010500:	eba8 0603 	sublt.w	r6, r8, r3
 8010504:	9b07      	ldrge	r3, [sp, #28]
 8010506:	2300      	movlt	r3, #0
 8010508:	4646      	movge	r6, r8
 801050a:	e730      	b.n	801036e <_dtoa_r+0x71e>
 801050c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801050e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8010510:	4646      	mov	r6, r8
 8010512:	e735      	b.n	8010380 <_dtoa_r+0x730>
 8010514:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010516:	e75c      	b.n	80103d2 <_dtoa_r+0x782>
 8010518:	2300      	movs	r3, #0
 801051a:	e788      	b.n	801042e <_dtoa_r+0x7de>
 801051c:	3fe00000 	.word	0x3fe00000
 8010520:	40240000 	.word	0x40240000
 8010524:	40140000 	.word	0x40140000
 8010528:	9b02      	ldr	r3, [sp, #8]
 801052a:	e780      	b.n	801042e <_dtoa_r+0x7de>
 801052c:	2300      	movs	r3, #0
 801052e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010530:	e782      	b.n	8010438 <_dtoa_r+0x7e8>
 8010532:	d099      	beq.n	8010468 <_dtoa_r+0x818>
 8010534:	9a08      	ldr	r2, [sp, #32]
 8010536:	331c      	adds	r3, #28
 8010538:	441a      	add	r2, r3
 801053a:	4498      	add	r8, r3
 801053c:	441e      	add	r6, r3
 801053e:	9208      	str	r2, [sp, #32]
 8010540:	e792      	b.n	8010468 <_dtoa_r+0x818>
 8010542:	4603      	mov	r3, r0
 8010544:	e7f6      	b.n	8010534 <_dtoa_r+0x8e4>
 8010546:	9b07      	ldr	r3, [sp, #28]
 8010548:	9704      	str	r7, [sp, #16]
 801054a:	2b00      	cmp	r3, #0
 801054c:	dc20      	bgt.n	8010590 <_dtoa_r+0x940>
 801054e:	9300      	str	r3, [sp, #0]
 8010550:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010552:	2b02      	cmp	r3, #2
 8010554:	dd1e      	ble.n	8010594 <_dtoa_r+0x944>
 8010556:	9b00      	ldr	r3, [sp, #0]
 8010558:	2b00      	cmp	r3, #0
 801055a:	f47f aec0 	bne.w	80102de <_dtoa_r+0x68e>
 801055e:	4621      	mov	r1, r4
 8010560:	2205      	movs	r2, #5
 8010562:	4658      	mov	r0, fp
 8010564:	f000 fa9a 	bl	8010a9c <__multadd>
 8010568:	4601      	mov	r1, r0
 801056a:	4604      	mov	r4, r0
 801056c:	4648      	mov	r0, r9
 801056e:	f000 fcad 	bl	8010ecc <__mcmp>
 8010572:	2800      	cmp	r0, #0
 8010574:	f77f aeb3 	ble.w	80102de <_dtoa_r+0x68e>
 8010578:	4656      	mov	r6, sl
 801057a:	2331      	movs	r3, #49	@ 0x31
 801057c:	f806 3b01 	strb.w	r3, [r6], #1
 8010580:	9b04      	ldr	r3, [sp, #16]
 8010582:	3301      	adds	r3, #1
 8010584:	9304      	str	r3, [sp, #16]
 8010586:	e6ae      	b.n	80102e6 <_dtoa_r+0x696>
 8010588:	9c07      	ldr	r4, [sp, #28]
 801058a:	9704      	str	r7, [sp, #16]
 801058c:	4625      	mov	r5, r4
 801058e:	e7f3      	b.n	8010578 <_dtoa_r+0x928>
 8010590:	9b07      	ldr	r3, [sp, #28]
 8010592:	9300      	str	r3, [sp, #0]
 8010594:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010596:	2b00      	cmp	r3, #0
 8010598:	f000 8104 	beq.w	80107a4 <_dtoa_r+0xb54>
 801059c:	2e00      	cmp	r6, #0
 801059e:	dd05      	ble.n	80105ac <_dtoa_r+0x95c>
 80105a0:	4629      	mov	r1, r5
 80105a2:	4632      	mov	r2, r6
 80105a4:	4658      	mov	r0, fp
 80105a6:	f000 fc25 	bl	8010df4 <__lshift>
 80105aa:	4605      	mov	r5, r0
 80105ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d05a      	beq.n	8010668 <_dtoa_r+0xa18>
 80105b2:	6869      	ldr	r1, [r5, #4]
 80105b4:	4658      	mov	r0, fp
 80105b6:	f000 fa0f 	bl	80109d8 <_Balloc>
 80105ba:	4606      	mov	r6, r0
 80105bc:	b928      	cbnz	r0, 80105ca <_dtoa_r+0x97a>
 80105be:	4b84      	ldr	r3, [pc, #528]	@ (80107d0 <_dtoa_r+0xb80>)
 80105c0:	4602      	mov	r2, r0
 80105c2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80105c6:	f7ff bb5a 	b.w	800fc7e <_dtoa_r+0x2e>
 80105ca:	692a      	ldr	r2, [r5, #16]
 80105cc:	3202      	adds	r2, #2
 80105ce:	0092      	lsls	r2, r2, #2
 80105d0:	f105 010c 	add.w	r1, r5, #12
 80105d4:	300c      	adds	r0, #12
 80105d6:	f7ff fa86 	bl	800fae6 <memcpy>
 80105da:	2201      	movs	r2, #1
 80105dc:	4631      	mov	r1, r6
 80105de:	4658      	mov	r0, fp
 80105e0:	f000 fc08 	bl	8010df4 <__lshift>
 80105e4:	f10a 0301 	add.w	r3, sl, #1
 80105e8:	9307      	str	r3, [sp, #28]
 80105ea:	9b00      	ldr	r3, [sp, #0]
 80105ec:	4453      	add	r3, sl
 80105ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 80105f0:	9b02      	ldr	r3, [sp, #8]
 80105f2:	f003 0301 	and.w	r3, r3, #1
 80105f6:	462f      	mov	r7, r5
 80105f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80105fa:	4605      	mov	r5, r0
 80105fc:	9b07      	ldr	r3, [sp, #28]
 80105fe:	4621      	mov	r1, r4
 8010600:	3b01      	subs	r3, #1
 8010602:	4648      	mov	r0, r9
 8010604:	9300      	str	r3, [sp, #0]
 8010606:	f7ff fa9b 	bl	800fb40 <quorem>
 801060a:	4639      	mov	r1, r7
 801060c:	9002      	str	r0, [sp, #8]
 801060e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010612:	4648      	mov	r0, r9
 8010614:	f000 fc5a 	bl	8010ecc <__mcmp>
 8010618:	462a      	mov	r2, r5
 801061a:	9008      	str	r0, [sp, #32]
 801061c:	4621      	mov	r1, r4
 801061e:	4658      	mov	r0, fp
 8010620:	f000 fc70 	bl	8010f04 <__mdiff>
 8010624:	68c2      	ldr	r2, [r0, #12]
 8010626:	4606      	mov	r6, r0
 8010628:	bb02      	cbnz	r2, 801066c <_dtoa_r+0xa1c>
 801062a:	4601      	mov	r1, r0
 801062c:	4648      	mov	r0, r9
 801062e:	f000 fc4d 	bl	8010ecc <__mcmp>
 8010632:	4602      	mov	r2, r0
 8010634:	4631      	mov	r1, r6
 8010636:	4658      	mov	r0, fp
 8010638:	920e      	str	r2, [sp, #56]	@ 0x38
 801063a:	f000 fa0d 	bl	8010a58 <_Bfree>
 801063e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010640:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010642:	9e07      	ldr	r6, [sp, #28]
 8010644:	ea43 0102 	orr.w	r1, r3, r2
 8010648:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801064a:	4319      	orrs	r1, r3
 801064c:	d110      	bne.n	8010670 <_dtoa_r+0xa20>
 801064e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010652:	d029      	beq.n	80106a8 <_dtoa_r+0xa58>
 8010654:	9b08      	ldr	r3, [sp, #32]
 8010656:	2b00      	cmp	r3, #0
 8010658:	dd02      	ble.n	8010660 <_dtoa_r+0xa10>
 801065a:	9b02      	ldr	r3, [sp, #8]
 801065c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8010660:	9b00      	ldr	r3, [sp, #0]
 8010662:	f883 8000 	strb.w	r8, [r3]
 8010666:	e63f      	b.n	80102e8 <_dtoa_r+0x698>
 8010668:	4628      	mov	r0, r5
 801066a:	e7bb      	b.n	80105e4 <_dtoa_r+0x994>
 801066c:	2201      	movs	r2, #1
 801066e:	e7e1      	b.n	8010634 <_dtoa_r+0x9e4>
 8010670:	9b08      	ldr	r3, [sp, #32]
 8010672:	2b00      	cmp	r3, #0
 8010674:	db04      	blt.n	8010680 <_dtoa_r+0xa30>
 8010676:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010678:	430b      	orrs	r3, r1
 801067a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801067c:	430b      	orrs	r3, r1
 801067e:	d120      	bne.n	80106c2 <_dtoa_r+0xa72>
 8010680:	2a00      	cmp	r2, #0
 8010682:	dded      	ble.n	8010660 <_dtoa_r+0xa10>
 8010684:	4649      	mov	r1, r9
 8010686:	2201      	movs	r2, #1
 8010688:	4658      	mov	r0, fp
 801068a:	f000 fbb3 	bl	8010df4 <__lshift>
 801068e:	4621      	mov	r1, r4
 8010690:	4681      	mov	r9, r0
 8010692:	f000 fc1b 	bl	8010ecc <__mcmp>
 8010696:	2800      	cmp	r0, #0
 8010698:	dc03      	bgt.n	80106a2 <_dtoa_r+0xa52>
 801069a:	d1e1      	bne.n	8010660 <_dtoa_r+0xa10>
 801069c:	f018 0f01 	tst.w	r8, #1
 80106a0:	d0de      	beq.n	8010660 <_dtoa_r+0xa10>
 80106a2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80106a6:	d1d8      	bne.n	801065a <_dtoa_r+0xa0a>
 80106a8:	9a00      	ldr	r2, [sp, #0]
 80106aa:	2339      	movs	r3, #57	@ 0x39
 80106ac:	7013      	strb	r3, [r2, #0]
 80106ae:	4633      	mov	r3, r6
 80106b0:	461e      	mov	r6, r3
 80106b2:	3b01      	subs	r3, #1
 80106b4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80106b8:	2a39      	cmp	r2, #57	@ 0x39
 80106ba:	d052      	beq.n	8010762 <_dtoa_r+0xb12>
 80106bc:	3201      	adds	r2, #1
 80106be:	701a      	strb	r2, [r3, #0]
 80106c0:	e612      	b.n	80102e8 <_dtoa_r+0x698>
 80106c2:	2a00      	cmp	r2, #0
 80106c4:	dd07      	ble.n	80106d6 <_dtoa_r+0xa86>
 80106c6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80106ca:	d0ed      	beq.n	80106a8 <_dtoa_r+0xa58>
 80106cc:	9a00      	ldr	r2, [sp, #0]
 80106ce:	f108 0301 	add.w	r3, r8, #1
 80106d2:	7013      	strb	r3, [r2, #0]
 80106d4:	e608      	b.n	80102e8 <_dtoa_r+0x698>
 80106d6:	9b07      	ldr	r3, [sp, #28]
 80106d8:	9a07      	ldr	r2, [sp, #28]
 80106da:	f803 8c01 	strb.w	r8, [r3, #-1]
 80106de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80106e0:	4293      	cmp	r3, r2
 80106e2:	d028      	beq.n	8010736 <_dtoa_r+0xae6>
 80106e4:	4649      	mov	r1, r9
 80106e6:	2300      	movs	r3, #0
 80106e8:	220a      	movs	r2, #10
 80106ea:	4658      	mov	r0, fp
 80106ec:	f000 f9d6 	bl	8010a9c <__multadd>
 80106f0:	42af      	cmp	r7, r5
 80106f2:	4681      	mov	r9, r0
 80106f4:	f04f 0300 	mov.w	r3, #0
 80106f8:	f04f 020a 	mov.w	r2, #10
 80106fc:	4639      	mov	r1, r7
 80106fe:	4658      	mov	r0, fp
 8010700:	d107      	bne.n	8010712 <_dtoa_r+0xac2>
 8010702:	f000 f9cb 	bl	8010a9c <__multadd>
 8010706:	4607      	mov	r7, r0
 8010708:	4605      	mov	r5, r0
 801070a:	9b07      	ldr	r3, [sp, #28]
 801070c:	3301      	adds	r3, #1
 801070e:	9307      	str	r3, [sp, #28]
 8010710:	e774      	b.n	80105fc <_dtoa_r+0x9ac>
 8010712:	f000 f9c3 	bl	8010a9c <__multadd>
 8010716:	4629      	mov	r1, r5
 8010718:	4607      	mov	r7, r0
 801071a:	2300      	movs	r3, #0
 801071c:	220a      	movs	r2, #10
 801071e:	4658      	mov	r0, fp
 8010720:	f000 f9bc 	bl	8010a9c <__multadd>
 8010724:	4605      	mov	r5, r0
 8010726:	e7f0      	b.n	801070a <_dtoa_r+0xaba>
 8010728:	9b00      	ldr	r3, [sp, #0]
 801072a:	2b00      	cmp	r3, #0
 801072c:	bfcc      	ite	gt
 801072e:	461e      	movgt	r6, r3
 8010730:	2601      	movle	r6, #1
 8010732:	4456      	add	r6, sl
 8010734:	2700      	movs	r7, #0
 8010736:	4649      	mov	r1, r9
 8010738:	2201      	movs	r2, #1
 801073a:	4658      	mov	r0, fp
 801073c:	f000 fb5a 	bl	8010df4 <__lshift>
 8010740:	4621      	mov	r1, r4
 8010742:	4681      	mov	r9, r0
 8010744:	f000 fbc2 	bl	8010ecc <__mcmp>
 8010748:	2800      	cmp	r0, #0
 801074a:	dcb0      	bgt.n	80106ae <_dtoa_r+0xa5e>
 801074c:	d102      	bne.n	8010754 <_dtoa_r+0xb04>
 801074e:	f018 0f01 	tst.w	r8, #1
 8010752:	d1ac      	bne.n	80106ae <_dtoa_r+0xa5e>
 8010754:	4633      	mov	r3, r6
 8010756:	461e      	mov	r6, r3
 8010758:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801075c:	2a30      	cmp	r2, #48	@ 0x30
 801075e:	d0fa      	beq.n	8010756 <_dtoa_r+0xb06>
 8010760:	e5c2      	b.n	80102e8 <_dtoa_r+0x698>
 8010762:	459a      	cmp	sl, r3
 8010764:	d1a4      	bne.n	80106b0 <_dtoa_r+0xa60>
 8010766:	9b04      	ldr	r3, [sp, #16]
 8010768:	3301      	adds	r3, #1
 801076a:	9304      	str	r3, [sp, #16]
 801076c:	2331      	movs	r3, #49	@ 0x31
 801076e:	f88a 3000 	strb.w	r3, [sl]
 8010772:	e5b9      	b.n	80102e8 <_dtoa_r+0x698>
 8010774:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010776:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80107d4 <_dtoa_r+0xb84>
 801077a:	b11b      	cbz	r3, 8010784 <_dtoa_r+0xb34>
 801077c:	f10a 0308 	add.w	r3, sl, #8
 8010780:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010782:	6013      	str	r3, [r2, #0]
 8010784:	4650      	mov	r0, sl
 8010786:	b019      	add	sp, #100	@ 0x64
 8010788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801078c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801078e:	2b01      	cmp	r3, #1
 8010790:	f77f ae37 	ble.w	8010402 <_dtoa_r+0x7b2>
 8010794:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010796:	930a      	str	r3, [sp, #40]	@ 0x28
 8010798:	2001      	movs	r0, #1
 801079a:	e655      	b.n	8010448 <_dtoa_r+0x7f8>
 801079c:	9b00      	ldr	r3, [sp, #0]
 801079e:	2b00      	cmp	r3, #0
 80107a0:	f77f aed6 	ble.w	8010550 <_dtoa_r+0x900>
 80107a4:	4656      	mov	r6, sl
 80107a6:	4621      	mov	r1, r4
 80107a8:	4648      	mov	r0, r9
 80107aa:	f7ff f9c9 	bl	800fb40 <quorem>
 80107ae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80107b2:	f806 8b01 	strb.w	r8, [r6], #1
 80107b6:	9b00      	ldr	r3, [sp, #0]
 80107b8:	eba6 020a 	sub.w	r2, r6, sl
 80107bc:	4293      	cmp	r3, r2
 80107be:	ddb3      	ble.n	8010728 <_dtoa_r+0xad8>
 80107c0:	4649      	mov	r1, r9
 80107c2:	2300      	movs	r3, #0
 80107c4:	220a      	movs	r2, #10
 80107c6:	4658      	mov	r0, fp
 80107c8:	f000 f968 	bl	8010a9c <__multadd>
 80107cc:	4681      	mov	r9, r0
 80107ce:	e7ea      	b.n	80107a6 <_dtoa_r+0xb56>
 80107d0:	080126c1 	.word	0x080126c1
 80107d4:	08012645 	.word	0x08012645

080107d8 <_free_r>:
 80107d8:	b538      	push	{r3, r4, r5, lr}
 80107da:	4605      	mov	r5, r0
 80107dc:	2900      	cmp	r1, #0
 80107de:	d041      	beq.n	8010864 <_free_r+0x8c>
 80107e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80107e4:	1f0c      	subs	r4, r1, #4
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	bfb8      	it	lt
 80107ea:	18e4      	addlt	r4, r4, r3
 80107ec:	f000 f8e8 	bl	80109c0 <__malloc_lock>
 80107f0:	4a1d      	ldr	r2, [pc, #116]	@ (8010868 <_free_r+0x90>)
 80107f2:	6813      	ldr	r3, [r2, #0]
 80107f4:	b933      	cbnz	r3, 8010804 <_free_r+0x2c>
 80107f6:	6063      	str	r3, [r4, #4]
 80107f8:	6014      	str	r4, [r2, #0]
 80107fa:	4628      	mov	r0, r5
 80107fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010800:	f000 b8e4 	b.w	80109cc <__malloc_unlock>
 8010804:	42a3      	cmp	r3, r4
 8010806:	d908      	bls.n	801081a <_free_r+0x42>
 8010808:	6820      	ldr	r0, [r4, #0]
 801080a:	1821      	adds	r1, r4, r0
 801080c:	428b      	cmp	r3, r1
 801080e:	bf01      	itttt	eq
 8010810:	6819      	ldreq	r1, [r3, #0]
 8010812:	685b      	ldreq	r3, [r3, #4]
 8010814:	1809      	addeq	r1, r1, r0
 8010816:	6021      	streq	r1, [r4, #0]
 8010818:	e7ed      	b.n	80107f6 <_free_r+0x1e>
 801081a:	461a      	mov	r2, r3
 801081c:	685b      	ldr	r3, [r3, #4]
 801081e:	b10b      	cbz	r3, 8010824 <_free_r+0x4c>
 8010820:	42a3      	cmp	r3, r4
 8010822:	d9fa      	bls.n	801081a <_free_r+0x42>
 8010824:	6811      	ldr	r1, [r2, #0]
 8010826:	1850      	adds	r0, r2, r1
 8010828:	42a0      	cmp	r0, r4
 801082a:	d10b      	bne.n	8010844 <_free_r+0x6c>
 801082c:	6820      	ldr	r0, [r4, #0]
 801082e:	4401      	add	r1, r0
 8010830:	1850      	adds	r0, r2, r1
 8010832:	4283      	cmp	r3, r0
 8010834:	6011      	str	r1, [r2, #0]
 8010836:	d1e0      	bne.n	80107fa <_free_r+0x22>
 8010838:	6818      	ldr	r0, [r3, #0]
 801083a:	685b      	ldr	r3, [r3, #4]
 801083c:	6053      	str	r3, [r2, #4]
 801083e:	4408      	add	r0, r1
 8010840:	6010      	str	r0, [r2, #0]
 8010842:	e7da      	b.n	80107fa <_free_r+0x22>
 8010844:	d902      	bls.n	801084c <_free_r+0x74>
 8010846:	230c      	movs	r3, #12
 8010848:	602b      	str	r3, [r5, #0]
 801084a:	e7d6      	b.n	80107fa <_free_r+0x22>
 801084c:	6820      	ldr	r0, [r4, #0]
 801084e:	1821      	adds	r1, r4, r0
 8010850:	428b      	cmp	r3, r1
 8010852:	bf04      	itt	eq
 8010854:	6819      	ldreq	r1, [r3, #0]
 8010856:	685b      	ldreq	r3, [r3, #4]
 8010858:	6063      	str	r3, [r4, #4]
 801085a:	bf04      	itt	eq
 801085c:	1809      	addeq	r1, r1, r0
 801085e:	6021      	streq	r1, [r4, #0]
 8010860:	6054      	str	r4, [r2, #4]
 8010862:	e7ca      	b.n	80107fa <_free_r+0x22>
 8010864:	bd38      	pop	{r3, r4, r5, pc}
 8010866:	bf00      	nop
 8010868:	2000e3a0 	.word	0x2000e3a0

0801086c <malloc>:
 801086c:	4b02      	ldr	r3, [pc, #8]	@ (8010878 <malloc+0xc>)
 801086e:	4601      	mov	r1, r0
 8010870:	6818      	ldr	r0, [r3, #0]
 8010872:	f000 b825 	b.w	80108c0 <_malloc_r>
 8010876:	bf00      	nop
 8010878:	20000074 	.word	0x20000074

0801087c <sbrk_aligned>:
 801087c:	b570      	push	{r4, r5, r6, lr}
 801087e:	4e0f      	ldr	r6, [pc, #60]	@ (80108bc <sbrk_aligned+0x40>)
 8010880:	460c      	mov	r4, r1
 8010882:	6831      	ldr	r1, [r6, #0]
 8010884:	4605      	mov	r5, r0
 8010886:	b911      	cbnz	r1, 801088e <sbrk_aligned+0x12>
 8010888:	f000 fe58 	bl	801153c <_sbrk_r>
 801088c:	6030      	str	r0, [r6, #0]
 801088e:	4621      	mov	r1, r4
 8010890:	4628      	mov	r0, r5
 8010892:	f000 fe53 	bl	801153c <_sbrk_r>
 8010896:	1c43      	adds	r3, r0, #1
 8010898:	d103      	bne.n	80108a2 <sbrk_aligned+0x26>
 801089a:	f04f 34ff 	mov.w	r4, #4294967295
 801089e:	4620      	mov	r0, r4
 80108a0:	bd70      	pop	{r4, r5, r6, pc}
 80108a2:	1cc4      	adds	r4, r0, #3
 80108a4:	f024 0403 	bic.w	r4, r4, #3
 80108a8:	42a0      	cmp	r0, r4
 80108aa:	d0f8      	beq.n	801089e <sbrk_aligned+0x22>
 80108ac:	1a21      	subs	r1, r4, r0
 80108ae:	4628      	mov	r0, r5
 80108b0:	f000 fe44 	bl	801153c <_sbrk_r>
 80108b4:	3001      	adds	r0, #1
 80108b6:	d1f2      	bne.n	801089e <sbrk_aligned+0x22>
 80108b8:	e7ef      	b.n	801089a <sbrk_aligned+0x1e>
 80108ba:	bf00      	nop
 80108bc:	2000e39c 	.word	0x2000e39c

080108c0 <_malloc_r>:
 80108c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80108c4:	1ccd      	adds	r5, r1, #3
 80108c6:	f025 0503 	bic.w	r5, r5, #3
 80108ca:	3508      	adds	r5, #8
 80108cc:	2d0c      	cmp	r5, #12
 80108ce:	bf38      	it	cc
 80108d0:	250c      	movcc	r5, #12
 80108d2:	2d00      	cmp	r5, #0
 80108d4:	4606      	mov	r6, r0
 80108d6:	db01      	blt.n	80108dc <_malloc_r+0x1c>
 80108d8:	42a9      	cmp	r1, r5
 80108da:	d904      	bls.n	80108e6 <_malloc_r+0x26>
 80108dc:	230c      	movs	r3, #12
 80108de:	6033      	str	r3, [r6, #0]
 80108e0:	2000      	movs	r0, #0
 80108e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80108e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80109bc <_malloc_r+0xfc>
 80108ea:	f000 f869 	bl	80109c0 <__malloc_lock>
 80108ee:	f8d8 3000 	ldr.w	r3, [r8]
 80108f2:	461c      	mov	r4, r3
 80108f4:	bb44      	cbnz	r4, 8010948 <_malloc_r+0x88>
 80108f6:	4629      	mov	r1, r5
 80108f8:	4630      	mov	r0, r6
 80108fa:	f7ff ffbf 	bl	801087c <sbrk_aligned>
 80108fe:	1c43      	adds	r3, r0, #1
 8010900:	4604      	mov	r4, r0
 8010902:	d158      	bne.n	80109b6 <_malloc_r+0xf6>
 8010904:	f8d8 4000 	ldr.w	r4, [r8]
 8010908:	4627      	mov	r7, r4
 801090a:	2f00      	cmp	r7, #0
 801090c:	d143      	bne.n	8010996 <_malloc_r+0xd6>
 801090e:	2c00      	cmp	r4, #0
 8010910:	d04b      	beq.n	80109aa <_malloc_r+0xea>
 8010912:	6823      	ldr	r3, [r4, #0]
 8010914:	4639      	mov	r1, r7
 8010916:	4630      	mov	r0, r6
 8010918:	eb04 0903 	add.w	r9, r4, r3
 801091c:	f000 fe0e 	bl	801153c <_sbrk_r>
 8010920:	4581      	cmp	r9, r0
 8010922:	d142      	bne.n	80109aa <_malloc_r+0xea>
 8010924:	6821      	ldr	r1, [r4, #0]
 8010926:	1a6d      	subs	r5, r5, r1
 8010928:	4629      	mov	r1, r5
 801092a:	4630      	mov	r0, r6
 801092c:	f7ff ffa6 	bl	801087c <sbrk_aligned>
 8010930:	3001      	adds	r0, #1
 8010932:	d03a      	beq.n	80109aa <_malloc_r+0xea>
 8010934:	6823      	ldr	r3, [r4, #0]
 8010936:	442b      	add	r3, r5
 8010938:	6023      	str	r3, [r4, #0]
 801093a:	f8d8 3000 	ldr.w	r3, [r8]
 801093e:	685a      	ldr	r2, [r3, #4]
 8010940:	bb62      	cbnz	r2, 801099c <_malloc_r+0xdc>
 8010942:	f8c8 7000 	str.w	r7, [r8]
 8010946:	e00f      	b.n	8010968 <_malloc_r+0xa8>
 8010948:	6822      	ldr	r2, [r4, #0]
 801094a:	1b52      	subs	r2, r2, r5
 801094c:	d420      	bmi.n	8010990 <_malloc_r+0xd0>
 801094e:	2a0b      	cmp	r2, #11
 8010950:	d917      	bls.n	8010982 <_malloc_r+0xc2>
 8010952:	1961      	adds	r1, r4, r5
 8010954:	42a3      	cmp	r3, r4
 8010956:	6025      	str	r5, [r4, #0]
 8010958:	bf18      	it	ne
 801095a:	6059      	strne	r1, [r3, #4]
 801095c:	6863      	ldr	r3, [r4, #4]
 801095e:	bf08      	it	eq
 8010960:	f8c8 1000 	streq.w	r1, [r8]
 8010964:	5162      	str	r2, [r4, r5]
 8010966:	604b      	str	r3, [r1, #4]
 8010968:	4630      	mov	r0, r6
 801096a:	f000 f82f 	bl	80109cc <__malloc_unlock>
 801096e:	f104 000b 	add.w	r0, r4, #11
 8010972:	1d23      	adds	r3, r4, #4
 8010974:	f020 0007 	bic.w	r0, r0, #7
 8010978:	1ac2      	subs	r2, r0, r3
 801097a:	bf1c      	itt	ne
 801097c:	1a1b      	subne	r3, r3, r0
 801097e:	50a3      	strne	r3, [r4, r2]
 8010980:	e7af      	b.n	80108e2 <_malloc_r+0x22>
 8010982:	6862      	ldr	r2, [r4, #4]
 8010984:	42a3      	cmp	r3, r4
 8010986:	bf0c      	ite	eq
 8010988:	f8c8 2000 	streq.w	r2, [r8]
 801098c:	605a      	strne	r2, [r3, #4]
 801098e:	e7eb      	b.n	8010968 <_malloc_r+0xa8>
 8010990:	4623      	mov	r3, r4
 8010992:	6864      	ldr	r4, [r4, #4]
 8010994:	e7ae      	b.n	80108f4 <_malloc_r+0x34>
 8010996:	463c      	mov	r4, r7
 8010998:	687f      	ldr	r7, [r7, #4]
 801099a:	e7b6      	b.n	801090a <_malloc_r+0x4a>
 801099c:	461a      	mov	r2, r3
 801099e:	685b      	ldr	r3, [r3, #4]
 80109a0:	42a3      	cmp	r3, r4
 80109a2:	d1fb      	bne.n	801099c <_malloc_r+0xdc>
 80109a4:	2300      	movs	r3, #0
 80109a6:	6053      	str	r3, [r2, #4]
 80109a8:	e7de      	b.n	8010968 <_malloc_r+0xa8>
 80109aa:	230c      	movs	r3, #12
 80109ac:	6033      	str	r3, [r6, #0]
 80109ae:	4630      	mov	r0, r6
 80109b0:	f000 f80c 	bl	80109cc <__malloc_unlock>
 80109b4:	e794      	b.n	80108e0 <_malloc_r+0x20>
 80109b6:	6005      	str	r5, [r0, #0]
 80109b8:	e7d6      	b.n	8010968 <_malloc_r+0xa8>
 80109ba:	bf00      	nop
 80109bc:	2000e3a0 	.word	0x2000e3a0

080109c0 <__malloc_lock>:
 80109c0:	4801      	ldr	r0, [pc, #4]	@ (80109c8 <__malloc_lock+0x8>)
 80109c2:	f7ff b886 	b.w	800fad2 <__retarget_lock_acquire_recursive>
 80109c6:	bf00      	nop
 80109c8:	2000e398 	.word	0x2000e398

080109cc <__malloc_unlock>:
 80109cc:	4801      	ldr	r0, [pc, #4]	@ (80109d4 <__malloc_unlock+0x8>)
 80109ce:	f7ff b881 	b.w	800fad4 <__retarget_lock_release_recursive>
 80109d2:	bf00      	nop
 80109d4:	2000e398 	.word	0x2000e398

080109d8 <_Balloc>:
 80109d8:	b570      	push	{r4, r5, r6, lr}
 80109da:	69c6      	ldr	r6, [r0, #28]
 80109dc:	4604      	mov	r4, r0
 80109de:	460d      	mov	r5, r1
 80109e0:	b976      	cbnz	r6, 8010a00 <_Balloc+0x28>
 80109e2:	2010      	movs	r0, #16
 80109e4:	f7ff ff42 	bl	801086c <malloc>
 80109e8:	4602      	mov	r2, r0
 80109ea:	61e0      	str	r0, [r4, #28]
 80109ec:	b920      	cbnz	r0, 80109f8 <_Balloc+0x20>
 80109ee:	4b18      	ldr	r3, [pc, #96]	@ (8010a50 <_Balloc+0x78>)
 80109f0:	4818      	ldr	r0, [pc, #96]	@ (8010a54 <_Balloc+0x7c>)
 80109f2:	216b      	movs	r1, #107	@ 0x6b
 80109f4:	f7ff f886 	bl	800fb04 <__assert_func>
 80109f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80109fc:	6006      	str	r6, [r0, #0]
 80109fe:	60c6      	str	r6, [r0, #12]
 8010a00:	69e6      	ldr	r6, [r4, #28]
 8010a02:	68f3      	ldr	r3, [r6, #12]
 8010a04:	b183      	cbz	r3, 8010a28 <_Balloc+0x50>
 8010a06:	69e3      	ldr	r3, [r4, #28]
 8010a08:	68db      	ldr	r3, [r3, #12]
 8010a0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010a0e:	b9b8      	cbnz	r0, 8010a40 <_Balloc+0x68>
 8010a10:	2101      	movs	r1, #1
 8010a12:	fa01 f605 	lsl.w	r6, r1, r5
 8010a16:	1d72      	adds	r2, r6, #5
 8010a18:	0092      	lsls	r2, r2, #2
 8010a1a:	4620      	mov	r0, r4
 8010a1c:	f000 fda5 	bl	801156a <_calloc_r>
 8010a20:	b160      	cbz	r0, 8010a3c <_Balloc+0x64>
 8010a22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010a26:	e00e      	b.n	8010a46 <_Balloc+0x6e>
 8010a28:	2221      	movs	r2, #33	@ 0x21
 8010a2a:	2104      	movs	r1, #4
 8010a2c:	4620      	mov	r0, r4
 8010a2e:	f000 fd9c 	bl	801156a <_calloc_r>
 8010a32:	69e3      	ldr	r3, [r4, #28]
 8010a34:	60f0      	str	r0, [r6, #12]
 8010a36:	68db      	ldr	r3, [r3, #12]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d1e4      	bne.n	8010a06 <_Balloc+0x2e>
 8010a3c:	2000      	movs	r0, #0
 8010a3e:	bd70      	pop	{r4, r5, r6, pc}
 8010a40:	6802      	ldr	r2, [r0, #0]
 8010a42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010a46:	2300      	movs	r3, #0
 8010a48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010a4c:	e7f7      	b.n	8010a3e <_Balloc+0x66>
 8010a4e:	bf00      	nop
 8010a50:	08012652 	.word	0x08012652
 8010a54:	080126d2 	.word	0x080126d2

08010a58 <_Bfree>:
 8010a58:	b570      	push	{r4, r5, r6, lr}
 8010a5a:	69c6      	ldr	r6, [r0, #28]
 8010a5c:	4605      	mov	r5, r0
 8010a5e:	460c      	mov	r4, r1
 8010a60:	b976      	cbnz	r6, 8010a80 <_Bfree+0x28>
 8010a62:	2010      	movs	r0, #16
 8010a64:	f7ff ff02 	bl	801086c <malloc>
 8010a68:	4602      	mov	r2, r0
 8010a6a:	61e8      	str	r0, [r5, #28]
 8010a6c:	b920      	cbnz	r0, 8010a78 <_Bfree+0x20>
 8010a6e:	4b09      	ldr	r3, [pc, #36]	@ (8010a94 <_Bfree+0x3c>)
 8010a70:	4809      	ldr	r0, [pc, #36]	@ (8010a98 <_Bfree+0x40>)
 8010a72:	218f      	movs	r1, #143	@ 0x8f
 8010a74:	f7ff f846 	bl	800fb04 <__assert_func>
 8010a78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010a7c:	6006      	str	r6, [r0, #0]
 8010a7e:	60c6      	str	r6, [r0, #12]
 8010a80:	b13c      	cbz	r4, 8010a92 <_Bfree+0x3a>
 8010a82:	69eb      	ldr	r3, [r5, #28]
 8010a84:	6862      	ldr	r2, [r4, #4]
 8010a86:	68db      	ldr	r3, [r3, #12]
 8010a88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010a8c:	6021      	str	r1, [r4, #0]
 8010a8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010a92:	bd70      	pop	{r4, r5, r6, pc}
 8010a94:	08012652 	.word	0x08012652
 8010a98:	080126d2 	.word	0x080126d2

08010a9c <__multadd>:
 8010a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010aa0:	690d      	ldr	r5, [r1, #16]
 8010aa2:	4607      	mov	r7, r0
 8010aa4:	460c      	mov	r4, r1
 8010aa6:	461e      	mov	r6, r3
 8010aa8:	f101 0c14 	add.w	ip, r1, #20
 8010aac:	2000      	movs	r0, #0
 8010aae:	f8dc 3000 	ldr.w	r3, [ip]
 8010ab2:	b299      	uxth	r1, r3
 8010ab4:	fb02 6101 	mla	r1, r2, r1, r6
 8010ab8:	0c1e      	lsrs	r6, r3, #16
 8010aba:	0c0b      	lsrs	r3, r1, #16
 8010abc:	fb02 3306 	mla	r3, r2, r6, r3
 8010ac0:	b289      	uxth	r1, r1
 8010ac2:	3001      	adds	r0, #1
 8010ac4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010ac8:	4285      	cmp	r5, r0
 8010aca:	f84c 1b04 	str.w	r1, [ip], #4
 8010ace:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010ad2:	dcec      	bgt.n	8010aae <__multadd+0x12>
 8010ad4:	b30e      	cbz	r6, 8010b1a <__multadd+0x7e>
 8010ad6:	68a3      	ldr	r3, [r4, #8]
 8010ad8:	42ab      	cmp	r3, r5
 8010ada:	dc19      	bgt.n	8010b10 <__multadd+0x74>
 8010adc:	6861      	ldr	r1, [r4, #4]
 8010ade:	4638      	mov	r0, r7
 8010ae0:	3101      	adds	r1, #1
 8010ae2:	f7ff ff79 	bl	80109d8 <_Balloc>
 8010ae6:	4680      	mov	r8, r0
 8010ae8:	b928      	cbnz	r0, 8010af6 <__multadd+0x5a>
 8010aea:	4602      	mov	r2, r0
 8010aec:	4b0c      	ldr	r3, [pc, #48]	@ (8010b20 <__multadd+0x84>)
 8010aee:	480d      	ldr	r0, [pc, #52]	@ (8010b24 <__multadd+0x88>)
 8010af0:	21ba      	movs	r1, #186	@ 0xba
 8010af2:	f7ff f807 	bl	800fb04 <__assert_func>
 8010af6:	6922      	ldr	r2, [r4, #16]
 8010af8:	3202      	adds	r2, #2
 8010afa:	f104 010c 	add.w	r1, r4, #12
 8010afe:	0092      	lsls	r2, r2, #2
 8010b00:	300c      	adds	r0, #12
 8010b02:	f7fe fff0 	bl	800fae6 <memcpy>
 8010b06:	4621      	mov	r1, r4
 8010b08:	4638      	mov	r0, r7
 8010b0a:	f7ff ffa5 	bl	8010a58 <_Bfree>
 8010b0e:	4644      	mov	r4, r8
 8010b10:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010b14:	3501      	adds	r5, #1
 8010b16:	615e      	str	r6, [r3, #20]
 8010b18:	6125      	str	r5, [r4, #16]
 8010b1a:	4620      	mov	r0, r4
 8010b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b20:	080126c1 	.word	0x080126c1
 8010b24:	080126d2 	.word	0x080126d2

08010b28 <__hi0bits>:
 8010b28:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010b2c:	4603      	mov	r3, r0
 8010b2e:	bf36      	itet	cc
 8010b30:	0403      	lslcc	r3, r0, #16
 8010b32:	2000      	movcs	r0, #0
 8010b34:	2010      	movcc	r0, #16
 8010b36:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010b3a:	bf3c      	itt	cc
 8010b3c:	021b      	lslcc	r3, r3, #8
 8010b3e:	3008      	addcc	r0, #8
 8010b40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010b44:	bf3c      	itt	cc
 8010b46:	011b      	lslcc	r3, r3, #4
 8010b48:	3004      	addcc	r0, #4
 8010b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010b4e:	bf3c      	itt	cc
 8010b50:	009b      	lslcc	r3, r3, #2
 8010b52:	3002      	addcc	r0, #2
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	db05      	blt.n	8010b64 <__hi0bits+0x3c>
 8010b58:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010b5c:	f100 0001 	add.w	r0, r0, #1
 8010b60:	bf08      	it	eq
 8010b62:	2020      	moveq	r0, #32
 8010b64:	4770      	bx	lr

08010b66 <__lo0bits>:
 8010b66:	6803      	ldr	r3, [r0, #0]
 8010b68:	4602      	mov	r2, r0
 8010b6a:	f013 0007 	ands.w	r0, r3, #7
 8010b6e:	d00b      	beq.n	8010b88 <__lo0bits+0x22>
 8010b70:	07d9      	lsls	r1, r3, #31
 8010b72:	d421      	bmi.n	8010bb8 <__lo0bits+0x52>
 8010b74:	0798      	lsls	r0, r3, #30
 8010b76:	bf49      	itett	mi
 8010b78:	085b      	lsrmi	r3, r3, #1
 8010b7a:	089b      	lsrpl	r3, r3, #2
 8010b7c:	2001      	movmi	r0, #1
 8010b7e:	6013      	strmi	r3, [r2, #0]
 8010b80:	bf5c      	itt	pl
 8010b82:	6013      	strpl	r3, [r2, #0]
 8010b84:	2002      	movpl	r0, #2
 8010b86:	4770      	bx	lr
 8010b88:	b299      	uxth	r1, r3
 8010b8a:	b909      	cbnz	r1, 8010b90 <__lo0bits+0x2a>
 8010b8c:	0c1b      	lsrs	r3, r3, #16
 8010b8e:	2010      	movs	r0, #16
 8010b90:	b2d9      	uxtb	r1, r3
 8010b92:	b909      	cbnz	r1, 8010b98 <__lo0bits+0x32>
 8010b94:	3008      	adds	r0, #8
 8010b96:	0a1b      	lsrs	r3, r3, #8
 8010b98:	0719      	lsls	r1, r3, #28
 8010b9a:	bf04      	itt	eq
 8010b9c:	091b      	lsreq	r3, r3, #4
 8010b9e:	3004      	addeq	r0, #4
 8010ba0:	0799      	lsls	r1, r3, #30
 8010ba2:	bf04      	itt	eq
 8010ba4:	089b      	lsreq	r3, r3, #2
 8010ba6:	3002      	addeq	r0, #2
 8010ba8:	07d9      	lsls	r1, r3, #31
 8010baa:	d403      	bmi.n	8010bb4 <__lo0bits+0x4e>
 8010bac:	085b      	lsrs	r3, r3, #1
 8010bae:	f100 0001 	add.w	r0, r0, #1
 8010bb2:	d003      	beq.n	8010bbc <__lo0bits+0x56>
 8010bb4:	6013      	str	r3, [r2, #0]
 8010bb6:	4770      	bx	lr
 8010bb8:	2000      	movs	r0, #0
 8010bba:	4770      	bx	lr
 8010bbc:	2020      	movs	r0, #32
 8010bbe:	4770      	bx	lr

08010bc0 <__i2b>:
 8010bc0:	b510      	push	{r4, lr}
 8010bc2:	460c      	mov	r4, r1
 8010bc4:	2101      	movs	r1, #1
 8010bc6:	f7ff ff07 	bl	80109d8 <_Balloc>
 8010bca:	4602      	mov	r2, r0
 8010bcc:	b928      	cbnz	r0, 8010bda <__i2b+0x1a>
 8010bce:	4b05      	ldr	r3, [pc, #20]	@ (8010be4 <__i2b+0x24>)
 8010bd0:	4805      	ldr	r0, [pc, #20]	@ (8010be8 <__i2b+0x28>)
 8010bd2:	f240 1145 	movw	r1, #325	@ 0x145
 8010bd6:	f7fe ff95 	bl	800fb04 <__assert_func>
 8010bda:	2301      	movs	r3, #1
 8010bdc:	6144      	str	r4, [r0, #20]
 8010bde:	6103      	str	r3, [r0, #16]
 8010be0:	bd10      	pop	{r4, pc}
 8010be2:	bf00      	nop
 8010be4:	080126c1 	.word	0x080126c1
 8010be8:	080126d2 	.word	0x080126d2

08010bec <__multiply>:
 8010bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bf0:	4614      	mov	r4, r2
 8010bf2:	690a      	ldr	r2, [r1, #16]
 8010bf4:	6923      	ldr	r3, [r4, #16]
 8010bf6:	429a      	cmp	r2, r3
 8010bf8:	bfa8      	it	ge
 8010bfa:	4623      	movge	r3, r4
 8010bfc:	460f      	mov	r7, r1
 8010bfe:	bfa4      	itt	ge
 8010c00:	460c      	movge	r4, r1
 8010c02:	461f      	movge	r7, r3
 8010c04:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8010c08:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8010c0c:	68a3      	ldr	r3, [r4, #8]
 8010c0e:	6861      	ldr	r1, [r4, #4]
 8010c10:	eb0a 0609 	add.w	r6, sl, r9
 8010c14:	42b3      	cmp	r3, r6
 8010c16:	b085      	sub	sp, #20
 8010c18:	bfb8      	it	lt
 8010c1a:	3101      	addlt	r1, #1
 8010c1c:	f7ff fedc 	bl	80109d8 <_Balloc>
 8010c20:	b930      	cbnz	r0, 8010c30 <__multiply+0x44>
 8010c22:	4602      	mov	r2, r0
 8010c24:	4b44      	ldr	r3, [pc, #272]	@ (8010d38 <__multiply+0x14c>)
 8010c26:	4845      	ldr	r0, [pc, #276]	@ (8010d3c <__multiply+0x150>)
 8010c28:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010c2c:	f7fe ff6a 	bl	800fb04 <__assert_func>
 8010c30:	f100 0514 	add.w	r5, r0, #20
 8010c34:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010c38:	462b      	mov	r3, r5
 8010c3a:	2200      	movs	r2, #0
 8010c3c:	4543      	cmp	r3, r8
 8010c3e:	d321      	bcc.n	8010c84 <__multiply+0x98>
 8010c40:	f107 0114 	add.w	r1, r7, #20
 8010c44:	f104 0214 	add.w	r2, r4, #20
 8010c48:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8010c4c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8010c50:	9302      	str	r3, [sp, #8]
 8010c52:	1b13      	subs	r3, r2, r4
 8010c54:	3b15      	subs	r3, #21
 8010c56:	f023 0303 	bic.w	r3, r3, #3
 8010c5a:	3304      	adds	r3, #4
 8010c5c:	f104 0715 	add.w	r7, r4, #21
 8010c60:	42ba      	cmp	r2, r7
 8010c62:	bf38      	it	cc
 8010c64:	2304      	movcc	r3, #4
 8010c66:	9301      	str	r3, [sp, #4]
 8010c68:	9b02      	ldr	r3, [sp, #8]
 8010c6a:	9103      	str	r1, [sp, #12]
 8010c6c:	428b      	cmp	r3, r1
 8010c6e:	d80c      	bhi.n	8010c8a <__multiply+0x9e>
 8010c70:	2e00      	cmp	r6, #0
 8010c72:	dd03      	ble.n	8010c7c <__multiply+0x90>
 8010c74:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d05b      	beq.n	8010d34 <__multiply+0x148>
 8010c7c:	6106      	str	r6, [r0, #16]
 8010c7e:	b005      	add	sp, #20
 8010c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c84:	f843 2b04 	str.w	r2, [r3], #4
 8010c88:	e7d8      	b.n	8010c3c <__multiply+0x50>
 8010c8a:	f8b1 a000 	ldrh.w	sl, [r1]
 8010c8e:	f1ba 0f00 	cmp.w	sl, #0
 8010c92:	d024      	beq.n	8010cde <__multiply+0xf2>
 8010c94:	f104 0e14 	add.w	lr, r4, #20
 8010c98:	46a9      	mov	r9, r5
 8010c9a:	f04f 0c00 	mov.w	ip, #0
 8010c9e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010ca2:	f8d9 3000 	ldr.w	r3, [r9]
 8010ca6:	fa1f fb87 	uxth.w	fp, r7
 8010caa:	b29b      	uxth	r3, r3
 8010cac:	fb0a 330b 	mla	r3, sl, fp, r3
 8010cb0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8010cb4:	f8d9 7000 	ldr.w	r7, [r9]
 8010cb8:	4463      	add	r3, ip
 8010cba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010cbe:	fb0a c70b 	mla	r7, sl, fp, ip
 8010cc2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8010cc6:	b29b      	uxth	r3, r3
 8010cc8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010ccc:	4572      	cmp	r2, lr
 8010cce:	f849 3b04 	str.w	r3, [r9], #4
 8010cd2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010cd6:	d8e2      	bhi.n	8010c9e <__multiply+0xb2>
 8010cd8:	9b01      	ldr	r3, [sp, #4]
 8010cda:	f845 c003 	str.w	ip, [r5, r3]
 8010cde:	9b03      	ldr	r3, [sp, #12]
 8010ce0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010ce4:	3104      	adds	r1, #4
 8010ce6:	f1b9 0f00 	cmp.w	r9, #0
 8010cea:	d021      	beq.n	8010d30 <__multiply+0x144>
 8010cec:	682b      	ldr	r3, [r5, #0]
 8010cee:	f104 0c14 	add.w	ip, r4, #20
 8010cf2:	46ae      	mov	lr, r5
 8010cf4:	f04f 0a00 	mov.w	sl, #0
 8010cf8:	f8bc b000 	ldrh.w	fp, [ip]
 8010cfc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8010d00:	fb09 770b 	mla	r7, r9, fp, r7
 8010d04:	4457      	add	r7, sl
 8010d06:	b29b      	uxth	r3, r3
 8010d08:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010d0c:	f84e 3b04 	str.w	r3, [lr], #4
 8010d10:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010d14:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010d18:	f8be 3000 	ldrh.w	r3, [lr]
 8010d1c:	fb09 330a 	mla	r3, r9, sl, r3
 8010d20:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8010d24:	4562      	cmp	r2, ip
 8010d26:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010d2a:	d8e5      	bhi.n	8010cf8 <__multiply+0x10c>
 8010d2c:	9f01      	ldr	r7, [sp, #4]
 8010d2e:	51eb      	str	r3, [r5, r7]
 8010d30:	3504      	adds	r5, #4
 8010d32:	e799      	b.n	8010c68 <__multiply+0x7c>
 8010d34:	3e01      	subs	r6, #1
 8010d36:	e79b      	b.n	8010c70 <__multiply+0x84>
 8010d38:	080126c1 	.word	0x080126c1
 8010d3c:	080126d2 	.word	0x080126d2

08010d40 <__pow5mult>:
 8010d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d44:	4615      	mov	r5, r2
 8010d46:	f012 0203 	ands.w	r2, r2, #3
 8010d4a:	4607      	mov	r7, r0
 8010d4c:	460e      	mov	r6, r1
 8010d4e:	d007      	beq.n	8010d60 <__pow5mult+0x20>
 8010d50:	4c25      	ldr	r4, [pc, #148]	@ (8010de8 <__pow5mult+0xa8>)
 8010d52:	3a01      	subs	r2, #1
 8010d54:	2300      	movs	r3, #0
 8010d56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010d5a:	f7ff fe9f 	bl	8010a9c <__multadd>
 8010d5e:	4606      	mov	r6, r0
 8010d60:	10ad      	asrs	r5, r5, #2
 8010d62:	d03d      	beq.n	8010de0 <__pow5mult+0xa0>
 8010d64:	69fc      	ldr	r4, [r7, #28]
 8010d66:	b97c      	cbnz	r4, 8010d88 <__pow5mult+0x48>
 8010d68:	2010      	movs	r0, #16
 8010d6a:	f7ff fd7f 	bl	801086c <malloc>
 8010d6e:	4602      	mov	r2, r0
 8010d70:	61f8      	str	r0, [r7, #28]
 8010d72:	b928      	cbnz	r0, 8010d80 <__pow5mult+0x40>
 8010d74:	4b1d      	ldr	r3, [pc, #116]	@ (8010dec <__pow5mult+0xac>)
 8010d76:	481e      	ldr	r0, [pc, #120]	@ (8010df0 <__pow5mult+0xb0>)
 8010d78:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010d7c:	f7fe fec2 	bl	800fb04 <__assert_func>
 8010d80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010d84:	6004      	str	r4, [r0, #0]
 8010d86:	60c4      	str	r4, [r0, #12]
 8010d88:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010d8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010d90:	b94c      	cbnz	r4, 8010da6 <__pow5mult+0x66>
 8010d92:	f240 2171 	movw	r1, #625	@ 0x271
 8010d96:	4638      	mov	r0, r7
 8010d98:	f7ff ff12 	bl	8010bc0 <__i2b>
 8010d9c:	2300      	movs	r3, #0
 8010d9e:	f8c8 0008 	str.w	r0, [r8, #8]
 8010da2:	4604      	mov	r4, r0
 8010da4:	6003      	str	r3, [r0, #0]
 8010da6:	f04f 0900 	mov.w	r9, #0
 8010daa:	07eb      	lsls	r3, r5, #31
 8010dac:	d50a      	bpl.n	8010dc4 <__pow5mult+0x84>
 8010dae:	4631      	mov	r1, r6
 8010db0:	4622      	mov	r2, r4
 8010db2:	4638      	mov	r0, r7
 8010db4:	f7ff ff1a 	bl	8010bec <__multiply>
 8010db8:	4631      	mov	r1, r6
 8010dba:	4680      	mov	r8, r0
 8010dbc:	4638      	mov	r0, r7
 8010dbe:	f7ff fe4b 	bl	8010a58 <_Bfree>
 8010dc2:	4646      	mov	r6, r8
 8010dc4:	106d      	asrs	r5, r5, #1
 8010dc6:	d00b      	beq.n	8010de0 <__pow5mult+0xa0>
 8010dc8:	6820      	ldr	r0, [r4, #0]
 8010dca:	b938      	cbnz	r0, 8010ddc <__pow5mult+0x9c>
 8010dcc:	4622      	mov	r2, r4
 8010dce:	4621      	mov	r1, r4
 8010dd0:	4638      	mov	r0, r7
 8010dd2:	f7ff ff0b 	bl	8010bec <__multiply>
 8010dd6:	6020      	str	r0, [r4, #0]
 8010dd8:	f8c0 9000 	str.w	r9, [r0]
 8010ddc:	4604      	mov	r4, r0
 8010dde:	e7e4      	b.n	8010daa <__pow5mult+0x6a>
 8010de0:	4630      	mov	r0, r6
 8010de2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010de6:	bf00      	nop
 8010de8:	0801272c 	.word	0x0801272c
 8010dec:	08012652 	.word	0x08012652
 8010df0:	080126d2 	.word	0x080126d2

08010df4 <__lshift>:
 8010df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010df8:	460c      	mov	r4, r1
 8010dfa:	6849      	ldr	r1, [r1, #4]
 8010dfc:	6923      	ldr	r3, [r4, #16]
 8010dfe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010e02:	68a3      	ldr	r3, [r4, #8]
 8010e04:	4607      	mov	r7, r0
 8010e06:	4691      	mov	r9, r2
 8010e08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010e0c:	f108 0601 	add.w	r6, r8, #1
 8010e10:	42b3      	cmp	r3, r6
 8010e12:	db0b      	blt.n	8010e2c <__lshift+0x38>
 8010e14:	4638      	mov	r0, r7
 8010e16:	f7ff fddf 	bl	80109d8 <_Balloc>
 8010e1a:	4605      	mov	r5, r0
 8010e1c:	b948      	cbnz	r0, 8010e32 <__lshift+0x3e>
 8010e1e:	4602      	mov	r2, r0
 8010e20:	4b28      	ldr	r3, [pc, #160]	@ (8010ec4 <__lshift+0xd0>)
 8010e22:	4829      	ldr	r0, [pc, #164]	@ (8010ec8 <__lshift+0xd4>)
 8010e24:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010e28:	f7fe fe6c 	bl	800fb04 <__assert_func>
 8010e2c:	3101      	adds	r1, #1
 8010e2e:	005b      	lsls	r3, r3, #1
 8010e30:	e7ee      	b.n	8010e10 <__lshift+0x1c>
 8010e32:	2300      	movs	r3, #0
 8010e34:	f100 0114 	add.w	r1, r0, #20
 8010e38:	f100 0210 	add.w	r2, r0, #16
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	4553      	cmp	r3, sl
 8010e40:	db33      	blt.n	8010eaa <__lshift+0xb6>
 8010e42:	6920      	ldr	r0, [r4, #16]
 8010e44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010e48:	f104 0314 	add.w	r3, r4, #20
 8010e4c:	f019 091f 	ands.w	r9, r9, #31
 8010e50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010e54:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010e58:	d02b      	beq.n	8010eb2 <__lshift+0xbe>
 8010e5a:	f1c9 0e20 	rsb	lr, r9, #32
 8010e5e:	468a      	mov	sl, r1
 8010e60:	2200      	movs	r2, #0
 8010e62:	6818      	ldr	r0, [r3, #0]
 8010e64:	fa00 f009 	lsl.w	r0, r0, r9
 8010e68:	4310      	orrs	r0, r2
 8010e6a:	f84a 0b04 	str.w	r0, [sl], #4
 8010e6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e72:	459c      	cmp	ip, r3
 8010e74:	fa22 f20e 	lsr.w	r2, r2, lr
 8010e78:	d8f3      	bhi.n	8010e62 <__lshift+0x6e>
 8010e7a:	ebac 0304 	sub.w	r3, ip, r4
 8010e7e:	3b15      	subs	r3, #21
 8010e80:	f023 0303 	bic.w	r3, r3, #3
 8010e84:	3304      	adds	r3, #4
 8010e86:	f104 0015 	add.w	r0, r4, #21
 8010e8a:	4584      	cmp	ip, r0
 8010e8c:	bf38      	it	cc
 8010e8e:	2304      	movcc	r3, #4
 8010e90:	50ca      	str	r2, [r1, r3]
 8010e92:	b10a      	cbz	r2, 8010e98 <__lshift+0xa4>
 8010e94:	f108 0602 	add.w	r6, r8, #2
 8010e98:	3e01      	subs	r6, #1
 8010e9a:	4638      	mov	r0, r7
 8010e9c:	612e      	str	r6, [r5, #16]
 8010e9e:	4621      	mov	r1, r4
 8010ea0:	f7ff fdda 	bl	8010a58 <_Bfree>
 8010ea4:	4628      	mov	r0, r5
 8010ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010eaa:	f842 0f04 	str.w	r0, [r2, #4]!
 8010eae:	3301      	adds	r3, #1
 8010eb0:	e7c5      	b.n	8010e3e <__lshift+0x4a>
 8010eb2:	3904      	subs	r1, #4
 8010eb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8010eb8:	f841 2f04 	str.w	r2, [r1, #4]!
 8010ebc:	459c      	cmp	ip, r3
 8010ebe:	d8f9      	bhi.n	8010eb4 <__lshift+0xc0>
 8010ec0:	e7ea      	b.n	8010e98 <__lshift+0xa4>
 8010ec2:	bf00      	nop
 8010ec4:	080126c1 	.word	0x080126c1
 8010ec8:	080126d2 	.word	0x080126d2

08010ecc <__mcmp>:
 8010ecc:	690a      	ldr	r2, [r1, #16]
 8010ece:	4603      	mov	r3, r0
 8010ed0:	6900      	ldr	r0, [r0, #16]
 8010ed2:	1a80      	subs	r0, r0, r2
 8010ed4:	b530      	push	{r4, r5, lr}
 8010ed6:	d10e      	bne.n	8010ef6 <__mcmp+0x2a>
 8010ed8:	3314      	adds	r3, #20
 8010eda:	3114      	adds	r1, #20
 8010edc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010ee0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010ee4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010ee8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010eec:	4295      	cmp	r5, r2
 8010eee:	d003      	beq.n	8010ef8 <__mcmp+0x2c>
 8010ef0:	d205      	bcs.n	8010efe <__mcmp+0x32>
 8010ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8010ef6:	bd30      	pop	{r4, r5, pc}
 8010ef8:	42a3      	cmp	r3, r4
 8010efa:	d3f3      	bcc.n	8010ee4 <__mcmp+0x18>
 8010efc:	e7fb      	b.n	8010ef6 <__mcmp+0x2a>
 8010efe:	2001      	movs	r0, #1
 8010f00:	e7f9      	b.n	8010ef6 <__mcmp+0x2a>
	...

08010f04 <__mdiff>:
 8010f04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f08:	4689      	mov	r9, r1
 8010f0a:	4606      	mov	r6, r0
 8010f0c:	4611      	mov	r1, r2
 8010f0e:	4648      	mov	r0, r9
 8010f10:	4614      	mov	r4, r2
 8010f12:	f7ff ffdb 	bl	8010ecc <__mcmp>
 8010f16:	1e05      	subs	r5, r0, #0
 8010f18:	d112      	bne.n	8010f40 <__mdiff+0x3c>
 8010f1a:	4629      	mov	r1, r5
 8010f1c:	4630      	mov	r0, r6
 8010f1e:	f7ff fd5b 	bl	80109d8 <_Balloc>
 8010f22:	4602      	mov	r2, r0
 8010f24:	b928      	cbnz	r0, 8010f32 <__mdiff+0x2e>
 8010f26:	4b3f      	ldr	r3, [pc, #252]	@ (8011024 <__mdiff+0x120>)
 8010f28:	f240 2137 	movw	r1, #567	@ 0x237
 8010f2c:	483e      	ldr	r0, [pc, #248]	@ (8011028 <__mdiff+0x124>)
 8010f2e:	f7fe fde9 	bl	800fb04 <__assert_func>
 8010f32:	2301      	movs	r3, #1
 8010f34:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010f38:	4610      	mov	r0, r2
 8010f3a:	b003      	add	sp, #12
 8010f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f40:	bfbc      	itt	lt
 8010f42:	464b      	movlt	r3, r9
 8010f44:	46a1      	movlt	r9, r4
 8010f46:	4630      	mov	r0, r6
 8010f48:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010f4c:	bfba      	itte	lt
 8010f4e:	461c      	movlt	r4, r3
 8010f50:	2501      	movlt	r5, #1
 8010f52:	2500      	movge	r5, #0
 8010f54:	f7ff fd40 	bl	80109d8 <_Balloc>
 8010f58:	4602      	mov	r2, r0
 8010f5a:	b918      	cbnz	r0, 8010f64 <__mdiff+0x60>
 8010f5c:	4b31      	ldr	r3, [pc, #196]	@ (8011024 <__mdiff+0x120>)
 8010f5e:	f240 2145 	movw	r1, #581	@ 0x245
 8010f62:	e7e3      	b.n	8010f2c <__mdiff+0x28>
 8010f64:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010f68:	6926      	ldr	r6, [r4, #16]
 8010f6a:	60c5      	str	r5, [r0, #12]
 8010f6c:	f109 0310 	add.w	r3, r9, #16
 8010f70:	f109 0514 	add.w	r5, r9, #20
 8010f74:	f104 0e14 	add.w	lr, r4, #20
 8010f78:	f100 0b14 	add.w	fp, r0, #20
 8010f7c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010f80:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010f84:	9301      	str	r3, [sp, #4]
 8010f86:	46d9      	mov	r9, fp
 8010f88:	f04f 0c00 	mov.w	ip, #0
 8010f8c:	9b01      	ldr	r3, [sp, #4]
 8010f8e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8010f92:	f853 af04 	ldr.w	sl, [r3, #4]!
 8010f96:	9301      	str	r3, [sp, #4]
 8010f98:	fa1f f38a 	uxth.w	r3, sl
 8010f9c:	4619      	mov	r1, r3
 8010f9e:	b283      	uxth	r3, r0
 8010fa0:	1acb      	subs	r3, r1, r3
 8010fa2:	0c00      	lsrs	r0, r0, #16
 8010fa4:	4463      	add	r3, ip
 8010fa6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8010faa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8010fae:	b29b      	uxth	r3, r3
 8010fb0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010fb4:	4576      	cmp	r6, lr
 8010fb6:	f849 3b04 	str.w	r3, [r9], #4
 8010fba:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010fbe:	d8e5      	bhi.n	8010f8c <__mdiff+0x88>
 8010fc0:	1b33      	subs	r3, r6, r4
 8010fc2:	3b15      	subs	r3, #21
 8010fc4:	f023 0303 	bic.w	r3, r3, #3
 8010fc8:	3415      	adds	r4, #21
 8010fca:	3304      	adds	r3, #4
 8010fcc:	42a6      	cmp	r6, r4
 8010fce:	bf38      	it	cc
 8010fd0:	2304      	movcc	r3, #4
 8010fd2:	441d      	add	r5, r3
 8010fd4:	445b      	add	r3, fp
 8010fd6:	461e      	mov	r6, r3
 8010fd8:	462c      	mov	r4, r5
 8010fda:	4544      	cmp	r4, r8
 8010fdc:	d30e      	bcc.n	8010ffc <__mdiff+0xf8>
 8010fde:	f108 0103 	add.w	r1, r8, #3
 8010fe2:	1b49      	subs	r1, r1, r5
 8010fe4:	f021 0103 	bic.w	r1, r1, #3
 8010fe8:	3d03      	subs	r5, #3
 8010fea:	45a8      	cmp	r8, r5
 8010fec:	bf38      	it	cc
 8010fee:	2100      	movcc	r1, #0
 8010ff0:	440b      	add	r3, r1
 8010ff2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010ff6:	b191      	cbz	r1, 801101e <__mdiff+0x11a>
 8010ff8:	6117      	str	r7, [r2, #16]
 8010ffa:	e79d      	b.n	8010f38 <__mdiff+0x34>
 8010ffc:	f854 1b04 	ldr.w	r1, [r4], #4
 8011000:	46e6      	mov	lr, ip
 8011002:	0c08      	lsrs	r0, r1, #16
 8011004:	fa1c fc81 	uxtah	ip, ip, r1
 8011008:	4471      	add	r1, lr
 801100a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801100e:	b289      	uxth	r1, r1
 8011010:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011014:	f846 1b04 	str.w	r1, [r6], #4
 8011018:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801101c:	e7dd      	b.n	8010fda <__mdiff+0xd6>
 801101e:	3f01      	subs	r7, #1
 8011020:	e7e7      	b.n	8010ff2 <__mdiff+0xee>
 8011022:	bf00      	nop
 8011024:	080126c1 	.word	0x080126c1
 8011028:	080126d2 	.word	0x080126d2

0801102c <__d2b>:
 801102c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011030:	460f      	mov	r7, r1
 8011032:	2101      	movs	r1, #1
 8011034:	ec59 8b10 	vmov	r8, r9, d0
 8011038:	4616      	mov	r6, r2
 801103a:	f7ff fccd 	bl	80109d8 <_Balloc>
 801103e:	4604      	mov	r4, r0
 8011040:	b930      	cbnz	r0, 8011050 <__d2b+0x24>
 8011042:	4602      	mov	r2, r0
 8011044:	4b23      	ldr	r3, [pc, #140]	@ (80110d4 <__d2b+0xa8>)
 8011046:	4824      	ldr	r0, [pc, #144]	@ (80110d8 <__d2b+0xac>)
 8011048:	f240 310f 	movw	r1, #783	@ 0x30f
 801104c:	f7fe fd5a 	bl	800fb04 <__assert_func>
 8011050:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011054:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011058:	b10d      	cbz	r5, 801105e <__d2b+0x32>
 801105a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801105e:	9301      	str	r3, [sp, #4]
 8011060:	f1b8 0300 	subs.w	r3, r8, #0
 8011064:	d023      	beq.n	80110ae <__d2b+0x82>
 8011066:	4668      	mov	r0, sp
 8011068:	9300      	str	r3, [sp, #0]
 801106a:	f7ff fd7c 	bl	8010b66 <__lo0bits>
 801106e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011072:	b1d0      	cbz	r0, 80110aa <__d2b+0x7e>
 8011074:	f1c0 0320 	rsb	r3, r0, #32
 8011078:	fa02 f303 	lsl.w	r3, r2, r3
 801107c:	430b      	orrs	r3, r1
 801107e:	40c2      	lsrs	r2, r0
 8011080:	6163      	str	r3, [r4, #20]
 8011082:	9201      	str	r2, [sp, #4]
 8011084:	9b01      	ldr	r3, [sp, #4]
 8011086:	61a3      	str	r3, [r4, #24]
 8011088:	2b00      	cmp	r3, #0
 801108a:	bf0c      	ite	eq
 801108c:	2201      	moveq	r2, #1
 801108e:	2202      	movne	r2, #2
 8011090:	6122      	str	r2, [r4, #16]
 8011092:	b1a5      	cbz	r5, 80110be <__d2b+0x92>
 8011094:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011098:	4405      	add	r5, r0
 801109a:	603d      	str	r5, [r7, #0]
 801109c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80110a0:	6030      	str	r0, [r6, #0]
 80110a2:	4620      	mov	r0, r4
 80110a4:	b003      	add	sp, #12
 80110a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80110aa:	6161      	str	r1, [r4, #20]
 80110ac:	e7ea      	b.n	8011084 <__d2b+0x58>
 80110ae:	a801      	add	r0, sp, #4
 80110b0:	f7ff fd59 	bl	8010b66 <__lo0bits>
 80110b4:	9b01      	ldr	r3, [sp, #4]
 80110b6:	6163      	str	r3, [r4, #20]
 80110b8:	3020      	adds	r0, #32
 80110ba:	2201      	movs	r2, #1
 80110bc:	e7e8      	b.n	8011090 <__d2b+0x64>
 80110be:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80110c2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80110c6:	6038      	str	r0, [r7, #0]
 80110c8:	6918      	ldr	r0, [r3, #16]
 80110ca:	f7ff fd2d 	bl	8010b28 <__hi0bits>
 80110ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80110d2:	e7e5      	b.n	80110a0 <__d2b+0x74>
 80110d4:	080126c1 	.word	0x080126c1
 80110d8:	080126d2 	.word	0x080126d2

080110dc <__ssputs_r>:
 80110dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80110e0:	688e      	ldr	r6, [r1, #8]
 80110e2:	461f      	mov	r7, r3
 80110e4:	42be      	cmp	r6, r7
 80110e6:	680b      	ldr	r3, [r1, #0]
 80110e8:	4682      	mov	sl, r0
 80110ea:	460c      	mov	r4, r1
 80110ec:	4690      	mov	r8, r2
 80110ee:	d82d      	bhi.n	801114c <__ssputs_r+0x70>
 80110f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80110f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80110f8:	d026      	beq.n	8011148 <__ssputs_r+0x6c>
 80110fa:	6965      	ldr	r5, [r4, #20]
 80110fc:	6909      	ldr	r1, [r1, #16]
 80110fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011102:	eba3 0901 	sub.w	r9, r3, r1
 8011106:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801110a:	1c7b      	adds	r3, r7, #1
 801110c:	444b      	add	r3, r9
 801110e:	106d      	asrs	r5, r5, #1
 8011110:	429d      	cmp	r5, r3
 8011112:	bf38      	it	cc
 8011114:	461d      	movcc	r5, r3
 8011116:	0553      	lsls	r3, r2, #21
 8011118:	d527      	bpl.n	801116a <__ssputs_r+0x8e>
 801111a:	4629      	mov	r1, r5
 801111c:	f7ff fbd0 	bl	80108c0 <_malloc_r>
 8011120:	4606      	mov	r6, r0
 8011122:	b360      	cbz	r0, 801117e <__ssputs_r+0xa2>
 8011124:	6921      	ldr	r1, [r4, #16]
 8011126:	464a      	mov	r2, r9
 8011128:	f7fe fcdd 	bl	800fae6 <memcpy>
 801112c:	89a3      	ldrh	r3, [r4, #12]
 801112e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011132:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011136:	81a3      	strh	r3, [r4, #12]
 8011138:	6126      	str	r6, [r4, #16]
 801113a:	6165      	str	r5, [r4, #20]
 801113c:	444e      	add	r6, r9
 801113e:	eba5 0509 	sub.w	r5, r5, r9
 8011142:	6026      	str	r6, [r4, #0]
 8011144:	60a5      	str	r5, [r4, #8]
 8011146:	463e      	mov	r6, r7
 8011148:	42be      	cmp	r6, r7
 801114a:	d900      	bls.n	801114e <__ssputs_r+0x72>
 801114c:	463e      	mov	r6, r7
 801114e:	6820      	ldr	r0, [r4, #0]
 8011150:	4632      	mov	r2, r6
 8011152:	4641      	mov	r1, r8
 8011154:	f000 f9d8 	bl	8011508 <memmove>
 8011158:	68a3      	ldr	r3, [r4, #8]
 801115a:	1b9b      	subs	r3, r3, r6
 801115c:	60a3      	str	r3, [r4, #8]
 801115e:	6823      	ldr	r3, [r4, #0]
 8011160:	4433      	add	r3, r6
 8011162:	6023      	str	r3, [r4, #0]
 8011164:	2000      	movs	r0, #0
 8011166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801116a:	462a      	mov	r2, r5
 801116c:	f000 fa23 	bl	80115b6 <_realloc_r>
 8011170:	4606      	mov	r6, r0
 8011172:	2800      	cmp	r0, #0
 8011174:	d1e0      	bne.n	8011138 <__ssputs_r+0x5c>
 8011176:	6921      	ldr	r1, [r4, #16]
 8011178:	4650      	mov	r0, sl
 801117a:	f7ff fb2d 	bl	80107d8 <_free_r>
 801117e:	230c      	movs	r3, #12
 8011180:	f8ca 3000 	str.w	r3, [sl]
 8011184:	89a3      	ldrh	r3, [r4, #12]
 8011186:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801118a:	81a3      	strh	r3, [r4, #12]
 801118c:	f04f 30ff 	mov.w	r0, #4294967295
 8011190:	e7e9      	b.n	8011166 <__ssputs_r+0x8a>
	...

08011194 <_svfiprintf_r>:
 8011194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011198:	4698      	mov	r8, r3
 801119a:	898b      	ldrh	r3, [r1, #12]
 801119c:	061b      	lsls	r3, r3, #24
 801119e:	b09d      	sub	sp, #116	@ 0x74
 80111a0:	4607      	mov	r7, r0
 80111a2:	460d      	mov	r5, r1
 80111a4:	4614      	mov	r4, r2
 80111a6:	d510      	bpl.n	80111ca <_svfiprintf_r+0x36>
 80111a8:	690b      	ldr	r3, [r1, #16]
 80111aa:	b973      	cbnz	r3, 80111ca <_svfiprintf_r+0x36>
 80111ac:	2140      	movs	r1, #64	@ 0x40
 80111ae:	f7ff fb87 	bl	80108c0 <_malloc_r>
 80111b2:	6028      	str	r0, [r5, #0]
 80111b4:	6128      	str	r0, [r5, #16]
 80111b6:	b930      	cbnz	r0, 80111c6 <_svfiprintf_r+0x32>
 80111b8:	230c      	movs	r3, #12
 80111ba:	603b      	str	r3, [r7, #0]
 80111bc:	f04f 30ff 	mov.w	r0, #4294967295
 80111c0:	b01d      	add	sp, #116	@ 0x74
 80111c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111c6:	2340      	movs	r3, #64	@ 0x40
 80111c8:	616b      	str	r3, [r5, #20]
 80111ca:	2300      	movs	r3, #0
 80111cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80111ce:	2320      	movs	r3, #32
 80111d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80111d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80111d8:	2330      	movs	r3, #48	@ 0x30
 80111da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011378 <_svfiprintf_r+0x1e4>
 80111de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80111e2:	f04f 0901 	mov.w	r9, #1
 80111e6:	4623      	mov	r3, r4
 80111e8:	469a      	mov	sl, r3
 80111ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80111ee:	b10a      	cbz	r2, 80111f4 <_svfiprintf_r+0x60>
 80111f0:	2a25      	cmp	r2, #37	@ 0x25
 80111f2:	d1f9      	bne.n	80111e8 <_svfiprintf_r+0x54>
 80111f4:	ebba 0b04 	subs.w	fp, sl, r4
 80111f8:	d00b      	beq.n	8011212 <_svfiprintf_r+0x7e>
 80111fa:	465b      	mov	r3, fp
 80111fc:	4622      	mov	r2, r4
 80111fe:	4629      	mov	r1, r5
 8011200:	4638      	mov	r0, r7
 8011202:	f7ff ff6b 	bl	80110dc <__ssputs_r>
 8011206:	3001      	adds	r0, #1
 8011208:	f000 80a7 	beq.w	801135a <_svfiprintf_r+0x1c6>
 801120c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801120e:	445a      	add	r2, fp
 8011210:	9209      	str	r2, [sp, #36]	@ 0x24
 8011212:	f89a 3000 	ldrb.w	r3, [sl]
 8011216:	2b00      	cmp	r3, #0
 8011218:	f000 809f 	beq.w	801135a <_svfiprintf_r+0x1c6>
 801121c:	2300      	movs	r3, #0
 801121e:	f04f 32ff 	mov.w	r2, #4294967295
 8011222:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011226:	f10a 0a01 	add.w	sl, sl, #1
 801122a:	9304      	str	r3, [sp, #16]
 801122c:	9307      	str	r3, [sp, #28]
 801122e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011232:	931a      	str	r3, [sp, #104]	@ 0x68
 8011234:	4654      	mov	r4, sl
 8011236:	2205      	movs	r2, #5
 8011238:	f814 1b01 	ldrb.w	r1, [r4], #1
 801123c:	484e      	ldr	r0, [pc, #312]	@ (8011378 <_svfiprintf_r+0x1e4>)
 801123e:	f7ee ffc7 	bl	80001d0 <memchr>
 8011242:	9a04      	ldr	r2, [sp, #16]
 8011244:	b9d8      	cbnz	r0, 801127e <_svfiprintf_r+0xea>
 8011246:	06d0      	lsls	r0, r2, #27
 8011248:	bf44      	itt	mi
 801124a:	2320      	movmi	r3, #32
 801124c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011250:	0711      	lsls	r1, r2, #28
 8011252:	bf44      	itt	mi
 8011254:	232b      	movmi	r3, #43	@ 0x2b
 8011256:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801125a:	f89a 3000 	ldrb.w	r3, [sl]
 801125e:	2b2a      	cmp	r3, #42	@ 0x2a
 8011260:	d015      	beq.n	801128e <_svfiprintf_r+0xfa>
 8011262:	9a07      	ldr	r2, [sp, #28]
 8011264:	4654      	mov	r4, sl
 8011266:	2000      	movs	r0, #0
 8011268:	f04f 0c0a 	mov.w	ip, #10
 801126c:	4621      	mov	r1, r4
 801126e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011272:	3b30      	subs	r3, #48	@ 0x30
 8011274:	2b09      	cmp	r3, #9
 8011276:	d94b      	bls.n	8011310 <_svfiprintf_r+0x17c>
 8011278:	b1b0      	cbz	r0, 80112a8 <_svfiprintf_r+0x114>
 801127a:	9207      	str	r2, [sp, #28]
 801127c:	e014      	b.n	80112a8 <_svfiprintf_r+0x114>
 801127e:	eba0 0308 	sub.w	r3, r0, r8
 8011282:	fa09 f303 	lsl.w	r3, r9, r3
 8011286:	4313      	orrs	r3, r2
 8011288:	9304      	str	r3, [sp, #16]
 801128a:	46a2      	mov	sl, r4
 801128c:	e7d2      	b.n	8011234 <_svfiprintf_r+0xa0>
 801128e:	9b03      	ldr	r3, [sp, #12]
 8011290:	1d19      	adds	r1, r3, #4
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	9103      	str	r1, [sp, #12]
 8011296:	2b00      	cmp	r3, #0
 8011298:	bfbb      	ittet	lt
 801129a:	425b      	neglt	r3, r3
 801129c:	f042 0202 	orrlt.w	r2, r2, #2
 80112a0:	9307      	strge	r3, [sp, #28]
 80112a2:	9307      	strlt	r3, [sp, #28]
 80112a4:	bfb8      	it	lt
 80112a6:	9204      	strlt	r2, [sp, #16]
 80112a8:	7823      	ldrb	r3, [r4, #0]
 80112aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80112ac:	d10a      	bne.n	80112c4 <_svfiprintf_r+0x130>
 80112ae:	7863      	ldrb	r3, [r4, #1]
 80112b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80112b2:	d132      	bne.n	801131a <_svfiprintf_r+0x186>
 80112b4:	9b03      	ldr	r3, [sp, #12]
 80112b6:	1d1a      	adds	r2, r3, #4
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	9203      	str	r2, [sp, #12]
 80112bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80112c0:	3402      	adds	r4, #2
 80112c2:	9305      	str	r3, [sp, #20]
 80112c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011388 <_svfiprintf_r+0x1f4>
 80112c8:	7821      	ldrb	r1, [r4, #0]
 80112ca:	2203      	movs	r2, #3
 80112cc:	4650      	mov	r0, sl
 80112ce:	f7ee ff7f 	bl	80001d0 <memchr>
 80112d2:	b138      	cbz	r0, 80112e4 <_svfiprintf_r+0x150>
 80112d4:	9b04      	ldr	r3, [sp, #16]
 80112d6:	eba0 000a 	sub.w	r0, r0, sl
 80112da:	2240      	movs	r2, #64	@ 0x40
 80112dc:	4082      	lsls	r2, r0
 80112de:	4313      	orrs	r3, r2
 80112e0:	3401      	adds	r4, #1
 80112e2:	9304      	str	r3, [sp, #16]
 80112e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80112e8:	4824      	ldr	r0, [pc, #144]	@ (801137c <_svfiprintf_r+0x1e8>)
 80112ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80112ee:	2206      	movs	r2, #6
 80112f0:	f7ee ff6e 	bl	80001d0 <memchr>
 80112f4:	2800      	cmp	r0, #0
 80112f6:	d036      	beq.n	8011366 <_svfiprintf_r+0x1d2>
 80112f8:	4b21      	ldr	r3, [pc, #132]	@ (8011380 <_svfiprintf_r+0x1ec>)
 80112fa:	bb1b      	cbnz	r3, 8011344 <_svfiprintf_r+0x1b0>
 80112fc:	9b03      	ldr	r3, [sp, #12]
 80112fe:	3307      	adds	r3, #7
 8011300:	f023 0307 	bic.w	r3, r3, #7
 8011304:	3308      	adds	r3, #8
 8011306:	9303      	str	r3, [sp, #12]
 8011308:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801130a:	4433      	add	r3, r6
 801130c:	9309      	str	r3, [sp, #36]	@ 0x24
 801130e:	e76a      	b.n	80111e6 <_svfiprintf_r+0x52>
 8011310:	fb0c 3202 	mla	r2, ip, r2, r3
 8011314:	460c      	mov	r4, r1
 8011316:	2001      	movs	r0, #1
 8011318:	e7a8      	b.n	801126c <_svfiprintf_r+0xd8>
 801131a:	2300      	movs	r3, #0
 801131c:	3401      	adds	r4, #1
 801131e:	9305      	str	r3, [sp, #20]
 8011320:	4619      	mov	r1, r3
 8011322:	f04f 0c0a 	mov.w	ip, #10
 8011326:	4620      	mov	r0, r4
 8011328:	f810 2b01 	ldrb.w	r2, [r0], #1
 801132c:	3a30      	subs	r2, #48	@ 0x30
 801132e:	2a09      	cmp	r2, #9
 8011330:	d903      	bls.n	801133a <_svfiprintf_r+0x1a6>
 8011332:	2b00      	cmp	r3, #0
 8011334:	d0c6      	beq.n	80112c4 <_svfiprintf_r+0x130>
 8011336:	9105      	str	r1, [sp, #20]
 8011338:	e7c4      	b.n	80112c4 <_svfiprintf_r+0x130>
 801133a:	fb0c 2101 	mla	r1, ip, r1, r2
 801133e:	4604      	mov	r4, r0
 8011340:	2301      	movs	r3, #1
 8011342:	e7f0      	b.n	8011326 <_svfiprintf_r+0x192>
 8011344:	ab03      	add	r3, sp, #12
 8011346:	9300      	str	r3, [sp, #0]
 8011348:	462a      	mov	r2, r5
 801134a:	4b0e      	ldr	r3, [pc, #56]	@ (8011384 <_svfiprintf_r+0x1f0>)
 801134c:	a904      	add	r1, sp, #16
 801134e:	4638      	mov	r0, r7
 8011350:	f7fd fdd8 	bl	800ef04 <_printf_float>
 8011354:	1c42      	adds	r2, r0, #1
 8011356:	4606      	mov	r6, r0
 8011358:	d1d6      	bne.n	8011308 <_svfiprintf_r+0x174>
 801135a:	89ab      	ldrh	r3, [r5, #12]
 801135c:	065b      	lsls	r3, r3, #25
 801135e:	f53f af2d 	bmi.w	80111bc <_svfiprintf_r+0x28>
 8011362:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011364:	e72c      	b.n	80111c0 <_svfiprintf_r+0x2c>
 8011366:	ab03      	add	r3, sp, #12
 8011368:	9300      	str	r3, [sp, #0]
 801136a:	462a      	mov	r2, r5
 801136c:	4b05      	ldr	r3, [pc, #20]	@ (8011384 <_svfiprintf_r+0x1f0>)
 801136e:	a904      	add	r1, sp, #16
 8011370:	4638      	mov	r0, r7
 8011372:	f7fe f85f 	bl	800f434 <_printf_i>
 8011376:	e7ed      	b.n	8011354 <_svfiprintf_r+0x1c0>
 8011378:	08012828 	.word	0x08012828
 801137c:	08012832 	.word	0x08012832
 8011380:	0800ef05 	.word	0x0800ef05
 8011384:	080110dd 	.word	0x080110dd
 8011388:	0801282e 	.word	0x0801282e

0801138c <__sflush_r>:
 801138c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011394:	0716      	lsls	r6, r2, #28
 8011396:	4605      	mov	r5, r0
 8011398:	460c      	mov	r4, r1
 801139a:	d454      	bmi.n	8011446 <__sflush_r+0xba>
 801139c:	684b      	ldr	r3, [r1, #4]
 801139e:	2b00      	cmp	r3, #0
 80113a0:	dc02      	bgt.n	80113a8 <__sflush_r+0x1c>
 80113a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	dd48      	ble.n	801143a <__sflush_r+0xae>
 80113a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80113aa:	2e00      	cmp	r6, #0
 80113ac:	d045      	beq.n	801143a <__sflush_r+0xae>
 80113ae:	2300      	movs	r3, #0
 80113b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80113b4:	682f      	ldr	r7, [r5, #0]
 80113b6:	6a21      	ldr	r1, [r4, #32]
 80113b8:	602b      	str	r3, [r5, #0]
 80113ba:	d030      	beq.n	801141e <__sflush_r+0x92>
 80113bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80113be:	89a3      	ldrh	r3, [r4, #12]
 80113c0:	0759      	lsls	r1, r3, #29
 80113c2:	d505      	bpl.n	80113d0 <__sflush_r+0x44>
 80113c4:	6863      	ldr	r3, [r4, #4]
 80113c6:	1ad2      	subs	r2, r2, r3
 80113c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80113ca:	b10b      	cbz	r3, 80113d0 <__sflush_r+0x44>
 80113cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80113ce:	1ad2      	subs	r2, r2, r3
 80113d0:	2300      	movs	r3, #0
 80113d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80113d4:	6a21      	ldr	r1, [r4, #32]
 80113d6:	4628      	mov	r0, r5
 80113d8:	47b0      	blx	r6
 80113da:	1c43      	adds	r3, r0, #1
 80113dc:	89a3      	ldrh	r3, [r4, #12]
 80113de:	d106      	bne.n	80113ee <__sflush_r+0x62>
 80113e0:	6829      	ldr	r1, [r5, #0]
 80113e2:	291d      	cmp	r1, #29
 80113e4:	d82b      	bhi.n	801143e <__sflush_r+0xb2>
 80113e6:	4a2a      	ldr	r2, [pc, #168]	@ (8011490 <__sflush_r+0x104>)
 80113e8:	410a      	asrs	r2, r1
 80113ea:	07d6      	lsls	r6, r2, #31
 80113ec:	d427      	bmi.n	801143e <__sflush_r+0xb2>
 80113ee:	2200      	movs	r2, #0
 80113f0:	6062      	str	r2, [r4, #4]
 80113f2:	04d9      	lsls	r1, r3, #19
 80113f4:	6922      	ldr	r2, [r4, #16]
 80113f6:	6022      	str	r2, [r4, #0]
 80113f8:	d504      	bpl.n	8011404 <__sflush_r+0x78>
 80113fa:	1c42      	adds	r2, r0, #1
 80113fc:	d101      	bne.n	8011402 <__sflush_r+0x76>
 80113fe:	682b      	ldr	r3, [r5, #0]
 8011400:	b903      	cbnz	r3, 8011404 <__sflush_r+0x78>
 8011402:	6560      	str	r0, [r4, #84]	@ 0x54
 8011404:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011406:	602f      	str	r7, [r5, #0]
 8011408:	b1b9      	cbz	r1, 801143a <__sflush_r+0xae>
 801140a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801140e:	4299      	cmp	r1, r3
 8011410:	d002      	beq.n	8011418 <__sflush_r+0x8c>
 8011412:	4628      	mov	r0, r5
 8011414:	f7ff f9e0 	bl	80107d8 <_free_r>
 8011418:	2300      	movs	r3, #0
 801141a:	6363      	str	r3, [r4, #52]	@ 0x34
 801141c:	e00d      	b.n	801143a <__sflush_r+0xae>
 801141e:	2301      	movs	r3, #1
 8011420:	4628      	mov	r0, r5
 8011422:	47b0      	blx	r6
 8011424:	4602      	mov	r2, r0
 8011426:	1c50      	adds	r0, r2, #1
 8011428:	d1c9      	bne.n	80113be <__sflush_r+0x32>
 801142a:	682b      	ldr	r3, [r5, #0]
 801142c:	2b00      	cmp	r3, #0
 801142e:	d0c6      	beq.n	80113be <__sflush_r+0x32>
 8011430:	2b1d      	cmp	r3, #29
 8011432:	d001      	beq.n	8011438 <__sflush_r+0xac>
 8011434:	2b16      	cmp	r3, #22
 8011436:	d11e      	bne.n	8011476 <__sflush_r+0xea>
 8011438:	602f      	str	r7, [r5, #0]
 801143a:	2000      	movs	r0, #0
 801143c:	e022      	b.n	8011484 <__sflush_r+0xf8>
 801143e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011442:	b21b      	sxth	r3, r3
 8011444:	e01b      	b.n	801147e <__sflush_r+0xf2>
 8011446:	690f      	ldr	r7, [r1, #16]
 8011448:	2f00      	cmp	r7, #0
 801144a:	d0f6      	beq.n	801143a <__sflush_r+0xae>
 801144c:	0793      	lsls	r3, r2, #30
 801144e:	680e      	ldr	r6, [r1, #0]
 8011450:	bf08      	it	eq
 8011452:	694b      	ldreq	r3, [r1, #20]
 8011454:	600f      	str	r7, [r1, #0]
 8011456:	bf18      	it	ne
 8011458:	2300      	movne	r3, #0
 801145a:	eba6 0807 	sub.w	r8, r6, r7
 801145e:	608b      	str	r3, [r1, #8]
 8011460:	f1b8 0f00 	cmp.w	r8, #0
 8011464:	dde9      	ble.n	801143a <__sflush_r+0xae>
 8011466:	6a21      	ldr	r1, [r4, #32]
 8011468:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801146a:	4643      	mov	r3, r8
 801146c:	463a      	mov	r2, r7
 801146e:	4628      	mov	r0, r5
 8011470:	47b0      	blx	r6
 8011472:	2800      	cmp	r0, #0
 8011474:	dc08      	bgt.n	8011488 <__sflush_r+0xfc>
 8011476:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801147a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801147e:	81a3      	strh	r3, [r4, #12]
 8011480:	f04f 30ff 	mov.w	r0, #4294967295
 8011484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011488:	4407      	add	r7, r0
 801148a:	eba8 0800 	sub.w	r8, r8, r0
 801148e:	e7e7      	b.n	8011460 <__sflush_r+0xd4>
 8011490:	dfbffffe 	.word	0xdfbffffe

08011494 <_fflush_r>:
 8011494:	b538      	push	{r3, r4, r5, lr}
 8011496:	690b      	ldr	r3, [r1, #16]
 8011498:	4605      	mov	r5, r0
 801149a:	460c      	mov	r4, r1
 801149c:	b913      	cbnz	r3, 80114a4 <_fflush_r+0x10>
 801149e:	2500      	movs	r5, #0
 80114a0:	4628      	mov	r0, r5
 80114a2:	bd38      	pop	{r3, r4, r5, pc}
 80114a4:	b118      	cbz	r0, 80114ae <_fflush_r+0x1a>
 80114a6:	6a03      	ldr	r3, [r0, #32]
 80114a8:	b90b      	cbnz	r3, 80114ae <_fflush_r+0x1a>
 80114aa:	f7fe f96f 	bl	800f78c <__sinit>
 80114ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d0f3      	beq.n	801149e <_fflush_r+0xa>
 80114b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80114b8:	07d0      	lsls	r0, r2, #31
 80114ba:	d404      	bmi.n	80114c6 <_fflush_r+0x32>
 80114bc:	0599      	lsls	r1, r3, #22
 80114be:	d402      	bmi.n	80114c6 <_fflush_r+0x32>
 80114c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80114c2:	f7fe fb06 	bl	800fad2 <__retarget_lock_acquire_recursive>
 80114c6:	4628      	mov	r0, r5
 80114c8:	4621      	mov	r1, r4
 80114ca:	f7ff ff5f 	bl	801138c <__sflush_r>
 80114ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80114d0:	07da      	lsls	r2, r3, #31
 80114d2:	4605      	mov	r5, r0
 80114d4:	d4e4      	bmi.n	80114a0 <_fflush_r+0xc>
 80114d6:	89a3      	ldrh	r3, [r4, #12]
 80114d8:	059b      	lsls	r3, r3, #22
 80114da:	d4e1      	bmi.n	80114a0 <_fflush_r+0xc>
 80114dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80114de:	f7fe faf9 	bl	800fad4 <__retarget_lock_release_recursive>
 80114e2:	e7dd      	b.n	80114a0 <_fflush_r+0xc>

080114e4 <fiprintf>:
 80114e4:	b40e      	push	{r1, r2, r3}
 80114e6:	b503      	push	{r0, r1, lr}
 80114e8:	4601      	mov	r1, r0
 80114ea:	ab03      	add	r3, sp, #12
 80114ec:	4805      	ldr	r0, [pc, #20]	@ (8011504 <fiprintf+0x20>)
 80114ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80114f2:	6800      	ldr	r0, [r0, #0]
 80114f4:	9301      	str	r3, [sp, #4]
 80114f6:	f000 f8c3 	bl	8011680 <_vfiprintf_r>
 80114fa:	b002      	add	sp, #8
 80114fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8011500:	b003      	add	sp, #12
 8011502:	4770      	bx	lr
 8011504:	20000074 	.word	0x20000074

08011508 <memmove>:
 8011508:	4288      	cmp	r0, r1
 801150a:	b510      	push	{r4, lr}
 801150c:	eb01 0402 	add.w	r4, r1, r2
 8011510:	d902      	bls.n	8011518 <memmove+0x10>
 8011512:	4284      	cmp	r4, r0
 8011514:	4623      	mov	r3, r4
 8011516:	d807      	bhi.n	8011528 <memmove+0x20>
 8011518:	1e43      	subs	r3, r0, #1
 801151a:	42a1      	cmp	r1, r4
 801151c:	d008      	beq.n	8011530 <memmove+0x28>
 801151e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011522:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011526:	e7f8      	b.n	801151a <memmove+0x12>
 8011528:	4402      	add	r2, r0
 801152a:	4601      	mov	r1, r0
 801152c:	428a      	cmp	r2, r1
 801152e:	d100      	bne.n	8011532 <memmove+0x2a>
 8011530:	bd10      	pop	{r4, pc}
 8011532:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011536:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801153a:	e7f7      	b.n	801152c <memmove+0x24>

0801153c <_sbrk_r>:
 801153c:	b538      	push	{r3, r4, r5, lr}
 801153e:	4d06      	ldr	r5, [pc, #24]	@ (8011558 <_sbrk_r+0x1c>)
 8011540:	2300      	movs	r3, #0
 8011542:	4604      	mov	r4, r0
 8011544:	4608      	mov	r0, r1
 8011546:	602b      	str	r3, [r5, #0]
 8011548:	f7f5 f9ea 	bl	8006920 <_sbrk>
 801154c:	1c43      	adds	r3, r0, #1
 801154e:	d102      	bne.n	8011556 <_sbrk_r+0x1a>
 8011550:	682b      	ldr	r3, [r5, #0]
 8011552:	b103      	cbz	r3, 8011556 <_sbrk_r+0x1a>
 8011554:	6023      	str	r3, [r4, #0]
 8011556:	bd38      	pop	{r3, r4, r5, pc}
 8011558:	2000e394 	.word	0x2000e394

0801155c <abort>:
 801155c:	b508      	push	{r3, lr}
 801155e:	2006      	movs	r0, #6
 8011560:	f000 fa62 	bl	8011a28 <raise>
 8011564:	2001      	movs	r0, #1
 8011566:	f7f5 f963 	bl	8006830 <_exit>

0801156a <_calloc_r>:
 801156a:	b570      	push	{r4, r5, r6, lr}
 801156c:	fba1 5402 	umull	r5, r4, r1, r2
 8011570:	b93c      	cbnz	r4, 8011582 <_calloc_r+0x18>
 8011572:	4629      	mov	r1, r5
 8011574:	f7ff f9a4 	bl	80108c0 <_malloc_r>
 8011578:	4606      	mov	r6, r0
 801157a:	b928      	cbnz	r0, 8011588 <_calloc_r+0x1e>
 801157c:	2600      	movs	r6, #0
 801157e:	4630      	mov	r0, r6
 8011580:	bd70      	pop	{r4, r5, r6, pc}
 8011582:	220c      	movs	r2, #12
 8011584:	6002      	str	r2, [r0, #0]
 8011586:	e7f9      	b.n	801157c <_calloc_r+0x12>
 8011588:	462a      	mov	r2, r5
 801158a:	4621      	mov	r1, r4
 801158c:	f7fe f997 	bl	800f8be <memset>
 8011590:	e7f5      	b.n	801157e <_calloc_r+0x14>

08011592 <__ascii_mbtowc>:
 8011592:	b082      	sub	sp, #8
 8011594:	b901      	cbnz	r1, 8011598 <__ascii_mbtowc+0x6>
 8011596:	a901      	add	r1, sp, #4
 8011598:	b142      	cbz	r2, 80115ac <__ascii_mbtowc+0x1a>
 801159a:	b14b      	cbz	r3, 80115b0 <__ascii_mbtowc+0x1e>
 801159c:	7813      	ldrb	r3, [r2, #0]
 801159e:	600b      	str	r3, [r1, #0]
 80115a0:	7812      	ldrb	r2, [r2, #0]
 80115a2:	1e10      	subs	r0, r2, #0
 80115a4:	bf18      	it	ne
 80115a6:	2001      	movne	r0, #1
 80115a8:	b002      	add	sp, #8
 80115aa:	4770      	bx	lr
 80115ac:	4610      	mov	r0, r2
 80115ae:	e7fb      	b.n	80115a8 <__ascii_mbtowc+0x16>
 80115b0:	f06f 0001 	mvn.w	r0, #1
 80115b4:	e7f8      	b.n	80115a8 <__ascii_mbtowc+0x16>

080115b6 <_realloc_r>:
 80115b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115ba:	4680      	mov	r8, r0
 80115bc:	4615      	mov	r5, r2
 80115be:	460c      	mov	r4, r1
 80115c0:	b921      	cbnz	r1, 80115cc <_realloc_r+0x16>
 80115c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80115c6:	4611      	mov	r1, r2
 80115c8:	f7ff b97a 	b.w	80108c0 <_malloc_r>
 80115cc:	b92a      	cbnz	r2, 80115da <_realloc_r+0x24>
 80115ce:	f7ff f903 	bl	80107d8 <_free_r>
 80115d2:	2400      	movs	r4, #0
 80115d4:	4620      	mov	r0, r4
 80115d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115da:	f000 fa41 	bl	8011a60 <_malloc_usable_size_r>
 80115de:	4285      	cmp	r5, r0
 80115e0:	4606      	mov	r6, r0
 80115e2:	d802      	bhi.n	80115ea <_realloc_r+0x34>
 80115e4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80115e8:	d8f4      	bhi.n	80115d4 <_realloc_r+0x1e>
 80115ea:	4629      	mov	r1, r5
 80115ec:	4640      	mov	r0, r8
 80115ee:	f7ff f967 	bl	80108c0 <_malloc_r>
 80115f2:	4607      	mov	r7, r0
 80115f4:	2800      	cmp	r0, #0
 80115f6:	d0ec      	beq.n	80115d2 <_realloc_r+0x1c>
 80115f8:	42b5      	cmp	r5, r6
 80115fa:	462a      	mov	r2, r5
 80115fc:	4621      	mov	r1, r4
 80115fe:	bf28      	it	cs
 8011600:	4632      	movcs	r2, r6
 8011602:	f7fe fa70 	bl	800fae6 <memcpy>
 8011606:	4621      	mov	r1, r4
 8011608:	4640      	mov	r0, r8
 801160a:	f7ff f8e5 	bl	80107d8 <_free_r>
 801160e:	463c      	mov	r4, r7
 8011610:	e7e0      	b.n	80115d4 <_realloc_r+0x1e>

08011612 <__ascii_wctomb>:
 8011612:	4603      	mov	r3, r0
 8011614:	4608      	mov	r0, r1
 8011616:	b141      	cbz	r1, 801162a <__ascii_wctomb+0x18>
 8011618:	2aff      	cmp	r2, #255	@ 0xff
 801161a:	d904      	bls.n	8011626 <__ascii_wctomb+0x14>
 801161c:	228a      	movs	r2, #138	@ 0x8a
 801161e:	601a      	str	r2, [r3, #0]
 8011620:	f04f 30ff 	mov.w	r0, #4294967295
 8011624:	4770      	bx	lr
 8011626:	700a      	strb	r2, [r1, #0]
 8011628:	2001      	movs	r0, #1
 801162a:	4770      	bx	lr

0801162c <__sfputc_r>:
 801162c:	6893      	ldr	r3, [r2, #8]
 801162e:	3b01      	subs	r3, #1
 8011630:	2b00      	cmp	r3, #0
 8011632:	b410      	push	{r4}
 8011634:	6093      	str	r3, [r2, #8]
 8011636:	da08      	bge.n	801164a <__sfputc_r+0x1e>
 8011638:	6994      	ldr	r4, [r2, #24]
 801163a:	42a3      	cmp	r3, r4
 801163c:	db01      	blt.n	8011642 <__sfputc_r+0x16>
 801163e:	290a      	cmp	r1, #10
 8011640:	d103      	bne.n	801164a <__sfputc_r+0x1e>
 8011642:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011646:	f000 b933 	b.w	80118b0 <__swbuf_r>
 801164a:	6813      	ldr	r3, [r2, #0]
 801164c:	1c58      	adds	r0, r3, #1
 801164e:	6010      	str	r0, [r2, #0]
 8011650:	7019      	strb	r1, [r3, #0]
 8011652:	4608      	mov	r0, r1
 8011654:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011658:	4770      	bx	lr

0801165a <__sfputs_r>:
 801165a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801165c:	4606      	mov	r6, r0
 801165e:	460f      	mov	r7, r1
 8011660:	4614      	mov	r4, r2
 8011662:	18d5      	adds	r5, r2, r3
 8011664:	42ac      	cmp	r4, r5
 8011666:	d101      	bne.n	801166c <__sfputs_r+0x12>
 8011668:	2000      	movs	r0, #0
 801166a:	e007      	b.n	801167c <__sfputs_r+0x22>
 801166c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011670:	463a      	mov	r2, r7
 8011672:	4630      	mov	r0, r6
 8011674:	f7ff ffda 	bl	801162c <__sfputc_r>
 8011678:	1c43      	adds	r3, r0, #1
 801167a:	d1f3      	bne.n	8011664 <__sfputs_r+0xa>
 801167c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011680 <_vfiprintf_r>:
 8011680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011684:	460d      	mov	r5, r1
 8011686:	b09d      	sub	sp, #116	@ 0x74
 8011688:	4614      	mov	r4, r2
 801168a:	4698      	mov	r8, r3
 801168c:	4606      	mov	r6, r0
 801168e:	b118      	cbz	r0, 8011698 <_vfiprintf_r+0x18>
 8011690:	6a03      	ldr	r3, [r0, #32]
 8011692:	b90b      	cbnz	r3, 8011698 <_vfiprintf_r+0x18>
 8011694:	f7fe f87a 	bl	800f78c <__sinit>
 8011698:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801169a:	07d9      	lsls	r1, r3, #31
 801169c:	d405      	bmi.n	80116aa <_vfiprintf_r+0x2a>
 801169e:	89ab      	ldrh	r3, [r5, #12]
 80116a0:	059a      	lsls	r2, r3, #22
 80116a2:	d402      	bmi.n	80116aa <_vfiprintf_r+0x2a>
 80116a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80116a6:	f7fe fa14 	bl	800fad2 <__retarget_lock_acquire_recursive>
 80116aa:	89ab      	ldrh	r3, [r5, #12]
 80116ac:	071b      	lsls	r3, r3, #28
 80116ae:	d501      	bpl.n	80116b4 <_vfiprintf_r+0x34>
 80116b0:	692b      	ldr	r3, [r5, #16]
 80116b2:	b99b      	cbnz	r3, 80116dc <_vfiprintf_r+0x5c>
 80116b4:	4629      	mov	r1, r5
 80116b6:	4630      	mov	r0, r6
 80116b8:	f000 f938 	bl	801192c <__swsetup_r>
 80116bc:	b170      	cbz	r0, 80116dc <_vfiprintf_r+0x5c>
 80116be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80116c0:	07dc      	lsls	r4, r3, #31
 80116c2:	d504      	bpl.n	80116ce <_vfiprintf_r+0x4e>
 80116c4:	f04f 30ff 	mov.w	r0, #4294967295
 80116c8:	b01d      	add	sp, #116	@ 0x74
 80116ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116ce:	89ab      	ldrh	r3, [r5, #12]
 80116d0:	0598      	lsls	r0, r3, #22
 80116d2:	d4f7      	bmi.n	80116c4 <_vfiprintf_r+0x44>
 80116d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80116d6:	f7fe f9fd 	bl	800fad4 <__retarget_lock_release_recursive>
 80116da:	e7f3      	b.n	80116c4 <_vfiprintf_r+0x44>
 80116dc:	2300      	movs	r3, #0
 80116de:	9309      	str	r3, [sp, #36]	@ 0x24
 80116e0:	2320      	movs	r3, #32
 80116e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80116e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80116ea:	2330      	movs	r3, #48	@ 0x30
 80116ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801189c <_vfiprintf_r+0x21c>
 80116f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80116f4:	f04f 0901 	mov.w	r9, #1
 80116f8:	4623      	mov	r3, r4
 80116fa:	469a      	mov	sl, r3
 80116fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011700:	b10a      	cbz	r2, 8011706 <_vfiprintf_r+0x86>
 8011702:	2a25      	cmp	r2, #37	@ 0x25
 8011704:	d1f9      	bne.n	80116fa <_vfiprintf_r+0x7a>
 8011706:	ebba 0b04 	subs.w	fp, sl, r4
 801170a:	d00b      	beq.n	8011724 <_vfiprintf_r+0xa4>
 801170c:	465b      	mov	r3, fp
 801170e:	4622      	mov	r2, r4
 8011710:	4629      	mov	r1, r5
 8011712:	4630      	mov	r0, r6
 8011714:	f7ff ffa1 	bl	801165a <__sfputs_r>
 8011718:	3001      	adds	r0, #1
 801171a:	f000 80a7 	beq.w	801186c <_vfiprintf_r+0x1ec>
 801171e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011720:	445a      	add	r2, fp
 8011722:	9209      	str	r2, [sp, #36]	@ 0x24
 8011724:	f89a 3000 	ldrb.w	r3, [sl]
 8011728:	2b00      	cmp	r3, #0
 801172a:	f000 809f 	beq.w	801186c <_vfiprintf_r+0x1ec>
 801172e:	2300      	movs	r3, #0
 8011730:	f04f 32ff 	mov.w	r2, #4294967295
 8011734:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011738:	f10a 0a01 	add.w	sl, sl, #1
 801173c:	9304      	str	r3, [sp, #16]
 801173e:	9307      	str	r3, [sp, #28]
 8011740:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011744:	931a      	str	r3, [sp, #104]	@ 0x68
 8011746:	4654      	mov	r4, sl
 8011748:	2205      	movs	r2, #5
 801174a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801174e:	4853      	ldr	r0, [pc, #332]	@ (801189c <_vfiprintf_r+0x21c>)
 8011750:	f7ee fd3e 	bl	80001d0 <memchr>
 8011754:	9a04      	ldr	r2, [sp, #16]
 8011756:	b9d8      	cbnz	r0, 8011790 <_vfiprintf_r+0x110>
 8011758:	06d1      	lsls	r1, r2, #27
 801175a:	bf44      	itt	mi
 801175c:	2320      	movmi	r3, #32
 801175e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011762:	0713      	lsls	r3, r2, #28
 8011764:	bf44      	itt	mi
 8011766:	232b      	movmi	r3, #43	@ 0x2b
 8011768:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801176c:	f89a 3000 	ldrb.w	r3, [sl]
 8011770:	2b2a      	cmp	r3, #42	@ 0x2a
 8011772:	d015      	beq.n	80117a0 <_vfiprintf_r+0x120>
 8011774:	9a07      	ldr	r2, [sp, #28]
 8011776:	4654      	mov	r4, sl
 8011778:	2000      	movs	r0, #0
 801177a:	f04f 0c0a 	mov.w	ip, #10
 801177e:	4621      	mov	r1, r4
 8011780:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011784:	3b30      	subs	r3, #48	@ 0x30
 8011786:	2b09      	cmp	r3, #9
 8011788:	d94b      	bls.n	8011822 <_vfiprintf_r+0x1a2>
 801178a:	b1b0      	cbz	r0, 80117ba <_vfiprintf_r+0x13a>
 801178c:	9207      	str	r2, [sp, #28]
 801178e:	e014      	b.n	80117ba <_vfiprintf_r+0x13a>
 8011790:	eba0 0308 	sub.w	r3, r0, r8
 8011794:	fa09 f303 	lsl.w	r3, r9, r3
 8011798:	4313      	orrs	r3, r2
 801179a:	9304      	str	r3, [sp, #16]
 801179c:	46a2      	mov	sl, r4
 801179e:	e7d2      	b.n	8011746 <_vfiprintf_r+0xc6>
 80117a0:	9b03      	ldr	r3, [sp, #12]
 80117a2:	1d19      	adds	r1, r3, #4
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	9103      	str	r1, [sp, #12]
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	bfbb      	ittet	lt
 80117ac:	425b      	neglt	r3, r3
 80117ae:	f042 0202 	orrlt.w	r2, r2, #2
 80117b2:	9307      	strge	r3, [sp, #28]
 80117b4:	9307      	strlt	r3, [sp, #28]
 80117b6:	bfb8      	it	lt
 80117b8:	9204      	strlt	r2, [sp, #16]
 80117ba:	7823      	ldrb	r3, [r4, #0]
 80117bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80117be:	d10a      	bne.n	80117d6 <_vfiprintf_r+0x156>
 80117c0:	7863      	ldrb	r3, [r4, #1]
 80117c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80117c4:	d132      	bne.n	801182c <_vfiprintf_r+0x1ac>
 80117c6:	9b03      	ldr	r3, [sp, #12]
 80117c8:	1d1a      	adds	r2, r3, #4
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	9203      	str	r2, [sp, #12]
 80117ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80117d2:	3402      	adds	r4, #2
 80117d4:	9305      	str	r3, [sp, #20]
 80117d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80118ac <_vfiprintf_r+0x22c>
 80117da:	7821      	ldrb	r1, [r4, #0]
 80117dc:	2203      	movs	r2, #3
 80117de:	4650      	mov	r0, sl
 80117e0:	f7ee fcf6 	bl	80001d0 <memchr>
 80117e4:	b138      	cbz	r0, 80117f6 <_vfiprintf_r+0x176>
 80117e6:	9b04      	ldr	r3, [sp, #16]
 80117e8:	eba0 000a 	sub.w	r0, r0, sl
 80117ec:	2240      	movs	r2, #64	@ 0x40
 80117ee:	4082      	lsls	r2, r0
 80117f0:	4313      	orrs	r3, r2
 80117f2:	3401      	adds	r4, #1
 80117f4:	9304      	str	r3, [sp, #16]
 80117f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80117fa:	4829      	ldr	r0, [pc, #164]	@ (80118a0 <_vfiprintf_r+0x220>)
 80117fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011800:	2206      	movs	r2, #6
 8011802:	f7ee fce5 	bl	80001d0 <memchr>
 8011806:	2800      	cmp	r0, #0
 8011808:	d03f      	beq.n	801188a <_vfiprintf_r+0x20a>
 801180a:	4b26      	ldr	r3, [pc, #152]	@ (80118a4 <_vfiprintf_r+0x224>)
 801180c:	bb1b      	cbnz	r3, 8011856 <_vfiprintf_r+0x1d6>
 801180e:	9b03      	ldr	r3, [sp, #12]
 8011810:	3307      	adds	r3, #7
 8011812:	f023 0307 	bic.w	r3, r3, #7
 8011816:	3308      	adds	r3, #8
 8011818:	9303      	str	r3, [sp, #12]
 801181a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801181c:	443b      	add	r3, r7
 801181e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011820:	e76a      	b.n	80116f8 <_vfiprintf_r+0x78>
 8011822:	fb0c 3202 	mla	r2, ip, r2, r3
 8011826:	460c      	mov	r4, r1
 8011828:	2001      	movs	r0, #1
 801182a:	e7a8      	b.n	801177e <_vfiprintf_r+0xfe>
 801182c:	2300      	movs	r3, #0
 801182e:	3401      	adds	r4, #1
 8011830:	9305      	str	r3, [sp, #20]
 8011832:	4619      	mov	r1, r3
 8011834:	f04f 0c0a 	mov.w	ip, #10
 8011838:	4620      	mov	r0, r4
 801183a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801183e:	3a30      	subs	r2, #48	@ 0x30
 8011840:	2a09      	cmp	r2, #9
 8011842:	d903      	bls.n	801184c <_vfiprintf_r+0x1cc>
 8011844:	2b00      	cmp	r3, #0
 8011846:	d0c6      	beq.n	80117d6 <_vfiprintf_r+0x156>
 8011848:	9105      	str	r1, [sp, #20]
 801184a:	e7c4      	b.n	80117d6 <_vfiprintf_r+0x156>
 801184c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011850:	4604      	mov	r4, r0
 8011852:	2301      	movs	r3, #1
 8011854:	e7f0      	b.n	8011838 <_vfiprintf_r+0x1b8>
 8011856:	ab03      	add	r3, sp, #12
 8011858:	9300      	str	r3, [sp, #0]
 801185a:	462a      	mov	r2, r5
 801185c:	4b12      	ldr	r3, [pc, #72]	@ (80118a8 <_vfiprintf_r+0x228>)
 801185e:	a904      	add	r1, sp, #16
 8011860:	4630      	mov	r0, r6
 8011862:	f7fd fb4f 	bl	800ef04 <_printf_float>
 8011866:	4607      	mov	r7, r0
 8011868:	1c78      	adds	r0, r7, #1
 801186a:	d1d6      	bne.n	801181a <_vfiprintf_r+0x19a>
 801186c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801186e:	07d9      	lsls	r1, r3, #31
 8011870:	d405      	bmi.n	801187e <_vfiprintf_r+0x1fe>
 8011872:	89ab      	ldrh	r3, [r5, #12]
 8011874:	059a      	lsls	r2, r3, #22
 8011876:	d402      	bmi.n	801187e <_vfiprintf_r+0x1fe>
 8011878:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801187a:	f7fe f92b 	bl	800fad4 <__retarget_lock_release_recursive>
 801187e:	89ab      	ldrh	r3, [r5, #12]
 8011880:	065b      	lsls	r3, r3, #25
 8011882:	f53f af1f 	bmi.w	80116c4 <_vfiprintf_r+0x44>
 8011886:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011888:	e71e      	b.n	80116c8 <_vfiprintf_r+0x48>
 801188a:	ab03      	add	r3, sp, #12
 801188c:	9300      	str	r3, [sp, #0]
 801188e:	462a      	mov	r2, r5
 8011890:	4b05      	ldr	r3, [pc, #20]	@ (80118a8 <_vfiprintf_r+0x228>)
 8011892:	a904      	add	r1, sp, #16
 8011894:	4630      	mov	r0, r6
 8011896:	f7fd fdcd 	bl	800f434 <_printf_i>
 801189a:	e7e4      	b.n	8011866 <_vfiprintf_r+0x1e6>
 801189c:	08012828 	.word	0x08012828
 80118a0:	08012832 	.word	0x08012832
 80118a4:	0800ef05 	.word	0x0800ef05
 80118a8:	0801165b 	.word	0x0801165b
 80118ac:	0801282e 	.word	0x0801282e

080118b0 <__swbuf_r>:
 80118b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118b2:	460e      	mov	r6, r1
 80118b4:	4614      	mov	r4, r2
 80118b6:	4605      	mov	r5, r0
 80118b8:	b118      	cbz	r0, 80118c2 <__swbuf_r+0x12>
 80118ba:	6a03      	ldr	r3, [r0, #32]
 80118bc:	b90b      	cbnz	r3, 80118c2 <__swbuf_r+0x12>
 80118be:	f7fd ff65 	bl	800f78c <__sinit>
 80118c2:	69a3      	ldr	r3, [r4, #24]
 80118c4:	60a3      	str	r3, [r4, #8]
 80118c6:	89a3      	ldrh	r3, [r4, #12]
 80118c8:	071a      	lsls	r2, r3, #28
 80118ca:	d501      	bpl.n	80118d0 <__swbuf_r+0x20>
 80118cc:	6923      	ldr	r3, [r4, #16]
 80118ce:	b943      	cbnz	r3, 80118e2 <__swbuf_r+0x32>
 80118d0:	4621      	mov	r1, r4
 80118d2:	4628      	mov	r0, r5
 80118d4:	f000 f82a 	bl	801192c <__swsetup_r>
 80118d8:	b118      	cbz	r0, 80118e2 <__swbuf_r+0x32>
 80118da:	f04f 37ff 	mov.w	r7, #4294967295
 80118de:	4638      	mov	r0, r7
 80118e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80118e2:	6823      	ldr	r3, [r4, #0]
 80118e4:	6922      	ldr	r2, [r4, #16]
 80118e6:	1a98      	subs	r0, r3, r2
 80118e8:	6963      	ldr	r3, [r4, #20]
 80118ea:	b2f6      	uxtb	r6, r6
 80118ec:	4283      	cmp	r3, r0
 80118ee:	4637      	mov	r7, r6
 80118f0:	dc05      	bgt.n	80118fe <__swbuf_r+0x4e>
 80118f2:	4621      	mov	r1, r4
 80118f4:	4628      	mov	r0, r5
 80118f6:	f7ff fdcd 	bl	8011494 <_fflush_r>
 80118fa:	2800      	cmp	r0, #0
 80118fc:	d1ed      	bne.n	80118da <__swbuf_r+0x2a>
 80118fe:	68a3      	ldr	r3, [r4, #8]
 8011900:	3b01      	subs	r3, #1
 8011902:	60a3      	str	r3, [r4, #8]
 8011904:	6823      	ldr	r3, [r4, #0]
 8011906:	1c5a      	adds	r2, r3, #1
 8011908:	6022      	str	r2, [r4, #0]
 801190a:	701e      	strb	r6, [r3, #0]
 801190c:	6962      	ldr	r2, [r4, #20]
 801190e:	1c43      	adds	r3, r0, #1
 8011910:	429a      	cmp	r2, r3
 8011912:	d004      	beq.n	801191e <__swbuf_r+0x6e>
 8011914:	89a3      	ldrh	r3, [r4, #12]
 8011916:	07db      	lsls	r3, r3, #31
 8011918:	d5e1      	bpl.n	80118de <__swbuf_r+0x2e>
 801191a:	2e0a      	cmp	r6, #10
 801191c:	d1df      	bne.n	80118de <__swbuf_r+0x2e>
 801191e:	4621      	mov	r1, r4
 8011920:	4628      	mov	r0, r5
 8011922:	f7ff fdb7 	bl	8011494 <_fflush_r>
 8011926:	2800      	cmp	r0, #0
 8011928:	d0d9      	beq.n	80118de <__swbuf_r+0x2e>
 801192a:	e7d6      	b.n	80118da <__swbuf_r+0x2a>

0801192c <__swsetup_r>:
 801192c:	b538      	push	{r3, r4, r5, lr}
 801192e:	4b29      	ldr	r3, [pc, #164]	@ (80119d4 <__swsetup_r+0xa8>)
 8011930:	4605      	mov	r5, r0
 8011932:	6818      	ldr	r0, [r3, #0]
 8011934:	460c      	mov	r4, r1
 8011936:	b118      	cbz	r0, 8011940 <__swsetup_r+0x14>
 8011938:	6a03      	ldr	r3, [r0, #32]
 801193a:	b90b      	cbnz	r3, 8011940 <__swsetup_r+0x14>
 801193c:	f7fd ff26 	bl	800f78c <__sinit>
 8011940:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011944:	0719      	lsls	r1, r3, #28
 8011946:	d422      	bmi.n	801198e <__swsetup_r+0x62>
 8011948:	06da      	lsls	r2, r3, #27
 801194a:	d407      	bmi.n	801195c <__swsetup_r+0x30>
 801194c:	2209      	movs	r2, #9
 801194e:	602a      	str	r2, [r5, #0]
 8011950:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011954:	81a3      	strh	r3, [r4, #12]
 8011956:	f04f 30ff 	mov.w	r0, #4294967295
 801195a:	e033      	b.n	80119c4 <__swsetup_r+0x98>
 801195c:	0758      	lsls	r0, r3, #29
 801195e:	d512      	bpl.n	8011986 <__swsetup_r+0x5a>
 8011960:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011962:	b141      	cbz	r1, 8011976 <__swsetup_r+0x4a>
 8011964:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011968:	4299      	cmp	r1, r3
 801196a:	d002      	beq.n	8011972 <__swsetup_r+0x46>
 801196c:	4628      	mov	r0, r5
 801196e:	f7fe ff33 	bl	80107d8 <_free_r>
 8011972:	2300      	movs	r3, #0
 8011974:	6363      	str	r3, [r4, #52]	@ 0x34
 8011976:	89a3      	ldrh	r3, [r4, #12]
 8011978:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801197c:	81a3      	strh	r3, [r4, #12]
 801197e:	2300      	movs	r3, #0
 8011980:	6063      	str	r3, [r4, #4]
 8011982:	6923      	ldr	r3, [r4, #16]
 8011984:	6023      	str	r3, [r4, #0]
 8011986:	89a3      	ldrh	r3, [r4, #12]
 8011988:	f043 0308 	orr.w	r3, r3, #8
 801198c:	81a3      	strh	r3, [r4, #12]
 801198e:	6923      	ldr	r3, [r4, #16]
 8011990:	b94b      	cbnz	r3, 80119a6 <__swsetup_r+0x7a>
 8011992:	89a3      	ldrh	r3, [r4, #12]
 8011994:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011998:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801199c:	d003      	beq.n	80119a6 <__swsetup_r+0x7a>
 801199e:	4621      	mov	r1, r4
 80119a0:	4628      	mov	r0, r5
 80119a2:	f000 f88b 	bl	8011abc <__smakebuf_r>
 80119a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80119aa:	f013 0201 	ands.w	r2, r3, #1
 80119ae:	d00a      	beq.n	80119c6 <__swsetup_r+0x9a>
 80119b0:	2200      	movs	r2, #0
 80119b2:	60a2      	str	r2, [r4, #8]
 80119b4:	6962      	ldr	r2, [r4, #20]
 80119b6:	4252      	negs	r2, r2
 80119b8:	61a2      	str	r2, [r4, #24]
 80119ba:	6922      	ldr	r2, [r4, #16]
 80119bc:	b942      	cbnz	r2, 80119d0 <__swsetup_r+0xa4>
 80119be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80119c2:	d1c5      	bne.n	8011950 <__swsetup_r+0x24>
 80119c4:	bd38      	pop	{r3, r4, r5, pc}
 80119c6:	0799      	lsls	r1, r3, #30
 80119c8:	bf58      	it	pl
 80119ca:	6962      	ldrpl	r2, [r4, #20]
 80119cc:	60a2      	str	r2, [r4, #8]
 80119ce:	e7f4      	b.n	80119ba <__swsetup_r+0x8e>
 80119d0:	2000      	movs	r0, #0
 80119d2:	e7f7      	b.n	80119c4 <__swsetup_r+0x98>
 80119d4:	20000074 	.word	0x20000074

080119d8 <_raise_r>:
 80119d8:	291f      	cmp	r1, #31
 80119da:	b538      	push	{r3, r4, r5, lr}
 80119dc:	4605      	mov	r5, r0
 80119de:	460c      	mov	r4, r1
 80119e0:	d904      	bls.n	80119ec <_raise_r+0x14>
 80119e2:	2316      	movs	r3, #22
 80119e4:	6003      	str	r3, [r0, #0]
 80119e6:	f04f 30ff 	mov.w	r0, #4294967295
 80119ea:	bd38      	pop	{r3, r4, r5, pc}
 80119ec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80119ee:	b112      	cbz	r2, 80119f6 <_raise_r+0x1e>
 80119f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80119f4:	b94b      	cbnz	r3, 8011a0a <_raise_r+0x32>
 80119f6:	4628      	mov	r0, r5
 80119f8:	f000 f830 	bl	8011a5c <_getpid_r>
 80119fc:	4622      	mov	r2, r4
 80119fe:	4601      	mov	r1, r0
 8011a00:	4628      	mov	r0, r5
 8011a02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011a06:	f000 b817 	b.w	8011a38 <_kill_r>
 8011a0a:	2b01      	cmp	r3, #1
 8011a0c:	d00a      	beq.n	8011a24 <_raise_r+0x4c>
 8011a0e:	1c59      	adds	r1, r3, #1
 8011a10:	d103      	bne.n	8011a1a <_raise_r+0x42>
 8011a12:	2316      	movs	r3, #22
 8011a14:	6003      	str	r3, [r0, #0]
 8011a16:	2001      	movs	r0, #1
 8011a18:	e7e7      	b.n	80119ea <_raise_r+0x12>
 8011a1a:	2100      	movs	r1, #0
 8011a1c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011a20:	4620      	mov	r0, r4
 8011a22:	4798      	blx	r3
 8011a24:	2000      	movs	r0, #0
 8011a26:	e7e0      	b.n	80119ea <_raise_r+0x12>

08011a28 <raise>:
 8011a28:	4b02      	ldr	r3, [pc, #8]	@ (8011a34 <raise+0xc>)
 8011a2a:	4601      	mov	r1, r0
 8011a2c:	6818      	ldr	r0, [r3, #0]
 8011a2e:	f7ff bfd3 	b.w	80119d8 <_raise_r>
 8011a32:	bf00      	nop
 8011a34:	20000074 	.word	0x20000074

08011a38 <_kill_r>:
 8011a38:	b538      	push	{r3, r4, r5, lr}
 8011a3a:	4d07      	ldr	r5, [pc, #28]	@ (8011a58 <_kill_r+0x20>)
 8011a3c:	2300      	movs	r3, #0
 8011a3e:	4604      	mov	r4, r0
 8011a40:	4608      	mov	r0, r1
 8011a42:	4611      	mov	r1, r2
 8011a44:	602b      	str	r3, [r5, #0]
 8011a46:	f7f4 fee3 	bl	8006810 <_kill>
 8011a4a:	1c43      	adds	r3, r0, #1
 8011a4c:	d102      	bne.n	8011a54 <_kill_r+0x1c>
 8011a4e:	682b      	ldr	r3, [r5, #0]
 8011a50:	b103      	cbz	r3, 8011a54 <_kill_r+0x1c>
 8011a52:	6023      	str	r3, [r4, #0]
 8011a54:	bd38      	pop	{r3, r4, r5, pc}
 8011a56:	bf00      	nop
 8011a58:	2000e394 	.word	0x2000e394

08011a5c <_getpid_r>:
 8011a5c:	f7f4 bed0 	b.w	8006800 <_getpid>

08011a60 <_malloc_usable_size_r>:
 8011a60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011a64:	1f18      	subs	r0, r3, #4
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	bfbc      	itt	lt
 8011a6a:	580b      	ldrlt	r3, [r1, r0]
 8011a6c:	18c0      	addlt	r0, r0, r3
 8011a6e:	4770      	bx	lr

08011a70 <__swhatbuf_r>:
 8011a70:	b570      	push	{r4, r5, r6, lr}
 8011a72:	460c      	mov	r4, r1
 8011a74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a78:	2900      	cmp	r1, #0
 8011a7a:	b096      	sub	sp, #88	@ 0x58
 8011a7c:	4615      	mov	r5, r2
 8011a7e:	461e      	mov	r6, r3
 8011a80:	da0d      	bge.n	8011a9e <__swhatbuf_r+0x2e>
 8011a82:	89a3      	ldrh	r3, [r4, #12]
 8011a84:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011a88:	f04f 0100 	mov.w	r1, #0
 8011a8c:	bf14      	ite	ne
 8011a8e:	2340      	movne	r3, #64	@ 0x40
 8011a90:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011a94:	2000      	movs	r0, #0
 8011a96:	6031      	str	r1, [r6, #0]
 8011a98:	602b      	str	r3, [r5, #0]
 8011a9a:	b016      	add	sp, #88	@ 0x58
 8011a9c:	bd70      	pop	{r4, r5, r6, pc}
 8011a9e:	466a      	mov	r2, sp
 8011aa0:	f000 f848 	bl	8011b34 <_fstat_r>
 8011aa4:	2800      	cmp	r0, #0
 8011aa6:	dbec      	blt.n	8011a82 <__swhatbuf_r+0x12>
 8011aa8:	9901      	ldr	r1, [sp, #4]
 8011aaa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011aae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011ab2:	4259      	negs	r1, r3
 8011ab4:	4159      	adcs	r1, r3
 8011ab6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011aba:	e7eb      	b.n	8011a94 <__swhatbuf_r+0x24>

08011abc <__smakebuf_r>:
 8011abc:	898b      	ldrh	r3, [r1, #12]
 8011abe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011ac0:	079d      	lsls	r5, r3, #30
 8011ac2:	4606      	mov	r6, r0
 8011ac4:	460c      	mov	r4, r1
 8011ac6:	d507      	bpl.n	8011ad8 <__smakebuf_r+0x1c>
 8011ac8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011acc:	6023      	str	r3, [r4, #0]
 8011ace:	6123      	str	r3, [r4, #16]
 8011ad0:	2301      	movs	r3, #1
 8011ad2:	6163      	str	r3, [r4, #20]
 8011ad4:	b003      	add	sp, #12
 8011ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ad8:	ab01      	add	r3, sp, #4
 8011ada:	466a      	mov	r2, sp
 8011adc:	f7ff ffc8 	bl	8011a70 <__swhatbuf_r>
 8011ae0:	9f00      	ldr	r7, [sp, #0]
 8011ae2:	4605      	mov	r5, r0
 8011ae4:	4639      	mov	r1, r7
 8011ae6:	4630      	mov	r0, r6
 8011ae8:	f7fe feea 	bl	80108c0 <_malloc_r>
 8011aec:	b948      	cbnz	r0, 8011b02 <__smakebuf_r+0x46>
 8011aee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011af2:	059a      	lsls	r2, r3, #22
 8011af4:	d4ee      	bmi.n	8011ad4 <__smakebuf_r+0x18>
 8011af6:	f023 0303 	bic.w	r3, r3, #3
 8011afa:	f043 0302 	orr.w	r3, r3, #2
 8011afe:	81a3      	strh	r3, [r4, #12]
 8011b00:	e7e2      	b.n	8011ac8 <__smakebuf_r+0xc>
 8011b02:	89a3      	ldrh	r3, [r4, #12]
 8011b04:	6020      	str	r0, [r4, #0]
 8011b06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011b0a:	81a3      	strh	r3, [r4, #12]
 8011b0c:	9b01      	ldr	r3, [sp, #4]
 8011b0e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011b12:	b15b      	cbz	r3, 8011b2c <__smakebuf_r+0x70>
 8011b14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011b18:	4630      	mov	r0, r6
 8011b1a:	f000 f81d 	bl	8011b58 <_isatty_r>
 8011b1e:	b128      	cbz	r0, 8011b2c <__smakebuf_r+0x70>
 8011b20:	89a3      	ldrh	r3, [r4, #12]
 8011b22:	f023 0303 	bic.w	r3, r3, #3
 8011b26:	f043 0301 	orr.w	r3, r3, #1
 8011b2a:	81a3      	strh	r3, [r4, #12]
 8011b2c:	89a3      	ldrh	r3, [r4, #12]
 8011b2e:	431d      	orrs	r5, r3
 8011b30:	81a5      	strh	r5, [r4, #12]
 8011b32:	e7cf      	b.n	8011ad4 <__smakebuf_r+0x18>

08011b34 <_fstat_r>:
 8011b34:	b538      	push	{r3, r4, r5, lr}
 8011b36:	4d07      	ldr	r5, [pc, #28]	@ (8011b54 <_fstat_r+0x20>)
 8011b38:	2300      	movs	r3, #0
 8011b3a:	4604      	mov	r4, r0
 8011b3c:	4608      	mov	r0, r1
 8011b3e:	4611      	mov	r1, r2
 8011b40:	602b      	str	r3, [r5, #0]
 8011b42:	f7f4 fec5 	bl	80068d0 <_fstat>
 8011b46:	1c43      	adds	r3, r0, #1
 8011b48:	d102      	bne.n	8011b50 <_fstat_r+0x1c>
 8011b4a:	682b      	ldr	r3, [r5, #0]
 8011b4c:	b103      	cbz	r3, 8011b50 <_fstat_r+0x1c>
 8011b4e:	6023      	str	r3, [r4, #0]
 8011b50:	bd38      	pop	{r3, r4, r5, pc}
 8011b52:	bf00      	nop
 8011b54:	2000e394 	.word	0x2000e394

08011b58 <_isatty_r>:
 8011b58:	b538      	push	{r3, r4, r5, lr}
 8011b5a:	4d06      	ldr	r5, [pc, #24]	@ (8011b74 <_isatty_r+0x1c>)
 8011b5c:	2300      	movs	r3, #0
 8011b5e:	4604      	mov	r4, r0
 8011b60:	4608      	mov	r0, r1
 8011b62:	602b      	str	r3, [r5, #0]
 8011b64:	f7f4 fec4 	bl	80068f0 <_isatty>
 8011b68:	1c43      	adds	r3, r0, #1
 8011b6a:	d102      	bne.n	8011b72 <_isatty_r+0x1a>
 8011b6c:	682b      	ldr	r3, [r5, #0]
 8011b6e:	b103      	cbz	r3, 8011b72 <_isatty_r+0x1a>
 8011b70:	6023      	str	r3, [r4, #0]
 8011b72:	bd38      	pop	{r3, r4, r5, pc}
 8011b74:	2000e394 	.word	0x2000e394

08011b78 <_init>:
 8011b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b7a:	bf00      	nop
 8011b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b7e:	bc08      	pop	{r3}
 8011b80:	469e      	mov	lr, r3
 8011b82:	4770      	bx	lr

08011b84 <_fini>:
 8011b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b86:	bf00      	nop
 8011b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b8a:	bc08      	pop	{r3}
 8011b8c:	469e      	mov	lr, r3
 8011b8e:	4770      	bx	lr
